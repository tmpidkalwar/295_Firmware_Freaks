
295_Autonomous_Vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f044  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800f1f4  0800f1f4  0001f1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2fc  0800f2fc  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2fc  0800f2fc  0001f2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f304  0800f304  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f304  0800f304  0001f304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f308  0800f308  0001f308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800f30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008eac  200000e0  0800f3ec  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008f8c  0800f3ec  00028f8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003477b  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c57  00000000  00000000  0005488b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024f8  00000000  00000000  0005b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002248  00000000  00000000  0005d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cdb1  00000000  00000000  0005fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cbd1  00000000  00000000  0008c9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f83c7  00000000  00000000  000b95aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b1971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0bc  00000000  00000000  001b19c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f1dc 	.word	0x0800f1dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e4 	.word	0x200000e4
 80001ec:	0800f1dc 	.word	0x0800f1dc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8000dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200000fc 	.word	0x200000fc
 8000dd8:	20000154 	.word	0x20000154

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de2:	f001 ffff 	bl	8002de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de6:	f000 f85b 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 fc8b 	bl	8001704 <MX_GPIO_Init>
  MX_CRC_Init();
 8000dee:	f000 f9d1 	bl	8001194 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000df2:	f000 f9e3 	bl	80011bc <MX_DMA2D_Init>
  MX_FMC_Init();
 8000df6:	f000 fc35 	bl	8001664 <MX_FMC_Init>
  MX_I2C3_Init();
 8000dfa:	f000 fa11 	bl	8001220 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000dfe:	f000 fa4f 	bl	80012a0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000e02:	f000 facd 	bl	80013a0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000e06:	f000 fb01 	bl	800140c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e0a:	f000 fc01 	bl	8001610 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e0e:	f000 f8cb 	bl	8000fa8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e12:	f000 f91b 	bl	800104c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000e16:	f000 f96b 	bl	80010f0 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000e1a:	f000 fb47 	bl	80014ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e1e:	f000 fb9d 	bl	800155c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000e22:	481a      	ldr	r0, [pc, #104]	; (8000e8c <main+0xb0>)
 8000e24:	f006 f9f7 	bl	8007216 <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //SERVO_PWM
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4819      	ldr	r0, [pc, #100]	; (8000e90 <main+0xb4>)
 8000e2c:	f006 fa66 	bl	80072fc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //DC_PWM
 8000e30:	2100      	movs	r1, #0
 8000e32:	4818      	ldr	r0, [pc, #96]	; (8000e94 <main+0xb8>)
 8000e34:	f006 fa62 	bl	80072fc <HAL_TIM_PWM_Start>

   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);  //Set Servo Duty cycle to 15%
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <main+0xb4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);  //Set DC motor Duty cycle to 15%
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <main+0xb8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34

  const bool run_1000hz = true;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  const size_t stack_size_bytes = 2048 / sizeof(void *);
 8000e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e56:	623b      	str	r3, [r7, #32]
  periodic_scheduler__initialize(stack_size_bytes, run_1000hz);
 8000e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	6a38      	ldr	r0, [r7, #32]
 8000e60:	f001 fe68 	bl	8002b34 <periodic_scheduler__initialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <main+0xbc>)
 8000e66:	1d3c      	adds	r4, r7, #4
 8000e68:	461d      	mov	r5, r3
 8000e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00a ff63 	bl	800bd46 <osThreadCreate>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <main+0xc0>)
 8000e84:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e86:	f00a ff57 	bl	800bd38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <main+0xae>
 8000e8c:	2000879c 	.word	0x2000879c
 8000e90:	2000881c 	.word	0x2000881c
 8000e94:	200085e4 	.word	0x200085e4
 8000e98:	0800f200 	.word	0x0800f200
 8000e9c:	200084e4 	.word	0x200084e4

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0a0      	sub	sp, #128	; 0x80
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eaa:	2230      	movs	r2, #48	; 0x30
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f00d fd6c 	bl	800e98c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2230      	movs	r2, #48	; 0x30
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f00d fd5d 	bl	800e98c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <SystemClock_Config+0x100>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <SystemClock_Config+0x100>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <SystemClock_Config+0x100>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <SystemClock_Config+0x104>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000efa:	4a2a      	ldr	r2, [pc, #168]	; (8000fa4 <SystemClock_Config+0x104>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <SystemClock_Config+0x104>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f22:	2304      	movs	r3, #4
 8000f24:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f26:	2348      	movs	r3, #72	; 0x48
 8000f28:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 fa4e 	bl	80063d8 <HAL_RCC_OscConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f42:	f000 fd1d 	bl	8001980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 fca8 	bl	80068b8 <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f6e:	f000 fd07 	bl	8001980 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f72:	2308      	movs	r3, #8
 8000f74:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f76:	2332      	movs	r3, #50	; 0x32
 8000f78:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 fec4 	bl	8006d14 <HAL_RCCEx_PeriphCLKConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000f92:	f000 fcf5 	bl	8001980 <Error_Handler>
  }
}
 8000f96:	bf00      	nop
 8000f98:	3780      	adds	r7, #128	; 0x80
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <MX_ADC1_Init+0xa0>)
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_ADC1_Init+0x98>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_ADC1_Init+0x98>)
 8001002:	2201      	movs	r2, #1
 8001004:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <MX_ADC1_Init+0x98>)
 8001008:	f001 ff52 	bl	8002eb0 <HAL_ADC_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 fcb5 	bl	8001980 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001016:	2305      	movs	r3, #5
 8001018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_ADC1_Init+0x98>)
 8001028:	f002 f8de 	bl	80031e8 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001032:	f000 fca5 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200086cc 	.word	0x200086cc
 8001044:	40012000 	.word	0x40012000
 8001048:	0f000001 	.word	0x0f000001

0800104c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <MX_ADC2_Init+0x9c>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_ADC2_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_ADC2_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_ADC2_Init+0x98>)
 800108c:	4a17      	ldr	r2, [pc, #92]	; (80010ec <MX_ADC2_Init+0xa0>)
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001098:	2201      	movs	r2, #1
 800109a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_ADC2_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_ADC2_Init+0x98>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <MX_ADC2_Init+0x98>)
 80010ac:	f001 ff00 	bl	8002eb0 <HAL_ADC_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80010b6:	f000 fc63 	bl	8001980 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010ba:	230d      	movs	r3, #13
 80010bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_ADC2_Init+0x98>)
 80010cc:	f002 f88c 	bl	80031e8 <HAL_ADC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80010d6:	f000 fc53 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20008594 	.word	0x20008594
 80010e8:	40012100 	.word	0x40012100
 80010ec:	0f000001 	.word	0x0f000001

080010f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_ADC3_Init+0x98>)
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <MX_ADC3_Init+0x9c>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_ADC3_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_ADC3_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_ADC3_Init+0x98>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_ADC3_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_ADC3_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_ADC3_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_ADC3_Init+0x98>)
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <MX_ADC3_Init+0xa0>)
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_ADC3_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_ADC3_Init+0x98>)
 800113c:	2201      	movs	r2, #1
 800113e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_ADC3_Init+0x98>)
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_ADC3_Init+0x98>)
 800114a:	2201      	movs	r2, #1
 800114c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800114e:	480e      	ldr	r0, [pc, #56]	; (8001188 <MX_ADC3_Init+0x98>)
 8001150:	f001 feae 	bl	8002eb0 <HAL_ADC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800115a:	f000 fc11 	bl	8001980 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800115e:	2304      	movs	r3, #4
 8001160:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_ADC3_Init+0x98>)
 8001170:	f002 f83a 	bl	80031e8 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800117a:	f000 fc01 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20008714 	.word	0x20008714
 800118c:	40012200 	.word	0x40012200
 8001190:	0f000001 	.word	0x0f000001

08001194 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_CRC_Init+0x20>)
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <MX_CRC_Init+0x24>)
 800119c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_CRC_Init+0x20>)
 80011a0:	f002 fb32 	bl	8003808 <HAL_CRC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011aa:	f000 fbe9 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200085dc 	.word	0x200085dc
 80011b8:	40023000 	.word	0x40023000

080011bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011c2:	4a16      	ldr	r2, [pc, #88]	; (800121c <MX_DMA2D_Init+0x60>)
 80011c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011f2:	f002 fb25 	bl	8003840 <HAL_DMA2D_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80011fc:	f000 fbc0 	bl	8001980 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001200:	2101      	movs	r1, #1
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_DMA2D_Init+0x5c>)
 8001204:	f002 fc76 	bl	8003af4 <HAL_DMA2D_ConfigLayer>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800120e:	f000 fbb7 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200087dc 	.word	0x200087dc
 800121c:	4002b000 	.word	0x4002b000

08001220 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_I2C3_Init+0x74>)
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <MX_I2C3_Init+0x78>)
 8001228:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_I2C3_Init+0x74>)
 800122c:	4a1b      	ldr	r2, [pc, #108]	; (800129c <MX_I2C3_Init+0x7c>)
 800122e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_I2C3_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_I2C3_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_I2C3_Init+0x74>)
 800123e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001242:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_I2C3_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_I2C3_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_I2C3_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_I2C3_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_I2C3_Init+0x74>)
 800125e:	f004 fb93 	bl	8005988 <HAL_I2C_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001268:	f000 fb8a 	bl	8001980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <MX_I2C3_Init+0x74>)
 8001270:	f004 fcce 	bl	8005c10 <HAL_I2CEx_ConfigAnalogFilter>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800127a:	f000 fb81 	bl	8001980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800127e:	2100      	movs	r1, #0
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_I2C3_Init+0x74>)
 8001282:	f004 fd01 	bl	8005c88 <HAL_I2CEx_ConfigDigitalFilter>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800128c:	f000 fb78 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200084e8 	.word	0x200084e8
 8001298:	40005c00 	.word	0x40005c00
 800129c:	000186a0 	.word	0x000186a0

080012a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2234      	movs	r2, #52	; 0x34
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00d fb6d 	bl	800e98c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012b4:	4a39      	ldr	r2, [pc, #228]	; (800139c <MX_LTDC_Init+0xfc>)
 80012b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012b8:	4b37      	ldr	r3, [pc, #220]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012be:	4b36      	ldr	r3, [pc, #216]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012ca:	4b33      	ldr	r3, [pc, #204]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80012d0:	4b31      	ldr	r3, [pc, #196]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012d2:	2209      	movs	r2, #9
 80012d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012d8:	2201      	movs	r2, #1
 80012da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80012dc:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012de:	221d      	movs	r2, #29
 80012e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012e4:	2203      	movs	r2, #3
 80012e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012ea:	f240 120d 	movw	r2, #269	; 0x10d
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012f2:	f240 1243 	movw	r2, #323	; 0x143
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012fa:	f240 1217 	movw	r2, #279	; 0x117
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <MX_LTDC_Init+0xf8>)
 8001302:	f240 1247 	movw	r2, #327	; 0x147
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <MX_LTDC_Init+0xf8>)
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_LTDC_Init+0xf8>)
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_LTDC_Init+0xf8>)
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <MX_LTDC_Init+0xf8>)
 8001322:	f004 fcf1 	bl	8005d08 <HAL_LTDC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800132c:	f000 fb28 	bl	8001980 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001334:	23f0      	movs	r3, #240	; 0xf0
 8001336:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800133c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001340:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001342:	2302      	movs	r3, #2
 8001344:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800134e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001352:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001354:	2307      	movs	r3, #7
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001358:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800135e:	23f0      	movs	r3, #240	; 0xf0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001362:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_LTDC_Init+0xf8>)
 8001382:	f004 fe53 	bl	800602c <HAL_LTDC_ConfigLayer>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800138c:	f000 faf8 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3738      	adds	r7, #56	; 0x38
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20008624 	.word	0x20008624
 800139c:	40016800 	.word	0x40016800

080013a0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_SPI5_Init+0x64>)
 80013a6:	4a18      	ldr	r2, [pc, #96]	; (8001408 <MX_SPI5_Init+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_SPI5_Init+0x64>)
 80013ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_SPI5_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_SPI5_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_SPI5_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_SPI5_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_SPI5_Init+0x64>)
 80013cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_SPI5_Init+0x64>)
 80013d4:	2218      	movs	r2, #24
 80013d6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <MX_SPI5_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_SPI5_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_SPI5_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_SPI5_Init+0x64>)
 80013ec:	220a      	movs	r2, #10
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_SPI5_Init+0x64>)
 80013f2:	f005 fe81 	bl	80070f8 <HAL_SPI_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80013fc:	f000 fac0 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000853c 	.word	0x2000853c
 8001408:	40015000 	.word	0x40015000

0800140c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_TIM1_Init+0x98>)
 800142a:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <MX_TIM1_Init+0x9c>)
 800142c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001430:	2247      	movs	r2, #71	; 0x47
 8001432:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM1_Init+0x98>)
 800143c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001440:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_TIM1_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001456:	f005 feb3 	bl	80071c0 <HAL_TIM_Base_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001460:	f000 fa8e 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001472:	f006 f94f 	bl	8007714 <HAL_TIM_ConfigClockSource>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800147c:	f000 fa80 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_TIM1_Init+0x98>)
 800148e:	f006 fd3d 	bl	8007f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001498:	f000 fa72 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000879c 	.word	0x2000879c
 80014a8:	40010000 	.word	0x40010000

080014ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	615a      	str	r2, [r3, #20]
 80014cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_TIM2_Init+0xac>)
 80014d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <MX_TIM2_Init+0xac>)
 80014d8:	2247      	movs	r2, #71	; 0x47
 80014da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_TIM2_Init+0xac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM2_Init+0xac>)
 80014e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80014e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_TIM2_Init+0xac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_TIM2_Init+0xac>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <MX_TIM2_Init+0xac>)
 80014f8:	f005 fed5 	bl	80072a6 <HAL_TIM_PWM_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001502:	f000 fa3d 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	4619      	mov	r1, r3
 8001514:	4810      	ldr	r0, [pc, #64]	; (8001558 <MX_TIM2_Init+0xac>)
 8001516:	f006 fcf9 	bl	8007f0c <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001520:	f000 fa2e 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001524:	2360      	movs	r3, #96	; 0x60
 8001526:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2204      	movs	r2, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM2_Init+0xac>)
 800153c:	f006 f824 	bl	8007588 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001546:	f000 fa1b 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <MX_TIM2_Init+0xac>)
 800154c:	f000 fd5e 	bl	800200c <HAL_TIM_MspPostInit>

}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2000881c 	.word	0x2000881c

0800155c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <MX_TIM3_Init+0xac>)
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <MX_TIM3_Init+0xb0>)
 8001582:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <MX_TIM3_Init+0xac>)
 8001586:	2247      	movs	r2, #71	; 0x47
 8001588:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_TIM3_Init+0xac>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_TIM3_Init+0xac>)
 8001592:	f242 720f 	movw	r2, #9999	; 0x270f
 8001596:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_TIM3_Init+0xac>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM3_Init+0xac>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015a4:	4818      	ldr	r0, [pc, #96]	; (8001608 <MX_TIM3_Init+0xac>)
 80015a6:	f005 fe7e 	bl	80072a6 <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80015b0:	f000 f9e6 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4619      	mov	r1, r3
 80015c2:	4811      	ldr	r0, [pc, #68]	; (8001608 <MX_TIM3_Init+0xac>)
 80015c4:	f006 fca2 	bl	8007f0c <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80015ce:	f000 f9d7 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	; 0x60
 80015d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM3_Init+0xac>)
 80015ea:	f005 ffcd 	bl	8007588 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015f4:	f000 f9c4 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM3_Init+0xac>)
 80015fa:	f000 fd07 	bl	800200c <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200085e4 	.word	0x200085e4
 800160c:	40000400 	.word	0x40000400

08001610 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <MX_USART1_UART_Init+0x50>)
 8001618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_USART1_UART_Init+0x4c>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_USART1_UART_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <MX_USART1_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001648:	f006 fcf0 	bl	800802c <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001652:	f000 f995 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000875c 	.word	0x2000875c
 8001660:	40011000 	.word	0x40011000

08001664 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_FMC_Init+0x98>)
 800167e:	4a20      	ldr	r2, [pc, #128]	; (8001700 <MX_FMC_Init+0x9c>)
 8001680:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_FMC_Init+0x98>)
 8001684:	2201      	movs	r2, #1
 8001686:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_FMC_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <MX_FMC_Init+0x98>)
 8001690:	2204      	movs	r2, #4
 8001692:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_FMC_Init+0x98>)
 8001696:	2210      	movs	r2, #16
 8001698:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <MX_FMC_Init+0x98>)
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_FMC_Init+0x98>)
 80016a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80016a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_FMC_Init+0x98>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_FMC_Init+0x98>)
 80016b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_FMC_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_FMC_Init+0x98>)
 80016be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80016c8:	2307      	movs	r3, #7
 80016ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80016d0:	2307      	movs	r3, #7
 80016d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80016d4:	2303      	movs	r3, #3
 80016d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016dc:	2302      	movs	r3, #2
 80016de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_FMC_Init+0x98>)
 80016e6:	f005 fcd3 	bl	8007090 <HAL_SDRAM_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80016f0:	f000 f946 	bl	8001980 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	2000885c 	.word	0x2000885c
 8001700:	a0000140 	.word	0xa0000140

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
 800171e:	4b83      	ldr	r3, [pc, #524]	; (800192c <MX_GPIO_Init+0x228>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a82      	ldr	r2, [pc, #520]	; (800192c <MX_GPIO_Init+0x228>)
 8001724:	f043 0310 	orr.w	r3, r3, #16
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b80      	ldr	r3, [pc, #512]	; (800192c <MX_GPIO_Init+0x228>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	4b7c      	ldr	r3, [pc, #496]	; (800192c <MX_GPIO_Init+0x228>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a7b      	ldr	r2, [pc, #492]	; (800192c <MX_GPIO_Init+0x228>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b79      	ldr	r3, [pc, #484]	; (800192c <MX_GPIO_Init+0x228>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	4b75      	ldr	r3, [pc, #468]	; (800192c <MX_GPIO_Init+0x228>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a74      	ldr	r2, [pc, #464]	; (800192c <MX_GPIO_Init+0x228>)
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b72      	ldr	r3, [pc, #456]	; (800192c <MX_GPIO_Init+0x228>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	4b6e      	ldr	r3, [pc, #440]	; (800192c <MX_GPIO_Init+0x228>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a6d      	ldr	r2, [pc, #436]	; (800192c <MX_GPIO_Init+0x228>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b6b      	ldr	r3, [pc, #428]	; (800192c <MX_GPIO_Init+0x228>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b67      	ldr	r3, [pc, #412]	; (800192c <MX_GPIO_Init+0x228>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a66      	ldr	r2, [pc, #408]	; (800192c <MX_GPIO_Init+0x228>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b64      	ldr	r3, [pc, #400]	; (800192c <MX_GPIO_Init+0x228>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b60      	ldr	r3, [pc, #384]	; (800192c <MX_GPIO_Init+0x228>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a5f      	ldr	r2, [pc, #380]	; (800192c <MX_GPIO_Init+0x228>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <MX_GPIO_Init+0x228>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b59      	ldr	r3, [pc, #356]	; (800192c <MX_GPIO_Init+0x228>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a58      	ldr	r2, [pc, #352]	; (800192c <MX_GPIO_Init+0x228>)
 80017cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b56      	ldr	r3, [pc, #344]	; (800192c <MX_GPIO_Init+0x228>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b52      	ldr	r3, [pc, #328]	; (800192c <MX_GPIO_Init+0x228>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a51      	ldr	r2, [pc, #324]	; (800192c <MX_GPIO_Init+0x228>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b4f      	ldr	r3, [pc, #316]	; (800192c <MX_GPIO_Init+0x228>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	211c      	movs	r1, #28
 80017fe:	484c      	ldr	r0, [pc, #304]	; (8001930 <MX_GPIO_Init+0x22c>)
 8001800:	f002 fbb6 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2116      	movs	r1, #22
 8001808:	484a      	ldr	r0, [pc, #296]	; (8001934 <MX_GPIO_Init+0x230>)
 800180a:	f002 fbb1 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	4849      	ldr	r0, [pc, #292]	; (8001938 <MX_GPIO_Init+0x234>)
 8001814:	f002 fbac 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800181e:	4847      	ldr	r0, [pc, #284]	; (800193c <MX_GPIO_Init+0x238>)
 8001820:	f002 fba6 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800182a:	4845      	ldr	r0, [pc, #276]	; (8001940 <MX_GPIO_Init+0x23c>)
 800182c:	f002 fba0 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001830:	231c      	movs	r3, #28
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	483a      	ldr	r0, [pc, #232]	; (8001930 <MX_GPIO_Init+0x22c>)
 8001848:	f002 f9e6 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800184c:	2316      	movs	r3, #22
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	4619      	mov	r1, r3
 8001862:	4834      	ldr	r0, [pc, #208]	; (8001934 <MX_GPIO_Init+0x230>)
 8001864:	f002 f9d8 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001868:	f248 0307 	movw	r3, #32775	; 0x8007
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800186e:	4b35      	ldr	r3, [pc, #212]	; (8001944 <MX_GPIO_Init+0x240>)
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187a:	4619      	mov	r1, r3
 800187c:	482e      	ldr	r0, [pc, #184]	; (8001938 <MX_GPIO_Init+0x234>)
 800187e:	f002 f9cb 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	4827      	ldr	r0, [pc, #156]	; (8001938 <MX_GPIO_Init+0x234>)
 800189a:	f002 f9bd 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800189e:	2320      	movs	r3, #32
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <MX_GPIO_Init+0x240>)
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ae:	4619      	mov	r1, r3
 80018b0:	4820      	ldr	r0, [pc, #128]	; (8001934 <MX_GPIO_Init+0x230>)
 80018b2:	f002 f9b1 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018b6:	2304      	movs	r3, #4
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c6:	4619      	mov	r1, r3
 80018c8:	481f      	ldr	r0, [pc, #124]	; (8001948 <MX_GPIO_Init+0x244>)
 80018ca:	f002 f9a5 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80018ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	4619      	mov	r1, r3
 80018e2:	4816      	ldr	r0, [pc, #88]	; (800193c <MX_GPIO_Init+0x238>)
 80018e4:	f002 f998 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80018e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fe:	4619      	mov	r1, r3
 8001900:	480e      	ldr	r0, [pc, #56]	; (800193c <MX_GPIO_Init+0x238>)
 8001902:	f002 f989 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001906:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	4808      	ldr	r0, [pc, #32]	; (8001940 <MX_GPIO_Init+0x23c>)
 8001920:	f002 f97a 	bl	8003c18 <HAL_GPIO_Init>

}
 8001924:	bf00      	nop
 8001926:	3738      	adds	r7, #56	; 0x38
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40021000 	.word	0x40021000
 8001934:	40020800 	.word	0x40020800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020c00 	.word	0x40020c00
 8001940:	40021800 	.word	0x40021800
 8001944:	10120000 	.word	0x10120000
 8001948:	40020400 	.word	0x40020400

0800194c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001954:	f00c fcc8 	bl	800e2e8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8001958:	e7fe      	b.n	8001958 <StartDefaultTask+0xc>
	...

0800195c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800196e:	f001 fa5b 	bl	8002e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40001000 	.word	0x40001000

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_MspInit+0x54>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <HAL_MspInit+0x54>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_MspInit+0x54>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_MspInit+0x54>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_MspInit+0x54>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_MspInit+0x54>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	210f      	movs	r1, #15
 80019d2:	f06f 0001 	mvn.w	r0, #1
 80019d6:	f001 feed 	bl	80037b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a45      	ldr	r2, [pc, #276]	; (8001b1c <HAL_ADC_MspInit+0x134>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d128      	bne.n	8001a5c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a43      	ldr	r2, [pc, #268]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a3c      	ldr	r2, [pc, #240]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a42:	2320      	movs	r3, #32
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a46:	2303      	movs	r3, #3
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a52:	4619      	mov	r1, r3
 8001a54:	4833      	ldr	r0, [pc, #204]	; (8001b24 <HAL_ADC_MspInit+0x13c>)
 8001a56:	f002 f8df 	bl	8003c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a5a:	e05a      	b.n	8001b12 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a31      	ldr	r2, [pc, #196]	; (8001b28 <HAL_ADC_MspInit+0x140>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d128      	bne.n	8001ab8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a2c      	ldr	r2, [pc, #176]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	4619      	mov	r1, r3
 8001ab0:	481e      	ldr	r0, [pc, #120]	; (8001b2c <HAL_ADC_MspInit+0x144>)
 8001ab2:	f002 f8b1 	bl	8003c18 <HAL_GPIO_Init>
}
 8001ab6:	e02c      	b.n	8001b12 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <HAL_ADC_MspInit+0x148>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d127      	bne.n	8001b12 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001ae8:	f043 0320 	orr.w	r3, r3, #32
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_ADC_MspInit+0x138>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001afa:	2340      	movs	r3, #64	; 0x40
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afe:	2303      	movs	r3, #3
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4809      	ldr	r0, [pc, #36]	; (8001b34 <HAL_ADC_MspInit+0x14c>)
 8001b0e:	f002 f883 	bl	8003c18 <HAL_GPIO_Init>
}
 8001b12:	bf00      	nop
 8001b14:	3738      	adds	r7, #56	; 0x38
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40012000 	.word	0x40012000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40012100 	.word	0x40012100
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40012200 	.word	0x40012200
 8001b34:	40021400 	.word	0x40021400

08001b38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_CRC_MspInit+0x3c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10d      	bne.n	8001b66 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_CRC_MspInit+0x40>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <HAL_CRC_MspInit+0x40>)
 8001b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_CRC_MspInit+0x40>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023000 	.word	0x40023000
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <HAL_DMA2D_MspInit+0x48>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d115      	bne.n	8001bba <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_DMA2D_MspInit+0x4c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_DMA2D_MspInit+0x4c>)
 8001b98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_DMA2D_MspInit+0x4c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2105      	movs	r1, #5
 8001bae:	205a      	movs	r0, #90	; 0x5a
 8001bb0:	f001 fe00 	bl	80037b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001bb4:	205a      	movs	r0, #90	; 0x5a
 8001bb6:	f001 fe19 	bl	80037ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	4002b000 	.word	0x4002b000
 8001bc8:	40023800 	.word	0x40023800

08001bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_I2C_MspInit+0xc4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d14b      	bne.n	8001c86 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <HAL_I2C_MspInit+0xc8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <HAL_I2C_MspInit+0xc8>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <HAL_I2C_MspInit+0xc8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_I2C_MspInit+0xc8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <HAL_I2C_MspInit+0xc8>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_I2C_MspInit+0xc8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2c:	2312      	movs	r3, #18
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4815      	ldr	r0, [pc, #84]	; (8001c98 <HAL_I2C_MspInit+0xcc>)
 8001c44:	f001 ffe8 	bl	8003c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	480d      	ldr	r0, [pc, #52]	; (8001c9c <HAL_I2C_MspInit+0xd0>)
 8001c66:	f001 ffd7 	bl	8003c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_I2C_MspInit+0xc8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_I2C_MspInit+0xc8>)
 8001c74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_I2C_MspInit+0xc8>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40005c00 	.word	0x40005c00
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	; 0x38
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a7b      	ldr	r2, [pc, #492]	; (8001eac <HAL_LTDC_MspInit+0x20c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	f040 80f0 	bne.w	8001ea4 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
 8001cc8:	4b79      	ldr	r3, [pc, #484]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	4a78      	ldr	r2, [pc, #480]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd4:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	4b72      	ldr	r3, [pc, #456]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	4a71      	ldr	r2, [pc, #452]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001cea:	f043 0320 	orr.w	r3, r3, #32
 8001cee:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	4a6a      	ldr	r2, [pc, #424]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0c:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	4b64      	ldr	r3, [pc, #400]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4a63      	ldr	r2, [pc, #396]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	6313      	str	r3, [r2, #48]	; 0x30
 8001d28:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	4a5c      	ldr	r2, [pc, #368]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d42:	6313      	str	r3, [r2, #48]	; 0x30
 8001d44:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4a55      	ldr	r2, [pc, #340]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a4e      	ldr	r2, [pc, #312]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_LTDC_MspInit+0x210>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d9a:	230e      	movs	r3, #14
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	4619      	mov	r1, r3
 8001da4:	4843      	ldr	r0, [pc, #268]	; (8001eb4 <HAL_LTDC_MspInit+0x214>)
 8001da6:	f001 ff37 	bl	8003c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001daa:	f641 0358 	movw	r3, #6232	; 0x1858
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dbc:	230e      	movs	r3, #14
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	483c      	ldr	r0, [pc, #240]	; (8001eb8 <HAL_LTDC_MspInit+0x218>)
 8001dc8:	f001 ff26 	bl	8003c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ddc:	2309      	movs	r3, #9
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	4835      	ldr	r0, [pc, #212]	; (8001ebc <HAL_LTDC_MspInit+0x21c>)
 8001de8:	f001 ff16 	bl	8003c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001dec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dfe:	230e      	movs	r3, #14
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e06:	4619      	mov	r1, r3
 8001e08:	482c      	ldr	r0, [pc, #176]	; (8001ebc <HAL_LTDC_MspInit+0x21c>)
 8001e0a:	f001 ff05 	bl	8003c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001e0e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e20:	230e      	movs	r3, #14
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4825      	ldr	r0, [pc, #148]	; (8001ec0 <HAL_LTDC_MspInit+0x220>)
 8001e2c:	f001 fef4 	bl	8003c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001e30:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e42:	230e      	movs	r3, #14
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	481d      	ldr	r0, [pc, #116]	; (8001ec4 <HAL_LTDC_MspInit+0x224>)
 8001e4e:	f001 fee3 	bl	8003c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001e52:	2348      	movs	r3, #72	; 0x48
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e62:	230e      	movs	r3, #14
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4816      	ldr	r0, [pc, #88]	; (8001ec8 <HAL_LTDC_MspInit+0x228>)
 8001e6e:	f001 fed3 	bl	8003c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001e72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e84:	2309      	movs	r3, #9
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <HAL_LTDC_MspInit+0x220>)
 8001e90:	f001 fec2 	bl	8003c18 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2105      	movs	r1, #5
 8001e98:	2058      	movs	r0, #88	; 0x58
 8001e9a:	f001 fc8b 	bl	80037b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e9e:	2058      	movs	r0, #88	; 0x58
 8001ea0:	f001 fca4 	bl	80037ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001ea4:	bf00      	nop
 8001ea6:	3738      	adds	r7, #56	; 0x38
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40016800 	.word	0x40016800
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40021800 	.word	0x40021800
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020c00 	.word	0x40020c00

08001ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <HAL_SPI_MspInit+0x84>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d12c      	bne.n	8001f48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_SPI_MspInit+0x88>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <HAL_SPI_MspInit+0x88>)
 8001ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_SPI_MspInit+0x88>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_SPI_MspInit+0x88>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <HAL_SPI_MspInit+0x88>)
 8001f14:	f043 0320 	orr.w	r3, r3, #32
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_SPI_MspInit+0x88>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001f26:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f38:	2305      	movs	r3, #5
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4619      	mov	r1, r3
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <HAL_SPI_MspInit+0x8c>)
 8001f44:	f001 fe68 	bl	8003c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	; 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40015000 	.word	0x40015000
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40021400 	.word	0x40021400

08001f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <HAL_TIM_Base_MspInit+0x3c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d10d      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_TIM_Base_MspInit+0x40>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <HAL_TIM_Base_MspInit+0x40>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_TIM_Base_MspInit+0x40>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_TIM_PWM_MspInit+0x64>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_TIM_PWM_MspInit+0x64>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_TIM_PWM_MspInit+0x64>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fce:	e012      	b.n	8001ff6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <HAL_TIM_PWM_MspInit+0x68>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d10d      	bne.n	8001ff6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_TIM_PWM_MspInit+0x64>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_TIM_PWM_MspInit+0x64>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_TIM_PWM_MspInit+0x64>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40000400 	.word	0x40000400

0800200c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202c:	d11e      	bne.n	800206c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_TIM_MspPostInit+0xb0>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a21      	ldr	r2, [pc, #132]	; (80020bc <HAL_TIM_MspPostInit+0xb0>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <HAL_TIM_MspPostInit+0xb0>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800204a:	2308      	movs	r3, #8
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800205a:	2301      	movs	r3, #1
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4816      	ldr	r0, [pc, #88]	; (80020c0 <HAL_TIM_MspPostInit+0xb4>)
 8002066:	f001 fdd7 	bl	8003c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800206a:	e022      	b.n	80020b2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_TIM_MspPostInit+0xb8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d11d      	bne.n	80020b2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_TIM_MspPostInit+0xb0>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_TIM_MspPostInit+0xb0>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_TIM_MspPostInit+0xb0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002092:	2310      	movs	r3, #16
 8002094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020a2:	2302      	movs	r3, #2
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	4804      	ldr	r0, [pc, #16]	; (80020c0 <HAL_TIM_MspPostInit+0xb4>)
 80020ae:	f001 fdb3 	bl	8003c18 <HAL_GPIO_Init>
}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40000400 	.word	0x40000400

080020c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_UART_MspInit+0x84>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d12c      	bne.n	8002144 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_UART_MspInit+0x88>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	4a17      	ldr	r2, [pc, #92]	; (8002150 <HAL_UART_MspInit+0x88>)
 80020f4:	f043 0310 	orr.w	r3, r3, #16
 80020f8:	6453      	str	r3, [r2, #68]	; 0x44
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_UART_MspInit+0x88>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_UART_MspInit+0x88>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_UART_MspInit+0x88>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_UART_MspInit+0x88>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002122:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002134:	2307      	movs	r3, #7
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <HAL_UART_MspInit+0x8c>)
 8002140:	f001 fd6a 	bl	8003c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002144:	bf00      	nop
 8002146:	3728      	adds	r7, #40	; 0x28
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40011000 	.word	0x40011000
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000

08002158 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800216c:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_FMC_MspInit+0x104>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d16f      	bne.n	8002254 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002174:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_FMC_MspInit+0x104>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_FMC_MspInit+0x108>)
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	4a37      	ldr	r2, [pc, #220]	; (8002260 <HAL_FMC_MspInit+0x108>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6393      	str	r3, [r2, #56]	; 0x38
 800218a:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_FMC_MspInit+0x108>)
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002196:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800219a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021a8:	230c      	movs	r3, #12
 80021aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	482c      	ldr	r0, [pc, #176]	; (8002264 <HAL_FMC_MspInit+0x10c>)
 80021b2:	f001 fd31 	bl	8003c18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80021b6:	2301      	movs	r3, #1
 80021b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021c6:	230c      	movs	r3, #12
 80021c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4826      	ldr	r0, [pc, #152]	; (8002268 <HAL_FMC_MspInit+0x110>)
 80021d0:	f001 fd22 	bl	8003c18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80021d4:	f248 1333 	movw	r3, #33075	; 0x8133
 80021d8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021e6:	230c      	movs	r3, #12
 80021e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	481f      	ldr	r0, [pc, #124]	; (800226c <HAL_FMC_MspInit+0x114>)
 80021f0:	f001 fd12 	bl	8003c18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80021f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021f8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002206:	230c      	movs	r3, #12
 8002208:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	4619      	mov	r1, r3
 800220e:	4818      	ldr	r0, [pc, #96]	; (8002270 <HAL_FMC_MspInit+0x118>)
 8002210:	f001 fd02 	bl	8003c18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002214:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002218:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002226:	230c      	movs	r3, #12
 8002228:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	4619      	mov	r1, r3
 800222e:	4811      	ldr	r0, [pc, #68]	; (8002274 <HAL_FMC_MspInit+0x11c>)
 8002230:	f001 fcf2 	bl	8003c18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002234:	2360      	movs	r3, #96	; 0x60
 8002236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002244:	230c      	movs	r3, #12
 8002246:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	4619      	mov	r1, r3
 800224c:	480a      	ldr	r0, [pc, #40]	; (8002278 <HAL_FMC_MspInit+0x120>)
 800224e:	f001 fce3 	bl	8003c18 <HAL_GPIO_Init>
 8002252:	e000      	b.n	8002256 <HAL_FMC_MspInit+0xfe>
    return;
 8002254:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000354 	.word	0x20000354
 8002260:	40023800 	.word	0x40023800
 8002264:	40021400 	.word	0x40021400
 8002268:	40020800 	.word	0x40020800
 800226c:	40021800 	.word	0x40021800
 8002270:	40021000 	.word	0x40021000
 8002274:	40020c00 	.word	0x40020c00
 8002278:	40020400 	.word	0x40020400

0800227c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002284:	f7ff ff68 	bl	8002158 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	2036      	movs	r0, #54	; 0x36
 80022a6:	f001 fa85 	bl	80037b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022aa:	2036      	movs	r0, #54	; 0x36
 80022ac:	f001 fa9e 	bl	80037ec <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_InitTick+0xa4>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_InitTick+0xa4>)
 80022ba:	f043 0310 	orr.w	r3, r3, #16
 80022be:	6413      	str	r3, [r2, #64]	; 0x40
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_InitTick+0xa4>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022cc:	f107 0210 	add.w	r2, r7, #16
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 fcea 	bl	8006cb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80022dc:	f004 fcc0 	bl	8006c60 <HAL_RCC_GetPCLK1Freq>
 80022e0:	4603      	mov	r3, r0
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <HAL_InitTick+0xa8>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0c9b      	lsrs	r3, r3, #18
 80022f0:	3b01      	subs	r3, #1
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_InitTick+0xac>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <HAL_InitTick+0xb0>)
 80022f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_InitTick+0xac>)
 80022fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002300:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_InitTick+0xac>)
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_InitTick+0xac>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_InitTick+0xac>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002314:	4809      	ldr	r0, [pc, #36]	; (800233c <HAL_InitTick+0xac>)
 8002316:	f004 ff53 	bl	80071c0 <HAL_TIM_Base_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d104      	bne.n	800232a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002320:	4806      	ldr	r0, [pc, #24]	; (800233c <HAL_InitTick+0xac>)
 8002322:	f004 ff9c 	bl	800725e <HAL_TIM_Base_Start_IT>
 8002326:	4603      	mov	r3, r0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3730      	adds	r7, #48	; 0x30
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	431bde83 	.word	0x431bde83
 800233c:	20008890 	.word	0x20008890
 8002340:	40001000 	.word	0x40001000

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <HardFault_Handler+0x4>

08002358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <MemManage_Handler+0x4>

0800235e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <BusFault_Handler+0x4>

08002364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <UsageFault_Handler+0x4>

0800236a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <TIM6_DAC_IRQHandler+0x10>)
 800237e:	f004 fffb 	bl	8007378 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20008890 	.word	0x20008890

0800238c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <OTG_HS_IRQHandler+0x10>)
 8002392:	f002 f895 	bl	80044c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20008cb8 	.word	0x20008cb8

080023a0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <LTDC_IRQHandler+0x10>)
 80023a6:	f003 fd7f 	bl	8005ea8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20008624 	.word	0x20008624

080023b4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <DMA2D_IRQHandler+0x10>)
 80023ba:	f001 fa8a 	bl	80038d2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200087dc 	.word	0x200087dc

080023c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <_sbrk+0x50>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_sbrk+0x16>
		heap_end = &end;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <_sbrk+0x50>)
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <_sbrk+0x54>)
 80023dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <_sbrk+0x50>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <_sbrk+0x50>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	466a      	mov	r2, sp
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d907      	bls.n	8002402 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023f2:	f00c fa83 	bl	800e8fc <__errno>
 80023f6:	4603      	mov	r3, r0
 80023f8:	220c      	movs	r2, #12
 80023fa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	e006      	b.n	8002410 <_sbrk+0x48>
	}

	heap_end += incr;
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <_sbrk+0x50>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	4a03      	ldr	r2, [pc, #12]	; (8002418 <_sbrk+0x50>)
 800240c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000358 	.word	0x20000358
 800241c:	20008f90 	.word	0x20008f90

08002420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <SystemInit+0x28>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <SystemInit+0x28>)
 800242c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <SystemInit+0x28>)
 8002436:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800243a:	609a      	str	r2, [r3, #8]
#endif
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800244c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002484 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002450:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002452:	e003      	b.n	800245c <LoopCopyDataInit>

08002454 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002456:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002458:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800245a:	3104      	adds	r1, #4

0800245c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800245c:	480b      	ldr	r0, [pc, #44]	; (800248c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002460:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002462:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002464:	d3f6      	bcc.n	8002454 <CopyDataInit>
  ldr  r2, =_sbss
 8002466:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002468:	e002      	b.n	8002470 <LoopFillZerobss>

0800246a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800246a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800246c:	f842 3b04 	str.w	r3, [r2], #4

08002470 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002472:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002474:	d3f9      	bcc.n	800246a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002476:	f7ff ffd3 	bl	8002420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247a:	f00c fa45 	bl	800e908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247e:	f7fe fcad 	bl	8000ddc <main>
  bx  lr    
 8002482:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002484:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002488:	0800f30c 	.word	0x0800f30c
  ldr  r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002490:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8002494:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8002498:	20008f8c 	.word	0x20008f8c

0800249c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC_IRQHandler>

0800249e <motor_esc__control_speed>:
int received_speed = 0;
float calculated_pwm_dc = 15;

static uint8_t reverse_counter = 0;

void motor_esc__control_speed(float motor_speed) {
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	ed87 0a01 	vstr	s0, [r7, #4]
//    // calculated_pwm_dc = 15;
//  }
//  // }
//  //  }

  motor_esc__set_motor_speed(motor_speed);
 80024a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80024ac:	f000 f9ce 	bl	800284c <motor_esc__set_motor_speed>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <motor_esc__steer_handler>:
  }
}

void motor_esc__stop_motor() { motor_esc__set_motor_speed(PWM_NEUTRAL); }

void motor_esc__steer_handler(int8_t angle) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  uint8_t calculated_angle = PWM_STRAIGHT;
 80024c2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 80024c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ca:	edc7 7a00 	vstr	s15, [r7]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	73fb      	strb	r3, [r7, #15]

  if (angle >= (-45) && angle <= (-40))
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 80024da:	db07      	blt.n	80024ec <motor_esc__steer_handler+0x34>
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	f113 0f27 	cmn.w	r3, #39	; 0x27
 80024e4:	da02      	bge.n	80024ec <motor_esc__steer_handler+0x34>
    calculated_angle = RIGHT_1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e0cf      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle > (-40) && angle < (-35))
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	f113 0f27 	cmn.w	r3, #39	; 0x27
 80024f4:	db07      	blt.n	8002506 <motor_esc__steer_handler+0x4e>
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	f113 0f23 	cmn.w	r3, #35	; 0x23
 80024fe:	da02      	bge.n	8002506 <motor_esc__steer_handler+0x4e>
    calculated_angle = RIGHT_2;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e0c2      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-35) && angle < (-30))
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	f113 0f23 	cmn.w	r3, #35	; 0x23
 800250e:	db07      	blt.n	8002520 <motor_esc__steer_handler+0x68>
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	f113 0f1e 	cmn.w	r3, #30
 8002518:	da02      	bge.n	8002520 <motor_esc__steer_handler+0x68>
    calculated_angle = RIGHT_3;
 800251a:	2302      	movs	r3, #2
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e0b5      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-30) && angle < (-25))
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	f113 0f1e 	cmn.w	r3, #30
 8002528:	db07      	blt.n	800253a <motor_esc__steer_handler+0x82>
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	f113 0f19 	cmn.w	r3, #25
 8002532:	da02      	bge.n	800253a <motor_esc__steer_handler+0x82>
    calculated_angle = RIGHT_4;
 8002534:	2303      	movs	r3, #3
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e0a8      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-25) && angle < (-20))
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	f113 0f19 	cmn.w	r3, #25
 8002542:	db07      	blt.n	8002554 <motor_esc__steer_handler+0x9c>
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	f113 0f14 	cmn.w	r3, #20
 800254c:	da02      	bge.n	8002554 <motor_esc__steer_handler+0x9c>
    calculated_angle = RIGHT_5;
 800254e:	2304      	movs	r3, #4
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	e09b      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-20) && angle < (-15))
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	f113 0f14 	cmn.w	r3, #20
 800255c:	db07      	blt.n	800256e <motor_esc__steer_handler+0xb6>
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	f113 0f0f 	cmn.w	r3, #15
 8002566:	da02      	bge.n	800256e <motor_esc__steer_handler+0xb6>
    calculated_angle = RIGHT_6;
 8002568:	2305      	movs	r3, #5
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e08e      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-15) && angle < (-10))
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	f113 0f0f 	cmn.w	r3, #15
 8002576:	db07      	blt.n	8002588 <motor_esc__steer_handler+0xd0>
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	f113 0f0a 	cmn.w	r3, #10
 8002580:	da02      	bge.n	8002588 <motor_esc__steer_handler+0xd0>
    calculated_angle = RIGHT_7;
 8002582:	2306      	movs	r3, #6
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e081      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-10) && angle < (-5))
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	f113 0f0a 	cmn.w	r3, #10
 8002590:	db07      	blt.n	80025a2 <motor_esc__steer_handler+0xea>
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	f113 0f05 	cmn.w	r3, #5
 800259a:	da02      	bge.n	80025a2 <motor_esc__steer_handler+0xea>
    calculated_angle = RIGHT_8;
 800259c:	2307      	movs	r3, #7
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e074      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-5) && angle < (0))
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	f113 0f05 	cmn.w	r3, #5
 80025aa:	db06      	blt.n	80025ba <motor_esc__steer_handler+0x102>
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	da02      	bge.n	80025ba <motor_esc__steer_handler+0x102>
    calculated_angle = RIGHT_9;
 80025b4:	2308      	movs	r3, #8
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	e068      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle == 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <motor_esc__steer_handler+0x110>
    calculated_angle = STRAIGHT;
 80025c2:	2312      	movs	r3, #18
 80025c4:	73fb      	strb	r3, [r7, #15]
 80025c6:	e061      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle > 0 && angle < 5)
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	dd06      	ble.n	80025de <motor_esc__steer_handler+0x126>
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	dc02      	bgt.n	80025de <motor_esc__steer_handler+0x126>
    calculated_angle = LEFT_9;
 80025d8:	2311      	movs	r3, #17
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e056      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= 5 && angle < 10)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	dd06      	ble.n	80025f4 <motor_esc__steer_handler+0x13c>
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	dc02      	bgt.n	80025f4 <motor_esc__steer_handler+0x13c>
    calculated_angle = LEFT_8;
 80025ee:	2310      	movs	r3, #16
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	e04b      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= 10 && angle < 15)
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	2b09      	cmp	r3, #9
 80025fa:	dd06      	ble.n	800260a <motor_esc__steer_handler+0x152>
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b0e      	cmp	r3, #14
 8002602:	dc02      	bgt.n	800260a <motor_esc__steer_handler+0x152>
    calculated_angle = LEFT_7;
 8002604:	230f      	movs	r3, #15
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e040      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= 15 && angle < 20)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b0e      	cmp	r3, #14
 8002610:	dd06      	ble.n	8002620 <motor_esc__steer_handler+0x168>
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b13      	cmp	r3, #19
 8002618:	dc02      	bgt.n	8002620 <motor_esc__steer_handler+0x168>
    calculated_angle = LEFT_6;
 800261a:	230e      	movs	r3, #14
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e035      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= 20 && angle < 25)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b13      	cmp	r3, #19
 8002626:	dd06      	ble.n	8002636 <motor_esc__steer_handler+0x17e>
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b18      	cmp	r3, #24
 800262e:	dc02      	bgt.n	8002636 <motor_esc__steer_handler+0x17e>
    calculated_angle = LEFT_5;
 8002630:	230d      	movs	r3, #13
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	e02a      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= 25 && angle < 30)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b18      	cmp	r3, #24
 800263c:	dd06      	ble.n	800264c <motor_esc__steer_handler+0x194>
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b1d      	cmp	r3, #29
 8002644:	dc02      	bgt.n	800264c <motor_esc__steer_handler+0x194>
    calculated_angle = LEFT_4;
 8002646:	230c      	movs	r3, #12
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e01f      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= 30 && angle < 35)
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	2b1d      	cmp	r3, #29
 8002652:	dd06      	ble.n	8002662 <motor_esc__steer_handler+0x1aa>
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b22      	cmp	r3, #34	; 0x22
 800265a:	dc02      	bgt.n	8002662 <motor_esc__steer_handler+0x1aa>
    calculated_angle = LEFT_3;
 800265c:	230b      	movs	r3, #11
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e014      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= 35 && angle < 40)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b22      	cmp	r3, #34	; 0x22
 8002668:	dd06      	ble.n	8002678 <motor_esc__steer_handler+0x1c0>
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	2b27      	cmp	r3, #39	; 0x27
 8002670:	dc02      	bgt.n	8002678 <motor_esc__steer_handler+0x1c0>
    calculated_angle = LEFT_2;
 8002672:	230a      	movs	r3, #10
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	e009      	b.n	800268c <motor_esc__steer_handler+0x1d4>
  else if (angle >= 40 && angle <= 45)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b27      	cmp	r3, #39	; 0x27
 800267e:	dd05      	ble.n	800268c <motor_esc__steer_handler+0x1d4>
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	2b2d      	cmp	r3, #45	; 0x2d
 8002686:	dc01      	bgt.n	800268c <motor_esc__steer_handler+0x1d4>
    calculated_angle = LEFT_1;
 8002688:	2309      	movs	r3, #9
 800268a:	73fb      	strb	r3, [r7, #15]

  switch (calculated_angle) {
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b12      	cmp	r3, #18
 8002690:	f200 80af 	bhi.w	80027f2 <motor_esc__steer_handler+0x33a>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <motor_esc__steer_handler+0x1e4>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	08002767 	.word	0x08002767
 80026a0:	08002775 	.word	0x08002775
 80026a4:	08002783 	.word	0x08002783
 80026a8:	08002791 	.word	0x08002791
 80026ac:	0800279f 	.word	0x0800279f
 80026b0:	080027ad 	.word	0x080027ad
 80026b4:	080027bb 	.word	0x080027bb
 80026b8:	080027c9 	.word	0x080027c9
 80026bc:	080027d7 	.word	0x080027d7
 80026c0:	080026e9 	.word	0x080026e9
 80026c4:	080026f7 	.word	0x080026f7
 80026c8:	08002705 	.word	0x08002705
 80026cc:	08002713 	.word	0x08002713
 80026d0:	08002721 	.word	0x08002721
 80026d4:	0800272f 	.word	0x0800272f
 80026d8:	0800273d 	.word	0x0800273d
 80026dc:	0800274b 	.word	0x0800274b
 80026e0:	08002759 	.word	0x08002759
 80026e4:	080027e5 	.word	0x080027e5
  case LEFT_1:
    motor_esc__set_steer_angle(PWM_LEFT_1);
 80026e8:	eef2 7a06 	vmov.f32	s15, #38	; 0x41300000  11.0
 80026ec:	eeb0 0a67 	vmov.f32	s0, s15
 80026f0:	f000 f88e 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 80026f4:	e07e      	b.n	80027f4 <motor_esc__steer_handler+0x33c>

  case LEFT_2:
    motor_esc__set_steer_angle(PWM_LEFT_2);
 80026f6:	eef2 7a07 	vmov.f32	s15, #39	; 0x41380000  11.5
 80026fa:	eeb0 0a67 	vmov.f32	s0, s15
 80026fe:	f000 f887 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 8002702:	e077      	b.n	80027f4 <motor_esc__steer_handler+0x33c>

  case LEFT_3:
    motor_esc__set_steer_angle(PWM_LEFT_3);
 8002704:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 8002708:	eeb0 0a67 	vmov.f32	s0, s15
 800270c:	f000 f880 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 8002710:	e070      	b.n	80027f4 <motor_esc__steer_handler+0x33c>

  case LEFT_4:
    motor_esc__set_steer_angle(PWM_LEFT_4);
 8002712:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002716:	eeb0 0a67 	vmov.f32	s0, s15
 800271a:	f000 f879 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 800271e:	e069      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case LEFT_5:
    motor_esc__set_steer_angle(PWM_LEFT_5);
 8002720:	eef2 7a0a 	vmov.f32	s15, #42	; 0x41500000  13.0
 8002724:	eeb0 0a67 	vmov.f32	s0, s15
 8002728:	f000 f872 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 800272c:	e062      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case LEFT_6:
    motor_esc__set_steer_angle(PWM_LEFT_6);
 800272e:	eef2 7a0b 	vmov.f32	s15, #43	; 0x41580000  13.5
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	f000 f86b 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 800273a:	e05b      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case LEFT_7:
    motor_esc__set_steer_angle(PWM_LEFT_7);
 800273c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
 8002740:	eeb0 0a67 	vmov.f32	s0, s15
 8002744:	f000 f864 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 8002748:	e054      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case LEFT_8:
    motor_esc__set_steer_angle(PWM_LEFT_8);
 800274a:	eef2 7a0d 	vmov.f32	s15, #45	; 0x41680000  14.5
 800274e:	eeb0 0a67 	vmov.f32	s0, s15
 8002752:	f000 f85d 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 8002756:	e04d      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case LEFT_9:
    motor_esc__set_steer_angle(PWM_LEFT_9);
 8002758:	eddf 7a28 	vldr	s15, [pc, #160]	; 80027fc <motor_esc__steer_handler+0x344>
 800275c:	eeb0 0a67 	vmov.f32	s0, s15
 8002760:	f000 f856 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 8002764:	e046      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case RIGHT_1:
    motor_esc__set_steer_angle(PWM_RIGHT_1);
 8002766:	eef3 7a03 	vmov.f32	s15, #51	; 0x41980000  19.0
 800276a:	eeb0 0a67 	vmov.f32	s0, s15
 800276e:	f000 f84f 	bl	8002810 <motor_esc__set_steer_angle>

    break;
 8002772:	e03f      	b.n	80027f4 <motor_esc__steer_handler+0x33c>

  case RIGHT_2:
    motor_esc__set_steer_angle(PWM_RIGHT_2);
 8002774:	eddf 7a22 	vldr	s15, [pc, #136]	; 8002800 <motor_esc__steer_handler+0x348>
 8002778:	eeb0 0a67 	vmov.f32	s0, s15
 800277c:	f000 f848 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 8002780:	e038      	b.n	80027f4 <motor_esc__steer_handler+0x33c>

  case RIGHT_3:
    motor_esc__set_steer_angle(PWM_RIGHT_3);
 8002782:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8002786:	eeb0 0a67 	vmov.f32	s0, s15
 800278a:	f000 f841 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 800278e:	e031      	b.n	80027f4 <motor_esc__steer_handler+0x33c>

  case RIGHT_4:
    motor_esc__set_steer_angle(PWM_RIGHT_4);
 8002790:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002804 <motor_esc__steer_handler+0x34c>
 8002794:	eeb0 0a67 	vmov.f32	s0, s15
 8002798:	f000 f83a 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 800279c:	e02a      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case RIGHT_5:
    motor_esc__set_steer_angle(PWM_RIGHT_5);
 800279e:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 80027a2:	eeb0 0a67 	vmov.f32	s0, s15
 80027a6:	f000 f833 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 80027aa:	e023      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case RIGHT_6:
    motor_esc__set_steer_angle(PWM_RIGHT_6);
 80027ac:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002808 <motor_esc__steer_handler+0x350>
 80027b0:	eeb0 0a67 	vmov.f32	s0, s15
 80027b4:	f000 f82c 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 80027b8:	e01c      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case RIGHT_7:
    motor_esc__set_steer_angle(PWM_RIGHT_7);
 80027ba:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 80027be:	eeb0 0a67 	vmov.f32	s0, s15
 80027c2:	f000 f825 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 80027c6:	e015      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case RIGHT_8:
    motor_esc__set_steer_angle(PWM_RIGHT_8);
 80027c8:	eef2 7a0f 	vmov.f32	s15, #47	; 0x41780000  15.5
 80027cc:	eeb0 0a67 	vmov.f32	s0, s15
 80027d0:	f000 f81e 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 80027d4:	e00e      	b.n	80027f4 <motor_esc__steer_handler+0x33c>
  case RIGHT_9:
    motor_esc__set_steer_angle(PWM_RIGHT_9);
 80027d6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800280c <motor_esc__steer_handler+0x354>
 80027da:	eeb0 0a67 	vmov.f32	s0, s15
 80027de:	f000 f817 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 80027e2:	e007      	b.n	80027f4 <motor_esc__steer_handler+0x33c>

  case STRAIGHT:
    motor_esc__set_steer_angle(PWM_STRAIGHT);
 80027e4:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 80027e8:	eeb0 0a67 	vmov.f32	s0, s15
 80027ec:	f000 f810 	bl	8002810 <motor_esc__set_steer_angle>
    break;
 80027f0:	e000      	b.n	80027f4 <motor_esc__steer_handler+0x33c>

  default:
    break;
 80027f2:	bf00      	nop
  }
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	416ccccd 	.word	0x416ccccd
 8002800:	41940000 	.word	0x41940000
 8002804:	418c0000 	.word	0x418c0000
 8002808:	41840000 	.word	0x41840000
 800280c:	41733333 	.word	0x41733333

08002810 <motor_esc__set_steer_angle>:
float get_dc_motor_pwm() { return calculated_pwm_dc; }

float get_servo_motor_pwm() { return steer_pwm_val; }

// Private Functions
static void motor_esc__set_steer_angle(float servo_pwm_val) {
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	ed87 0a01 	vstr	s0, [r7, #4]
  //  fprintf(stderr, " Current pwm val on servo : %f", steer_pwm_val);
  steer_pwm_val = 5;//servo_pwm_val;
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <motor_esc__set_steer_angle+0x30>)
 800281c:	4a09      	ldr	r2, [pc, #36]	; (8002844 <motor_esc__set_steer_angle+0x34>)
 800281e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, servo_pwm_val);  //Set Servo Duty cycle
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <motor_esc__set_steer_angle+0x38>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	edd7 7a01 	vldr	s15, [r7, #4]
 8002828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800282c:	ee17 2a90 	vmov	r2, s15
 8002830:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	2000035c 	.word	0x2000035c
 8002844:	40a00000 	.word	0x40a00000
 8002848:	2000881c 	.word	0x2000881c

0800284c <motor_esc__set_motor_speed>:

static void motor_esc__set_motor_speed(float motor_speed) {
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	ed87 0a01 	vstr	s0, [r7, #4]
  calculated_pwm_dc = motor_speed;
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <motor_esc__set_motor_speed+0x30>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6013      	str	r3, [r2, #0]
//  if (boost_pwm && (motor_speed > 15.7f)) {
//    motor_speed = motor_speed + 0.25;
//    boost_pwm = false;
//  }
  // Pin Congiguration: PA 6
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motor_speed);  //Set DC motor Duty cycle
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <motor_esc__set_motor_speed+0x34>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	edd7 7a01 	vldr	s15, [r7, #4]
 8002864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002868:	ee17 2a90 	vmov	r2, s15
 800286c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000004 	.word	0x20000004
 8002880:	200085e4 	.word	0x200085e4

08002884 <periodic_callbacks__initialize>:
/******************************************************************************
 * Your board will reset if the periodic function does not return within its deadline
 * For 1Hz, the function must return within 1000ms
 * For 1000Hz, the function must return within 1ms
 */
void periodic_callbacks__initialize(void) {
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  // This method is invoked once when the periodic tasks are created
	motor_esc__control_speed(5);
 8002888:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800288c:	f7ff fe07 	bl	800249e <motor_esc__control_speed>
	motor_esc__steer_handler(43);
 8002890:	202b      	movs	r0, #43	; 0x2b
 8002892:	f7ff fe11 	bl	80024b8 <motor_esc__steer_handler>
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <periodic_callbacks__1Hz>:

bool flag = true;
void periodic_callbacks__1Hz(uint32_t callback_count) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	//sensor_node__trigger_Front_ultrasonic();
	if(flag){
 80028a4:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <periodic_callbacks__1Hz+0x40>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <periodic_callbacks__1Hz+0x24>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80028ac:	2201      	movs	r2, #1
 80028ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028b2:	480b      	ldr	r0, [pc, #44]	; (80028e0 <periodic_callbacks__1Hz+0x44>)
 80028b4:	f001 fb5c 	bl	8003f70 <HAL_GPIO_WritePin>
	flag = false;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <periodic_callbacks__1Hz+0x40>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
	}else {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
	flag = true;
	}
}
 80028be:	e008      	b.n	80028d2 <periodic_callbacks__1Hz+0x36>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028c6:	4807      	ldr	r0, [pc, #28]	; (80028e4 <periodic_callbacks__1Hz+0x48>)
 80028c8:	f001 fb52 	bl	8003f70 <HAL_GPIO_WritePin>
	flag = true;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <periodic_callbacks__1Hz+0x40>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000008 	.word	0x20000008
 80028e0:	40021800 	.word	0x40021800
 80028e4:	40020400 	.word	0x40020400

080028e8 <periodic_callbacks__10Hz>:

void periodic_callbacks__10Hz(uint32_t callback_count) {
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <periodic_callbacks__100Hz>:

char buff[30] = "";
void periodic_callbacks__100Hz(uint32_t callback_count) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	  volatile static int chance = 0;
	  uint16_t current_adc_value = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	81fb      	strh	r3, [r7, #14]
	  if (callback_count % 5 == 0) {
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <periodic_callbacks__100Hz+0xc4>)
 800290c:	fba3 2301 	umull	r2, r3, r3, r1
 8002910:	089a      	lsrs	r2, r3, #2
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	1aca      	subs	r2, r1, r3
 800291a:	2a00      	cmp	r2, #0
 800291c:	d10f      	bne.n	800293e <periodic_callbacks__100Hz+0x42>
	    if (chance == 0) {
 800291e:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <periodic_callbacks__100Hz+0xc8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <periodic_callbacks__100Hz+0x30>

	      sensor_node__trigger_Front_ultrasonic();
 8002926:	f000 f97f 	bl	8002c28 <sensor_node__trigger_Front_ultrasonic>
//	    sens_val_conv__set_rear_sens(current_adc_value4);
	      //current_adc_value++;

	    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
	  }
}
 800292a:	e045      	b.n	80029b8 <periodic_callbacks__100Hz+0xbc>
	    } else if (chance == 1) {
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <periodic_callbacks__100Hz+0xc8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d141      	bne.n	80029b8 <periodic_callbacks__100Hz+0xbc>
	      sensor_node__trigger_Left_ultrasonic();
 8002934:	f000 f998 	bl	8002c68 <sensor_node__trigger_Left_ultrasonic>
	      sensor_node__trigger_Right_ultrasonic();
 8002938:	f000 f9ae 	bl	8002c98 <sensor_node__trigger_Right_ultrasonic>
}
 800293c:	e03c      	b.n	80029b8 <periodic_callbacks__100Hz+0xbc>
	  } else if (callback_count % 5 == 4) {
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <periodic_callbacks__100Hz+0xc4>)
 8002942:	fba3 2301 	umull	r2, r3, r3, r1
 8002946:	089a      	lsrs	r2, r3, #2
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	1aca      	subs	r2, r1, r3
 8002950:	2a04      	cmp	r2, #4
 8002952:	d131      	bne.n	80029b8 <periodic_callbacks__100Hz+0xbc>
	    if (chance == 0) {
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <periodic_callbacks__100Hz+0xc8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d110      	bne.n	800297e <periodic_callbacks__100Hz+0x82>
	      current_adc_value = sens_val_conv__get_sens_val_in_cm(FRONT_SENSOR);
 800295c:	2000      	movs	r0, #0
 800295e:	f000 f9f7 	bl	8002d50 <sens_val_conv__get_sens_val_in_cm>
 8002962:	4603      	mov	r3, r0
 8002964:	81fb      	strh	r3, [r7, #14]
	      chance++;
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <periodic_callbacks__100Hz+0xc8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3301      	adds	r3, #1
 800296c:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <periodic_callbacks__100Hz+0xc8>)
 800296e:	6013      	str	r3, [r2, #0]
	      sprintf(buff, "front ADC value %d   ", current_adc_value);
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	461a      	mov	r2, r3
 8002974:	4914      	ldr	r1, [pc, #80]	; (80029c8 <periodic_callbacks__100Hz+0xcc>)
 8002976:	4815      	ldr	r0, [pc, #84]	; (80029cc <periodic_callbacks__100Hz+0xd0>)
 8002978:	f00c f8ca 	bl	800eb10 <siprintf>
 800297c:	e011      	b.n	80029a2 <periodic_callbacks__100Hz+0xa6>
	    } else if (chance == 1) {
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <periodic_callbacks__100Hz+0xc8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d10d      	bne.n	80029a2 <periodic_callbacks__100Hz+0xa6>
	      current_adc_value = sens_val_conv__get_sens_val_in_cm(LEFT_SENSOR);
 8002986:	2001      	movs	r0, #1
 8002988:	f000 f9e2 	bl	8002d50 <sens_val_conv__get_sens_val_in_cm>
 800298c:	4603      	mov	r3, r0
 800298e:	81fb      	strh	r3, [r7, #14]
	      sprintf(buff, "left ADC value %d\r\n", current_adc_value);
 8002990:	89fb      	ldrh	r3, [r7, #14]
 8002992:	461a      	mov	r2, r3
 8002994:	490e      	ldr	r1, [pc, #56]	; (80029d0 <periodic_callbacks__100Hz+0xd4>)
 8002996:	480d      	ldr	r0, [pc, #52]	; (80029cc <periodic_callbacks__100Hz+0xd0>)
 8002998:	f00c f8ba 	bl	800eb10 <siprintf>
	      chance = 0;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <periodic_callbacks__100Hz+0xc8>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
 80029a2:	480a      	ldr	r0, [pc, #40]	; (80029cc <periodic_callbacks__100Hz+0xd0>)
 80029a4:	f7fd fc24 	bl	80001f0 <strlen>
 80029a8:	4603      	mov	r3, r0
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	4906      	ldr	r1, [pc, #24]	; (80029cc <periodic_callbacks__100Hz+0xd0>)
 80029b2:	4808      	ldr	r0, [pc, #32]	; (80029d4 <periodic_callbacks__100Hz+0xd8>)
 80029b4:	f005 fb87 	bl	80080c6 <HAL_UART_Transmit>
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	cccccccd 	.word	0xcccccccd
 80029c4:	20000380 	.word	0x20000380
 80029c8:	0800f21c 	.word	0x0800f21c
 80029cc:	20000360 	.word	0x20000360
 80029d0:	0800f234 	.word	0x0800f234
 80029d4:	2000875c 	.word	0x2000875c

080029d8 <periodic_callbacks__1000Hz>:
/**
 * @warning
 * This is a very fast 1ms task and care must be taken to use this
 * This may be disabled based on intialization of periodic_scheduler__initialize()
 */
void periodic_callbacks__1000Hz(uint32_t callback_count) {}
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <periodic_scheduler__run>:
static periodic_scheduler_s periodic_scheduler__1000Hz = {1, periodic_callbacks__1000Hz};

static bool periodic_scheduler__run_1000hz;

/// Common task runner for each periodic task
static void periodic_scheduler__run(periodic_scheduler_s *periodic) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  TickType_t previous_tick = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
  uint32_t callback_counter = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]

  // Note: the order of the while loop's logic is critical; change with care
  while (true) {
    periodic->callback(callback_counter);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	4798      	blx	r3
    ++callback_counter;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]
    periodic->task_finished_flag = true;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	731a      	strb	r2, [r3, #12]

    vTaskDelayUntil(&previous_tick, periodic->task_delay_in_ticks);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00a fa54 	bl	800cec8 <vTaskDelayUntil>
    periodic->callback(callback_counter);
 8002a20:	e7ec      	b.n	80029fc <periodic_scheduler__run+0x10>
	...

08002a24 <periodic_scheduler__1Hz_task>:
  }
}

static void periodic_scheduler__1Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__1Hz); }
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	4803      	ldr	r0, [pc, #12]	; (8002a3c <periodic_scheduler__1Hz_task+0x18>)
 8002a2e:	f7ff ffdd 	bl	80029ec <periodic_scheduler__run>
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2000000c 	.word	0x2000000c

08002a40 <periodic_scheduler__10Hz_task>:
static void periodic_scheduler__10Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__10Hz); }
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	4803      	ldr	r0, [pc, #12]	; (8002a58 <periodic_scheduler__10Hz_task+0x18>)
 8002a4a:	f7ff ffcf 	bl	80029ec <periodic_scheduler__run>
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000001c 	.word	0x2000001c

08002a5c <periodic_scheduler__100Hz_task>:
static void periodic_scheduler__100Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__100Hz); }
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	4803      	ldr	r0, [pc, #12]	; (8002a74 <periodic_scheduler__100Hz_task+0x18>)
 8002a66:	f7ff ffc1 	bl	80029ec <periodic_scheduler__run>
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000002c 	.word	0x2000002c

08002a78 <periodic_scheduler__1000Hz_task>:
static void periodic_scheduler__1000Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__1000Hz); }
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	4803      	ldr	r0, [pc, #12]	; (8002a90 <periodic_scheduler__1000Hz_task+0x18>)
 8002a82:	f7ff ffb3 	bl	80029ec <periodic_scheduler__run>
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000003c 	.word	0x2000003c

08002a94 <periodic_scheduler__check_flag>:

static void periodic_scheduler__check_flag(periodic_scheduler_s *periodic_task, TickType_t tick_delay) {
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  periodic_task->ticks_elapsed += tick_delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	441a      	add	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	609a      	str	r2, [r3, #8]

  if (periodic_task->ticks_elapsed >= periodic_task->task_delay_in_ticks) {
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d30a      	bcc.n	8002acc <periodic_scheduler__check_flag+0x38>
    periodic_task->ticks_elapsed = 0;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]

    if (periodic_task->task_finished_flag) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7b1b      	ldrb	r3, [r3, #12]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <periodic_scheduler__check_flag+0x38>
      periodic_task->task_finished_flag = false;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	731a      	strb	r2, [r3, #12]
    } else {
    	// TODO:: Check how to do system reset here
      //NVIC_SystemReset();
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <periodic_scheduler__task_monitor>:
static void periodic_scheduler__task_monitor(void *param) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  const TickType_t tick_delay = periodic_scheduler__run_1000hz ? 1 : 10;
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <periodic_scheduler__task_monitor+0x48>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <periodic_scheduler__task_monitor+0x14>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <periodic_scheduler__task_monitor+0x16>
 8002aec:	230a      	movs	r3, #10
 8002aee:	60fb      	str	r3, [r7, #12]

  // We let all the other tasks run first, and then check their flags
  while (true) {
    vTaskDelay(tick_delay);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f00a fa67 	bl	800cfc4 <vTaskDelay>

    if (periodic_scheduler__run_1000hz) {
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <periodic_scheduler__task_monitor+0x48>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <periodic_scheduler__task_monitor+0x2e>
      periodic_scheduler__check_flag(&periodic_scheduler__1000Hz, tick_delay);
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	4808      	ldr	r0, [pc, #32]	; (8002b24 <periodic_scheduler__task_monitor+0x4c>)
 8002b02:	f7ff ffc7 	bl	8002a94 <periodic_scheduler__check_flag>
    }

    periodic_scheduler__check_flag(&periodic_scheduler__100Hz, tick_delay);
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	4807      	ldr	r0, [pc, #28]	; (8002b28 <periodic_scheduler__task_monitor+0x50>)
 8002b0a:	f7ff ffc3 	bl	8002a94 <periodic_scheduler__check_flag>
    periodic_scheduler__check_flag(&periodic_scheduler__10Hz, tick_delay);
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	4806      	ldr	r0, [pc, #24]	; (8002b2c <periodic_scheduler__task_monitor+0x54>)
 8002b12:	f7ff ffbf 	bl	8002a94 <periodic_scheduler__check_flag>
    periodic_scheduler__check_flag(&periodic_scheduler__1Hz, tick_delay);
 8002b16:	68f9      	ldr	r1, [r7, #12]
 8002b18:	4805      	ldr	r0, [pc, #20]	; (8002b30 <periodic_scheduler__task_monitor+0x58>)
 8002b1a:	f7ff ffbb 	bl	8002a94 <periodic_scheduler__check_flag>
    vTaskDelay(tick_delay);
 8002b1e:	e7e7      	b.n	8002af0 <periodic_scheduler__task_monitor+0x18>
 8002b20:	20000384 	.word	0x20000384
 8002b24:	2000003c 	.word	0x2000003c
 8002b28:	2000002c 	.word	0x2000002c
 8002b2c:	2000001c 	.word	0x2000001c
 8002b30:	2000000c 	.word	0x2000000c

08002b34 <periodic_scheduler__initialize>:
  }
}

void periodic_scheduler__initialize(uint32_t task_stack_size, bool run_1000hz) {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]
  xTaskCreate(periodic_scheduler__1Hz_task, "1Hz", task_stack_size, NULL, PRIORITY_PERIODIC_1HZ, NULL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	2300      	movs	r3, #0
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	2305      	movs	r3, #5
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	491e      	ldr	r1, [pc, #120]	; (8002bc8 <periodic_scheduler__initialize+0x94>)
 8002b50:	481e      	ldr	r0, [pc, #120]	; (8002bcc <periodic_scheduler__initialize+0x98>)
 8002b52:	f00a f878 	bl	800cc46 <xTaskCreate>
  xTaskCreate(periodic_scheduler__10Hz_task, "10Hz", task_stack_size, NULL, PRIORITY_PERIODIC_10HZ, NULL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	2306      	movs	r3, #6
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	491a      	ldr	r1, [pc, #104]	; (8002bd0 <periodic_scheduler__initialize+0x9c>)
 8002b66:	481b      	ldr	r0, [pc, #108]	; (8002bd4 <periodic_scheduler__initialize+0xa0>)
 8002b68:	f00a f86d 	bl	800cc46 <xTaskCreate>
  xTaskCreate(periodic_scheduler__100Hz_task, "100Hz", task_stack_size, NULL, PRIORITY_PERIODIC_100HZ, NULL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	2300      	movs	r3, #0
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	2307      	movs	r3, #7
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	4917      	ldr	r1, [pc, #92]	; (8002bd8 <periodic_scheduler__initialize+0xa4>)
 8002b7c:	4817      	ldr	r0, [pc, #92]	; (8002bdc <periodic_scheduler__initialize+0xa8>)
 8002b7e:	f00a f862 	bl	800cc46 <xTaskCreate>

  // Only create the 1Khz task if enabled
  periodic_scheduler__run_1000hz = run_1000hz;
 8002b82:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <periodic_scheduler__initialize+0xac>)
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	7013      	strb	r3, [r2, #0]
  if (periodic_scheduler__run_1000hz) {
 8002b88:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <periodic_scheduler__initialize+0xac>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <periodic_scheduler__initialize+0x72>
    xTaskCreate(periodic_scheduler__1000Hz_task, "1000Hz", task_stack_size, NULL, PRIORITY_PERIODIC_1000HZ, NULL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	2300      	movs	r3, #0
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	2308      	movs	r3, #8
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	4911      	ldr	r1, [pc, #68]	; (8002be4 <periodic_scheduler__initialize+0xb0>)
 8002ba0:	4811      	ldr	r0, [pc, #68]	; (8002be8 <periodic_scheduler__initialize+0xb4>)
 8002ba2:	f00a f850 	bl	800cc46 <xTaskCreate>
  }

  xTaskCreate(periodic_scheduler__task_monitor, "Hz_wdt", task_stack_size, NULL, PRIORITY_PERIODIC_MONITOR, NULL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	2300      	movs	r3, #0
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	2309      	movs	r3, #9
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	490d      	ldr	r1, [pc, #52]	; (8002bec <periodic_scheduler__initialize+0xb8>)
 8002bb6:	480e      	ldr	r0, [pc, #56]	; (8002bf0 <periodic_scheduler__initialize+0xbc>)
 8002bb8:	f00a f845 	bl	800cc46 <xTaskCreate>

  periodic_callbacks__initialize();
 8002bbc:	f7ff fe62 	bl	8002884 <periodic_callbacks__initialize>
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	0800f248 	.word	0x0800f248
 8002bcc:	08002a25 	.word	0x08002a25
 8002bd0:	0800f24c 	.word	0x0800f24c
 8002bd4:	08002a41 	.word	0x08002a41
 8002bd8:	0800f254 	.word	0x0800f254
 8002bdc:	08002a5d 	.word	0x08002a5d
 8002be0:	20000384 	.word	0x20000384
 8002be4:	0800f25c 	.word	0x0800f25c
 8002be8:	08002a79 	.word	0x08002a79
 8002bec:	0800f264 	.word	0x0800f264
 8002bf0:	08002ad9 	.word	0x08002ad9

08002bf4 <delay__us>:
/****************************************************************************************
 **************************** P U B L I C    F U N C T I O N S **************************
 ****************************************************************************************/

void delay__us (uint16_t us)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <delay__us+0x30>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2200      	movs	r2, #0
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002c06:	bf00      	nop
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <delay__us+0x30>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d3f9      	bcc.n	8002c08 <delay__us+0x14>
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	2000879c 	.word	0x2000879c

08002c28 <sensor_node__trigger_Front_ultrasonic>:

bool toggle = true;
void sensor_node__trigger_Front_ultrasonic(void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
//	delay__us(trigger_delay_time);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	if(toggle){
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <sensor_node__trigger_Front_ultrasonic+0x38>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <sensor_node__trigger_Front_ultrasonic+0x20>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002c34:	2200      	movs	r2, #0
 8002c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c3a:	480a      	ldr	r0, [pc, #40]	; (8002c64 <sensor_node__trigger_Front_ultrasonic+0x3c>)
 8002c3c:	f001 f998 	bl	8003f70 <HAL_GPIO_WritePin>
		toggle = false;
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <sensor_node__trigger_Front_ultrasonic+0x38>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
	}else {
		toggle = true;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8002c46:	e008      	b.n	8002c5a <sensor_node__trigger_Front_ultrasonic+0x32>
		toggle = true;
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <sensor_node__trigger_Front_ultrasonic+0x38>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c54:	4803      	ldr	r0, [pc, #12]	; (8002c64 <sensor_node__trigger_Front_ultrasonic+0x3c>)
 8002c56:	f001 f98b 	bl	8003f70 <HAL_GPIO_WritePin>
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000004c 	.word	0x2000004c
 8002c64:	40020c00 	.word	0x40020c00

08002c68 <sensor_node__trigger_Left_ultrasonic>:

void sensor_node__trigger_Left_ultrasonic(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c72:	4808      	ldr	r0, [pc, #32]	; (8002c94 <sensor_node__trigger_Left_ultrasonic+0x2c>)
 8002c74:	f001 f97c 	bl	8003f70 <HAL_GPIO_WritePin>
	delay__us(trigger_delay_time);
 8002c78:	231e      	movs	r3, #30
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ffb9 	bl	8002bf4 <delay__us>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002c82:	2201      	movs	r2, #1
 8002c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <sensor_node__trigger_Left_ultrasonic+0x2c>)
 8002c8a:	f001 f971 	bl	8003f70 <HAL_GPIO_WritePin>
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40020c00 	.word	0x40020c00

08002c98 <sensor_node__trigger_Right_ultrasonic>:

void sensor_node__trigger_Right_ultrasonic(void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ca2:	4808      	ldr	r0, [pc, #32]	; (8002cc4 <sensor_node__trigger_Right_ultrasonic+0x2c>)
 8002ca4:	f001 f964 	bl	8003f70 <HAL_GPIO_WritePin>
	delay__us(trigger_delay_time);
 8002ca8:	231e      	movs	r3, #30
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ffa1 	bl	8002bf4 <delay__us>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <sensor_node__trigger_Right_ultrasonic+0x2c>)
 8002cba:	f001 f959 	bl	8003f70 <HAL_GPIO_WritePin>
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40020c00 	.word	0x40020c00

08002cc8 <sensor_config__read_sens_raw_value>:
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	delay__us(trigger_delay_time);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
}

uint32_t sensor_config__read_sens_raw_value(sensor_index current_sensor) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  switch (current_sensor) {
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d020      	beq.n	8002d1a <sensor_config__read_sens_raw_value+0x52>
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	dc2b      	bgt.n	8002d34 <sensor_config__read_sens_raw_value+0x6c>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <sensor_config__read_sens_raw_value+0x1e>
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d00d      	beq.n	8002d00 <sensor_config__read_sens_raw_value+0x38>
 8002ce4:	e026      	b.n	8002d34 <sensor_config__read_sens_raw_value+0x6c>
  case FRONT_SENSOR:
	  HAL_ADC_Start(&hadc1);
 8002ce6:	4816      	ldr	r0, [pc, #88]	; (8002d40 <sensor_config__read_sens_raw_value+0x78>)
 8002ce8:	f000 f926 	bl	8002f38 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	4813      	ldr	r0, [pc, #76]	; (8002d40 <sensor_config__read_sens_raw_value+0x78>)
 8002cf2:	f000 f9e7 	bl	80030c4 <HAL_ADC_PollForConversion>
	  return HAL_ADC_GetValue(&hadc1);
 8002cf6:	4812      	ldr	r0, [pc, #72]	; (8002d40 <sensor_config__read_sens_raw_value+0x78>)
 8002cf8:	f000 fa68 	bl	80031cc <HAL_ADC_GetValue>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	e01b      	b.n	8002d38 <sensor_config__read_sens_raw_value+0x70>

  case LEFT_SENSOR:
	  HAL_ADC_Start(&hadc2);
 8002d00:	4810      	ldr	r0, [pc, #64]	; (8002d44 <sensor_config__read_sens_raw_value+0x7c>)
 8002d02:	f000 f919 	bl	8002f38 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8002d06:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0a:	480e      	ldr	r0, [pc, #56]	; (8002d44 <sensor_config__read_sens_raw_value+0x7c>)
 8002d0c:	f000 f9da 	bl	80030c4 <HAL_ADC_PollForConversion>
	  return HAL_ADC_GetValue(&hadc2);
 8002d10:	480c      	ldr	r0, [pc, #48]	; (8002d44 <sensor_config__read_sens_raw_value+0x7c>)
 8002d12:	f000 fa5b 	bl	80031cc <HAL_ADC_GetValue>
 8002d16:	4603      	mov	r3, r0
 8002d18:	e00e      	b.n	8002d38 <sensor_config__read_sens_raw_value+0x70>

  case RIGHT_SENSOR:
	  HAL_ADC_Start(&hadc3);
 8002d1a:	480b      	ldr	r0, [pc, #44]	; (8002d48 <sensor_config__read_sens_raw_value+0x80>)
 8002d1c:	f000 f90c 	bl	8002f38 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
 8002d24:	4808      	ldr	r0, [pc, #32]	; (8002d48 <sensor_config__read_sens_raw_value+0x80>)
 8002d26:	f000 f9cd 	bl	80030c4 <HAL_ADC_PollForConversion>
	  return HAL_ADC_GetValue(&hadc3);
 8002d2a:	4807      	ldr	r0, [pc, #28]	; (8002d48 <sensor_config__read_sens_raw_value+0x80>)
 8002d2c:	f000 fa4e 	bl	80031cc <HAL_ADC_GetValue>
 8002d30:	4603      	mov	r3, r0
 8002d32:	e001      	b.n	8002d38 <sensor_config__read_sens_raw_value+0x70>

//  case REAR_SENSOR:
//    return adc__get_adc_value(rear_sensor_adc_channel);

  default:
    return -1;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	200086cc 	.word	0x200086cc
 8002d44:	20008594 	.word	0x20008594
 8002d48:	20008714 	.word	0x20008714
 8002d4c:	00000000 	.word	0x00000000

08002d50 <sens_val_conv__get_sens_val_in_cm>:
 * This is MB1000-00 LV-EZ0 ultrasonic sensor. Max range is 254 inches. (645 cm).
 * Precision => (Vcc/512) = 1 inch = 25 mm.  Our ADC is 12 bit, so our precision is 8 times higher.
 * Each ADC value = 25 / 8 = 3 mm. or 0.38
 */

uint16_t sens_val_conv__get_sens_val_in_cm(sensor_index current_sens) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  uint16_t conv_val = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	81fb      	strh	r3, [r7, #14]
  uint32_t raw_val = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]

  raw_val = sensor_config__read_sens_raw_value(current_sens);
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ffaf 	bl	8002cc8 <sensor_config__read_sens_raw_value>
 8002d6a:	60b8      	str	r0, [r7, #8]

  if (current_sens != REAR_SENSOR) {
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d019      	beq.n	8002da6 <sens_val_conv__get_sens_val_in_cm+0x56>
    // This calculation is for LV EZ sensors
    conv_val = (raw_val * 0.3182) - 0.3959;
 8002d72:	68b8      	ldr	r0, [r7, #8]
 8002d74:	f7fd fbd6 	bl	8000524 <__aeabi_ui2d>
 8002d78:	a316      	add	r3, pc, #88	; (adr r3, 8002dd4 <sens_val_conv__get_sens_val_in_cm+0x84>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	f7fd fc4b 	bl	8000618 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	a314      	add	r3, pc, #80	; (adr r3, 8002ddc <sens_val_conv__get_sens_val_in_cm+0x8c>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f7fd fa8a 	bl	80002a8 <__aeabi_dsub>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f7fd fe4e 	bl	8000a3c <__aeabi_d2uiz>
 8002da0:	4603      	mov	r3, r0
 8002da2:	81fb      	strh	r3, [r7, #14]
 8002da4:	e00b      	b.n	8002dbe <sens_val_conv__get_sens_val_in_cm+0x6e>
  } else {
    // NOTE: HRLV0 EZ0 max range is 500 cm
    conv_val = (raw_val * 5) / 4;
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	81fb      	strh	r3, [r7, #14]
    conv_val /= 10;
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <sens_val_conv__get_sens_val_in_cm+0x80>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	08db      	lsrs	r3, r3, #3
 8002dbc:	81fb      	strh	r3, [r7, #14]
  }

  return raw_val;//conv_val;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	b29b      	uxth	r3, r3
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	cccccccd 	.word	0xcccccccd
 8002dd4:	886594af 	.word	0x886594af
 8002dd8:	3fd45d63 	.word	0x3fd45d63
 8002ddc:	f41f212d 	.word	0xf41f212d
 8002de0:	3fd9566c 	.word	0x3fd9566c

08002de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_Init+0x40>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <HAL_Init+0x40>)
 8002dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_Init+0x40>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <HAL_Init+0x40>)
 8002dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_Init+0x40>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <HAL_Init+0x40>)
 8002e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e0c:	2003      	movs	r0, #3
 8002e0e:	f000 fcc6 	bl	800379e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7ff fa3c 	bl	8002290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e18:	f7fe fdba 	bl	8001990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023c00 	.word	0x40023c00

08002e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_IncTick+0x20>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_IncTick+0x24>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_IncTick+0x24>)
 8002e3a:	6013      	str	r3, [r2, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000054 	.word	0x20000054
 8002e4c:	200088d0 	.word	0x200088d0

08002e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return uwTick;
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_GetTick+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	200088d0 	.word	0x200088d0

08002e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff ffee 	bl	8002e50 <HAL_GetTick>
 8002e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d005      	beq.n	8002e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_Delay+0x44>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e8e:	bf00      	nop
 8002e90:	f7ff ffde 	bl	8002e50 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d8f7      	bhi.n	8002e90 <HAL_Delay+0x28>
  {
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000054 	.word	0x20000054

08002eb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e033      	b.n	8002f2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe fd8a 	bl	80019e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d118      	bne.n	8002f20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ef6:	f023 0302 	bic.w	r3, r3, #2
 8002efa:	f043 0202 	orr.w	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 faa2 	bl	800344c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f023 0303 	bic.w	r3, r3, #3
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f1e:	e001      	b.n	8002f24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_Start+0x1a>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e0a5      	b.n	800309e <HAL_ADC_Start+0x166>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d018      	beq.n	8002f9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f78:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <HAL_ADC_Start+0x174>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a4c      	ldr	r2, [pc, #304]	; (80030b0 <HAL_ADC_Start+0x178>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	0c9a      	lsrs	r2, r3, #18
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f8c:	e002      	b.n	8002f94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f9      	bne.n	8002f8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d179      	bne.n	800309c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	d106      	bne.n	8002ff6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f023 0206 	bic.w	r2, r3, #6
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ff4:	e002      	b.n	8002ffc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_ADC_Start+0x17c>)
 8003006:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003010:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2b00      	cmp	r3, #0
 800301c:	d12a      	bne.n	8003074 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <HAL_ADC_Start+0x180>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d015      	beq.n	8003054 <HAL_ADC_Start+0x11c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a23      	ldr	r2, [pc, #140]	; (80030bc <HAL_ADC_Start+0x184>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d105      	bne.n	800303e <HAL_ADC_Start+0x106>
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_ADC_Start+0x17c>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <HAL_ADC_Start+0x188>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d129      	bne.n	800309c <HAL_ADC_Start+0x164>
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_ADC_Start+0x17c>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d123      	bne.n	800309c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11c      	bne.n	800309c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	e013      	b.n	800309c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <HAL_ADC_Start+0x180>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10e      	bne.n	800309c <HAL_ADC_Start+0x164>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800309a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000000 	.word	0x20000000
 80030b0:	431bde83 	.word	0x431bde83
 80030b4:	40012300 	.word	0x40012300
 80030b8:	40012000 	.word	0x40012000
 80030bc:	40012100 	.word	0x40012100
 80030c0:	40012200 	.word	0x40012200

080030c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e0:	d113      	bne.n	800310a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f0:	d10b      	bne.n	800310a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e05c      	b.n	80031c4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800310a:	f7ff fea1 	bl	8002e50 <HAL_GetTick>
 800310e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003110:	e01a      	b.n	8003148 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d016      	beq.n	8003148 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_ADC_PollForConversion+0x6c>
 8003120:	f7ff fe96 	bl	8002e50 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d20b      	bcs.n	8003148 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0204 	orr.w	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e03d      	b.n	80031c4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d1dd      	bne.n	8003112 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f06f 0212 	mvn.w	r2, #18
 800315e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d123      	bne.n	80031c2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11f      	bne.n	80031c2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800319a:	2b00      	cmp	r3, #0
 800319c:	d111      	bne.n	80031c2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f043 0201 	orr.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x1c>
 8003200:	2302      	movs	r3, #2
 8003202:	e113      	b.n	800342c <HAL_ADC_ConfigChannel+0x244>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b09      	cmp	r3, #9
 8003212:	d925      	bls.n	8003260 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68d9      	ldr	r1, [r3, #12]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	3b1e      	subs	r3, #30
 800322a:	2207      	movs	r2, #7
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43da      	mvns	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	400a      	ands	r2, r1
 8003238:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68d9      	ldr	r1, [r3, #12]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	4618      	mov	r0, r3
 800324c:	4603      	mov	r3, r0
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4403      	add	r3, r0
 8003252:	3b1e      	subs	r3, #30
 8003254:	409a      	lsls	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	e022      	b.n	80032a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6919      	ldr	r1, [r3, #16]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	2207      	movs	r2, #7
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	400a      	ands	r2, r1
 8003282:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6919      	ldr	r1, [r3, #16]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	4618      	mov	r0, r3
 8003296:	4603      	mov	r3, r0
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4403      	add	r3, r0
 800329c:	409a      	lsls	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d824      	bhi.n	80032f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	3b05      	subs	r3, #5
 80032c0:	221f      	movs	r2, #31
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	400a      	ands	r2, r1
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	4618      	mov	r0, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	3b05      	subs	r3, #5
 80032ea:	fa00 f203 	lsl.w	r2, r0, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
 80032f6:	e04c      	b.n	8003392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d824      	bhi.n	800334a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b23      	subs	r3, #35	; 0x23
 8003312:	221f      	movs	r2, #31
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43da      	mvns	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	400a      	ands	r2, r1
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	4618      	mov	r0, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	3b23      	subs	r3, #35	; 0x23
 800333c:	fa00 f203 	lsl.w	r2, r0, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
 8003348:	e023      	b.n	8003392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	3b41      	subs	r3, #65	; 0x41
 800335c:	221f      	movs	r2, #31
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	400a      	ands	r2, r1
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	4618      	mov	r0, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	3b41      	subs	r3, #65	; 0x41
 8003386:	fa00 f203 	lsl.w	r2, r0, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003392:	4b29      	ldr	r3, [pc, #164]	; (8003438 <HAL_ADC_ConfigChannel+0x250>)
 8003394:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a28      	ldr	r2, [pc, #160]	; (800343c <HAL_ADC_ConfigChannel+0x254>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d10f      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1d8>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b12      	cmp	r3, #18
 80033a6:	d10b      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_ADC_ConfigChannel+0x254>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d12b      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x23a>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_ADC_ConfigChannel+0x258>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <HAL_ADC_ConfigChannel+0x1f4>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b11      	cmp	r3, #17
 80033da:	d122      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a11      	ldr	r2, [pc, #68]	; (8003440 <HAL_ADC_ConfigChannel+0x258>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d111      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <HAL_ADC_ConfigChannel+0x25c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a11      	ldr	r2, [pc, #68]	; (8003448 <HAL_ADC_ConfigChannel+0x260>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	0c9a      	lsrs	r2, r3, #18
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003414:	e002      	b.n	800341c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3b01      	subs	r3, #1
 800341a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f9      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40012300 	.word	0x40012300
 800343c:	40012000 	.word	0x40012000
 8003440:	10000012 	.word	0x10000012
 8003444:	20000000 	.word	0x20000000
 8003448:	431bde83 	.word	0x431bde83

0800344c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003454:	4b79      	ldr	r3, [pc, #484]	; (800363c <ADC_Init+0x1f0>)
 8003456:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	4a58      	ldr	r2, [pc, #352]	; (8003640 <ADC_Init+0x1f4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d022      	beq.n	800352a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6899      	ldr	r1, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e00f      	b.n	800354a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003548:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0202 	bic.w	r2, r2, #2
 8003558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7e1b      	ldrb	r3, [r3, #24]
 8003564:	005a      	lsls	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003586:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003596:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	3b01      	subs	r3, #1
 80035a4:	035a      	lsls	r2, r3, #13
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	e007      	b.n	80035c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	3b01      	subs	r3, #1
 80035dc:	051a      	lsls	r2, r3, #20
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003602:	025a      	lsls	r2, r3, #9
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	029a      	lsls	r2, r3, #10
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40012300 	.word	0x40012300
 8003640:	0f000001 	.word	0x0f000001

08003644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800366c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003676:	4a04      	ldr	r2, [pc, #16]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	60d3      	str	r3, [r2, #12]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 0307 	and.w	r3, r3, #7
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	db0b      	blt.n	80036d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4907      	ldr	r1, [pc, #28]	; (80036e0 <__NVIC_EnableIRQ+0x38>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2001      	movs	r0, #1
 80036ca:	fa00 f202 	lsl.w	r2, r0, r2
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000e100 	.word	0xe000e100

080036e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db0a      	blt.n	800370e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	490c      	ldr	r1, [pc, #48]	; (8003730 <__NVIC_SetPriority+0x4c>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800370c:	e00a      	b.n	8003724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <__NVIC_SetPriority+0x50>)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3b04      	subs	r3, #4
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	440b      	add	r3, r1
 8003722:	761a      	strb	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf28      	it	cs
 8003756:	2304      	movcs	r3, #4
 8003758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3304      	adds	r3, #4
 800375e:	2b06      	cmp	r3, #6
 8003760:	d902      	bls.n	8003768 <NVIC_EncodePriority+0x30>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3b03      	subs	r3, #3
 8003766:	e000      	b.n	800376a <NVIC_EncodePriority+0x32>
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	401a      	ands	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43d9      	mvns	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	4313      	orrs	r3, r2
         );
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ff4c 	bl	8003644 <__NVIC_SetPriorityGrouping>
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c6:	f7ff ff61 	bl	800368c <__NVIC_GetPriorityGrouping>
 80037ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	6978      	ldr	r0, [r7, #20]
 80037d2:	f7ff ffb1 	bl	8003738 <NVIC_EncodePriority>
 80037d6:	4602      	mov	r2, r0
 80037d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff ff80 	bl	80036e4 <__NVIC_SetPriority>
}
 80037e4:	bf00      	nop
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff ff54 	bl	80036a8 <__NVIC_EnableIRQ>
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e00e      	b.n	8003838 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	795b      	ldrb	r3, [r3, #5]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fe f984 	bl	8001b38 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e03b      	b.n	80038ca <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fe f988 	bl	8001b7c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003890:	f023 0107 	bic.w	r1, r3, #7
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80038aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68d1      	ldr	r1, [r2, #12]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	430b      	orrs	r3, r1
 80038b8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d026      	beq.n	8003942 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d021      	beq.n	8003942 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800390c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2201      	movs	r2, #1
 8003920:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2204      	movs	r2, #4
 8003926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d026      	beq.n	800399a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d021      	beq.n	800399a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003964:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2220      	movs	r2, #32
 800396c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2204      	movs	r2, #4
 800397e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d026      	beq.n	80039f2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d021      	beq.n	80039f2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039bc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2208      	movs	r2, #8
 80039c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	f043 0204 	orr.w	r2, r3, #4
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2204      	movs	r2, #4
 80039d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00e      	beq.n	8003a24 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a14:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f853 	bl	8003aca <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d024      	beq.n	8003a78 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01f      	beq.n	8003a78 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a46:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01f      	beq.n	8003ac2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01a      	beq.n	8003ac2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f80e 	bl	8003ade <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_DMA2D_ConfigLayer+0x20>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e079      	b.n	8003c08 <HAL_DMA2D_ConfigLayer+0x114>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	3318      	adds	r3, #24
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b3e:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <HAL_DMA2D_ConfigLayer+0x120>)
 8003b40:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b0a      	cmp	r3, #10
 8003b48:	d003      	beq.n	8003b52 <HAL_DMA2D_ConfigLayer+0x5e>
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b09      	cmp	r3, #9
 8003b50:	d107      	bne.n	8003b62 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e005      	b.n	8003b6e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d120      	bne.n	8003bb6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	ea02 0103 	and.w	r1, r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b0a      	cmp	r3, #10
 8003b9c:	d003      	beq.n	8003ba6 <HAL_DMA2D_ConfigLayer+0xb2>
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b09      	cmp	r3, #9
 8003ba4:	d127      	bne.n	8003bf6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb4:	e01f      	b.n	8003bf6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	ea02 0103 	and.w	r1, r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b0a      	cmp	r3, #10
 8003bde:	d003      	beq.n	8003be8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b09      	cmp	r3, #9
 8003be6:	d106      	bne.n	8003bf6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bf4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	ff03000f 	.word	0xff03000f

08003c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b089      	sub	sp, #36	; 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	e177      	b.n	8003f24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c34:	2201      	movs	r2, #1
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	f040 8166 	bne.w	8003f1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d00b      	beq.n	8003c72 <HAL_GPIO_Init+0x5a>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d007      	beq.n	8003c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c66:	2b11      	cmp	r3, #17
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b12      	cmp	r3, #18
 8003c70:	d130      	bne.n	8003cd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca8:	2201      	movs	r2, #1
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 0201 	and.w	r2, r3, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	2203      	movs	r2, #3
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0xfc>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b12      	cmp	r3, #18
 8003d12:	d123      	bne.n	8003d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	08da      	lsrs	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3208      	adds	r2, #8
 8003d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	220f      	movs	r2, #15
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	08da      	lsrs	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3208      	adds	r2, #8
 8003d56:	69b9      	ldr	r1, [r7, #24]
 8003d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0203 	and.w	r2, r3, #3
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80c0 	beq.w	8003f1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <HAL_GPIO_Init+0x324>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	4a65      	ldr	r2, [pc, #404]	; (8003f3c <HAL_GPIO_Init+0x324>)
 8003da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dac:	6453      	str	r3, [r2, #68]	; 0x44
 8003dae:	4b63      	ldr	r3, [pc, #396]	; (8003f3c <HAL_GPIO_Init+0x324>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dba:	4a61      	ldr	r2, [pc, #388]	; (8003f40 <HAL_GPIO_Init+0x328>)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	220f      	movs	r2, #15
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a58      	ldr	r2, [pc, #352]	; (8003f44 <HAL_GPIO_Init+0x32c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d037      	beq.n	8003e56 <HAL_GPIO_Init+0x23e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a57      	ldr	r2, [pc, #348]	; (8003f48 <HAL_GPIO_Init+0x330>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d031      	beq.n	8003e52 <HAL_GPIO_Init+0x23a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a56      	ldr	r2, [pc, #344]	; (8003f4c <HAL_GPIO_Init+0x334>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02b      	beq.n	8003e4e <HAL_GPIO_Init+0x236>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a55      	ldr	r2, [pc, #340]	; (8003f50 <HAL_GPIO_Init+0x338>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d025      	beq.n	8003e4a <HAL_GPIO_Init+0x232>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a54      	ldr	r2, [pc, #336]	; (8003f54 <HAL_GPIO_Init+0x33c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01f      	beq.n	8003e46 <HAL_GPIO_Init+0x22e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a53      	ldr	r2, [pc, #332]	; (8003f58 <HAL_GPIO_Init+0x340>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d019      	beq.n	8003e42 <HAL_GPIO_Init+0x22a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a52      	ldr	r2, [pc, #328]	; (8003f5c <HAL_GPIO_Init+0x344>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_GPIO_Init+0x226>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a51      	ldr	r2, [pc, #324]	; (8003f60 <HAL_GPIO_Init+0x348>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00d      	beq.n	8003e3a <HAL_GPIO_Init+0x222>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a50      	ldr	r2, [pc, #320]	; (8003f64 <HAL_GPIO_Init+0x34c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <HAL_GPIO_Init+0x21e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4f      	ldr	r2, [pc, #316]	; (8003f68 <HAL_GPIO_Init+0x350>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_GPIO_Init+0x21a>
 8003e2e:	2309      	movs	r3, #9
 8003e30:	e012      	b.n	8003e58 <HAL_GPIO_Init+0x240>
 8003e32:	230a      	movs	r3, #10
 8003e34:	e010      	b.n	8003e58 <HAL_GPIO_Init+0x240>
 8003e36:	2308      	movs	r3, #8
 8003e38:	e00e      	b.n	8003e58 <HAL_GPIO_Init+0x240>
 8003e3a:	2307      	movs	r3, #7
 8003e3c:	e00c      	b.n	8003e58 <HAL_GPIO_Init+0x240>
 8003e3e:	2306      	movs	r3, #6
 8003e40:	e00a      	b.n	8003e58 <HAL_GPIO_Init+0x240>
 8003e42:	2305      	movs	r3, #5
 8003e44:	e008      	b.n	8003e58 <HAL_GPIO_Init+0x240>
 8003e46:	2304      	movs	r3, #4
 8003e48:	e006      	b.n	8003e58 <HAL_GPIO_Init+0x240>
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e004      	b.n	8003e58 <HAL_GPIO_Init+0x240>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e002      	b.n	8003e58 <HAL_GPIO_Init+0x240>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <HAL_GPIO_Init+0x240>
 8003e56:	2300      	movs	r3, #0
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	f002 0203 	and.w	r2, r2, #3
 8003e5e:	0092      	lsls	r2, r2, #2
 8003e60:	4093      	lsls	r3, r2
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e68:	4935      	ldr	r1, [pc, #212]	; (8003f40 <HAL_GPIO_Init+0x328>)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	3302      	adds	r3, #2
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e76:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <HAL_GPIO_Init+0x354>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e9a:	4a34      	ldr	r2, [pc, #208]	; (8003f6c <HAL_GPIO_Init+0x354>)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ea0:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <HAL_GPIO_Init+0x354>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ec4:	4a29      	ldr	r2, [pc, #164]	; (8003f6c <HAL_GPIO_Init+0x354>)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eca:	4b28      	ldr	r3, [pc, #160]	; (8003f6c <HAL_GPIO_Init+0x354>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eee:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <HAL_GPIO_Init+0x354>)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <HAL_GPIO_Init+0x354>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f18:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <HAL_GPIO_Init+0x354>)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3301      	adds	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b0f      	cmp	r3, #15
 8003f28:	f67f ae84 	bls.w	8003c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	3724      	adds	r7, #36	; 0x24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40013800 	.word	0x40013800
 8003f44:	40020000 	.word	0x40020000
 8003f48:	40020400 	.word	0x40020400
 8003f4c:	40020800 	.word	0x40020800
 8003f50:	40020c00 	.word	0x40020c00
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40021400 	.word	0x40021400
 8003f5c:	40021800 	.word	0x40021800
 8003f60:	40021c00 	.word	0x40021c00
 8003f64:	40022000 	.word	0x40022000
 8003f68:	40022400 	.word	0x40022400
 8003f6c:	40013c00 	.word	0x40013c00

08003f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f80:	787b      	ldrb	r3, [r7, #1]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f8c:	e003      	b.n	8003f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	041a      	lsls	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	619a      	str	r2, [r3, #24]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa4:	b08f      	sub	sp, #60	; 0x3c
 8003fa6:	af0a      	add	r7, sp, #40	; 0x28
 8003fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e054      	b.n	800405e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f00a f9de 	bl	800e390 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f004 fe4a 	bl	8008c8c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	687e      	ldr	r6, [r7, #4]
 8004000:	466d      	mov	r5, sp
 8004002:	f106 0410 	add.w	r4, r6, #16
 8004006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800400a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800400c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800400e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004012:	e885 0003 	stmia.w	r5, {r0, r1}
 8004016:	1d33      	adds	r3, r6, #4
 8004018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800401a:	6838      	ldr	r0, [r7, #0]
 800401c:	f004 fdc4 	bl	8008ba8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f004 fe41 	bl	8008cae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	687e      	ldr	r6, [r7, #4]
 8004034:	466d      	mov	r5, sp
 8004036:	f106 0410 	add.w	r4, r6, #16
 800403a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800403c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800403e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004046:	e885 0003 	stmia.w	r5, {r0, r1}
 800404a:	1d33      	adds	r3, r6, #4
 800404c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800404e:	6838      	ldr	r0, [r7, #0]
 8004050:	f004 ff54 	bl	8008efc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004066 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004066:	b590      	push	{r4, r7, lr}
 8004068:	b089      	sub	sp, #36	; 0x24
 800406a:	af04      	add	r7, sp, #16
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	4608      	mov	r0, r1
 8004070:	4611      	mov	r1, r2
 8004072:	461a      	mov	r2, r3
 8004074:	4603      	mov	r3, r0
 8004076:	70fb      	strb	r3, [r7, #3]
 8004078:	460b      	mov	r3, r1
 800407a:	70bb      	strb	r3, [r7, #2]
 800407c:	4613      	mov	r3, r2
 800407e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_HCD_HC_Init+0x28>
 800408a:	2302      	movs	r3, #2
 800408c:	e07f      	b.n	800418e <HAL_HCD_HC_Init+0x128>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	333d      	adds	r3, #61	; 0x3d
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	440b      	add	r3, r1
 80040b8:	3338      	adds	r3, #56	; 0x38
 80040ba:	787a      	ldrb	r2, [r7, #1]
 80040bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	3340      	adds	r3, #64	; 0x40
 80040ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80040d0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	440b      	add	r3, r1
 80040e0:	3339      	adds	r3, #57	; 0x39
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	440b      	add	r3, r1
 80040f4:	333f      	adds	r3, #63	; 0x3f
 80040f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80040fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	78bb      	ldrb	r3, [r7, #2]
 8004100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004104:	b2d8      	uxtb	r0, r3
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	440b      	add	r3, r1
 8004112:	333a      	adds	r3, #58	; 0x3a
 8004114:	4602      	mov	r2, r0
 8004116:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004118:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800411c:	2b00      	cmp	r3, #0
 800411e:	da0a      	bge.n	8004136 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	440b      	add	r3, r1
 800412e:	333b      	adds	r3, #59	; 0x3b
 8004130:	2201      	movs	r2, #1
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e009      	b.n	800414a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	440b      	add	r3, r1
 8004144:	333b      	adds	r3, #59	; 0x3b
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	440b      	add	r3, r1
 8004158:	333c      	adds	r3, #60	; 0x3c
 800415a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800415e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	787c      	ldrb	r4, [r7, #1]
 8004166:	78ba      	ldrb	r2, [r7, #2]
 8004168:	78f9      	ldrb	r1, [r7, #3]
 800416a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800416c:	9302      	str	r3, [sp, #8]
 800416e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	4623      	mov	r3, r4
 800417c:	f005 f840 	bl	8009200 <USB_HC_Init>
 8004180:	4603      	mov	r3, r0
 8004182:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	bd90      	pop	{r4, r7, pc}

08004196 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_HCD_HC_Halt+0x1e>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e00f      	b.n	80041d4 <HAL_HCD_HC_Halt+0x3e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f005 fa7a 	bl	80096be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	70fb      	strb	r3, [r7, #3]
 80041ee:	460b      	mov	r3, r1
 80041f0:	70bb      	strb	r3, [r7, #2]
 80041f2:	4613      	mov	r3, r2
 80041f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	440b      	add	r3, r1
 8004204:	333b      	adds	r3, #59	; 0x3b
 8004206:	78ba      	ldrb	r2, [r7, #2]
 8004208:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	440b      	add	r3, r1
 8004218:	333f      	adds	r3, #63	; 0x3f
 800421a:	787a      	ldrb	r2, [r7, #1]
 800421c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800421e:	7c3b      	ldrb	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d114      	bne.n	800424e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	440b      	add	r3, r1
 8004232:	3342      	adds	r3, #66	; 0x42
 8004234:	2203      	movs	r2, #3
 8004236:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	333d      	adds	r3, #61	; 0x3d
 8004248:	7f3a      	ldrb	r2, [r7, #28]
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	e009      	b.n	8004262 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	3342      	adds	r3, #66	; 0x42
 800425e:	2202      	movs	r2, #2
 8004260:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004262:	787b      	ldrb	r3, [r7, #1]
 8004264:	2b03      	cmp	r3, #3
 8004266:	f200 80d6 	bhi.w	8004416 <HAL_HCD_HC_SubmitRequest+0x23a>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <HAL_HCD_HC_SubmitRequest+0x94>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004281 	.word	0x08004281
 8004274:	08004401 	.word	0x08004401
 8004278:	080042ed 	.word	0x080042ed
 800427c:	08004377 	.word	0x08004377
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004280:	7c3b      	ldrb	r3, [r7, #16]
 8004282:	2b01      	cmp	r3, #1
 8004284:	f040 80c9 	bne.w	800441a <HAL_HCD_HC_SubmitRequest+0x23e>
 8004288:	78bb      	ldrb	r3, [r7, #2]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 80c5 	bne.w	800441a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004290:	8b3b      	ldrh	r3, [r7, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	440b      	add	r3, r1
 80042a4:	3351      	adds	r3, #81	; 0x51
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	440b      	add	r3, r1
 80042b8:	3351      	adds	r3, #81	; 0x51
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	3342      	adds	r3, #66	; 0x42
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80042d4:	e0a1      	b.n	800441a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	440b      	add	r3, r1
 80042e4:	3342      	adds	r3, #66	; 0x42
 80042e6:	2202      	movs	r2, #2
 80042e8:	701a      	strb	r2, [r3, #0]
      break;
 80042ea:	e096      	b.n	800441a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80042ec:	78bb      	ldrb	r3, [r7, #2]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d120      	bne.n	8004334 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	440b      	add	r3, r1
 8004300:	3351      	adds	r3, #81	; 0x51
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	440b      	add	r3, r1
 8004316:	3342      	adds	r3, #66	; 0x42
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800431c:	e07e      	b.n	800441c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	440b      	add	r3, r1
 800432c:	3342      	adds	r3, #66	; 0x42
 800432e:	2202      	movs	r2, #2
 8004330:	701a      	strb	r2, [r3, #0]
      break;
 8004332:	e073      	b.n	800441c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	440b      	add	r3, r1
 8004342:	3350      	adds	r3, #80	; 0x50
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	440b      	add	r3, r1
 8004358:	3342      	adds	r3, #66	; 0x42
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
      break;
 800435e:	e05d      	b.n	800441c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	440b      	add	r3, r1
 800436e:	3342      	adds	r3, #66	; 0x42
 8004370:	2202      	movs	r2, #2
 8004372:	701a      	strb	r2, [r3, #0]
      break;
 8004374:	e052      	b.n	800441c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004376:	78bb      	ldrb	r3, [r7, #2]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d120      	bne.n	80043be <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	440b      	add	r3, r1
 800438a:	3351      	adds	r3, #81	; 0x51
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	440b      	add	r3, r1
 80043a0:	3342      	adds	r3, #66	; 0x42
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80043a6:	e039      	b.n	800441c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	440b      	add	r3, r1
 80043b6:	3342      	adds	r3, #66	; 0x42
 80043b8:	2202      	movs	r2, #2
 80043ba:	701a      	strb	r2, [r3, #0]
      break;
 80043bc:	e02e      	b.n	800441c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	440b      	add	r3, r1
 80043cc:	3350      	adds	r3, #80	; 0x50
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	440b      	add	r3, r1
 80043e2:	3342      	adds	r3, #66	; 0x42
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
      break;
 80043e8:	e018      	b.n	800441c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	440b      	add	r3, r1
 80043f8:	3342      	adds	r3, #66	; 0x42
 80043fa:	2202      	movs	r2, #2
 80043fc:	701a      	strb	r2, [r3, #0]
      break;
 80043fe:	e00d      	b.n	800441c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	440b      	add	r3, r1
 800440e:	3342      	adds	r3, #66	; 0x42
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
      break;
 8004414:	e002      	b.n	800441c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800441a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	440b      	add	r3, r1
 800442a:	3344      	adds	r3, #68	; 0x44
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	8b39      	ldrh	r1, [r7, #24]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4403      	add	r3, r0
 8004440:	3348      	adds	r3, #72	; 0x48
 8004442:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	440b      	add	r3, r1
 8004452:	335c      	adds	r3, #92	; 0x5c
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	440b      	add	r3, r1
 8004466:	334c      	adds	r3, #76	; 0x4c
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	3339      	adds	r3, #57	; 0x39
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	440b      	add	r3, r1
 800448e:	335d      	adds	r3, #93	; 0x5d
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	3338      	adds	r3, #56	; 0x38
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	18d1      	adds	r1, r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	f004 ffb0 	bl	8009414 <USB_HC_StartXfer>
 80044b4:	4603      	mov	r3, r0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop

080044c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f004 fccd 	bl	8008e76 <USB_GetMode>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	f040 80ef 	bne.w	80046c2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f004 fcb1 	bl	8008e50 <USB_ReadInterrupts>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80e5 	beq.w	80046c0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f004 fca8 	bl	8008e50 <USB_ReadInterrupts>
 8004500:	4603      	mov	r3, r0
 8004502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800450a:	d104      	bne.n	8004516 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004514:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f004 fc98 	bl	8008e50 <USB_ReadInterrupts>
 8004520:	4603      	mov	r3, r0
 8004522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452a:	d104      	bne.n	8004536 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004534:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f004 fc88 	bl	8008e50 <USB_ReadInterrupts>
 8004540:	4603      	mov	r3, r0
 8004542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800454a:	d104      	bne.n	8004556 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004554:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f004 fc78 	bl	8008e50 <USB_ReadInterrupts>
 8004560:	4603      	mov	r3, r0
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b02      	cmp	r3, #2
 8004568:	d103      	bne.n	8004572 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2202      	movs	r2, #2
 8004570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f004 fc6a 	bl	8008e50 <USB_ReadInterrupts>
 800457c:	4603      	mov	r3, r0
 800457e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004586:	d115      	bne.n	80045b4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004590:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d108      	bne.n	80045b4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f009 ff6e 	bl	800e484 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f004 fd60 	bl	8009074 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f004 fc49 	bl	8008e50 <USB_ReadInterrupts>
 80045be:	4603      	mov	r3, r0
 80045c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c8:	d102      	bne.n	80045d0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f001 f968 	bl	80058a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f004 fc3b 	bl	8008e50 <USB_ReadInterrupts>
 80045da:	4603      	mov	r3, r0
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d106      	bne.n	80045f2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f009 ff31 	bl	800e44c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2208      	movs	r2, #8
 80045f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f004 fc2a 	bl	8008e50 <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004606:	d138      	bne.n	800467a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f005 f845 	bl	800969c <USB_HC_ReadInterrupt>
 8004612:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	e025      	b.n	8004666 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	fa22 f303 	lsr.w	r3, r2, r3
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d018      	beq.n	8004660 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004644:	d106      	bne.n	8004654 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f8cf 	bl	80047f0 <HCD_HC_IN_IRQHandler>
 8004652:	e005      	b.n	8004660 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fcfd 	bl	800505a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	3301      	adds	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	429a      	cmp	r2, r3
 800466e:	d3d4      	bcc.n	800461a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f004 fbe6 	bl	8008e50 <USB_ReadInterrupts>
 8004684:	4603      	mov	r3, r0
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b10      	cmp	r3, #16
 800468c:	d101      	bne.n	8004692 <HAL_HCD_IRQHandler+0x1d2>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_HCD_IRQHandler+0x1d4>
 8004692:	2300      	movs	r3, #0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d014      	beq.n	80046c2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0210 	bic.w	r2, r2, #16
 80046a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 f84b 	bl	8005744 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0210 	orr.w	r2, r2, #16
 80046bc:	619a      	str	r2, [r3, #24]
 80046be:	e000      	b.n	80046c2 <HAL_HCD_IRQHandler+0x202>
      return;
 80046c0:	bf00      	nop
    }
  }
}
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_HCD_Start+0x16>
 80046da:	2302      	movs	r3, #2
 80046dc:	e013      	b.n	8004706 <HAL_HCD_Start+0x3e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f004 fabd 	bl	8008c6a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2101      	movs	r1, #1
 80046f6:	4618      	mov	r0, r3
 80046f8:	f004 fd20 	bl	800913c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_HCD_Stop+0x16>
 8004720:	2302      	movs	r3, #2
 8004722:	e00d      	b.n	8004740 <HAL_HCD_Stop+0x32>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f005 f8ff 	bl	8009934 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f004 fcc7 	bl	80090e8 <USB_ResetPort>
 800475a:	4603      	mov	r3, r0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	440b      	add	r3, r1
 800477e:	335c      	adds	r3, #92	; 0x5c
 8004780:	781b      	ldrb	r3, [r3, #0]
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	440b      	add	r3, r1
 80047a8:	334c      	adds	r3, #76	; 0x4c
 80047aa:	681b      	ldr	r3, [r3, #0]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f004 fd09 	bl	80091dc <USB_GetCurrentFrame>
 80047ca:	4603      	mov	r3, r0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f004 fce4 	bl	80091ae <USB_GetHostSpeed>
 80047e6:	4603      	mov	r3, r0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b04      	cmp	r3, #4
 800481e:	d119      	bne.n	8004854 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4413      	add	r3, r2
 8004828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482c:	461a      	mov	r2, r3
 800482e:	2304      	movs	r3, #4
 8004830:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4413      	add	r3, r2
 800483a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	0151      	lsls	r1, r2, #5
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	440a      	add	r2, r1
 8004848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800484c:	f043 0302 	orr.w	r3, r3, #2
 8004850:	60d3      	str	r3, [r2, #12]
 8004852:	e0ce      	b.n	80049f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486a:	d12c      	bne.n	80048c6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4413      	add	r3, r2
 8004874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004878:	461a      	mov	r2, r3
 800487a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800487e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	335d      	adds	r3, #93	; 0x5d
 8004890:	2207      	movs	r2, #7
 8004892:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048ae:	f043 0302 	orr.w	r3, r3, #2
 80048b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f004 fefd 	bl	80096be <USB_HC_Halt>
 80048c4:	e095      	b.n	80049f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d109      	bne.n	80048f0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	461a      	mov	r2, r3
 80048ea:	2320      	movs	r3, #32
 80048ec:	6093      	str	r3, [r2, #8]
 80048ee:	e080      	b.n	80049f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d134      	bne.n	8004970 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4413      	add	r3, r2
 800490e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	440a      	add	r2, r1
 800491c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004920:	f043 0302 	orr.w	r3, r3, #2
 8004924:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	440b      	add	r3, r1
 8004934:	335d      	adds	r3, #93	; 0x5d
 8004936:	2205      	movs	r2, #5
 8004938:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004946:	461a      	mov	r2, r3
 8004948:	2310      	movs	r3, #16
 800494a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004958:	461a      	mov	r2, r3
 800495a:	2308      	movs	r3, #8
 800495c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f004 fea8 	bl	80096be <USB_HC_Halt>
 800496e:	e040      	b.n	80049f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4413      	add	r3, r2
 8004978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	d134      	bne.n	80049f2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	440a      	add	r2, r1
 800499e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049a2:	f043 0302 	orr.w	r3, r3, #2
 80049a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f004 fe83 	bl	80096be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c4:	461a      	mov	r2, r3
 80049c6:	2310      	movs	r3, #16
 80049c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	440b      	add	r3, r1
 80049d8:	335d      	adds	r3, #93	; 0x5d
 80049da:	2208      	movs	r2, #8
 80049dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	461a      	mov	r2, r3
 80049ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049f0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a08:	d122      	bne.n	8004a50 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a24:	f043 0302 	orr.w	r3, r3, #2
 8004a28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f004 fe42 	bl	80096be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a46:	461a      	mov	r2, r3
 8004a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a4c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a4e:	e300      	b.n	8005052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	f040 80fd 	bne.w	8004c62 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01b      	beq.n	8004aa8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3348      	adds	r3, #72	; 0x48
 8004a80:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	0159      	lsls	r1, r3, #5
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	440b      	add	r3, r1
 8004a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004a94:	1ad1      	subs	r1, r2, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	4403      	add	r3, r0
 8004aa4:	334c      	adds	r3, #76	; 0x4c
 8004aa6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	440b      	add	r3, r1
 8004ab6:	335d      	adds	r3, #93	; 0x5d
 8004ab8:	2201      	movs	r2, #1
 8004aba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	440b      	add	r3, r1
 8004aca:	3358      	adds	r3, #88	; 0x58
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004adc:	461a      	mov	r2, r3
 8004ade:	2301      	movs	r3, #1
 8004ae0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	440b      	add	r3, r1
 8004af0:	333f      	adds	r3, #63	; 0x3f
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	440b      	add	r3, r1
 8004b06:	333f      	adds	r3, #63	; 0x3f
 8004b08:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d121      	bne.n	8004b52 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f004 fdc0 	bl	80096be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	6093      	str	r3, [r2, #8]
 8004b50:	e070      	b.n	8004c34 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	440b      	add	r3, r1
 8004b60:	333f      	adds	r3, #63	; 0x3f
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d12a      	bne.n	8004bbe <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b86:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	440b      	add	r3, r1
 8004b96:	335c      	adds	r3, #92	; 0x5c
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	b2d8      	uxtb	r0, r3
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	440b      	add	r3, r1
 8004bae:	335c      	adds	r3, #92	; 0x5c
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4601      	mov	r1, r0
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f009 fc72 	bl	800e4a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bbc:	e03a      	b.n	8004c34 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	440b      	add	r3, r1
 8004bcc:	333f      	adds	r3, #63	; 0x3f
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d12f      	bne.n	8004c34 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	440b      	add	r3, r1
 8004be2:	335c      	adds	r3, #92	; 0x5c
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3350      	adds	r3, #80	; 0x50
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	f083 0301 	eor.w	r3, r3, #1
 8004bfe:	b2d8      	uxtb	r0, r3
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3350      	adds	r3, #80	; 0x50
 8004c10:	4602      	mov	r2, r0
 8004c12:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	b2d8      	uxtb	r0, r3
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	440b      	add	r3, r1
 8004c26:	335c      	adds	r3, #92	; 0x5c
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	4601      	mov	r1, r0
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f009 fc36 	bl	800e4a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	440b      	add	r3, r1
 8004c42:	3350      	adds	r3, #80	; 0x50
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	f083 0301 	eor.w	r3, r3, #1
 8004c4a:	b2d8      	uxtb	r0, r3
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	440b      	add	r3, r1
 8004c5a:	3350      	adds	r3, #80	; 0x50
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	701a      	strb	r2, [r3, #0]
}
 8004c60:	e1f7      	b.n	8005052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	f040 811a 	bne.w	8004eae <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c94:	f023 0302 	bic.w	r3, r3, #2
 8004c98:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	440b      	add	r3, r1
 8004ca8:	335d      	adds	r3, #93	; 0x5d
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10a      	bne.n	8004cc6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	440b      	add	r3, r1
 8004cbe:	335c      	adds	r3, #92	; 0x5c
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e0d9      	b.n	8004e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	440b      	add	r3, r1
 8004cd4:	335d      	adds	r3, #93	; 0x5d
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b05      	cmp	r3, #5
 8004cda:	d10a      	bne.n	8004cf2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	440b      	add	r3, r1
 8004cea:	335c      	adds	r3, #92	; 0x5c
 8004cec:	2205      	movs	r2, #5
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e0c3      	b.n	8004e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	440b      	add	r3, r1
 8004d00:	335d      	adds	r3, #93	; 0x5d
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b06      	cmp	r3, #6
 8004d06:	d00a      	beq.n	8004d1e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	440b      	add	r3, r1
 8004d16:	335d      	adds	r3, #93	; 0x5d
 8004d18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d156      	bne.n	8004dcc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3358      	adds	r3, #88	; 0x58
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	1c59      	adds	r1, r3, #1
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4403      	add	r3, r0
 8004d40:	3358      	adds	r3, #88	; 0x58
 8004d42:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	440b      	add	r3, r1
 8004d52:	3358      	adds	r3, #88	; 0x58
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d914      	bls.n	8004d84 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	440b      	add	r3, r1
 8004d68:	3358      	adds	r3, #88	; 0x58
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	440b      	add	r3, r1
 8004d7c:	335c      	adds	r3, #92	; 0x5c
 8004d7e:	2204      	movs	r2, #4
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	e009      	b.n	8004d98 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	440b      	add	r3, r1
 8004d92:	335c      	adds	r3, #92	; 0x5c
 8004d94:	2202      	movs	r2, #2
 8004d96:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004db6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	e056      	b.n	8004e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	440b      	add	r3, r1
 8004dda:	335d      	adds	r3, #93	; 0x5d
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d123      	bne.n	8004e2a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	440b      	add	r3, r1
 8004df0:	335c      	adds	r3, #92	; 0x5c
 8004df2:	2202      	movs	r2, #2
 8004df4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e0c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e14:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	461a      	mov	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	e027      	b.n	8004e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	440b      	add	r3, r1
 8004e38:	335d      	adds	r3, #93	; 0x5d
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b07      	cmp	r3, #7
 8004e3e:	d11c      	bne.n	8004e7a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	440b      	add	r3, r1
 8004e4e:	3358      	adds	r3, #88	; 0x58
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	1c59      	adds	r1, r3, #1
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4403      	add	r3, r0
 8004e62:	3358      	adds	r3, #88	; 0x58
 8004e64:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	440b      	add	r3, r1
 8004e74:	335c      	adds	r3, #92	; 0x5c
 8004e76:	2204      	movs	r2, #4
 8004e78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e86:	461a      	mov	r2, r3
 8004e88:	2302      	movs	r3, #2
 8004e8a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	b2d8      	uxtb	r0, r3
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	440b      	add	r3, r1
 8004e9e:	335c      	adds	r3, #92	; 0x5c
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4601      	mov	r1, r0
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f009 fafa 	bl	800e4a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004eac:	e0d1      	b.n	8005052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec0:	2b80      	cmp	r3, #128	; 0x80
 8004ec2:	d13e      	bne.n	8004f42 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ede:	f043 0302 	orr.w	r3, r3, #2
 8004ee2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3358      	adds	r3, #88	; 0x58
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1c59      	adds	r1, r3, #1
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4403      	add	r3, r0
 8004f06:	3358      	adds	r3, #88	; 0x58
 8004f08:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	440b      	add	r3, r1
 8004f18:	335d      	adds	r3, #93	; 0x5d
 8004f1a:	2206      	movs	r2, #6
 8004f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f004 fbc8 	bl	80096be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	6093      	str	r3, [r2, #8]
}
 8004f40:	e087      	b.n	8005052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d17c      	bne.n	8005052 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	440b      	add	r3, r1
 8004f66:	333f      	adds	r3, #63	; 0x3f
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d122      	bne.n	8004fb4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3358      	adds	r3, #88	; 0x58
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f9c:	f043 0302 	orr.w	r3, r3, #2
 8004fa0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f004 fb86 	bl	80096be <USB_HC_Halt>
 8004fb2:	e045      	b.n	8005040 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	440b      	add	r3, r1
 8004fc2:	333f      	adds	r3, #63	; 0x3f
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	440b      	add	r3, r1
 8004fd8:	333f      	adds	r3, #63	; 0x3f
 8004fda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d12f      	bne.n	8005040 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	440b      	add	r3, r1
 8004fee:	3358      	adds	r3, #88	; 0x58
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d121      	bne.n	8005040 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	440b      	add	r3, r1
 800500a:	335d      	adds	r3, #93	; 0x5d
 800500c:	2203      	movs	r2, #3
 800500e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	440a      	add	r2, r1
 8005026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800502a:	f043 0302 	orr.w	r3, r3, #2
 800502e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	4611      	mov	r1, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f004 fb3f 	bl	80096be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4413      	add	r3, r2
 8005048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504c:	461a      	mov	r2, r3
 800504e:	2310      	movs	r3, #16
 8005050:	6093      	str	r3, [r2, #8]
}
 8005052:	bf00      	nop
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b086      	sub	sp, #24
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4413      	add	r3, r2
 800507c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b04      	cmp	r3, #4
 8005088:	d119      	bne.n	80050be <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	461a      	mov	r2, r3
 8005098:	2304      	movs	r3, #4
 800509a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b6:	f043 0302 	orr.w	r3, r3, #2
 80050ba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80050bc:	e33e      	b.n	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d141      	bne.n	8005158 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e0:	461a      	mov	r2, r3
 80050e2:	2320      	movs	r3, #32
 80050e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	440b      	add	r3, r1
 80050f4:	333d      	adds	r3, #61	; 0x3d
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	f040 831f 	bne.w	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	440b      	add	r3, r1
 800510c:	333d      	adds	r3, #61	; 0x3d
 800510e:	2200      	movs	r2, #0
 8005110:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	440b      	add	r3, r1
 8005120:	335c      	adds	r3, #92	; 0x5c
 8005122:	2202      	movs	r2, #2
 8005124:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	440a      	add	r2, r1
 800513c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005140:	f043 0302 	orr.w	r3, r3, #2
 8005144:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	4611      	mov	r1, r2
 8005150:	4618      	mov	r0, r3
 8005152:	f004 fab4 	bl	80096be <USB_HC_Halt>
}
 8005156:	e2f1      	b.n	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4413      	add	r3, r2
 8005160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d13f      	bne.n	80051ee <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	440b      	add	r3, r1
 800517c:	335d      	adds	r3, #93	; 0x5d
 800517e:	2204      	movs	r2, #4
 8005180:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	440b      	add	r3, r1
 8005190:	333d      	adds	r3, #61	; 0x3d
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	440b      	add	r3, r1
 80051a4:	3358      	adds	r3, #88	; 0x58
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051c4:	f043 0302 	orr.w	r3, r3, #2
 80051c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f004 fa72 	bl	80096be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e6:	461a      	mov	r2, r3
 80051e8:	2340      	movs	r3, #64	; 0x40
 80051ea:	6093      	str	r3, [r2, #8]
}
 80051ec:	e2a6      	b.n	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005204:	d122      	bne.n	800524c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4413      	add	r3, r2
 800520e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	0151      	lsls	r1, r2, #5
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	440a      	add	r2, r1
 800521c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005220:	f043 0302 	orr.w	r3, r3, #2
 8005224:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f004 fa44 	bl	80096be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	4413      	add	r3, r2
 800523e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005242:	461a      	mov	r2, r3
 8005244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005248:	6093      	str	r3, [r2, #8]
}
 800524a:	e277      	b.n	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d135      	bne.n	80052ce <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	440b      	add	r3, r1
 8005270:	3358      	adds	r3, #88	; 0x58
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4413      	add	r3, r2
 800527e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	440a      	add	r2, r1
 800528c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005290:	f043 0302 	orr.w	r3, r3, #2
 8005294:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	4611      	mov	r1, r2
 80052a0:	4618      	mov	r0, r3
 80052a2:	f004 fa0c 	bl	80096be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b2:	461a      	mov	r2, r3
 80052b4:	2301      	movs	r3, #1
 80052b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	440b      	add	r3, r1
 80052c6:	335d      	adds	r3, #93	; 0x5d
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]
}
 80052cc:	e236      	b.n	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d12b      	bne.n	800533c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f0:	461a      	mov	r2, r3
 80052f2:	2308      	movs	r3, #8
 80052f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	440a      	add	r2, r1
 800530c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	4611      	mov	r1, r2
 8005320:	4618      	mov	r0, r3
 8005322:	f004 f9cc 	bl	80096be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	440b      	add	r3, r1
 8005334:	335d      	adds	r3, #93	; 0x5d
 8005336:	2205      	movs	r2, #5
 8005338:	701a      	strb	r2, [r3, #0]
}
 800533a:	e1ff      	b.n	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	2b10      	cmp	r3, #16
 8005350:	d155      	bne.n	80053fe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	440b      	add	r3, r1
 8005360:	3358      	adds	r3, #88	; 0x58
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	440b      	add	r3, r1
 8005374:	335d      	adds	r3, #93	; 0x5d
 8005376:	2203      	movs	r2, #3
 8005378:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	440b      	add	r3, r1
 8005388:	333d      	adds	r3, #61	; 0x3d
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d114      	bne.n	80053ba <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	440b      	add	r3, r1
 800539e:	333c      	adds	r3, #60	; 0x3c
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	440b      	add	r3, r1
 80053b4:	333d      	adds	r3, #61	; 0x3d
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	4611      	mov	r1, r2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f004 f96a 	bl	80096be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f6:	461a      	mov	r2, r3
 80053f8:	2310      	movs	r3, #16
 80053fa:	6093      	str	r3, [r2, #8]
}
 80053fc:	e19e      	b.n	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005410:	2b80      	cmp	r3, #128	; 0x80
 8005412:	d12b      	bne.n	800546c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4413      	add	r3, r2
 800541c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	0151      	lsls	r1, r2, #5
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	440a      	add	r2, r1
 800542a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800542e:	f043 0302 	orr.w	r3, r3, #2
 8005432:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	4611      	mov	r1, r2
 800543e:	4618      	mov	r0, r3
 8005440:	f004 f93d 	bl	80096be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	440b      	add	r3, r1
 8005452:	335d      	adds	r3, #93	; 0x5d
 8005454:	2206      	movs	r2, #6
 8005456:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	4413      	add	r3, r2
 8005460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005464:	461a      	mov	r2, r3
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	6093      	str	r3, [r2, #8]
}
 800546a:	e167      	b.n	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4413      	add	r3, r2
 8005474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	d135      	bne.n	80054f0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4413      	add	r3, r2
 800548c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	440a      	add	r2, r1
 800549a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549e:	f043 0302 	orr.w	r3, r3, #2
 80054a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f004 f905 	bl	80096be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	461a      	mov	r2, r3
 80054c2:	2310      	movs	r3, #16
 80054c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	461a      	mov	r2, r3
 80054d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	440b      	add	r3, r1
 80054e8:	335d      	adds	r3, #93	; 0x5d
 80054ea:	2208      	movs	r2, #8
 80054ec:	701a      	strb	r2, [r3, #0]
}
 80054ee:	e125      	b.n	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b02      	cmp	r3, #2
 8005504:	f040 811a 	bne.w	800573c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	440a      	add	r2, r1
 800551e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005522:	f023 0302 	bic.w	r3, r3, #2
 8005526:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	440b      	add	r3, r1
 8005536:	335d      	adds	r3, #93	; 0x5d
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d137      	bne.n	80055ae <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	440b      	add	r3, r1
 800554c:	335c      	adds	r3, #92	; 0x5c
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	440b      	add	r3, r1
 8005560:	333f      	adds	r3, #63	; 0x3f
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d00b      	beq.n	8005580 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	440b      	add	r3, r1
 8005576:	333f      	adds	r3, #63	; 0x3f
 8005578:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800557a:	2b03      	cmp	r3, #3
 800557c:	f040 80c5 	bne.w	800570a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	440b      	add	r3, r1
 800558e:	3351      	adds	r3, #81	; 0x51
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f083 0301 	eor.w	r3, r3, #1
 8005596:	b2d8      	uxtb	r0, r3
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	440b      	add	r3, r1
 80055a6:	3351      	adds	r3, #81	; 0x51
 80055a8:	4602      	mov	r2, r0
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e0ad      	b.n	800570a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	440b      	add	r3, r1
 80055bc:	335d      	adds	r3, #93	; 0x5d
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d10a      	bne.n	80055da <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	440b      	add	r3, r1
 80055d2:	335c      	adds	r3, #92	; 0x5c
 80055d4:	2202      	movs	r2, #2
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	e097      	b.n	800570a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	440b      	add	r3, r1
 80055e8:	335d      	adds	r3, #93	; 0x5d
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d10a      	bne.n	8005606 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	440b      	add	r3, r1
 80055fe:	335c      	adds	r3, #92	; 0x5c
 8005600:	2202      	movs	r2, #2
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e081      	b.n	800570a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	440b      	add	r3, r1
 8005614:	335d      	adds	r3, #93	; 0x5d
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b05      	cmp	r3, #5
 800561a:	d10a      	bne.n	8005632 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	440b      	add	r3, r1
 800562a:	335c      	adds	r3, #92	; 0x5c
 800562c:	2205      	movs	r2, #5
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	e06b      	b.n	800570a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	440b      	add	r3, r1
 8005640:	335d      	adds	r3, #93	; 0x5d
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b06      	cmp	r3, #6
 8005646:	d00a      	beq.n	800565e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	440b      	add	r3, r1
 8005656:	335d      	adds	r3, #93	; 0x5d
 8005658:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800565a:	2b08      	cmp	r3, #8
 800565c:	d155      	bne.n	800570a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	3358      	adds	r3, #88	; 0x58
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	1c59      	adds	r1, r3, #1
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4403      	add	r3, r0
 8005680:	3358      	adds	r3, #88	; 0x58
 8005682:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	440b      	add	r3, r1
 8005692:	3358      	adds	r3, #88	; 0x58
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b03      	cmp	r3, #3
 8005698:	d914      	bls.n	80056c4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	440b      	add	r3, r1
 80056a8:	3358      	adds	r3, #88	; 0x58
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	440b      	add	r3, r1
 80056bc:	335c      	adds	r3, #92	; 0x5c
 80056be:	2204      	movs	r2, #4
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e009      	b.n	80056d8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	440b      	add	r3, r1
 80056d2:	335c      	adds	r3, #92	; 0x5c
 80056d4:	2202      	movs	r2, #2
 80056d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005704:	461a      	mov	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005716:	461a      	mov	r2, r3
 8005718:	2302      	movs	r3, #2
 800571a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	b2d8      	uxtb	r0, r3
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	335c      	adds	r3, #92	; 0x5c
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	4601      	mov	r1, r0
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f008 feb2 	bl	800e4a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800573c:	bf00      	nop
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	0c5b      	lsrs	r3, r3, #17
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005778:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d004      	beq.n	800578a <HCD_RXQLVL_IRQHandler+0x46>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2b05      	cmp	r3, #5
 8005784:	f000 8082 	beq.w	800588c <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005788:	e083      	b.n	8005892 <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d07f      	beq.n	8005890 <HCD_RXQLVL_IRQHandler+0x14c>
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	440b      	add	r3, r1
 800579e:	3344      	adds	r3, #68	; 0x44
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d074      	beq.n	8005890 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	440b      	add	r3, r1
 80057b8:	3344      	adds	r3, #68	; 0x44
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	b292      	uxth	r2, r2
 80057c0:	4619      	mov	r1, r3
 80057c2:	f003 fb1c 	bl	8008dfe <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	440b      	add	r3, r1
 80057d4:	3344      	adds	r3, #68	; 0x44
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	18d1      	adds	r1, r2, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4403      	add	r3, r0
 80057ea:	3344      	adds	r3, #68	; 0x44
 80057ec:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	440b      	add	r3, r1
 80057fc:	334c      	adds	r3, #76	; 0x4c
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	18d1      	adds	r1, r2, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4403      	add	r3, r0
 8005812:	334c      	adds	r3, #76	; 0x4c
 8005814:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	4413      	add	r3, r2
 800581e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	4b1d      	ldr	r3, [pc, #116]	; (800589c <HCD_RXQLVL_IRQHandler+0x158>)
 8005826:	4013      	ands	r3, r2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d031      	beq.n	8005890 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005842:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800584a:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	4413      	add	r3, r2
 8005854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005858:	461a      	mov	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	440b      	add	r3, r1
 800586c:	3350      	adds	r3, #80	; 0x50
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f083 0301 	eor.w	r3, r3, #1
 8005874:	b2d8      	uxtb	r0, r3
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	440b      	add	r3, r1
 8005884:	3350      	adds	r3, #80	; 0x50
 8005886:	4602      	mov	r2, r0
 8005888:	701a      	strb	r2, [r3, #0]
      break;
 800588a:	e001      	b.n	8005890 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800588c:	bf00      	nop
 800588e:	e000      	b.n	8005892 <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8005890:	bf00      	nop
  }
}
 8005892:	bf00      	nop
 8005894:	3728      	adds	r7, #40	; 0x28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	1ff80000 	.word	0x1ff80000

080058a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d10b      	bne.n	80058f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d102      	bne.n	80058e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f008 fdc0 	bl	800e468 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d132      	bne.n	8005960 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f043 0308 	orr.w	r3, r3, #8
 8005900:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b04      	cmp	r3, #4
 800590a:	d126      	bne.n	800595a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d113      	bne.n	800593c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800591a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800591e:	d106      	bne.n	800592e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2102      	movs	r1, #2
 8005926:	4618      	mov	r0, r3
 8005928:	f003 fba4 	bl	8009074 <USB_InitFSLSPClkSel>
 800592c:	e011      	b.n	8005952 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2101      	movs	r1, #1
 8005934:	4618      	mov	r0, r3
 8005936:	f003 fb9d 	bl	8009074 <USB_InitFSLSPClkSel>
 800593a:	e00a      	b.n	8005952 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d106      	bne.n	8005952 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800594a:	461a      	mov	r2, r3
 800594c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005950:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f008 fdb6 	bl	800e4c4 <HAL_HCD_PortEnabled_Callback>
 8005958:	e002      	b.n	8005960 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f008 fdc0 	bl	800e4e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b20      	cmp	r3, #32
 8005968:	d103      	bne.n	8005972 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f043 0320 	orr.w	r3, r3, #32
 8005970:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005978:	461a      	mov	r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6013      	str	r3, [r2, #0]
}
 800597e:	bf00      	nop
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e12b      	b.n	8005bf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fc f90c 	bl	8001bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2224      	movs	r2, #36	; 0x24
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059ec:	f001 f938 	bl	8006c60 <HAL_RCC_GetPCLK1Freq>
 80059f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	4a81      	ldr	r2, [pc, #516]	; (8005bfc <HAL_I2C_Init+0x274>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d807      	bhi.n	8005a0c <HAL_I2C_Init+0x84>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4a80      	ldr	r2, [pc, #512]	; (8005c00 <HAL_I2C_Init+0x278>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	bf94      	ite	ls
 8005a04:	2301      	movls	r3, #1
 8005a06:	2300      	movhi	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	e006      	b.n	8005a1a <HAL_I2C_Init+0x92>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a7d      	ldr	r2, [pc, #500]	; (8005c04 <HAL_I2C_Init+0x27c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	bf94      	ite	ls
 8005a14:	2301      	movls	r3, #1
 8005a16:	2300      	movhi	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e0e7      	b.n	8005bf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a78      	ldr	r2, [pc, #480]	; (8005c08 <HAL_I2C_Init+0x280>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	0c9b      	lsrs	r3, r3, #18
 8005a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	4a6a      	ldr	r2, [pc, #424]	; (8005bfc <HAL_I2C_Init+0x274>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d802      	bhi.n	8005a5c <HAL_I2C_Init+0xd4>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	e009      	b.n	8005a70 <HAL_I2C_Init+0xe8>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	4a69      	ldr	r2, [pc, #420]	; (8005c0c <HAL_I2C_Init+0x284>)
 8005a68:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6c:	099b      	lsrs	r3, r3, #6
 8005a6e:	3301      	adds	r3, #1
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	430b      	orrs	r3, r1
 8005a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	495c      	ldr	r1, [pc, #368]	; (8005bfc <HAL_I2C_Init+0x274>)
 8005a8c:	428b      	cmp	r3, r1
 8005a8e:	d819      	bhi.n	8005ac4 <HAL_I2C_Init+0x13c>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1e59      	subs	r1, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a9e:	1c59      	adds	r1, r3, #1
 8005aa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005aa4:	400b      	ands	r3, r1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_I2C_Init+0x138>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1e59      	subs	r1, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ab8:	3301      	adds	r3, #1
 8005aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005abe:	e051      	b.n	8005b64 <HAL_I2C_Init+0x1dc>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	e04f      	b.n	8005b64 <HAL_I2C_Init+0x1dc>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d111      	bne.n	8005af0 <HAL_I2C_Init+0x168>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	1e58      	subs	r0, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6859      	ldr	r1, [r3, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	440b      	add	r3, r1
 8005ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ade:	3301      	adds	r3, #1
 8005ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	bf0c      	ite	eq
 8005ae8:	2301      	moveq	r3, #1
 8005aea:	2300      	movne	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e012      	b.n	8005b16 <HAL_I2C_Init+0x18e>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1e58      	subs	r0, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6859      	ldr	r1, [r3, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	0099      	lsls	r1, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b06:	3301      	adds	r3, #1
 8005b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <HAL_I2C_Init+0x196>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e022      	b.n	8005b64 <HAL_I2C_Init+0x1dc>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10e      	bne.n	8005b44 <HAL_I2C_Init+0x1bc>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	1e58      	subs	r0, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6859      	ldr	r1, [r3, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	440b      	add	r3, r1
 8005b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b38:	3301      	adds	r3, #1
 8005b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b42:	e00f      	b.n	8005b64 <HAL_I2C_Init+0x1dc>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	1e58      	subs	r0, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6859      	ldr	r1, [r3, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	0099      	lsls	r1, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	6809      	ldr	r1, [r1, #0]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69da      	ldr	r2, [r3, #28]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6911      	ldr	r1, [r2, #16]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	68d2      	ldr	r2, [r2, #12]
 8005b9e:	4311      	orrs	r1, r2
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695a      	ldr	r2, [r3, #20]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	000186a0 	.word	0x000186a0
 8005c00:	001e847f 	.word	0x001e847f
 8005c04:	003d08ff 	.word	0x003d08ff
 8005c08:	431bde83 	.word	0x431bde83
 8005c0c:	10624dd3 	.word	0x10624dd3

08005c10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d129      	bne.n	8005c7a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2224      	movs	r2, #36	; 0x24
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0210 	bic.w	r2, r2, #16
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0201 	orr.w	r2, r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e000      	b.n	8005c7c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005c7a:	2302      	movs	r3, #2
  }
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d12a      	bne.n	8005cf8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2224      	movs	r2, #36	; 0x24
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0201 	bic.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005cc2:	89fb      	ldrh	r3, [r7, #14]
 8005cc4:	f023 030f 	bic.w	r3, r3, #15
 8005cc8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	89fb      	ldrh	r3, [r7, #14]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	89fa      	ldrh	r2, [r7, #14]
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e000      	b.n	8005cfa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e0bf      	b.n	8005e9a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb ffb6 	bl	8001ca0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d4a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6999      	ldr	r1, [r3, #24]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d60:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6899      	ldr	r1, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ea4 <HAL_LTDC_Init+0x19c>)
 8005d7c:	400b      	ands	r3, r1
 8005d7e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	041b      	lsls	r3, r3, #16
 8005d86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6899      	ldr	r1, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68d9      	ldr	r1, [r3, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b3e      	ldr	r3, [pc, #248]	; (8005ea4 <HAL_LTDC_Init+0x19c>)
 8005daa:	400b      	ands	r3, r1
 8005dac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68d9      	ldr	r1, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6919      	ldr	r1, [r3, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b33      	ldr	r3, [pc, #204]	; (8005ea4 <HAL_LTDC_Init+0x19c>)
 8005dd8:	400b      	ands	r3, r1
 8005dda:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	041b      	lsls	r3, r3, #16
 8005de2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6919      	ldr	r1, [r3, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6959      	ldr	r1, [r3, #20]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b27      	ldr	r3, [pc, #156]	; (8005ea4 <HAL_LTDC_Init+0x19c>)
 8005e06:	400b      	ands	r3, r1
 8005e08:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	041b      	lsls	r3, r3, #16
 8005e10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6959      	ldr	r1, [r3, #20]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e38:	041b      	lsls	r3, r3, #16
 8005e3a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0206 	orr.w	r2, r2, #6
 8005e76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	f000f800 	.word	0xf000f800

08005ea8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d023      	beq.n	8005f12 <HAL_LTDC_IRQHandler+0x6a>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01e      	beq.n	8005f12 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0204 	bic.w	r2, r2, #4
 8005ee2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2204      	movs	r2, #4
 8005eea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ef2:	f043 0201 	orr.w	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2204      	movs	r2, #4
 8005f00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f86f 	bl	8005ff0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d023      	beq.n	8005f64 <HAL_LTDC_IRQHandler+0xbc>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d01e      	beq.n	8005f64 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0202 	bic.w	r2, r2, #2
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f44:	f043 0202 	orr.w	r2, r3, #2
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2204      	movs	r2, #4
 8005f52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f846 	bl	8005ff0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01b      	beq.n	8005fa6 <HAL_LTDC_IRQHandler+0xfe>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d016      	beq.n	8005fa6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f82f 	bl	8006004 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01b      	beq.n	8005fe8 <HAL_LTDC_IRQHandler+0x140>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d016      	beq.n	8005fe8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0208 	bic.w	r2, r2, #8
 8005fc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2208      	movs	r2, #8
 8005fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f818 	bl	8006018 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800602c:	b5b0      	push	{r4, r5, r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <HAL_LTDC_ConfigLayer+0x1a>
 8006042:	2302      	movs	r3, #2
 8006044:	e02c      	b.n	80060a0 <HAL_LTDC_ConfigLayer+0x74>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2134      	movs	r1, #52	; 0x34
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	4413      	add	r3, r2
 8006062:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4614      	mov	r4, r2
 800606a:	461d      	mov	r5, r3
 800606c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800606e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f811 	bl	80060a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2201      	movs	r2, #1
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bdb0      	pop	{r4, r5, r7, pc}

080060a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b089      	sub	sp, #36	; 0x24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	0c1b      	lsrs	r3, r3, #16
 80060c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c4:	4413      	add	r3, r2
 80060c6:	041b      	lsls	r3, r3, #16
 80060c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	01db      	lsls	r3, r3, #7
 80060d4:	4413      	add	r3, r2
 80060d6:	3384      	adds	r3, #132	; 0x84
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	4611      	mov	r1, r2
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	01d2      	lsls	r2, r2, #7
 80060e4:	440a      	add	r2, r1
 80060e6:	3284      	adds	r2, #132	; 0x84
 80060e8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80060ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	0c1b      	lsrs	r3, r3, #16
 80060fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060fe:	4413      	add	r3, r2
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4619      	mov	r1, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	01db      	lsls	r3, r3, #7
 800610c:	440b      	add	r3, r1
 800610e:	3384      	adds	r3, #132	; 0x84
 8006110:	4619      	mov	r1, r3
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4313      	orrs	r3, r2
 8006116:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006126:	4413      	add	r3, r2
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	01db      	lsls	r3, r3, #7
 8006136:	4413      	add	r3, r2
 8006138:	3384      	adds	r3, #132	; 0x84
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	4611      	mov	r1, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	01d2      	lsls	r2, r2, #7
 8006146:	440a      	add	r2, r1
 8006148:	3284      	adds	r2, #132	; 0x84
 800614a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800614e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800615e:	4413      	add	r3, r2
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4619      	mov	r1, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	01db      	lsls	r3, r3, #7
 800616c:	440b      	add	r3, r1
 800616e:	3384      	adds	r3, #132	; 0x84
 8006170:	4619      	mov	r1, r3
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4313      	orrs	r3, r2
 8006176:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	01db      	lsls	r3, r3, #7
 8006182:	4413      	add	r3, r2
 8006184:	3384      	adds	r3, #132	; 0x84
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	4611      	mov	r1, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	01d2      	lsls	r2, r2, #7
 8006192:	440a      	add	r2, r1
 8006194:	3284      	adds	r2, #132	; 0x84
 8006196:	f023 0307 	bic.w	r3, r3, #7
 800619a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	01db      	lsls	r3, r3, #7
 80061a6:	4413      	add	r3, r2
 80061a8:	3384      	adds	r3, #132	; 0x84
 80061aa:	461a      	mov	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061b8:	021b      	lsls	r3, r3, #8
 80061ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061c2:	041b      	lsls	r3, r3, #16
 80061c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	01db      	lsls	r3, r3, #7
 80061d8:	4413      	add	r3, r2
 80061da:	3384      	adds	r3, #132	; 0x84
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	01db      	lsls	r3, r3, #7
 80061e8:	4413      	add	r3, r2
 80061ea:	3384      	adds	r3, #132	; 0x84
 80061ec:	461a      	mov	r2, r3
 80061ee:	2300      	movs	r3, #0
 80061f0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061f8:	461a      	mov	r2, r3
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	431a      	orrs	r2, r3
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	431a      	orrs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4619      	mov	r1, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	01db      	lsls	r3, r3, #7
 800620c:	440b      	add	r3, r1
 800620e:	3384      	adds	r3, #132	; 0x84
 8006210:	4619      	mov	r1, r3
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	01db      	lsls	r3, r3, #7
 8006222:	4413      	add	r3, r2
 8006224:	3384      	adds	r3, #132	; 0x84
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	6812      	ldr	r2, [r2, #0]
 800622c:	4611      	mov	r1, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	01d2      	lsls	r2, r2, #7
 8006232:	440a      	add	r2, r1
 8006234:	3284      	adds	r2, #132	; 0x84
 8006236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800623a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	01db      	lsls	r3, r3, #7
 8006246:	4413      	add	r3, r2
 8006248:	3384      	adds	r3, #132	; 0x84
 800624a:	461a      	mov	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	01db      	lsls	r3, r3, #7
 800625c:	4413      	add	r3, r2
 800625e:	3384      	adds	r3, #132	; 0x84
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	4611      	mov	r1, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	01d2      	lsls	r2, r2, #7
 800626c:	440a      	add	r2, r1
 800626e:	3284      	adds	r2, #132	; 0x84
 8006270:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006274:	f023 0307 	bic.w	r3, r3, #7
 8006278:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	69da      	ldr	r2, [r3, #28]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	68f9      	ldr	r1, [r7, #12]
 8006284:	6809      	ldr	r1, [r1, #0]
 8006286:	4608      	mov	r0, r1
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	01c9      	lsls	r1, r1, #7
 800628c:	4401      	add	r1, r0
 800628e:	3184      	adds	r1, #132	; 0x84
 8006290:	4313      	orrs	r3, r2
 8006292:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	01db      	lsls	r3, r3, #7
 800629e:	4413      	add	r3, r2
 80062a0:	3384      	adds	r3, #132	; 0x84
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	01db      	lsls	r3, r3, #7
 80062ae:	4413      	add	r3, r2
 80062b0:	3384      	adds	r3, #132	; 0x84
 80062b2:	461a      	mov	r2, r3
 80062b4:	2300      	movs	r3, #0
 80062b6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	01db      	lsls	r3, r3, #7
 80062c2:	4413      	add	r3, r2
 80062c4:	3384      	adds	r3, #132	; 0x84
 80062c6:	461a      	mov	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80062d6:	2304      	movs	r3, #4
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	e01b      	b.n	8006314 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d102      	bne.n	80062ea <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80062e4:	2303      	movs	r3, #3
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	e014      	b.n	8006314 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d00b      	beq.n	800630a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d007      	beq.n	800630a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d003      	beq.n	800630a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006306:	2b07      	cmp	r3, #7
 8006308:	d102      	bne.n	8006310 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800630a:	2302      	movs	r3, #2
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	e001      	b.n	8006314 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006310:	2301      	movs	r3, #1
 8006312:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	01db      	lsls	r3, r3, #7
 800631e:	4413      	add	r3, r2
 8006320:	3384      	adds	r3, #132	; 0x84
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	6812      	ldr	r2, [r2, #0]
 8006328:	4611      	mov	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	01d2      	lsls	r2, r2, #7
 800632e:	440a      	add	r2, r1
 8006330:	3284      	adds	r2, #132	; 0x84
 8006332:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006336:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	fb02 f303 	mul.w	r3, r2, r3
 8006342:	041a      	lsls	r2, r3, #16
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	6859      	ldr	r1, [r3, #4]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	1acb      	subs	r3, r1, r3
 800634e:	69f9      	ldr	r1, [r7, #28]
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	3303      	adds	r3, #3
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	6809      	ldr	r1, [r1, #0]
 800635a:	4608      	mov	r0, r1
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	01c9      	lsls	r1, r1, #7
 8006360:	4401      	add	r1, r0
 8006362:	3184      	adds	r1, #132	; 0x84
 8006364:	4313      	orrs	r3, r2
 8006366:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	01db      	lsls	r3, r3, #7
 8006372:	4413      	add	r3, r2
 8006374:	3384      	adds	r3, #132	; 0x84
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	4611      	mov	r1, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	01d2      	lsls	r2, r2, #7
 8006382:	440a      	add	r2, r1
 8006384:	3284      	adds	r2, #132	; 0x84
 8006386:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800638a:	f023 0307 	bic.w	r3, r3, #7
 800638e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	01db      	lsls	r3, r3, #7
 800639a:	4413      	add	r3, r2
 800639c:	3384      	adds	r3, #132	; 0x84
 800639e:	461a      	mov	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	01db      	lsls	r3, r3, #7
 80063b0:	4413      	add	r3, r2
 80063b2:	3384      	adds	r3, #132	; 0x84
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	4611      	mov	r1, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	01d2      	lsls	r2, r2, #7
 80063c0:	440a      	add	r2, r1
 80063c2:	3284      	adds	r2, #132	; 0x84
 80063c4:	f043 0301 	orr.w	r3, r3, #1
 80063c8:	6013      	str	r3, [r2, #0]
}
 80063ca:	bf00      	nop
 80063cc:	3724      	adds	r7, #36	; 0x24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
	...

080063d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e25b      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d075      	beq.n	80064e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063f6:	4ba3      	ldr	r3, [pc, #652]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d00c      	beq.n	800641c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006402:	4ba0      	ldr	r3, [pc, #640]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800640a:	2b08      	cmp	r3, #8
 800640c:	d112      	bne.n	8006434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800640e:	4b9d      	ldr	r3, [pc, #628]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641a:	d10b      	bne.n	8006434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641c:	4b99      	ldr	r3, [pc, #612]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d05b      	beq.n	80064e0 <HAL_RCC_OscConfig+0x108>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d157      	bne.n	80064e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e236      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643c:	d106      	bne.n	800644c <HAL_RCC_OscConfig+0x74>
 800643e:	4b91      	ldr	r3, [pc, #580]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a90      	ldr	r2, [pc, #576]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e01d      	b.n	8006488 <HAL_RCC_OscConfig+0xb0>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006454:	d10c      	bne.n	8006470 <HAL_RCC_OscConfig+0x98>
 8006456:	4b8b      	ldr	r3, [pc, #556]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a8a      	ldr	r2, [pc, #552]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800645c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	4b88      	ldr	r3, [pc, #544]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a87      	ldr	r2, [pc, #540]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e00b      	b.n	8006488 <HAL_RCC_OscConfig+0xb0>
 8006470:	4b84      	ldr	r3, [pc, #528]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a83      	ldr	r2, [pc, #524]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	4b81      	ldr	r3, [pc, #516]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a80      	ldr	r2, [pc, #512]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d013      	beq.n	80064b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006490:	f7fc fcde 	bl	8002e50 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006498:	f7fc fcda 	bl	8002e50 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b64      	cmp	r3, #100	; 0x64
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e1fb      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064aa:	4b76      	ldr	r3, [pc, #472]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <HAL_RCC_OscConfig+0xc0>
 80064b6:	e014      	b.n	80064e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b8:	f7fc fcca 	bl	8002e50 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c0:	f7fc fcc6 	bl	8002e50 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	; 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e1e7      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d2:	4b6c      	ldr	r3, [pc, #432]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f0      	bne.n	80064c0 <HAL_RCC_OscConfig+0xe8>
 80064de:	e000      	b.n	80064e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d063      	beq.n	80065b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064ee:	4b65      	ldr	r3, [pc, #404]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064fa:	4b62      	ldr	r3, [pc, #392]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006502:	2b08      	cmp	r3, #8
 8006504:	d11c      	bne.n	8006540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006506:	4b5f      	ldr	r3, [pc, #380]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d116      	bne.n	8006540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006512:	4b5c      	ldr	r3, [pc, #368]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_RCC_OscConfig+0x152>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d001      	beq.n	800652a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e1bb      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652a:	4b56      	ldr	r3, [pc, #344]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4952      	ldr	r1, [pc, #328]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800653a:	4313      	orrs	r3, r2
 800653c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653e:	e03a      	b.n	80065b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d020      	beq.n	800658a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006548:	4b4f      	ldr	r3, [pc, #316]	; (8006688 <HAL_RCC_OscConfig+0x2b0>)
 800654a:	2201      	movs	r2, #1
 800654c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654e:	f7fc fc7f 	bl	8002e50 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006556:	f7fc fc7b 	bl	8002e50 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e19c      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006568:	4b46      	ldr	r3, [pc, #280]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0f0      	beq.n	8006556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006574:	4b43      	ldr	r3, [pc, #268]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4940      	ldr	r1, [pc, #256]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006584:	4313      	orrs	r3, r2
 8006586:	600b      	str	r3, [r1, #0]
 8006588:	e015      	b.n	80065b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658a:	4b3f      	ldr	r3, [pc, #252]	; (8006688 <HAL_RCC_OscConfig+0x2b0>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fc fc5e 	bl	8002e50 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006598:	f7fc fc5a 	bl	8002e50 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e17b      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065aa:	4b36      	ldr	r3, [pc, #216]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d030      	beq.n	8006624 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d016      	beq.n	80065f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ca:	4b30      	ldr	r3, [pc, #192]	; (800668c <HAL_RCC_OscConfig+0x2b4>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d0:	f7fc fc3e 	bl	8002e50 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d8:	f7fc fc3a 	bl	8002e50 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e15b      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ea:	4b26      	ldr	r3, [pc, #152]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80065ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0x200>
 80065f6:	e015      	b.n	8006624 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f8:	4b24      	ldr	r3, [pc, #144]	; (800668c <HAL_RCC_OscConfig+0x2b4>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065fe:	f7fc fc27 	bl	8002e50 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006606:	f7fc fc23 	bl	8002e50 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e144      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006618:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800661a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80a0 	beq.w	8006772 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006632:	2300      	movs	r3, #0
 8006634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006636:	4b13      	ldr	r3, [pc, #76]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10f      	bne.n	8006662 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006642:	2300      	movs	r3, #0
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800664c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006650:	6413      	str	r3, [r2, #64]	; 0x40
 8006652:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665a:	60bb      	str	r3, [r7, #8]
 800665c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006662:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <HAL_RCC_OscConfig+0x2b8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d121      	bne.n	80066b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800666e:	4b08      	ldr	r3, [pc, #32]	; (8006690 <HAL_RCC_OscConfig+0x2b8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a07      	ldr	r2, [pc, #28]	; (8006690 <HAL_RCC_OscConfig+0x2b8>)
 8006674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800667a:	f7fc fbe9 	bl	8002e50 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006680:	e011      	b.n	80066a6 <HAL_RCC_OscConfig+0x2ce>
 8006682:	bf00      	nop
 8006684:	40023800 	.word	0x40023800
 8006688:	42470000 	.word	0x42470000
 800668c:	42470e80 	.word	0x42470e80
 8006690:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006694:	f7fc fbdc 	bl	8002e50 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e0fd      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a6:	4b81      	ldr	r3, [pc, #516]	; (80068ac <HAL_RCC_OscConfig+0x4d4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d106      	bne.n	80066c8 <HAL_RCC_OscConfig+0x2f0>
 80066ba:	4b7d      	ldr	r3, [pc, #500]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	4a7c      	ldr	r2, [pc, #496]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	6713      	str	r3, [r2, #112]	; 0x70
 80066c6:	e01c      	b.n	8006702 <HAL_RCC_OscConfig+0x32a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b05      	cmp	r3, #5
 80066ce:	d10c      	bne.n	80066ea <HAL_RCC_OscConfig+0x312>
 80066d0:	4b77      	ldr	r3, [pc, #476]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	4a76      	ldr	r2, [pc, #472]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80066d6:	f043 0304 	orr.w	r3, r3, #4
 80066da:	6713      	str	r3, [r2, #112]	; 0x70
 80066dc:	4b74      	ldr	r3, [pc, #464]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80066de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e0:	4a73      	ldr	r2, [pc, #460]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	6713      	str	r3, [r2, #112]	; 0x70
 80066e8:	e00b      	b.n	8006702 <HAL_RCC_OscConfig+0x32a>
 80066ea:	4b71      	ldr	r3, [pc, #452]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	4a70      	ldr	r2, [pc, #448]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80066f0:	f023 0301 	bic.w	r3, r3, #1
 80066f4:	6713      	str	r3, [r2, #112]	; 0x70
 80066f6:	4b6e      	ldr	r3, [pc, #440]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	4a6d      	ldr	r2, [pc, #436]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80066fc:	f023 0304 	bic.w	r3, r3, #4
 8006700:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d015      	beq.n	8006736 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670a:	f7fc fba1 	bl	8002e50 <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006710:	e00a      	b.n	8006728 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006712:	f7fc fb9d 	bl	8002e50 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006720:	4293      	cmp	r3, r2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e0bc      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006728:	4b61      	ldr	r3, [pc, #388]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0ee      	beq.n	8006712 <HAL_RCC_OscConfig+0x33a>
 8006734:	e014      	b.n	8006760 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006736:	f7fc fb8b 	bl	8002e50 <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673c:	e00a      	b.n	8006754 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673e:	f7fc fb87 	bl	8002e50 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	f241 3288 	movw	r2, #5000	; 0x1388
 800674c:	4293      	cmp	r3, r2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e0a6      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006754:	4b56      	ldr	r3, [pc, #344]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 8006756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1ee      	bne.n	800673e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006760:	7dfb      	ldrb	r3, [r7, #23]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d105      	bne.n	8006772 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006766:	4b52      	ldr	r3, [pc, #328]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	4a51      	ldr	r2, [pc, #324]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 800676c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006770:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8092 	beq.w	80068a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800677c:	4b4c      	ldr	r3, [pc, #304]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 030c 	and.w	r3, r3, #12
 8006784:	2b08      	cmp	r3, #8
 8006786:	d05c      	beq.n	8006842 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d141      	bne.n	8006814 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006790:	4b48      	ldr	r3, [pc, #288]	; (80068b4 <HAL_RCC_OscConfig+0x4dc>)
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006796:	f7fc fb5b 	bl	8002e50 <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679e:	f7fc fb57 	bl	8002e50 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e078      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b0:	4b3f      	ldr	r3, [pc, #252]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f0      	bne.n	800679e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	019b      	lsls	r3, r3, #6
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	3b01      	subs	r3, #1
 80067d6:	041b      	lsls	r3, r3, #16
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	061b      	lsls	r3, r3, #24
 80067e0:	4933      	ldr	r1, [pc, #204]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e6:	4b33      	ldr	r3, [pc, #204]	; (80068b4 <HAL_RCC_OscConfig+0x4dc>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ec:	f7fc fb30 	bl	8002e50 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f4:	f7fc fb2c 	bl	8002e50 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e04d      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006806:	4b2a      	ldr	r3, [pc, #168]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x41c>
 8006812:	e045      	b.n	80068a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006814:	4b27      	ldr	r3, [pc, #156]	; (80068b4 <HAL_RCC_OscConfig+0x4dc>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800681a:	f7fc fb19 	bl	8002e50 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006822:	f7fc fb15 	bl	8002e50 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e036      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006834:	4b1e      	ldr	r3, [pc, #120]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f0      	bne.n	8006822 <HAL_RCC_OscConfig+0x44a>
 8006840:	e02e      	b.n	80068a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e029      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800684e:	4b18      	ldr	r3, [pc, #96]	; (80068b0 <HAL_RCC_OscConfig+0x4d8>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	429a      	cmp	r2, r3
 8006860:	d11c      	bne.n	800689c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800686c:	429a      	cmp	r2, r3
 800686e:	d115      	bne.n	800689c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006876:	4013      	ands	r3, r2
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800687c:	4293      	cmp	r3, r2
 800687e:	d10d      	bne.n	800689c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800688a:	429a      	cmp	r2, r3
 800688c:	d106      	bne.n	800689c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006898:	429a      	cmp	r2, r3
 800689a:	d001      	beq.n	80068a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40007000 	.word	0x40007000
 80068b0:	40023800 	.word	0x40023800
 80068b4:	42470060 	.word	0x42470060

080068b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0cc      	b.n	8006a66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068cc:	4b68      	ldr	r3, [pc, #416]	; (8006a70 <HAL_RCC_ClockConfig+0x1b8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d90c      	bls.n	80068f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068da:	4b65      	ldr	r3, [pc, #404]	; (8006a70 <HAL_RCC_ClockConfig+0x1b8>)
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068e2:	4b63      	ldr	r3, [pc, #396]	; (8006a70 <HAL_RCC_ClockConfig+0x1b8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 030f 	and.w	r3, r3, #15
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d001      	beq.n	80068f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0b8      	b.n	8006a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d020      	beq.n	8006942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	2b00      	cmp	r3, #0
 800690a:	d005      	beq.n	8006918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800690c:	4b59      	ldr	r3, [pc, #356]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	4a58      	ldr	r2, [pc, #352]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006912:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006916:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d005      	beq.n	8006930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006924:	4b53      	ldr	r3, [pc, #332]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	4a52      	ldr	r2, [pc, #328]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 800692a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800692e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006930:	4b50      	ldr	r3, [pc, #320]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	494d      	ldr	r1, [pc, #308]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	4313      	orrs	r3, r2
 8006940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d044      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d107      	bne.n	8006966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006956:	4b47      	ldr	r3, [pc, #284]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d119      	bne.n	8006996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e07f      	b.n	8006a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d003      	beq.n	8006976 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006972:	2b03      	cmp	r3, #3
 8006974:	d107      	bne.n	8006986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006976:	4b3f      	ldr	r3, [pc, #252]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e06f      	b.n	8006a66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006986:	4b3b      	ldr	r3, [pc, #236]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e067      	b.n	8006a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006996:	4b37      	ldr	r3, [pc, #220]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f023 0203 	bic.w	r2, r3, #3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	4934      	ldr	r1, [pc, #208]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069a8:	f7fc fa52 	bl	8002e50 <HAL_GetTick>
 80069ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ae:	e00a      	b.n	80069c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b0:	f7fc fa4e 	bl	8002e50 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80069be:	4293      	cmp	r3, r2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e04f      	b.n	8006a66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c6:	4b2b      	ldr	r3, [pc, #172]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 020c 	and.w	r2, r3, #12
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d1eb      	bne.n	80069b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069d8:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <HAL_RCC_ClockConfig+0x1b8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d20c      	bcs.n	8006a00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e6:	4b22      	ldr	r3, [pc, #136]	; (8006a70 <HAL_RCC_ClockConfig+0x1b8>)
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ee:	4b20      	ldr	r3, [pc, #128]	; (8006a70 <HAL_RCC_ClockConfig+0x1b8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d001      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e032      	b.n	8006a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a0c:	4b19      	ldr	r3, [pc, #100]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	4916      	ldr	r1, [pc, #88]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d009      	beq.n	8006a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a2a:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	490e      	ldr	r1, [pc, #56]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a3e:	f000 f821 	bl	8006a84 <HAL_RCC_GetSysClockFreq>
 8006a42:	4602      	mov	r2, r0
 8006a44:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <HAL_RCC_ClockConfig+0x1bc>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	091b      	lsrs	r3, r3, #4
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	490a      	ldr	r1, [pc, #40]	; (8006a78 <HAL_RCC_ClockConfig+0x1c0>)
 8006a50:	5ccb      	ldrb	r3, [r1, r3]
 8006a52:	fa22 f303 	lsr.w	r3, r2, r3
 8006a56:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a5a:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <HAL_RCC_ClockConfig+0x1c8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fb fc16 	bl	8002290 <HAL_InitTick>

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40023c00 	.word	0x40023c00
 8006a74:	40023800 	.word	0x40023800
 8006a78:	0800f2b0 	.word	0x0800f2b0
 8006a7c:	20000000 	.word	0x20000000
 8006a80:	20000050 	.word	0x20000050

08006a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	607b      	str	r3, [r7, #4]
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	2300      	movs	r3, #0
 8006a96:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a9c:	4b67      	ldr	r3, [pc, #412]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f003 030c 	and.w	r3, r3, #12
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d00d      	beq.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	f200 80bd 	bhi.w	8006c28 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d003      	beq.n	8006abe <HAL_RCC_GetSysClockFreq+0x3a>
 8006ab6:	e0b7      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ab8:	4b61      	ldr	r3, [pc, #388]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006aba:	60bb      	str	r3, [r7, #8]
       break;
 8006abc:	e0b7      	b.n	8006c2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006abe:	4b61      	ldr	r3, [pc, #388]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006ac0:	60bb      	str	r3, [r7, #8]
      break;
 8006ac2:	e0b4      	b.n	8006c2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ac4:	4b5d      	ldr	r3, [pc, #372]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006acc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ace:	4b5b      	ldr	r3, [pc, #364]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d04d      	beq.n	8006b76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ada:	4b58      	ldr	r3, [pc, #352]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	099b      	lsrs	r3, r3, #6
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006aea:	f04f 0100 	mov.w	r1, #0
 8006aee:	ea02 0800 	and.w	r8, r2, r0
 8006af2:	ea03 0901 	and.w	r9, r3, r1
 8006af6:	4640      	mov	r0, r8
 8006af8:	4649      	mov	r1, r9
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	014b      	lsls	r3, r1, #5
 8006b04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b08:	0142      	lsls	r2, r0, #5
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	ebb0 0008 	subs.w	r0, r0, r8
 8006b12:	eb61 0109 	sbc.w	r1, r1, r9
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	018b      	lsls	r3, r1, #6
 8006b20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b24:	0182      	lsls	r2, r0, #6
 8006b26:	1a12      	subs	r2, r2, r0
 8006b28:	eb63 0301 	sbc.w	r3, r3, r1
 8006b2c:	f04f 0000 	mov.w	r0, #0
 8006b30:	f04f 0100 	mov.w	r1, #0
 8006b34:	00d9      	lsls	r1, r3, #3
 8006b36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b3a:	00d0      	lsls	r0, r2, #3
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	eb12 0208 	adds.w	r2, r2, r8
 8006b44:	eb43 0309 	adc.w	r3, r3, r9
 8006b48:	f04f 0000 	mov.w	r0, #0
 8006b4c:	f04f 0100 	mov.w	r1, #0
 8006b50:	0259      	lsls	r1, r3, #9
 8006b52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006b56:	0250      	lsls	r0, r2, #9
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	461a      	mov	r2, r3
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	f7f9 ff88 	bl	8000a7c <__aeabi_uldivmod>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4613      	mov	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	e04a      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b76:	4b31      	ldr	r3, [pc, #196]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	099b      	lsrs	r3, r3, #6
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f04f 0300 	mov.w	r3, #0
 8006b82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b86:	f04f 0100 	mov.w	r1, #0
 8006b8a:	ea02 0400 	and.w	r4, r2, r0
 8006b8e:	ea03 0501 	and.w	r5, r3, r1
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	014b      	lsls	r3, r1, #5
 8006ba0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ba4:	0142      	lsls	r2, r0, #5
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	4619      	mov	r1, r3
 8006baa:	1b00      	subs	r0, r0, r4
 8006bac:	eb61 0105 	sbc.w	r1, r1, r5
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	018b      	lsls	r3, r1, #6
 8006bba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006bbe:	0182      	lsls	r2, r0, #6
 8006bc0:	1a12      	subs	r2, r2, r0
 8006bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8006bc6:	f04f 0000 	mov.w	r0, #0
 8006bca:	f04f 0100 	mov.w	r1, #0
 8006bce:	00d9      	lsls	r1, r3, #3
 8006bd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bd4:	00d0      	lsls	r0, r2, #3
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	1912      	adds	r2, r2, r4
 8006bdc:	eb45 0303 	adc.w	r3, r5, r3
 8006be0:	f04f 0000 	mov.w	r0, #0
 8006be4:	f04f 0100 	mov.w	r1, #0
 8006be8:	0299      	lsls	r1, r3, #10
 8006bea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006bee:	0290      	lsls	r0, r2, #10
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	f7f9 ff3c 	bl	8000a7c <__aeabi_uldivmod>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4613      	mov	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	0c1b      	lsrs	r3, r3, #16
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	3301      	adds	r3, #1
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c24:	60bb      	str	r3, [r7, #8]
      break;
 8006c26:	e002      	b.n	8006c2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006c2a:	60bb      	str	r3, [r7, #8]
      break;
 8006c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	00f42400 	.word	0x00f42400
 8006c44:	007a1200 	.word	0x007a1200

08006c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c4c:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20000000 	.word	0x20000000

08006c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c64:	f7ff fff0 	bl	8006c48 <HAL_RCC_GetHCLKFreq>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	0a9b      	lsrs	r3, r3, #10
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	4903      	ldr	r1, [pc, #12]	; (8006c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c76:	5ccb      	ldrb	r3, [r1, r3]
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40023800 	.word	0x40023800
 8006c84:	0800f2c0 	.word	0x0800f2c0

08006c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c8c:	f7ff ffdc 	bl	8006c48 <HAL_RCC_GetHCLKFreq>
 8006c90:	4602      	mov	r2, r0
 8006c92:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	0b5b      	lsrs	r3, r3, #13
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	4903      	ldr	r1, [pc, #12]	; (8006cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	0800f2c0 	.word	0x0800f2c0

08006cb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	220f      	movs	r2, #15
 8006cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006cc0:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <HAL_RCC_GetClockConfig+0x5c>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 0203 	and.w	r2, r3, #3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ccc:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <HAL_RCC_GetClockConfig+0x5c>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <HAL_RCC_GetClockConfig+0x5c>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ce4:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <HAL_RCC_GetClockConfig+0x5c>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	08db      	lsrs	r3, r3, #3
 8006cea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <HAL_RCC_GetClockConfig+0x60>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 020f 	and.w	r2, r3, #15
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	601a      	str	r2, [r3, #0]
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	40023c00 	.word	0x40023c00

08006d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10b      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d105      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d075      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d48:	4bad      	ldr	r3, [pc, #692]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d4e:	f7fc f87f 	bl	8002e50 <HAL_GetTick>
 8006d52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d54:	e008      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d56:	f7fc f87b 	bl	8002e50 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e18b      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d68:	4ba6      	ldr	r3, [pc, #664]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f0      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d009      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	019a      	lsls	r2, r3, #6
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	071b      	lsls	r3, r3, #28
 8006d8c:	499d      	ldr	r1, [pc, #628]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01f      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006da0:	4b98      	ldr	r3, [pc, #608]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da6:	0f1b      	lsrs	r3, r3, #28
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	019a      	lsls	r2, r3, #6
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	061b      	lsls	r3, r3, #24
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	071b      	lsls	r3, r3, #28
 8006dc0:	4990      	ldr	r1, [pc, #576]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006dc8:	4b8e      	ldr	r3, [pc, #568]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dce:	f023 021f 	bic.w	r2, r3, #31
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	498a      	ldr	r1, [pc, #552]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00d      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	019a      	lsls	r2, r3, #6
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	061b      	lsls	r3, r3, #24
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	071b      	lsls	r3, r3, #28
 8006e00:	4980      	ldr	r1, [pc, #512]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e08:	4b7d      	ldr	r3, [pc, #500]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e0e:	f7fc f81f 	bl	8002e50 <HAL_GetTick>
 8006e12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e14:	e008      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e16:	f7fc f81b 	bl	8002e50 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e12b      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e28:	4b76      	ldr	r3, [pc, #472]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0f0      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d079      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e4c:	4b6e      	ldr	r3, [pc, #440]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e52:	f7fb fffd 	bl	8002e50 <HAL_GetTick>
 8006e56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e58:	e008      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e5a:	f7fb fff9 	bl	8002e50 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e109      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e6c:	4b65      	ldr	r3, [pc, #404]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e78:	d0ef      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0304 	and.w	r3, r3, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d020      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e86:	4b5f      	ldr	r3, [pc, #380]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8c:	0f1b      	lsrs	r3, r3, #28
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	019a      	lsls	r2, r3, #6
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	061b      	lsls	r3, r3, #24
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	071b      	lsls	r3, r3, #28
 8006ea6:	4957      	ldr	r1, [pc, #348]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006eae:	4b55      	ldr	r3, [pc, #340]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	4950      	ldr	r1, [pc, #320]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01e      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ed4:	4b4b      	ldr	r3, [pc, #300]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eda:	0e1b      	lsrs	r3, r3, #24
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	019a      	lsls	r2, r3, #6
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	061b      	lsls	r3, r3, #24
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	071b      	lsls	r3, r3, #28
 8006ef4:	4943      	ldr	r1, [pc, #268]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006efc:	4b41      	ldr	r3, [pc, #260]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	493e      	ldr	r1, [pc, #248]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f12:	4b3d      	ldr	r3, [pc, #244]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f18:	f7fb ff9a 	bl	8002e50 <HAL_GetTick>
 8006f1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006f20:	f7fb ff96 	bl	8002e50 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e0a6      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f32:	4b34      	ldr	r3, [pc, #208]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f3e:	d1ef      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 808d 	beq.w	8007068 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	4b2c      	ldr	r3, [pc, #176]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	4a2b      	ldr	r2, [pc, #172]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f5e:	4b29      	ldr	r3, [pc, #164]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f6a:	4b28      	ldr	r3, [pc, #160]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a27      	ldr	r2, [pc, #156]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f76:	f7fb ff6b 	bl	8002e50 <HAL_GetTick>
 8006f7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f7e:	f7fb ff67 	bl	8002e50 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e077      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f90:	4b1e      	ldr	r3, [pc, #120]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f0      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f9c:	4b19      	ldr	r3, [pc, #100]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fa4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d039      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d032      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fba:	4b12      	ldr	r3, [pc, #72]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fc4:	4b12      	ldr	r3, [pc, #72]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fca:	4b11      	ldr	r3, [pc, #68]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006fd0:	4a0c      	ldr	r2, [pc, #48]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d11e      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006fe2:	f7fb ff35 	bl	8002e50 <HAL_GetTick>
 8006fe6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe8:	e014      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fea:	f7fb ff31 	bl	8002e50 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d90b      	bls.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e03f      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007000:	42470068 	.word	0x42470068
 8007004:	40023800 	.word	0x40023800
 8007008:	42470070 	.word	0x42470070
 800700c:	40007000 	.word	0x40007000
 8007010:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007014:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0e4      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800702c:	d10d      	bne.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800702e:	4b16      	ldr	r3, [pc, #88]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800703e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007042:	4911      	ldr	r1, [pc, #68]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007044:	4313      	orrs	r3, r2
 8007046:	608b      	str	r3, [r1, #8]
 8007048:	e005      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	4a0e      	ldr	r2, [pc, #56]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007050:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007054:	6093      	str	r3, [r2, #8]
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007062:	4909      	ldr	r1, [pc, #36]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007064:	4313      	orrs	r3, r2
 8007066:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800707a:	4b04      	ldr	r3, [pc, #16]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800707c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40023800 	.word	0x40023800
 800708c:	424711e0 	.word	0x424711e0

08007090 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e025      	b.n	80070f0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7fb f8df 	bl	800227c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2202      	movs	r2, #2
 80070c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f001 fc77 	bl	80089c4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	461a      	mov	r2, r3
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	f001 fce2 	bl	8008aaa <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e056      	b.n	80071b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d106      	bne.n	800712a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7fa fed1 	bl	8001ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007140:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	ea42 0103 	orr.w	r1, r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	0c1b      	lsrs	r3, r3, #16
 8007188:	f003 0104 	and.w	r1, r3, #4
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69da      	ldr	r2, [r3, #28]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e01d      	b.n	800720e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fa feb8 	bl	8001f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f000 fb74 	bl	80078ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b06      	cmp	r3, #6
 8007236:	d007      	beq.n	8007248 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f042 0201 	orr.w	r2, r2, #1
 8007274:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b06      	cmp	r3, #6
 8007286:	d007      	beq.n	8007298 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b082      	sub	sp, #8
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e01d      	b.n	80072f4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d106      	bne.n	80072d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7fa fe67 	bl	8001fa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3304      	adds	r3, #4
 80072e2:	4619      	mov	r1, r3
 80072e4:	4610      	mov	r0, r2
 80072e6:	f000 fb01 	bl	80078ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2201      	movs	r2, #1
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fdd6 	bl	8007ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a15      	ldr	r2, [pc, #84]	; (8007370 <HAL_TIM_PWM_Start+0x74>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d004      	beq.n	8007328 <HAL_TIM_PWM_Start+0x2c>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a14      	ldr	r2, [pc, #80]	; (8007374 <HAL_TIM_PWM_Start+0x78>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d101      	bne.n	800732c <HAL_TIM_PWM_Start+0x30>
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <HAL_TIM_PWM_Start+0x32>
 800732c:	2300      	movs	r3, #0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b06      	cmp	r3, #6
 8007352:	d007      	beq.n	8007364 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	40010000 	.word	0x40010000
 8007374:	40010400 	.word	0x40010400

08007378 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d122      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b02      	cmp	r3, #2
 800739a:	d11b      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0202 	mvn.w	r2, #2
 80073a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa78 	bl	80078b0 <HAL_TIM_IC_CaptureCallback>
 80073c0:	e005      	b.n	80073ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa6a 	bl	800789c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa7b 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0304 	and.w	r3, r3, #4
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d122      	bne.n	8007428 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d11b      	bne.n	8007428 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0204 	mvn.w	r2, #4
 80073f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2202      	movs	r2, #2
 80073fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa4e 	bl	80078b0 <HAL_TIM_IC_CaptureCallback>
 8007414:	e005      	b.n	8007422 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa40 	bl	800789c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa51 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b08      	cmp	r3, #8
 8007434:	d122      	bne.n	800747c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b08      	cmp	r3, #8
 8007442:	d11b      	bne.n	800747c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0208 	mvn.w	r2, #8
 800744c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2204      	movs	r2, #4
 8007452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa24 	bl	80078b0 <HAL_TIM_IC_CaptureCallback>
 8007468:	e005      	b.n	8007476 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa16 	bl	800789c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fa27 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	2b10      	cmp	r3, #16
 8007488:	d122      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0310 	and.w	r3, r3, #16
 8007494:	2b10      	cmp	r3, #16
 8007496:	d11b      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0210 	mvn.w	r2, #16
 80074a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2208      	movs	r2, #8
 80074a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f9fa 	bl	80078b0 <HAL_TIM_IC_CaptureCallback>
 80074bc:	e005      	b.n	80074ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f9ec 	bl	800789c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f9fd 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d10e      	bne.n	80074fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d107      	bne.n	80074fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0201 	mvn.w	r2, #1
 80074f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fa fa30 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007506:	2b80      	cmp	r3, #128	; 0x80
 8007508:	d10e      	bne.n	8007528 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007514:	2b80      	cmp	r3, #128	; 0x80
 8007516:	d107      	bne.n	8007528 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fd78 	bl	8008018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007532:	2b40      	cmp	r3, #64	; 0x40
 8007534:	d10e      	bne.n	8007554 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007540:	2b40      	cmp	r3, #64	; 0x40
 8007542:	d107      	bne.n	8007554 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800754c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f9c2 	bl	80078d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b20      	cmp	r3, #32
 8007560:	d10e      	bne.n	8007580 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b20      	cmp	r3, #32
 800756e:	d107      	bne.n	8007580 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f06f 0220 	mvn.w	r2, #32
 8007578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fd42 	bl	8008004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800759e:	2302      	movs	r3, #2
 80075a0:	e0b4      	b.n	800770c <HAL_TIM_PWM_ConfigChannel+0x184>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2202      	movs	r2, #2
 80075ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b0c      	cmp	r3, #12
 80075b6:	f200 809f 	bhi.w	80076f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80075ba:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	080075f5 	.word	0x080075f5
 80075c4:	080076f9 	.word	0x080076f9
 80075c8:	080076f9 	.word	0x080076f9
 80075cc:	080076f9 	.word	0x080076f9
 80075d0:	08007635 	.word	0x08007635
 80075d4:	080076f9 	.word	0x080076f9
 80075d8:	080076f9 	.word	0x080076f9
 80075dc:	080076f9 	.word	0x080076f9
 80075e0:	08007677 	.word	0x08007677
 80075e4:	080076f9 	.word	0x080076f9
 80075e8:	080076f9 	.word	0x080076f9
 80075ec:	080076f9 	.word	0x080076f9
 80075f0:	080076b7 	.word	0x080076b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fa16 	bl	8007a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0208 	orr.w	r2, r2, #8
 800760e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0204 	bic.w	r2, r2, #4
 800761e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6999      	ldr	r1, [r3, #24]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	691a      	ldr	r2, [r3, #16]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	619a      	str	r2, [r3, #24]
      break;
 8007632:	e062      	b.n	80076fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fa66 	bl	8007b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699a      	ldr	r2, [r3, #24]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800764e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800765e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6999      	ldr	r1, [r3, #24]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	021a      	lsls	r2, r3, #8
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	619a      	str	r2, [r3, #24]
      break;
 8007674:	e041      	b.n	80076fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fabb 	bl	8007bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0208 	orr.w	r2, r2, #8
 8007690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69da      	ldr	r2, [r3, #28]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0204 	bic.w	r2, r2, #4
 80076a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69d9      	ldr	r1, [r3, #28]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	61da      	str	r2, [r3, #28]
      break;
 80076b4:	e021      	b.n	80076fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fb0f 	bl	8007ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69da      	ldr	r2, [r3, #28]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69da      	ldr	r2, [r3, #28]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69d9      	ldr	r1, [r3, #28]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	021a      	lsls	r2, r3, #8
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	61da      	str	r2, [r3, #28]
      break;
 80076f6:	e000      	b.n	80076fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80076f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_TIM_ConfigClockSource+0x18>
 8007728:	2302      	movs	r3, #2
 800772a:	e0b3      	b.n	8007894 <HAL_TIM_ConfigClockSource+0x180>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800774a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007752:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007764:	d03e      	beq.n	80077e4 <HAL_TIM_ConfigClockSource+0xd0>
 8007766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800776a:	f200 8087 	bhi.w	800787c <HAL_TIM_ConfigClockSource+0x168>
 800776e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007772:	f000 8085 	beq.w	8007880 <HAL_TIM_ConfigClockSource+0x16c>
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777a:	d87f      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x168>
 800777c:	2b70      	cmp	r3, #112	; 0x70
 800777e:	d01a      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0xa2>
 8007780:	2b70      	cmp	r3, #112	; 0x70
 8007782:	d87b      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x168>
 8007784:	2b60      	cmp	r3, #96	; 0x60
 8007786:	d050      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x116>
 8007788:	2b60      	cmp	r3, #96	; 0x60
 800778a:	d877      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x168>
 800778c:	2b50      	cmp	r3, #80	; 0x50
 800778e:	d03c      	beq.n	800780a <HAL_TIM_ConfigClockSource+0xf6>
 8007790:	2b50      	cmp	r3, #80	; 0x50
 8007792:	d873      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x168>
 8007794:	2b40      	cmp	r3, #64	; 0x40
 8007796:	d058      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x136>
 8007798:	2b40      	cmp	r3, #64	; 0x40
 800779a:	d86f      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x168>
 800779c:	2b30      	cmp	r3, #48	; 0x30
 800779e:	d064      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x156>
 80077a0:	2b30      	cmp	r3, #48	; 0x30
 80077a2:	d86b      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x168>
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d060      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x156>
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d867      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x168>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d05c      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x156>
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d05a      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80077b4:	e062      	b.n	800787c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6899      	ldr	r1, [r3, #8]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f000 fb5b 	bl	8007e80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	609a      	str	r2, [r3, #8]
      break;
 80077e2:	e04e      	b.n	8007882 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	6899      	ldr	r1, [r3, #8]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f000 fb44 	bl	8007e80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007806:	609a      	str	r2, [r3, #8]
      break;
 8007808:	e03b      	b.n	8007882 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6859      	ldr	r1, [r3, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	461a      	mov	r2, r3
 8007818:	f000 fab8 	bl	8007d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2150      	movs	r1, #80	; 0x50
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fb11 	bl	8007e4a <TIM_ITRx_SetConfig>
      break;
 8007828:	e02b      	b.n	8007882 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	6859      	ldr	r1, [r3, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	461a      	mov	r2, r3
 8007838:	f000 fad7 	bl	8007dea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2160      	movs	r1, #96	; 0x60
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fb01 	bl	8007e4a <TIM_ITRx_SetConfig>
      break;
 8007848:	e01b      	b.n	8007882 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6859      	ldr	r1, [r3, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	461a      	mov	r2, r3
 8007858:	f000 fa98 	bl	8007d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2140      	movs	r1, #64	; 0x40
 8007862:	4618      	mov	r0, r3
 8007864:	f000 faf1 	bl	8007e4a <TIM_ITRx_SetConfig>
      break;
 8007868:	e00b      	b.n	8007882 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f000 fae8 	bl	8007e4a <TIM_ITRx_SetConfig>
      break;
 800787a:	e002      	b.n	8007882 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800787c:	bf00      	nop
 800787e:	e000      	b.n	8007882 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007880:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a40      	ldr	r2, [pc, #256]	; (8007a00 <TIM_Base_SetConfig+0x114>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d013      	beq.n	800792c <TIM_Base_SetConfig+0x40>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790a:	d00f      	beq.n	800792c <TIM_Base_SetConfig+0x40>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a3d      	ldr	r2, [pc, #244]	; (8007a04 <TIM_Base_SetConfig+0x118>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00b      	beq.n	800792c <TIM_Base_SetConfig+0x40>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a3c      	ldr	r2, [pc, #240]	; (8007a08 <TIM_Base_SetConfig+0x11c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d007      	beq.n	800792c <TIM_Base_SetConfig+0x40>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a3b      	ldr	r2, [pc, #236]	; (8007a0c <TIM_Base_SetConfig+0x120>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d003      	beq.n	800792c <TIM_Base_SetConfig+0x40>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a3a      	ldr	r2, [pc, #232]	; (8007a10 <TIM_Base_SetConfig+0x124>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d108      	bne.n	800793e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a2f      	ldr	r2, [pc, #188]	; (8007a00 <TIM_Base_SetConfig+0x114>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d02b      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794c:	d027      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a2c      	ldr	r2, [pc, #176]	; (8007a04 <TIM_Base_SetConfig+0x118>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d023      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a2b      	ldr	r2, [pc, #172]	; (8007a08 <TIM_Base_SetConfig+0x11c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d01f      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a2a      	ldr	r2, [pc, #168]	; (8007a0c <TIM_Base_SetConfig+0x120>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d01b      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a29      	ldr	r2, [pc, #164]	; (8007a10 <TIM_Base_SetConfig+0x124>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d017      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a28      	ldr	r2, [pc, #160]	; (8007a14 <TIM_Base_SetConfig+0x128>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d013      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <TIM_Base_SetConfig+0x12c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00f      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <TIM_Base_SetConfig+0x130>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00b      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a25      	ldr	r2, [pc, #148]	; (8007a20 <TIM_Base_SetConfig+0x134>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d007      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a24      	ldr	r2, [pc, #144]	; (8007a24 <TIM_Base_SetConfig+0x138>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d003      	beq.n	800799e <TIM_Base_SetConfig+0xb2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a23      	ldr	r2, [pc, #140]	; (8007a28 <TIM_Base_SetConfig+0x13c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d108      	bne.n	80079b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a0a      	ldr	r2, [pc, #40]	; (8007a00 <TIM_Base_SetConfig+0x114>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_Base_SetConfig+0xf8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a0c      	ldr	r2, [pc, #48]	; (8007a10 <TIM_Base_SetConfig+0x124>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d103      	bne.n	80079ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	615a      	str	r2, [r3, #20]
}
 80079f2:	bf00      	nop
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	40010000 	.word	0x40010000
 8007a04:	40000400 	.word	0x40000400
 8007a08:	40000800 	.word	0x40000800
 8007a0c:	40000c00 	.word	0x40000c00
 8007a10:	40010400 	.word	0x40010400
 8007a14:	40014000 	.word	0x40014000
 8007a18:	40014400 	.word	0x40014400
 8007a1c:	40014800 	.word	0x40014800
 8007a20:	40001800 	.word	0x40001800
 8007a24:	40001c00 	.word	0x40001c00
 8007a28:	40002000 	.word	0x40002000

08007a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f023 0201 	bic.w	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0303 	bic.w	r3, r3, #3
 8007a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f023 0302 	bic.w	r3, r3, #2
 8007a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a20      	ldr	r2, [pc, #128]	; (8007b04 <TIM_OC1_SetConfig+0xd8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_OC1_SetConfig+0x64>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a1f      	ldr	r2, [pc, #124]	; (8007b08 <TIM_OC1_SetConfig+0xdc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d10c      	bne.n	8007aaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f023 0308 	bic.w	r3, r3, #8
 8007a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f023 0304 	bic.w	r3, r3, #4
 8007aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a15      	ldr	r2, [pc, #84]	; (8007b04 <TIM_OC1_SetConfig+0xd8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_OC1_SetConfig+0x8e>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a14      	ldr	r2, [pc, #80]	; (8007b08 <TIM_OC1_SetConfig+0xdc>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d111      	bne.n	8007ade <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	621a      	str	r2, [r3, #32]
}
 8007af8:	bf00      	nop
 8007afa:	371c      	adds	r7, #28
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	40010000 	.word	0x40010000
 8007b08:	40010400 	.word	0x40010400

08007b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	f023 0210 	bic.w	r2, r3, #16
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f023 0320 	bic.w	r3, r3, #32
 8007b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a22      	ldr	r2, [pc, #136]	; (8007bf0 <TIM_OC2_SetConfig+0xe4>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d003      	beq.n	8007b74 <TIM_OC2_SetConfig+0x68>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a21      	ldr	r2, [pc, #132]	; (8007bf4 <TIM_OC2_SetConfig+0xe8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d10d      	bne.n	8007b90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a17      	ldr	r2, [pc, #92]	; (8007bf0 <TIM_OC2_SetConfig+0xe4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d003      	beq.n	8007ba0 <TIM_OC2_SetConfig+0x94>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a16      	ldr	r2, [pc, #88]	; (8007bf4 <TIM_OC2_SetConfig+0xe8>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d113      	bne.n	8007bc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	621a      	str	r2, [r3, #32]
}
 8007be2:	bf00      	nop
 8007be4:	371c      	adds	r7, #28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	40010000 	.word	0x40010000
 8007bf4:	40010400 	.word	0x40010400

08007bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a21      	ldr	r2, [pc, #132]	; (8007cd8 <TIM_OC3_SetConfig+0xe0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d003      	beq.n	8007c5e <TIM_OC3_SetConfig+0x66>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a20      	ldr	r2, [pc, #128]	; (8007cdc <TIM_OC3_SetConfig+0xe4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d10d      	bne.n	8007c7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	021b      	lsls	r3, r3, #8
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a16      	ldr	r2, [pc, #88]	; (8007cd8 <TIM_OC3_SetConfig+0xe0>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d003      	beq.n	8007c8a <TIM_OC3_SetConfig+0x92>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a15      	ldr	r2, [pc, #84]	; (8007cdc <TIM_OC3_SetConfig+0xe4>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d113      	bne.n	8007cb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	621a      	str	r2, [r3, #32]
}
 8007ccc:	bf00      	nop
 8007cce:	371c      	adds	r7, #28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	40010000 	.word	0x40010000
 8007cdc:	40010400 	.word	0x40010400

08007ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	031b      	lsls	r3, r3, #12
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a12      	ldr	r2, [pc, #72]	; (8007d84 <TIM_OC4_SetConfig+0xa4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d003      	beq.n	8007d48 <TIM_OC4_SetConfig+0x68>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a11      	ldr	r2, [pc, #68]	; (8007d88 <TIM_OC4_SetConfig+0xa8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d109      	bne.n	8007d5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	019b      	lsls	r3, r3, #6
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	621a      	str	r2, [r3, #32]
}
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	40010000 	.word	0x40010000
 8007d88:	40010400 	.word	0x40010400

08007d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	f023 0201 	bic.w	r2, r3, #1
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f023 030a 	bic.w	r3, r3, #10
 8007dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	bf00      	nop
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b087      	sub	sp, #28
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	f023 0210 	bic.w	r2, r3, #16
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	031b      	lsls	r3, r3, #12
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	621a      	str	r2, [r3, #32]
}
 8007e3e:	bf00      	nop
 8007e40:	371c      	adds	r7, #28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	f043 0307 	orr.w	r3, r3, #7
 8007e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	609a      	str	r2, [r3, #8]
}
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	021a      	lsls	r2, r3, #8
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	609a      	str	r2, [r3, #8]
}
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f003 031f 	and.w	r3, r3, #31
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6a1a      	ldr	r2, [r3, #32]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	401a      	ands	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a1a      	ldr	r2, [r3, #32]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f003 031f 	and.w	r3, r3, #31
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
	...

08007f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d101      	bne.n	8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f20:	2302      	movs	r3, #2
 8007f22:	e05a      	b.n	8007fda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a21      	ldr	r2, [pc, #132]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d022      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f70:	d01d      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1d      	ldr	r2, [pc, #116]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d018      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1b      	ldr	r2, [pc, #108]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a1a      	ldr	r2, [pc, #104]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00e      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d009      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a17      	ldr	r2, [pc, #92]	; (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d004      	beq.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a15      	ldr	r2, [pc, #84]	; (8008000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d10c      	bne.n	8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40010000 	.word	0x40010000
 8007fec:	40000400 	.word	0x40000400
 8007ff0:	40000800 	.word	0x40000800
 8007ff4:	40000c00 	.word	0x40000c00
 8007ff8:	40010400 	.word	0x40010400
 8007ffc:	40014000 	.word	0x40014000
 8008000:	40001800 	.word	0x40001800

08008004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e03f      	b.n	80080be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7fa f838 	bl	80020c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2224      	movs	r2, #36	; 0x24
 800805c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800806e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f90b 	bl	800828c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	695a      	ldr	r2, [r3, #20]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b088      	sub	sp, #32
 80080ca:	af02      	add	r7, sp, #8
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	603b      	str	r3, [r7, #0]
 80080d2:	4613      	mov	r3, r2
 80080d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	f040 8083 	bne.w	80081ee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <HAL_UART_Transmit+0x2e>
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e07b      	b.n	80081f0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_UART_Transmit+0x40>
 8008102:	2302      	movs	r3, #2
 8008104:	e074      	b.n	80081f0 <HAL_UART_Transmit+0x12a>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2221      	movs	r2, #33	; 0x21
 8008118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800811c:	f7fa fe98 	bl	8002e50 <HAL_GetTick>
 8008120:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008136:	e042      	b.n	80081be <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814e:	d122      	bne.n	8008196 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2200      	movs	r2, #0
 8008158:	2180      	movs	r1, #128	; 0x80
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f84c 	bl	80081f8 <UART_WaitOnFlagUntilTimeout>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e042      	b.n	80081f0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800817c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d103      	bne.n	800818e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	3302      	adds	r3, #2
 800818a:	60bb      	str	r3, [r7, #8]
 800818c:	e017      	b.n	80081be <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	3301      	adds	r3, #1
 8008192:	60bb      	str	r3, [r7, #8]
 8008194:	e013      	b.n	80081be <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2200      	movs	r2, #0
 800819e:	2180      	movs	r1, #128	; 0x80
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 f829 	bl	80081f8 <UART_WaitOnFlagUntilTimeout>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e01f      	b.n	80081f0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	60ba      	str	r2, [r7, #8]
 80081b6:	781a      	ldrb	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1b7      	bne.n	8008138 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2140      	movs	r1, #64	; 0x40
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 f810 	bl	80081f8 <UART_WaitOnFlagUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e006      	b.n	80081f0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80081ee:	2302      	movs	r3, #2
  }
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	4613      	mov	r3, r2
 8008206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008208:	e02c      	b.n	8008264 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008210:	d028      	beq.n	8008264 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d007      	beq.n	8008228 <UART_WaitOnFlagUntilTimeout+0x30>
 8008218:	f7fa fe1a 	bl	8002e50 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	429a      	cmp	r2, r3
 8008226:	d21d      	bcs.n	8008264 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008236:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0201 	bic.w	r2, r2, #1
 8008246:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2220      	movs	r2, #32
 800824c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2220      	movs	r2, #32
 8008254:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e00f      	b.n	8008284 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	4013      	ands	r3, r2
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	429a      	cmp	r2, r3
 8008272:	bf0c      	ite	eq
 8008274:	2301      	moveq	r3, #1
 8008276:	2300      	movne	r3, #0
 8008278:	b2db      	uxtb	r3, r3
 800827a:	461a      	mov	r2, r3
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	429a      	cmp	r2, r3
 8008280:	d0c3      	beq.n	800820a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	b0bd      	sub	sp, #244	; 0xf4
 8008292:	af00      	add	r7, sp, #0
 8008294:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a8:	68d9      	ldr	r1, [r3, #12]
 80082aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	ea40 0301 	orr.w	r3, r0, r1
 80082b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	431a      	orrs	r2, r3
 80082cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80082d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082e4:	f021 010c 	bic.w	r1, r1, #12
 80082e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80082f2:	430b      	orrs	r3, r1
 80082f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008306:	6999      	ldr	r1, [r3, #24]
 8008308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	ea40 0301 	orr.w	r3, r0, r1
 8008312:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800831e:	f040 81a5 	bne.w	800866c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	4bcd      	ldr	r3, [pc, #820]	; (8008660 <UART_SetConfig+0x3d4>)
 800832a:	429a      	cmp	r2, r3
 800832c:	d006      	beq.n	800833c <UART_SetConfig+0xb0>
 800832e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4bcb      	ldr	r3, [pc, #812]	; (8008664 <UART_SetConfig+0x3d8>)
 8008336:	429a      	cmp	r2, r3
 8008338:	f040 80cb 	bne.w	80084d2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800833c:	f7fe fca4 	bl	8006c88 <HAL_RCC_GetPCLK2Freq>
 8008340:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008344:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008348:	461c      	mov	r4, r3
 800834a:	f04f 0500 	mov.w	r5, #0
 800834e:	4622      	mov	r2, r4
 8008350:	462b      	mov	r3, r5
 8008352:	1891      	adds	r1, r2, r2
 8008354:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008358:	415b      	adcs	r3, r3
 800835a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800835e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008362:	1912      	adds	r2, r2, r4
 8008364:	eb45 0303 	adc.w	r3, r5, r3
 8008368:	f04f 0000 	mov.w	r0, #0
 800836c:	f04f 0100 	mov.w	r1, #0
 8008370:	00d9      	lsls	r1, r3, #3
 8008372:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008376:	00d0      	lsls	r0, r2, #3
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	1911      	adds	r1, r2, r4
 800837e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008382:	416b      	adcs	r3, r5
 8008384:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	461a      	mov	r2, r3
 8008390:	f04f 0300 	mov.w	r3, #0
 8008394:	1891      	adds	r1, r2, r2
 8008396:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800839a:	415b      	adcs	r3, r3
 800839c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083a0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80083a4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80083a8:	f7f8 fb68 	bl	8000a7c <__aeabi_uldivmod>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4bad      	ldr	r3, [pc, #692]	; (8008668 <UART_SetConfig+0x3dc>)
 80083b2:	fba3 2302 	umull	r2, r3, r3, r2
 80083b6:	095b      	lsrs	r3, r3, #5
 80083b8:	011e      	lsls	r6, r3, #4
 80083ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083be:	461c      	mov	r4, r3
 80083c0:	f04f 0500 	mov.w	r5, #0
 80083c4:	4622      	mov	r2, r4
 80083c6:	462b      	mov	r3, r5
 80083c8:	1891      	adds	r1, r2, r2
 80083ca:	67b9      	str	r1, [r7, #120]	; 0x78
 80083cc:	415b      	adcs	r3, r3
 80083ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083d0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80083d4:	1912      	adds	r2, r2, r4
 80083d6:	eb45 0303 	adc.w	r3, r5, r3
 80083da:	f04f 0000 	mov.w	r0, #0
 80083de:	f04f 0100 	mov.w	r1, #0
 80083e2:	00d9      	lsls	r1, r3, #3
 80083e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083e8:	00d0      	lsls	r0, r2, #3
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	1911      	adds	r1, r2, r4
 80083f0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80083f4:	416b      	adcs	r3, r5
 80083f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80083fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	461a      	mov	r2, r3
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	1891      	adds	r1, r2, r2
 8008408:	6739      	str	r1, [r7, #112]	; 0x70
 800840a:	415b      	adcs	r3, r3
 800840c:	677b      	str	r3, [r7, #116]	; 0x74
 800840e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008412:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008416:	f7f8 fb31 	bl	8000a7c <__aeabi_uldivmod>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4b92      	ldr	r3, [pc, #584]	; (8008668 <UART_SetConfig+0x3dc>)
 8008420:	fba3 1302 	umull	r1, r3, r3, r2
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	2164      	movs	r1, #100	; 0x64
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	00db      	lsls	r3, r3, #3
 8008430:	3332      	adds	r3, #50	; 0x32
 8008432:	4a8d      	ldr	r2, [pc, #564]	; (8008668 <UART_SetConfig+0x3dc>)
 8008434:	fba2 2303 	umull	r2, r3, r2, r3
 8008438:	095b      	lsrs	r3, r3, #5
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008440:	441e      	add	r6, r3
 8008442:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008446:	4618      	mov	r0, r3
 8008448:	f04f 0100 	mov.w	r1, #0
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	1894      	adds	r4, r2, r2
 8008452:	66bc      	str	r4, [r7, #104]	; 0x68
 8008454:	415b      	adcs	r3, r3
 8008456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008458:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800845c:	1812      	adds	r2, r2, r0
 800845e:	eb41 0303 	adc.w	r3, r1, r3
 8008462:	f04f 0400 	mov.w	r4, #0
 8008466:	f04f 0500 	mov.w	r5, #0
 800846a:	00dd      	lsls	r5, r3, #3
 800846c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008470:	00d4      	lsls	r4, r2, #3
 8008472:	4622      	mov	r2, r4
 8008474:	462b      	mov	r3, r5
 8008476:	1814      	adds	r4, r2, r0
 8008478:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800847c:	414b      	adcs	r3, r1
 800847e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	461a      	mov	r2, r3
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	1891      	adds	r1, r2, r2
 8008490:	6639      	str	r1, [r7, #96]	; 0x60
 8008492:	415b      	adcs	r3, r3
 8008494:	667b      	str	r3, [r7, #100]	; 0x64
 8008496:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800849a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800849e:	f7f8 faed 	bl	8000a7c <__aeabi_uldivmod>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4b70      	ldr	r3, [pc, #448]	; (8008668 <UART_SetConfig+0x3dc>)
 80084a8:	fba3 1302 	umull	r1, r3, r3, r2
 80084ac:	095b      	lsrs	r3, r3, #5
 80084ae:	2164      	movs	r1, #100	; 0x64
 80084b0:	fb01 f303 	mul.w	r3, r1, r3
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	3332      	adds	r3, #50	; 0x32
 80084ba:	4a6b      	ldr	r2, [pc, #428]	; (8008668 <UART_SetConfig+0x3dc>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	f003 0207 	and.w	r2, r3, #7
 80084c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4432      	add	r2, r6
 80084ce:	609a      	str	r2, [r3, #8]
 80084d0:	e26d      	b.n	80089ae <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084d2:	f7fe fbc5 	bl	8006c60 <HAL_RCC_GetPCLK1Freq>
 80084d6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084de:	461c      	mov	r4, r3
 80084e0:	f04f 0500 	mov.w	r5, #0
 80084e4:	4622      	mov	r2, r4
 80084e6:	462b      	mov	r3, r5
 80084e8:	1891      	adds	r1, r2, r2
 80084ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80084ec:	415b      	adcs	r3, r3
 80084ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80084f4:	1912      	adds	r2, r2, r4
 80084f6:	eb45 0303 	adc.w	r3, r5, r3
 80084fa:	f04f 0000 	mov.w	r0, #0
 80084fe:	f04f 0100 	mov.w	r1, #0
 8008502:	00d9      	lsls	r1, r3, #3
 8008504:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008508:	00d0      	lsls	r0, r2, #3
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	1911      	adds	r1, r2, r4
 8008510:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008514:	416b      	adcs	r3, r5
 8008516:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800851a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	461a      	mov	r2, r3
 8008522:	f04f 0300 	mov.w	r3, #0
 8008526:	1891      	adds	r1, r2, r2
 8008528:	6539      	str	r1, [r7, #80]	; 0x50
 800852a:	415b      	adcs	r3, r3
 800852c:	657b      	str	r3, [r7, #84]	; 0x54
 800852e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008532:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008536:	f7f8 faa1 	bl	8000a7c <__aeabi_uldivmod>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4b4a      	ldr	r3, [pc, #296]	; (8008668 <UART_SetConfig+0x3dc>)
 8008540:	fba3 2302 	umull	r2, r3, r3, r2
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	011e      	lsls	r6, r3, #4
 8008548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800854c:	461c      	mov	r4, r3
 800854e:	f04f 0500 	mov.w	r5, #0
 8008552:	4622      	mov	r2, r4
 8008554:	462b      	mov	r3, r5
 8008556:	1891      	adds	r1, r2, r2
 8008558:	64b9      	str	r1, [r7, #72]	; 0x48
 800855a:	415b      	adcs	r3, r3
 800855c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800855e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008562:	1912      	adds	r2, r2, r4
 8008564:	eb45 0303 	adc.w	r3, r5, r3
 8008568:	f04f 0000 	mov.w	r0, #0
 800856c:	f04f 0100 	mov.w	r1, #0
 8008570:	00d9      	lsls	r1, r3, #3
 8008572:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008576:	00d0      	lsls	r0, r2, #3
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	1911      	adds	r1, r2, r4
 800857e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008582:	416b      	adcs	r3, r5
 8008584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	461a      	mov	r2, r3
 8008590:	f04f 0300 	mov.w	r3, #0
 8008594:	1891      	adds	r1, r2, r2
 8008596:	6439      	str	r1, [r7, #64]	; 0x40
 8008598:	415b      	adcs	r3, r3
 800859a:	647b      	str	r3, [r7, #68]	; 0x44
 800859c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085a0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80085a4:	f7f8 fa6a 	bl	8000a7c <__aeabi_uldivmod>
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	4b2e      	ldr	r3, [pc, #184]	; (8008668 <UART_SetConfig+0x3dc>)
 80085ae:	fba3 1302 	umull	r1, r3, r3, r2
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	2164      	movs	r1, #100	; 0x64
 80085b6:	fb01 f303 	mul.w	r3, r1, r3
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	3332      	adds	r3, #50	; 0x32
 80085c0:	4a29      	ldr	r2, [pc, #164]	; (8008668 <UART_SetConfig+0x3dc>)
 80085c2:	fba2 2303 	umull	r2, r3, r2, r3
 80085c6:	095b      	lsrs	r3, r3, #5
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085ce:	441e      	add	r6, r3
 80085d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085d4:	4618      	mov	r0, r3
 80085d6:	f04f 0100 	mov.w	r1, #0
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	1894      	adds	r4, r2, r2
 80085e0:	63bc      	str	r4, [r7, #56]	; 0x38
 80085e2:	415b      	adcs	r3, r3
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085ea:	1812      	adds	r2, r2, r0
 80085ec:	eb41 0303 	adc.w	r3, r1, r3
 80085f0:	f04f 0400 	mov.w	r4, #0
 80085f4:	f04f 0500 	mov.w	r5, #0
 80085f8:	00dd      	lsls	r5, r3, #3
 80085fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085fe:	00d4      	lsls	r4, r2, #3
 8008600:	4622      	mov	r2, r4
 8008602:	462b      	mov	r3, r5
 8008604:	1814      	adds	r4, r2, r0
 8008606:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800860a:	414b      	adcs	r3, r1
 800860c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	461a      	mov	r2, r3
 8008618:	f04f 0300 	mov.w	r3, #0
 800861c:	1891      	adds	r1, r2, r2
 800861e:	6339      	str	r1, [r7, #48]	; 0x30
 8008620:	415b      	adcs	r3, r3
 8008622:	637b      	str	r3, [r7, #52]	; 0x34
 8008624:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008628:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800862c:	f7f8 fa26 	bl	8000a7c <__aeabi_uldivmod>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <UART_SetConfig+0x3dc>)
 8008636:	fba3 1302 	umull	r1, r3, r3, r2
 800863a:	095b      	lsrs	r3, r3, #5
 800863c:	2164      	movs	r1, #100	; 0x64
 800863e:	fb01 f303 	mul.w	r3, r1, r3
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	3332      	adds	r3, #50	; 0x32
 8008648:	4a07      	ldr	r2, [pc, #28]	; (8008668 <UART_SetConfig+0x3dc>)
 800864a:	fba2 2303 	umull	r2, r3, r2, r3
 800864e:	095b      	lsrs	r3, r3, #5
 8008650:	f003 0207 	and.w	r2, r3, #7
 8008654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4432      	add	r2, r6
 800865c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800865e:	e1a6      	b.n	80089ae <UART_SetConfig+0x722>
 8008660:	40011000 	.word	0x40011000
 8008664:	40011400 	.word	0x40011400
 8008668:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800866c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	4bd1      	ldr	r3, [pc, #836]	; (80089b8 <UART_SetConfig+0x72c>)
 8008674:	429a      	cmp	r2, r3
 8008676:	d006      	beq.n	8008686 <UART_SetConfig+0x3fa>
 8008678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4bcf      	ldr	r3, [pc, #828]	; (80089bc <UART_SetConfig+0x730>)
 8008680:	429a      	cmp	r2, r3
 8008682:	f040 80ca 	bne.w	800881a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008686:	f7fe faff 	bl	8006c88 <HAL_RCC_GetPCLK2Freq>
 800868a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800868e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008692:	461c      	mov	r4, r3
 8008694:	f04f 0500 	mov.w	r5, #0
 8008698:	4622      	mov	r2, r4
 800869a:	462b      	mov	r3, r5
 800869c:	1891      	adds	r1, r2, r2
 800869e:	62b9      	str	r1, [r7, #40]	; 0x28
 80086a0:	415b      	adcs	r3, r3
 80086a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086a8:	1912      	adds	r2, r2, r4
 80086aa:	eb45 0303 	adc.w	r3, r5, r3
 80086ae:	f04f 0000 	mov.w	r0, #0
 80086b2:	f04f 0100 	mov.w	r1, #0
 80086b6:	00d9      	lsls	r1, r3, #3
 80086b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086bc:	00d0      	lsls	r0, r2, #3
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	eb12 0a04 	adds.w	sl, r2, r4
 80086c6:	eb43 0b05 	adc.w	fp, r3, r5
 80086ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f04f 0100 	mov.w	r1, #0
 80086d6:	f04f 0200 	mov.w	r2, #0
 80086da:	f04f 0300 	mov.w	r3, #0
 80086de:	008b      	lsls	r3, r1, #2
 80086e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80086e4:	0082      	lsls	r2, r0, #2
 80086e6:	4650      	mov	r0, sl
 80086e8:	4659      	mov	r1, fp
 80086ea:	f7f8 f9c7 	bl	8000a7c <__aeabi_uldivmod>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4bb3      	ldr	r3, [pc, #716]	; (80089c0 <UART_SetConfig+0x734>)
 80086f4:	fba3 2302 	umull	r2, r3, r3, r2
 80086f8:	095b      	lsrs	r3, r3, #5
 80086fa:	011e      	lsls	r6, r3, #4
 80086fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008700:	4618      	mov	r0, r3
 8008702:	f04f 0100 	mov.w	r1, #0
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	1894      	adds	r4, r2, r2
 800870c:	623c      	str	r4, [r7, #32]
 800870e:	415b      	adcs	r3, r3
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
 8008712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008716:	1812      	adds	r2, r2, r0
 8008718:	eb41 0303 	adc.w	r3, r1, r3
 800871c:	f04f 0400 	mov.w	r4, #0
 8008720:	f04f 0500 	mov.w	r5, #0
 8008724:	00dd      	lsls	r5, r3, #3
 8008726:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800872a:	00d4      	lsls	r4, r2, #3
 800872c:	4622      	mov	r2, r4
 800872e:	462b      	mov	r3, r5
 8008730:	1814      	adds	r4, r2, r0
 8008732:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008736:	414b      	adcs	r3, r1
 8008738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800873c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	4618      	mov	r0, r3
 8008744:	f04f 0100 	mov.w	r1, #0
 8008748:	f04f 0200 	mov.w	r2, #0
 800874c:	f04f 0300 	mov.w	r3, #0
 8008750:	008b      	lsls	r3, r1, #2
 8008752:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008756:	0082      	lsls	r2, r0, #2
 8008758:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800875c:	f7f8 f98e 	bl	8000a7c <__aeabi_uldivmod>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4b96      	ldr	r3, [pc, #600]	; (80089c0 <UART_SetConfig+0x734>)
 8008766:	fba3 1302 	umull	r1, r3, r3, r2
 800876a:	095b      	lsrs	r3, r3, #5
 800876c:	2164      	movs	r1, #100	; 0x64
 800876e:	fb01 f303 	mul.w	r3, r1, r3
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	011b      	lsls	r3, r3, #4
 8008776:	3332      	adds	r3, #50	; 0x32
 8008778:	4a91      	ldr	r2, [pc, #580]	; (80089c0 <UART_SetConfig+0x734>)
 800877a:	fba2 2303 	umull	r2, r3, r2, r3
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008784:	441e      	add	r6, r3
 8008786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800878a:	4618      	mov	r0, r3
 800878c:	f04f 0100 	mov.w	r1, #0
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	1894      	adds	r4, r2, r2
 8008796:	61bc      	str	r4, [r7, #24]
 8008798:	415b      	adcs	r3, r3
 800879a:	61fb      	str	r3, [r7, #28]
 800879c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087a0:	1812      	adds	r2, r2, r0
 80087a2:	eb41 0303 	adc.w	r3, r1, r3
 80087a6:	f04f 0400 	mov.w	r4, #0
 80087aa:	f04f 0500 	mov.w	r5, #0
 80087ae:	00dd      	lsls	r5, r3, #3
 80087b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80087b4:	00d4      	lsls	r4, r2, #3
 80087b6:	4622      	mov	r2, r4
 80087b8:	462b      	mov	r3, r5
 80087ba:	1814      	adds	r4, r2, r0
 80087bc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80087c0:	414b      	adcs	r3, r1
 80087c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80087c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f04f 0100 	mov.w	r1, #0
 80087d2:	f04f 0200 	mov.w	r2, #0
 80087d6:	f04f 0300 	mov.w	r3, #0
 80087da:	008b      	lsls	r3, r1, #2
 80087dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80087e0:	0082      	lsls	r2, r0, #2
 80087e2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80087e6:	f7f8 f949 	bl	8000a7c <__aeabi_uldivmod>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4b74      	ldr	r3, [pc, #464]	; (80089c0 <UART_SetConfig+0x734>)
 80087f0:	fba3 1302 	umull	r1, r3, r3, r2
 80087f4:	095b      	lsrs	r3, r3, #5
 80087f6:	2164      	movs	r1, #100	; 0x64
 80087f8:	fb01 f303 	mul.w	r3, r1, r3
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	3332      	adds	r3, #50	; 0x32
 8008802:	4a6f      	ldr	r2, [pc, #444]	; (80089c0 <UART_SetConfig+0x734>)
 8008804:	fba2 2303 	umull	r2, r3, r2, r3
 8008808:	095b      	lsrs	r3, r3, #5
 800880a:	f003 020f 	and.w	r2, r3, #15
 800880e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4432      	add	r2, r6
 8008816:	609a      	str	r2, [r3, #8]
 8008818:	e0c9      	b.n	80089ae <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800881a:	f7fe fa21 	bl	8006c60 <HAL_RCC_GetPCLK1Freq>
 800881e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008822:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008826:	461c      	mov	r4, r3
 8008828:	f04f 0500 	mov.w	r5, #0
 800882c:	4622      	mov	r2, r4
 800882e:	462b      	mov	r3, r5
 8008830:	1891      	adds	r1, r2, r2
 8008832:	6139      	str	r1, [r7, #16]
 8008834:	415b      	adcs	r3, r3
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800883c:	1912      	adds	r2, r2, r4
 800883e:	eb45 0303 	adc.w	r3, r5, r3
 8008842:	f04f 0000 	mov.w	r0, #0
 8008846:	f04f 0100 	mov.w	r1, #0
 800884a:	00d9      	lsls	r1, r3, #3
 800884c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008850:	00d0      	lsls	r0, r2, #3
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	eb12 0804 	adds.w	r8, r2, r4
 800885a:	eb43 0905 	adc.w	r9, r3, r5
 800885e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4618      	mov	r0, r3
 8008866:	f04f 0100 	mov.w	r1, #0
 800886a:	f04f 0200 	mov.w	r2, #0
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	008b      	lsls	r3, r1, #2
 8008874:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008878:	0082      	lsls	r2, r0, #2
 800887a:	4640      	mov	r0, r8
 800887c:	4649      	mov	r1, r9
 800887e:	f7f8 f8fd 	bl	8000a7c <__aeabi_uldivmod>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4b4e      	ldr	r3, [pc, #312]	; (80089c0 <UART_SetConfig+0x734>)
 8008888:	fba3 2302 	umull	r2, r3, r3, r2
 800888c:	095b      	lsrs	r3, r3, #5
 800888e:	011e      	lsls	r6, r3, #4
 8008890:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008894:	4618      	mov	r0, r3
 8008896:	f04f 0100 	mov.w	r1, #0
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	1894      	adds	r4, r2, r2
 80088a0:	60bc      	str	r4, [r7, #8]
 80088a2:	415b      	adcs	r3, r3
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088aa:	1812      	adds	r2, r2, r0
 80088ac:	eb41 0303 	adc.w	r3, r1, r3
 80088b0:	f04f 0400 	mov.w	r4, #0
 80088b4:	f04f 0500 	mov.w	r5, #0
 80088b8:	00dd      	lsls	r5, r3, #3
 80088ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80088be:	00d4      	lsls	r4, r2, #3
 80088c0:	4622      	mov	r2, r4
 80088c2:	462b      	mov	r3, r5
 80088c4:	1814      	adds	r4, r2, r0
 80088c6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80088ca:	414b      	adcs	r3, r1
 80088cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f04f 0100 	mov.w	r1, #0
 80088dc:	f04f 0200 	mov.w	r2, #0
 80088e0:	f04f 0300 	mov.w	r3, #0
 80088e4:	008b      	lsls	r3, r1, #2
 80088e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80088ea:	0082      	lsls	r2, r0, #2
 80088ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80088f0:	f7f8 f8c4 	bl	8000a7c <__aeabi_uldivmod>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4b31      	ldr	r3, [pc, #196]	; (80089c0 <UART_SetConfig+0x734>)
 80088fa:	fba3 1302 	umull	r1, r3, r3, r2
 80088fe:	095b      	lsrs	r3, r3, #5
 8008900:	2164      	movs	r1, #100	; 0x64
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	3332      	adds	r3, #50	; 0x32
 800890c:	4a2c      	ldr	r2, [pc, #176]	; (80089c0 <UART_SetConfig+0x734>)
 800890e:	fba2 2303 	umull	r2, r3, r2, r3
 8008912:	095b      	lsrs	r3, r3, #5
 8008914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008918:	441e      	add	r6, r3
 800891a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800891e:	4618      	mov	r0, r3
 8008920:	f04f 0100 	mov.w	r1, #0
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	1894      	adds	r4, r2, r2
 800892a:	603c      	str	r4, [r7, #0]
 800892c:	415b      	adcs	r3, r3
 800892e:	607b      	str	r3, [r7, #4]
 8008930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008934:	1812      	adds	r2, r2, r0
 8008936:	eb41 0303 	adc.w	r3, r1, r3
 800893a:	f04f 0400 	mov.w	r4, #0
 800893e:	f04f 0500 	mov.w	r5, #0
 8008942:	00dd      	lsls	r5, r3, #3
 8008944:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008948:	00d4      	lsls	r4, r2, #3
 800894a:	4622      	mov	r2, r4
 800894c:	462b      	mov	r3, r5
 800894e:	1814      	adds	r4, r2, r0
 8008950:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008954:	414b      	adcs	r3, r1
 8008956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800895a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4618      	mov	r0, r3
 8008962:	f04f 0100 	mov.w	r1, #0
 8008966:	f04f 0200 	mov.w	r2, #0
 800896a:	f04f 0300 	mov.w	r3, #0
 800896e:	008b      	lsls	r3, r1, #2
 8008970:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008974:	0082      	lsls	r2, r0, #2
 8008976:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800897a:	f7f8 f87f 	bl	8000a7c <__aeabi_uldivmod>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4b0f      	ldr	r3, [pc, #60]	; (80089c0 <UART_SetConfig+0x734>)
 8008984:	fba3 1302 	umull	r1, r3, r3, r2
 8008988:	095b      	lsrs	r3, r3, #5
 800898a:	2164      	movs	r1, #100	; 0x64
 800898c:	fb01 f303 	mul.w	r3, r1, r3
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	3332      	adds	r3, #50	; 0x32
 8008996:	4a0a      	ldr	r2, [pc, #40]	; (80089c0 <UART_SetConfig+0x734>)
 8008998:	fba2 2303 	umull	r2, r3, r2, r3
 800899c:	095b      	lsrs	r3, r3, #5
 800899e:	f003 020f 	and.w	r2, r3, #15
 80089a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4432      	add	r2, r6
 80089aa:	609a      	str	r2, [r3, #8]
}
 80089ac:	e7ff      	b.n	80089ae <UART_SetConfig+0x722>
 80089ae:	bf00      	nop
 80089b0:	37f4      	adds	r7, #244	; 0xf4
 80089b2:	46bd      	mov	sp, r7
 80089b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b8:	40011000 	.word	0x40011000
 80089bc:	40011400 	.word	0x40011400
 80089c0:	51eb851f 	.word	0x51eb851f

080089c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d029      	beq.n	8008a32 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80089ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089ee:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089f8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80089fe:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008a04:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008a0a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008a10:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008a16:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008a1c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008a22:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e034      	b.n	8008a9c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a3e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a48:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008a4e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008a62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a66:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a70:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008a76:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008a7c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008a82:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008a88:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b087      	sub	sp, #28
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008aba:	2300      	movs	r3, #0
 8008abc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d02e      	beq.n	8008b22 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008ad0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008ae0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008aea:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008af4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008afe:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008b08:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008b12:	4313      	orrs	r3, r2
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	609a      	str	r2, [r3, #8]
 8008b20:	e03b      	b.n	8008b9a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b32:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008b44:	4313      	orrs	r3, r2
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b58:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b68:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008b72:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008b7c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b86:	4313      	orrs	r3, r2
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ba8:	b084      	sub	sp, #16
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	f107 001c 	add.w	r0, r7, #28
 8008bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d122      	bne.n	8008c06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d105      	bne.n	8008bfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f94a 	bl	8008e94 <USB_CoreReset>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73fb      	strb	r3, [r7, #15]
 8008c04:	e01a      	b.n	8008c3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f93e 	bl	8008e94 <USB_CoreReset>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d106      	bne.n	8008c30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8008c2e:	e005      	b.n	8008c3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d10b      	bne.n	8008c5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f043 0206 	orr.w	r2, r3, #6
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f043 0220 	orr.w	r2, r3, #32
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c66:	b004      	add	sp, #16
 8008c68:	4770      	bx	lr

08008c6a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f043 0201 	orr.w	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f023 0201 	bic.w	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d106      	bne.n	8008cda <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	60da      	str	r2, [r3, #12]
 8008cd8:	e00b      	b.n	8008cf2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d106      	bne.n	8008cee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	60da      	str	r2, [r3, #12]
 8008cec:	e001      	b.n	8008cf2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e003      	b.n	8008cfa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008cf2:	2032      	movs	r0, #50	; 0x32
 8008cf4:	f7fa f8b8 	bl	8002e68 <HAL_Delay>

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	019b      	lsls	r3, r3, #6
 8008d16:	f043 0220 	orr.w	r2, r3, #32
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3301      	adds	r3, #1
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <USB_FlushTxFifo+0x48>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d901      	bls.n	8008d30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e006      	b.n	8008d3e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	f003 0320 	and.w	r3, r3, #32
 8008d38:	2b20      	cmp	r3, #32
 8008d3a:	d0f0      	beq.n	8008d1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	00030d40 	.word	0x00030d40

08008d50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3301      	adds	r3, #1
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <USB_FlushRxFifo+0x40>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d901      	bls.n	8008d74 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e006      	b.n	8008d82 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f003 0310 	and.w	r3, r3, #16
 8008d7c:	2b10      	cmp	r3, #16
 8008d7e:	d0f0      	beq.n	8008d62 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	00030d40 	.word	0x00030d40

08008d94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b089      	sub	sp, #36	; 0x24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	4611      	mov	r1, r2
 8008da0:	461a      	mov	r2, r3
 8008da2:	460b      	mov	r3, r1
 8008da4:	71fb      	strb	r3, [r7, #7]
 8008da6:	4613      	mov	r3, r2
 8008da8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008db2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d11a      	bne.n	8008df0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008dba:	88bb      	ldrh	r3, [r7, #4]
 8008dbc:	3303      	adds	r3, #3
 8008dbe:	089b      	lsrs	r3, r3, #2
 8008dc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
 8008dc6:	e00f      	b.n	8008de8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	031a      	lsls	r2, r3, #12
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	3304      	adds	r3, #4
 8008de0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	3301      	adds	r3, #1
 8008de6:	61bb      	str	r3, [r7, #24]
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d3eb      	bcc.n	8008dc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3724      	adds	r7, #36	; 0x24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b089      	sub	sp, #36	; 0x24
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008e14:	88fb      	ldrh	r3, [r7, #6]
 8008e16:	3303      	adds	r3, #3
 8008e18:	089b      	lsrs	r3, r3, #2
 8008e1a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61bb      	str	r3, [r7, #24]
 8008e20:	e00b      	b.n	8008e3a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	3304      	adds	r3, #4
 8008e32:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	3301      	adds	r3, #1
 8008e38:	61bb      	str	r3, [r7, #24]
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d3ef      	bcc.n	8008e22 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008e42:	69fb      	ldr	r3, [r7, #28]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3724      	adds	r7, #36	; 0x24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4013      	ands	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008e68:	68fb      	ldr	r3, [r7, #12]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	f003 0301 	and.w	r3, r3, #1
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
	...

08008e94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4a13      	ldr	r2, [pc, #76]	; (8008ef8 <USB_CoreReset+0x64>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d901      	bls.n	8008eb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e01b      	b.n	8008eea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	daf2      	bge.n	8008ea0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	f043 0201 	orr.w	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4a09      	ldr	r2, [pc, #36]	; (8008ef8 <USB_CoreReset+0x64>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d901      	bls.n	8008edc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e006      	b.n	8008eea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d0f0      	beq.n	8008eca <USB_CoreReset+0x36>

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	00030d40 	.word	0x00030d40

08008efc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008efc:	b084      	sub	sp, #16
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	f107 001c 	add.w	r0, r7, #28
 8008f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f18:	461a      	mov	r2, r3
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d018      	beq.n	8008f80 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d10a      	bne.n	8008f6a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f62:	f043 0304 	orr.w	r3, r3, #4
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	e014      	b.n	8008f94 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f78:	f023 0304 	bic.w	r3, r3, #4
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	e009      	b.n	8008f94 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f8e:	f023 0304 	bic.w	r3, r3, #4
 8008f92:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008f94:	2110      	movs	r1, #16
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff feb4 	bl	8008d04 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff fed7 	bl	8008d50 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	e015      	b.n	8008fd4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc8:	461a      	mov	r2, r3
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d3e5      	bcc.n	8008fa8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008fdc:	2101      	movs	r1, #1
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f8ac 	bl	800913c <USB_DriveVbus>

  HAL_Delay(200U);
 8008fe4:	20c8      	movs	r0, #200	; 0xc8
 8008fe6:	f7f9 ff3f 	bl	8002e68 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800900a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a14      	ldr	r2, [pc, #80]	; (8009060 <USB_HostInit+0x164>)
 8009010:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a13      	ldr	r2, [pc, #76]	; (8009064 <USB_HostInit+0x168>)
 8009016:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800901a:	e009      	b.n	8009030 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2280      	movs	r2, #128	; 0x80
 8009020:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a10      	ldr	r2, [pc, #64]	; (8009068 <USB_HostInit+0x16c>)
 8009026:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a10      	ldr	r2, [pc, #64]	; (800906c <USB_HostInit+0x170>)
 800902c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	2b00      	cmp	r3, #0
 8009034:	d105      	bne.n	8009042 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	f043 0210 	orr.w	r2, r3, #16
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	699a      	ldr	r2, [r3, #24]
 8009046:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <USB_HostInit+0x174>)
 8009048:	4313      	orrs	r3, r2
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800905a:	b004      	add	sp, #16
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	01000200 	.word	0x01000200
 8009064:	00e00300 	.word	0x00e00300
 8009068:	00600080 	.word	0x00600080
 800906c:	004000e0 	.word	0x004000e0
 8009070:	a3200008 	.word	0xa3200008

08009074 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009092:	f023 0303 	bic.w	r3, r3, #3
 8009096:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	f003 0303 	and.w	r3, r3, #3
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80090ac:	4313      	orrs	r3, r2
 80090ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80090b0:	78fb      	ldrb	r3, [r7, #3]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d107      	bne.n	80090c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090bc:	461a      	mov	r2, r3
 80090be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80090c2:	6053      	str	r3, [r2, #4]
 80090c4:	e009      	b.n	80090da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80090c6:	78fb      	ldrb	r3, [r7, #3]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d106      	bne.n	80090da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090d2:	461a      	mov	r2, r3
 80090d4:	f241 7370 	movw	r3, #6000	; 0x1770
 80090d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009108:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009116:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009118:	2064      	movs	r0, #100	; 0x64
 800911a:	f7f9 fea5 	bl	8002e68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800912a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800912c:	200a      	movs	r0, #10
 800912e:	f7f9 fe9b 	bl	8002e68 <HAL_Delay>

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009160:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d109      	bne.n	8009180 <USB_DriveVbus+0x44>
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d106      	bne.n	8009180 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800917a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800917e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800918a:	d109      	bne.n	80091a0 <USB_DriveVbus+0x64>
 800918c:	78fb      	ldrb	r3, [r7, #3]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d106      	bne.n	80091a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800919a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800919e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	0c5b      	lsrs	r3, r3, #17
 80091cc:	f003 0303 	and.w	r3, r3, #3
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	b29b      	uxth	r3, r3
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	4608      	mov	r0, r1
 800920a:	4611      	mov	r1, r2
 800920c:	461a      	mov	r2, r3
 800920e:	4603      	mov	r3, r0
 8009210:	70fb      	strb	r3, [r7, #3]
 8009212:	460b      	mov	r3, r1
 8009214:	70bb      	strb	r3, [r7, #2]
 8009216:	4613      	mov	r3, r2
 8009218:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	4413      	add	r3, r2
 800922a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800922e:	461a      	mov	r2, r3
 8009230:	f04f 33ff 	mov.w	r3, #4294967295
 8009234:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009236:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800923a:	2b03      	cmp	r3, #3
 800923c:	d87e      	bhi.n	800933c <USB_HC_Init+0x13c>
 800923e:	a201      	add	r2, pc, #4	; (adr r2, 8009244 <USB_HC_Init+0x44>)
 8009240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009244:	08009255 	.word	0x08009255
 8009248:	080092ff 	.word	0x080092ff
 800924c:	08009255 	.word	0x08009255
 8009250:	080092c1 	.word	0x080092c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4413      	add	r3, r2
 800925c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009260:	461a      	mov	r2, r3
 8009262:	f240 439d 	movw	r3, #1181	; 0x49d
 8009266:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009268:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800926c:	2b00      	cmp	r3, #0
 800926e:	da10      	bge.n	8009292 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	4413      	add	r3, r2
 8009278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	78fa      	ldrb	r2, [r7, #3]
 8009280:	0151      	lsls	r1, r2, #5
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	440a      	add	r2, r1
 8009286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800928a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800928e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009290:	e057      	b.n	8009342 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929a:	2b00      	cmp	r3, #0
 800929c:	d051      	beq.n	8009342 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	78fa      	ldrb	r2, [r7, #3]
 80092ae:	0151      	lsls	r1, r2, #5
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	440a      	add	r2, r1
 80092b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80092bc:	60d3      	str	r3, [r2, #12]
      break;
 80092be:	e040      	b.n	8009342 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092cc:	461a      	mov	r2, r3
 80092ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80092d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80092d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	da34      	bge.n	8009346 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	0151      	lsls	r1, r2, #5
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	440a      	add	r2, r1
 80092f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80092fc:	e023      	b.n	8009346 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092fe:	78fb      	ldrb	r3, [r7, #3]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	4413      	add	r3, r2
 8009306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800930a:	461a      	mov	r2, r3
 800930c:	f240 2325 	movw	r3, #549	; 0x225
 8009310:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009312:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009316:	2b00      	cmp	r3, #0
 8009318:	da17      	bge.n	800934a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	4413      	add	r3, r2
 8009322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	78fa      	ldrb	r2, [r7, #3]
 800932a:	0151      	lsls	r1, r2, #5
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	440a      	add	r2, r1
 8009330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009334:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009338:	60d3      	str	r3, [r2, #12]
      }
      break;
 800933a:	e006      	b.n	800934a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	75fb      	strb	r3, [r7, #23]
      break;
 8009340:	e004      	b.n	800934c <USB_HC_Init+0x14c>
      break;
 8009342:	bf00      	nop
 8009344:	e002      	b.n	800934c <USB_HC_Init+0x14c>
      break;
 8009346:	bf00      	nop
 8009348:	e000      	b.n	800934c <USB_HC_Init+0x14c>
      break;
 800934a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009352:	699a      	ldr	r2, [r3, #24]
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	2101      	movs	r1, #1
 800935c:	fa01 f303 	lsl.w	r3, r1, r3
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009366:	4313      	orrs	r3, r2
 8009368:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009376:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800937a:	2b00      	cmp	r3, #0
 800937c:	da03      	bge.n	8009386 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800937e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009382:	613b      	str	r3, [r7, #16]
 8009384:	e001      	b.n	800938a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800938a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d103      	bne.n	800939a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	e001      	b.n	800939e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800939e:	787b      	ldrb	r3, [r7, #1]
 80093a0:	059b      	lsls	r3, r3, #22
 80093a2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80093a6:	78bb      	ldrb	r3, [r7, #2]
 80093a8:	02db      	lsls	r3, r3, #11
 80093aa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80093ae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80093b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093b4:	049b      	lsls	r3, r3, #18
 80093b6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80093ba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80093bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093be:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80093c2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	0159      	lsls	r1, r3, #5
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	440b      	add	r3, r1
 80093d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80093da:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80093dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d10f      	bne.n	8009404 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80093e4:	78fb      	ldrb	r3, [r7, #3]
 80093e6:	015a      	lsls	r2, r3, #5
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	0151      	lsls	r1, r2, #5
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	440a      	add	r2, r1
 80093fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009402:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009404:	7dfb      	ldrb	r3, [r7, #23]
}
 8009406:	4618      	mov	r0, r3
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop

08009414 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08c      	sub	sp, #48	; 0x30
 8009418:	af02      	add	r7, sp, #8
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	785b      	ldrb	r3, [r3, #1]
 800942a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800942c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009430:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943a:	2b00      	cmp	r3, #0
 800943c:	d028      	beq.n	8009490 <USB_HC_StartXfer+0x7c>
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	791b      	ldrb	r3, [r3, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d124      	bne.n	8009490 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10b      	bne.n	8009464 <USB_HC_StartXfer+0x50>
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	795b      	ldrb	r3, [r3, #5]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d107      	bne.n	8009464 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	785b      	ldrb	r3, [r3, #1]
 8009458:	4619      	mov	r1, r3
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fa2e 	bl	80098bc <USB_DoPing>
      return HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	e113      	b.n	800968c <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d112      	bne.n	8009490 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	4413      	add	r3, r2
 8009472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	69fa      	ldr	r2, [r7, #28]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	6a3a      	ldr	r2, [r7, #32]
 800947e:	440a      	add	r2, r1
 8009480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009484:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009488:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2200      	movs	r2, #0
 800948e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d018      	beq.n	80094ca <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	8912      	ldrh	r2, [r2, #8]
 80094a0:	4413      	add	r3, r2
 80094a2:	3b01      	subs	r3, #1
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	8912      	ldrh	r2, [r2, #8]
 80094a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ac:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80094ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80094b0:	8b7b      	ldrh	r3, [r7, #26]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d90b      	bls.n	80094ce <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80094b6:	8b7b      	ldrh	r3, [r7, #26]
 80094b8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80094ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	8912      	ldrh	r2, [r2, #8]
 80094c0:	fb02 f203 	mul.w	r2, r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	611a      	str	r2, [r3, #16]
 80094c8:	e001      	b.n	80094ce <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80094ca:	2301      	movs	r3, #1
 80094cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	78db      	ldrb	r3, [r3, #3]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d006      	beq.n	80094e4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80094d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	8912      	ldrh	r2, [r2, #8]
 80094dc:	fb02 f203 	mul.w	r2, r2, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094ee:	04d9      	lsls	r1, r3, #19
 80094f0:	4b68      	ldr	r3, [pc, #416]	; (8009694 <USB_HC_StartXfer+0x280>)
 80094f2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80094f4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	7a9b      	ldrb	r3, [r3, #10]
 80094fa:	075b      	lsls	r3, r3, #29
 80094fc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009500:	69f9      	ldr	r1, [r7, #28]
 8009502:	0148      	lsls	r0, r1, #5
 8009504:	6a39      	ldr	r1, [r7, #32]
 8009506:	4401      	add	r1, r0
 8009508:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800950c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800950e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d009      	beq.n	800952a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	68d9      	ldr	r1, [r3, #12]
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	015a      	lsls	r2, r3, #5
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	4413      	add	r3, r2
 8009522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009526:	460a      	mov	r2, r1
 8009528:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	bf0c      	ite	eq
 800953a:	2301      	moveq	r3, #1
 800953c:	2300      	movne	r3, #0
 800953e:	b2db      	uxtb	r3, r3
 8009540:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	4413      	add	r3, r2
 800954a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	69fa      	ldr	r2, [r7, #28]
 8009552:	0151      	lsls	r1, r2, #5
 8009554:	6a3a      	ldr	r2, [r7, #32]
 8009556:	440a      	add	r2, r1
 8009558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800955c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009560:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	4413      	add	r3, r2
 800956a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	7e7b      	ldrb	r3, [r7, #25]
 8009572:	075b      	lsls	r3, r3, #29
 8009574:	69f9      	ldr	r1, [r7, #28]
 8009576:	0148      	lsls	r0, r1, #5
 8009578:	6a39      	ldr	r1, [r7, #32]
 800957a:	4401      	add	r1, r0
 800957c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009580:	4313      	orrs	r3, r2
 8009582:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	4413      	add	r3, r2
 800958c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a41      	ldr	r2, [pc, #260]	; (8009698 <USB_HC_StartXfer+0x284>)
 8009594:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009596:	4b40      	ldr	r3, [pc, #256]	; (8009698 <USB_HC_StartXfer+0x284>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800959e:	4a3e      	ldr	r2, [pc, #248]	; (8009698 <USB_HC_StartXfer+0x284>)
 80095a0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	78db      	ldrb	r3, [r3, #3]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d006      	beq.n	80095b8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80095aa:	4b3b      	ldr	r3, [pc, #236]	; (8009698 <USB_HC_StartXfer+0x284>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b2:	4a39      	ldr	r2, [pc, #228]	; (8009698 <USB_HC_StartXfer+0x284>)
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	e005      	b.n	80095c4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80095b8:	4b37      	ldr	r3, [pc, #220]	; (8009698 <USB_HC_StartXfer+0x284>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095c0:	4a35      	ldr	r2, [pc, #212]	; (8009698 <USB_HC_StartXfer+0x284>)
 80095c2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80095c4:	4b34      	ldr	r3, [pc, #208]	; (8009698 <USB_HC_StartXfer+0x284>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095cc:	4a32      	ldr	r2, [pc, #200]	; (8009698 <USB_HC_StartXfer+0x284>)
 80095ce:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095dc:	461a      	mov	r2, r3
 80095de:	4b2e      	ldr	r3, [pc, #184]	; (8009698 <USB_HC_StartXfer+0x284>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	e04e      	b.n	800968c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	78db      	ldrb	r3, [r3, #3]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d149      	bne.n	800968a <USB_HC_StartXfer+0x276>
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d045      	beq.n	800968a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	79db      	ldrb	r3, [r3, #7]
 8009602:	2b03      	cmp	r3, #3
 8009604:	d830      	bhi.n	8009668 <USB_HC_StartXfer+0x254>
 8009606:	a201      	add	r2, pc, #4	; (adr r2, 800960c <USB_HC_StartXfer+0x1f8>)
 8009608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960c:	0800961d 	.word	0x0800961d
 8009610:	08009641 	.word	0x08009641
 8009614:	0800961d 	.word	0x0800961d
 8009618:	08009641 	.word	0x08009641
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	3303      	adds	r3, #3
 8009622:	089b      	lsrs	r3, r3, #2
 8009624:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009626:	8afa      	ldrh	r2, [r7, #22]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	b29b      	uxth	r3, r3
 800962e:	429a      	cmp	r2, r3
 8009630:	d91c      	bls.n	800966c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	f043 0220 	orr.w	r2, r3, #32
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	619a      	str	r2, [r3, #24]
        }
        break;
 800963e:	e015      	b.n	800966c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	3303      	adds	r3, #3
 8009646:	089b      	lsrs	r3, r3, #2
 8009648:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800964a:	8afa      	ldrh	r2, [r7, #22]
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	b29b      	uxth	r3, r3
 8009656:	429a      	cmp	r2, r3
 8009658:	d90a      	bls.n	8009670 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	619a      	str	r2, [r3, #24]
        }
        break;
 8009666:	e003      	b.n	8009670 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009668:	bf00      	nop
 800966a:	e002      	b.n	8009672 <USB_HC_StartXfer+0x25e>
        break;
 800966c:	bf00      	nop
 800966e:	e000      	b.n	8009672 <USB_HC_StartXfer+0x25e>
        break;
 8009670:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	68d9      	ldr	r1, [r3, #12]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	785a      	ldrb	r2, [r3, #1]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	b29b      	uxth	r3, r3
 8009680:	2000      	movs	r0, #0
 8009682:	9000      	str	r0, [sp, #0]
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff fb85 	bl	8008d94 <USB_WritePacket>
  }

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3728      	adds	r7, #40	; 0x28
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	1ff80000 	.word	0x1ff80000
 8009698:	20000388 	.word	0x20000388

0800969c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	b29b      	uxth	r3, r3
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80096be:	b480      	push	{r7}
 80096c0:	b087      	sub	sp, #28
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	0c9b      	lsrs	r3, r3, #18
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <USB_HC_Halt+0x3a>
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d16c      	bne.n	80097d2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	0151      	lsls	r1, r2, #5
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	440a      	add	r2, r1
 800970e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009716:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d143      	bne.n	80097ac <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	4413      	add	r3, r2
 800972c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	440a      	add	r2, r1
 800973a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800973e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009742:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	4413      	add	r3, r2
 800974c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	0151      	lsls	r1, r2, #5
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	440a      	add	r2, r1
 800975a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800975e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009762:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	4413      	add	r3, r2
 800976c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	0151      	lsls	r1, r2, #5
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	440a      	add	r2, r1
 800977a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800977e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009782:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	3301      	adds	r3, #1
 8009788:	617b      	str	r3, [r7, #20]
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009790:	d81d      	bhi.n	80097ce <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	4413      	add	r3, r2
 800979a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097a8:	d0ec      	beq.n	8009784 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80097aa:	e080      	b.n	80098ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	0151      	lsls	r1, r2, #5
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	440a      	add	r2, r1
 80097c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097ca:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80097cc:	e06f      	b.n	80098ae <USB_HC_Halt+0x1f0>
          break;
 80097ce:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80097d0:	e06d      	b.n	80098ae <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097f0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d143      	bne.n	800988a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	4413      	add	r3, r2
 800980a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	440a      	add	r2, r1
 8009818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800981c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009820:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	4413      	add	r3, r2
 800982a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	0151      	lsls	r1, r2, #5
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	440a      	add	r2, r1
 8009838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800983c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009840:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	4413      	add	r3, r2
 800984a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	0151      	lsls	r1, r2, #5
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	440a      	add	r2, r1
 8009858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800985c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009860:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	3301      	adds	r3, #1
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800986e:	d81d      	bhi.n	80098ac <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	4413      	add	r3, r2
 8009878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009886:	d0ec      	beq.n	8009862 <USB_HC_Halt+0x1a4>
 8009888:	e011      	b.n	80098ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	4413      	add	r3, r2
 8009892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	e000      	b.n	80098ae <USB_HC_Halt+0x1f0>
          break;
 80098ac:	bf00      	nop
    }
  }

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80098d0:	2301      	movs	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	04da      	lsls	r2, r3, #19
 80098d8:	4b15      	ldr	r3, [pc, #84]	; (8009930 <USB_DoPing+0x74>)
 80098da:	4013      	ands	r3, r2
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	0151      	lsls	r1, r2, #5
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	440a      	add	r2, r1
 80098e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009904:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800990c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	015a      	lsls	r2, r3, #5
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	4413      	add	r3, r2
 8009916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800991a:	461a      	mov	r2, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	1ff80000 	.word	0x1ff80000

08009934 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009940:	2300      	movs	r3, #0
 8009942:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff f9a1 	bl	8008c8c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800994a:	2110      	movs	r1, #16
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff f9d9 	bl	8008d04 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff f9fc 	bl	8008d50 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009958:	2300      	movs	r3, #0
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	e01f      	b.n	800999e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	4413      	add	r3, r2
 8009966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009974:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800997c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009984:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4413      	add	r3, r2
 800998e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009992:	461a      	mov	r2, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	3301      	adds	r3, #1
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2b0f      	cmp	r3, #15
 80099a2:	d9dc      	bls.n	800995e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80099a4:	2300      	movs	r3, #0
 80099a6:	613b      	str	r3, [r7, #16]
 80099a8:	e034      	b.n	8009a14 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	015a      	lsls	r2, r3, #5
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	4413      	add	r3, r2
 80099da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099de:	461a      	mov	r2, r3
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	3301      	adds	r3, #1
 80099e8:	617b      	str	r3, [r7, #20]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099f0:	d80c      	bhi.n	8009a0c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a08:	d0ec      	beq.n	80099e4 <USB_StopHost+0xb0>
 8009a0a:	e000      	b.n	8009a0e <USB_StopHost+0xda>
        break;
 8009a0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	3301      	adds	r3, #1
 8009a12:	613b      	str	r3, [r7, #16]
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	2b0f      	cmp	r3, #15
 8009a18:	d9c7      	bls.n	80099aa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a20:	461a      	mov	r2, r3
 8009a22:	f04f 33ff 	mov.w	r3, #4294967295
 8009a26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff f91a 	bl	8008c6a <USB_EnableGlobalInt>

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009a40:	b590      	push	{r4, r7, lr}
 8009a42:	b089      	sub	sp, #36	; 0x24
 8009a44:	af04      	add	r7, sp, #16
 8009a46:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009a48:	2301      	movs	r3, #1
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	2102      	movs	r1, #2
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fcb8 	bl	800a3c4 <USBH_FindInterface>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	2bff      	cmp	r3, #255	; 0xff
 8009a5c:	d002      	beq.n	8009a64 <USBH_CDC_InterfaceInit+0x24>
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d901      	bls.n	8009a68 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a64:	2302      	movs	r3, #2
 8009a66:	e13d      	b.n	8009ce4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fc8d 	bl	800a38c <USBH_SelectInterface>
 8009a72:	4603      	mov	r3, r0
 8009a74:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a76:	7bbb      	ldrb	r3, [r7, #14]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e131      	b.n	8009ce4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009a86:	2050      	movs	r0, #80	; 0x50
 8009a88:	f004 ff62 	bl	800e950 <malloc>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e11f      	b.n	8009ce4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009aa4:	2250      	movs	r2, #80	; 0x50
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	68b8      	ldr	r0, [r7, #8]
 8009aaa:	f004 ff6f 	bl	800e98c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	211a      	movs	r1, #26
 8009ab4:	fb01 f303 	mul.w	r3, r1, r3
 8009ab8:	4413      	add	r3, r2
 8009aba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	b25b      	sxtb	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da15      	bge.n	8009af2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	211a      	movs	r1, #26
 8009acc:	fb01 f303 	mul.w	r3, r1, r3
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ad6:	781a      	ldrb	r2, [r3, #0]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	211a      	movs	r1, #26
 8009ae2:	fb01 f303 	mul.w	r3, r1, r3
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009aec:	881a      	ldrh	r2, [r3, #0]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	785b      	ldrb	r3, [r3, #1]
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f002 f890 	bl	800bc1e <USBH_AllocPipe>
 8009afe:	4603      	mov	r3, r0
 8009b00:	461a      	mov	r2, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	7819      	ldrb	r1, [r3, #0]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	7858      	ldrb	r0, [r3, #1]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	8952      	ldrh	r2, [r2, #10]
 8009b1e:	9202      	str	r2, [sp, #8]
 8009b20:	2203      	movs	r2, #3
 8009b22:	9201      	str	r2, [sp, #4]
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	4623      	mov	r3, r4
 8009b28:	4602      	mov	r2, r0
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f002 f848 	bl	800bbc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2200      	movs	r2, #0
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f004 fe59 	bl	800e7f0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2200      	movs	r2, #0
 8009b42:	210a      	movs	r1, #10
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fc3d 	bl	800a3c4 <USBH_FindInterface>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	2bff      	cmp	r3, #255	; 0xff
 8009b52:	d002      	beq.n	8009b5a <USBH_CDC_InterfaceInit+0x11a>
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d901      	bls.n	8009b5e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e0c2      	b.n	8009ce4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	211a      	movs	r1, #26
 8009b64:	fb01 f303 	mul.w	r3, r1, r3
 8009b68:	4413      	add	r3, r2
 8009b6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	b25b      	sxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	da16      	bge.n	8009ba4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	211a      	movs	r1, #26
 8009b7c:	fb01 f303 	mul.w	r3, r1, r3
 8009b80:	4413      	add	r3, r2
 8009b82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b86:	781a      	ldrb	r2, [r3, #0]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	211a      	movs	r1, #26
 8009b92:	fb01 f303 	mul.w	r3, r1, r3
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b9c:	881a      	ldrh	r2, [r3, #0]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	835a      	strh	r2, [r3, #26]
 8009ba2:	e015      	b.n	8009bd0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	211a      	movs	r1, #26
 8009baa:	fb01 f303 	mul.w	r3, r1, r3
 8009bae:	4413      	add	r3, r2
 8009bb0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009bb4:	781a      	ldrb	r2, [r3, #0]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	211a      	movs	r1, #26
 8009bc0:	fb01 f303 	mul.w	r3, r1, r3
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009bca:	881a      	ldrh	r2, [r3, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	211a      	movs	r1, #26
 8009bd6:	fb01 f303 	mul.w	r3, r1, r3
 8009bda:	4413      	add	r3, r2
 8009bdc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	b25b      	sxtb	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	da16      	bge.n	8009c16 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	211a      	movs	r1, #26
 8009bee:	fb01 f303 	mul.w	r3, r1, r3
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009bf8:	781a      	ldrb	r2, [r3, #0]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009bfe:	7bfb      	ldrb	r3, [r7, #15]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	211a      	movs	r1, #26
 8009c04:	fb01 f303 	mul.w	r3, r1, r3
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c0e:	881a      	ldrh	r2, [r3, #0]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	835a      	strh	r2, [r3, #26]
 8009c14:	e015      	b.n	8009c42 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	211a      	movs	r1, #26
 8009c1c:	fb01 f303 	mul.w	r3, r1, r3
 8009c20:	4413      	add	r3, r2
 8009c22:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c26:	781a      	ldrb	r2, [r3, #0]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	211a      	movs	r1, #26
 8009c32:	fb01 f303 	mul.w	r3, r1, r3
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c3c:	881a      	ldrh	r2, [r3, #0]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	7b9b      	ldrb	r3, [r3, #14]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 ffe8 	bl	800bc1e <USBH_AllocPipe>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	461a      	mov	r2, r3
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	7bdb      	ldrb	r3, [r3, #15]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 ffde 	bl	800bc1e <USBH_AllocPipe>
 8009c62:	4603      	mov	r3, r0
 8009c64:	461a      	mov	r2, r3
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	7b59      	ldrb	r1, [r3, #13]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	7b98      	ldrb	r0, [r3, #14]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	8b12      	ldrh	r2, [r2, #24]
 8009c82:	9202      	str	r2, [sp, #8]
 8009c84:	2202      	movs	r2, #2
 8009c86:	9201      	str	r2, [sp, #4]
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	4623      	mov	r3, r4
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f001 ff96 	bl	800bbc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	7b19      	ldrb	r1, [r3, #12]
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	7bd8      	ldrb	r0, [r3, #15]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	8b52      	ldrh	r2, [r2, #26]
 8009cac:	9202      	str	r2, [sp, #8]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	9201      	str	r2, [sp, #4]
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	4623      	mov	r3, r4
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f001 ff81 	bl	800bbc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	7b5b      	ldrb	r3, [r3, #13]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f004 fd8e 	bl	800e7f0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	7b1b      	ldrb	r3, [r3, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f004 fd87 	bl	800e7f0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd90      	pop	{r4, r7, pc}

08009cec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00e      	beq.n	8009d24 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f001 ff76 	bl	800bbfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 ffa1 	bl	800bc60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	7b1b      	ldrb	r3, [r3, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00e      	beq.n	8009d4a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	7b1b      	ldrb	r3, [r3, #12]
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 ff63 	bl	800bbfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	7b1b      	ldrb	r3, [r3, #12]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 ff8e 	bl	800bc60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	7b5b      	ldrb	r3, [r3, #13]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00e      	beq.n	8009d70 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	7b5b      	ldrb	r3, [r3, #13]
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f001 ff50 	bl	800bbfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	7b5b      	ldrb	r3, [r3, #13]
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f001 ff7b 	bl	800bc60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00b      	beq.n	8009d94 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f004 fdeb 	bl	800e960 <free>
    phost->pActiveClass->pData = 0U;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d90:	2200      	movs	r2, #0
 8009d92:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3340      	adds	r3, #64	; 0x40
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f8b1 	bl	8009f1e <GetLineCoding>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009dc0:	7afb      	ldrb	r3, [r7, #11]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d105      	bne.n	8009dd2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009dcc:	2102      	movs	r1, #2
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009de4:	2301      	movs	r3, #1
 8009de6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009dfc:	2b04      	cmp	r3, #4
 8009dfe:	d877      	bhi.n	8009ef0 <USBH_CDC_Process+0x114>
 8009e00:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <USBH_CDC_Process+0x2c>)
 8009e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e06:	bf00      	nop
 8009e08:	08009e1d 	.word	0x08009e1d
 8009e0c:	08009e23 	.word	0x08009e23
 8009e10:	08009e53 	.word	0x08009e53
 8009e14:	08009ec7 	.word	0x08009ec7
 8009e18:	08009ed5 	.word	0x08009ed5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e20:	e06d      	b.n	8009efe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e26:	4619      	mov	r1, r3
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f897 	bl	8009f5c <SetLineCoding>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e32:	7bbb      	ldrb	r3, [r7, #14]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d104      	bne.n	8009e42 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e40:	e058      	b.n	8009ef4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d055      	beq.n	8009ef4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2204      	movs	r2, #4
 8009e4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009e50:	e050      	b.n	8009ef4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	3340      	adds	r3, #64	; 0x40
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f860 	bl	8009f1e <GetLineCoding>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d126      	bne.n	8009eb6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e7a:	791b      	ldrb	r3, [r3, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d13b      	bne.n	8009ef8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e8a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d133      	bne.n	8009ef8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e9a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d12b      	bne.n	8009ef8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d124      	bne.n	8009ef8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f982 	bl	800a1b8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009eb4:	e020      	b.n	8009ef8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d01d      	beq.n	8009ef8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009ec4:	e018      	b.n	8009ef8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f867 	bl	8009f9a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f8f6 	bl	800a0be <CDC_ProcessReception>
      break;
 8009ed2:	e014      	b.n	8009efe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 f951 	bl	800b17e <USBH_ClrFeature>
 8009edc:	4603      	mov	r3, r0
 8009ede:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10a      	bne.n	8009efc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009eee:	e005      	b.n	8009efc <USBH_CDC_Process+0x120>

    default:
      break;
 8009ef0:	bf00      	nop
 8009ef2:	e004      	b.n	8009efe <USBH_CDC_Process+0x122>
      break;
 8009ef4:	bf00      	nop
 8009ef6:	e002      	b.n	8009efe <USBH_CDC_Process+0x122>
      break;
 8009ef8:	bf00      	nop
 8009efa:	e000      	b.n	8009efe <USBH_CDC_Process+0x122>
      break;
 8009efc:	bf00      	nop

  }

  return status;
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	22a1      	movs	r2, #161	; 0xa1
 8009f2c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2221      	movs	r2, #33	; 0x21
 8009f32:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2207      	movs	r2, #7
 8009f44:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2207      	movs	r2, #7
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 faf6 	bl	800b53e <USBH_CtlReq>
 8009f52:	4603      	mov	r3, r0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2221      	movs	r2, #33	; 0x21
 8009f6a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2220      	movs	r2, #32
 8009f70:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2207      	movs	r2, #7
 8009f82:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	2207      	movs	r2, #7
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 fad7 	bl	800b53e <USBH_CtlReq>
 8009f90:	4603      	mov	r3, r0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b086      	sub	sp, #24
 8009f9e:	af02      	add	r7, sp, #8
 8009fa0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fa8:	69db      	ldr	r3, [r3, #28]
 8009faa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fac:	2300      	movs	r3, #0
 8009fae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d002      	beq.n	8009fc0 <CDC_ProcessTransmission+0x26>
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d023      	beq.n	800a006 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009fbe:	e07a      	b.n	800a0b6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	8b12      	ldrh	r2, [r2, #24]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d90b      	bls.n	8009fe4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	69d9      	ldr	r1, [r3, #28]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	8b1a      	ldrh	r2, [r3, #24]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	7b5b      	ldrb	r3, [r3, #13]
 8009fd8:	2001      	movs	r0, #1
 8009fda:	9000      	str	r0, [sp, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f001 fdac 	bl	800bb3a <USBH_BulkSendData>
 8009fe2:	e00b      	b.n	8009ffc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	7b5b      	ldrb	r3, [r3, #13]
 8009ff2:	2001      	movs	r0, #1
 8009ff4:	9000      	str	r0, [sp, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f001 fd9f 	bl	800bb3a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2202      	movs	r2, #2
 800a000:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a004:	e057      	b.n	800a0b6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	7b5b      	ldrb	r3, [r3, #13]
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f004 fbc5 	bl	800e79c <USBH_LL_GetURBState>
 800a012:	4603      	mov	r3, r0
 800a014:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a016:	7afb      	ldrb	r3, [r7, #11]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d136      	bne.n	800a08a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	8b12      	ldrh	r2, [r2, #24]
 800a024:	4293      	cmp	r3, r2
 800a026:	d90e      	bls.n	800a046 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	8b12      	ldrh	r2, [r2, #24]
 800a030:	1a9a      	subs	r2, r3, r2
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	8b12      	ldrh	r2, [r2, #24]
 800a03e:	441a      	add	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	61da      	str	r2, [r3, #28]
 800a044:	e002      	b.n	800a04c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a05c:	e006      	b.n	800a06c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f892 	bl	800a190 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2204      	movs	r2, #4
 800a070:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a080:	2200      	movs	r2, #0
 800a082:	4619      	mov	r1, r3
 800a084:	f001 fed4 	bl	800be30 <osMessagePut>
      break;
 800a088:	e014      	b.n	800a0b4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d111      	bne.n	800a0b4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2204      	movs	r2, #4
 800a09c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	f001 febe 	bl	800be30 <osMessagePut>
      break;
 800a0b4:	bf00      	nop
  }
}
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b086      	sub	sp, #24
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a0da:	2b03      	cmp	r3, #3
 800a0dc:	d002      	beq.n	800a0e4 <CDC_ProcessReception+0x26>
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d00e      	beq.n	800a100 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a0e2:	e051      	b.n	800a188 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	6a19      	ldr	r1, [r3, #32]
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	8b5a      	ldrh	r2, [r3, #26]
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	7b1b      	ldrb	r3, [r3, #12]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f001 fd47 	bl	800bb84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	2204      	movs	r2, #4
 800a0fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a0fe:	e043      	b.n	800a188 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	7b1b      	ldrb	r3, [r3, #12]
 800a104:	4619      	mov	r1, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f004 fb48 	bl	800e79c <USBH_LL_GetURBState>
 800a10c:	4603      	mov	r3, r0
 800a10e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a110:	7cfb      	ldrb	r3, [r7, #19]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d137      	bne.n	800a186 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	7b1b      	ldrb	r3, [r3, #12]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f004 faab 	bl	800e678 <USBH_LL_GetLastXferSize>
 800a122:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d016      	beq.n	800a15c <CDC_ProcessReception+0x9e>
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	8b5b      	ldrh	r3, [r3, #26]
 800a132:	461a      	mov	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4293      	cmp	r3, r2
 800a138:	d910      	bls.n	800a15c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	1ad2      	subs	r2, r2, r3
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	6a1a      	ldr	r2, [r3, #32]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	441a      	add	r2, r3
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2203      	movs	r2, #3
 800a156:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a15a:	e006      	b.n	800a16a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f81d 	bl	800a1a4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2204      	movs	r2, #4
 800a16e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a17e:	2200      	movs	r2, #0
 800a180:	4619      	mov	r1, r3
 800a182:	f001 fe55 	bl	800be30 <osMessagePut>
      break;
 800a186:	bf00      	nop
  }
}
 800a188:	bf00      	nop
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a1cc:	b5b0      	push	{r4, r5, r7, lr}
 800a1ce:	b090      	sub	sp, #64	; 0x40
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	e04d      	b.n	800a280 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	79fa      	ldrb	r2, [r7, #7]
 800a1e8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f847 	bl	800a290 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800a230:	4b15      	ldr	r3, [pc, #84]	; (800a288 <USBH_Init+0xbc>)
 800a232:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800a23c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a240:	2100      	movs	r1, #0
 800a242:	4618      	mov	r0, r3
 800a244:	f001 fdcb 	bl	800bdde <osMessageCreate>
 800a248:	4602      	mov	r2, r0
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800a250:	4b0e      	ldr	r3, [pc, #56]	; (800a28c <USBH_Init+0xc0>)
 800a252:	f107 0414 	add.w	r4, r7, #20
 800a256:	461d      	mov	r5, r3
 800a258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a25a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a25c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a260:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800a264:	f107 0314 	add.w	r3, r7, #20
 800a268:	68f9      	ldr	r1, [r7, #12]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f001 fd6b 	bl	800bd46 <osThreadCreate>
 800a270:	4602      	mov	r2, r0
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f004 f93f 	bl	800e4fc <USBH_LL_Init>

  return USBH_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3740      	adds	r7, #64	; 0x40
 800a284:	46bd      	mov	sp, r7
 800a286:	bdb0      	pop	{r4, r5, r7, pc}
 800a288:	0800f27c 	.word	0x0800f27c
 800a28c:	0800f28c 	.word	0x0800f28c

0800a290 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a29c:	2300      	movs	r3, #0
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	e009      	b.n	800a2b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	33e0      	adds	r3, #224	; 0xe0
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	60fb      	str	r3, [r7, #12]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b0e      	cmp	r3, #14
 800a2ba:	d9f2      	bls.n	800a2a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	e009      	b.n	800a2d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2dc:	d3f1      	bcc.n	800a2c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2240      	movs	r2, #64	; 0x40
 800a302:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d016      	beq.n	800a37a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10e      	bne.n	800a374 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a35c:	1c59      	adds	r1, r3, #1
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	33de      	adds	r3, #222	; 0xde
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	73fb      	strb	r3, [r7, #15]
 800a372:	e004      	b.n	800a37e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a374:	2302      	movs	r3, #2
 800a376:	73fb      	strb	r3, [r7, #15]
 800a378:	e001      	b.n	800a37e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a37a:	2302      	movs	r3, #2
 800a37c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a3a2:	78fa      	ldrb	r2, [r7, #3]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d204      	bcs.n	800a3b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a3b0:	e001      	b.n	800a3b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	70fb      	strb	r3, [r7, #3]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70bb      	strb	r3, [r7, #2]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a3ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3ee:	e025      	b.n	800a43c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	221a      	movs	r2, #26
 800a3f4:	fb02 f303 	mul.w	r3, r2, r3
 800a3f8:	3308      	adds	r3, #8
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	3302      	adds	r3, #2
 800a400:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	795b      	ldrb	r3, [r3, #5]
 800a406:	78fa      	ldrb	r2, [r7, #3]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d002      	beq.n	800a412 <USBH_FindInterface+0x4e>
 800a40c:	78fb      	ldrb	r3, [r7, #3]
 800a40e:	2bff      	cmp	r3, #255	; 0xff
 800a410:	d111      	bne.n	800a436 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a416:	78ba      	ldrb	r2, [r7, #2]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d002      	beq.n	800a422 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a41c:	78bb      	ldrb	r3, [r7, #2]
 800a41e:	2bff      	cmp	r3, #255	; 0xff
 800a420:	d109      	bne.n	800a436 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a426:	787a      	ldrb	r2, [r7, #1]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d002      	beq.n	800a432 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a42c:	787b      	ldrb	r3, [r7, #1]
 800a42e:	2bff      	cmp	r3, #255	; 0xff
 800a430:	d101      	bne.n	800a436 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a432:	7dfb      	ldrb	r3, [r7, #23]
 800a434:	e006      	b.n	800a444 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	3301      	adds	r3, #1
 800a43a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d9d6      	bls.n	800a3f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a442:	23ff      	movs	r3, #255	; 0xff
}
 800a444:	4618      	mov	r0, r3
 800a446:	371c      	adds	r7, #28
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f004 f895 	bl	800e588 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a45e:	2101      	movs	r1, #1
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f004 f9ae 	bl	800e7c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af04      	add	r7, sp, #16
 800a476:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a478:	2302      	movs	r3, #2
 800a47a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a47c:	2300      	movs	r3, #0
 800a47e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d102      	bne.n	800a492 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2203      	movs	r2, #3
 800a490:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b0b      	cmp	r3, #11
 800a49a:	f200 823c 	bhi.w	800a916 <USBH_Process+0x4a6>
 800a49e:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <USBH_Process+0x34>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4d5 	.word	0x0800a4d5
 800a4a8:	0800a523 	.word	0x0800a523
 800a4ac:	0800a5a7 	.word	0x0800a5a7
 800a4b0:	0800a895 	.word	0x0800a895
 800a4b4:	0800a917 	.word	0x0800a917
 800a4b8:	0800a667 	.word	0x0800a667
 800a4bc:	0800a81f 	.word	0x0800a81f
 800a4c0:	0800a6b9 	.word	0x0800a6b9
 800a4c4:	0800a6f5 	.word	0x0800a6f5
 800a4c8:	0800a72f 	.word	0x0800a72f
 800a4cc:	0800a777 	.word	0x0800a777
 800a4d0:	0800a87d 	.word	0x0800a87d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 821c 	beq.w	800a91a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a4e8:	20c8      	movs	r0, #200	; 0xc8
 800a4ea:	f004 f9b4 	bl	800e856 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f004 f8a7 	bl	800e642 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a518:	2200      	movs	r2, #0
 800a51a:	4619      	mov	r1, r3
 800a51c:	f001 fc88 	bl	800be30 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a520:	e1fb      	b.n	800a91a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d107      	bne.n	800a53c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2202      	movs	r2, #2
 800a538:	701a      	strb	r2, [r3, #0]
 800a53a:	e025      	b.n	800a588 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a546:	d914      	bls.n	800a572 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a54e:	3301      	adds	r3, #1
 800a550:	b2da      	uxtb	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d903      	bls.n	800a56a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	220d      	movs	r2, #13
 800a566:	701a      	strb	r2, [r3, #0]
 800a568:	e00e      	b.n	800a588 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	701a      	strb	r2, [r3, #0]
 800a570:	e00a      	b.n	800a588 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a578:	f103 020a 	add.w	r2, r3, #10
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a582:	200a      	movs	r0, #10
 800a584:	f004 f967 	bl	800e856 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a59c:	2200      	movs	r2, #0
 800a59e:	4619      	mov	r1, r3
 800a5a0:	f001 fc46 	bl	800be30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a5a4:	e1c0      	b.n	800a928 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d005      	beq.n	800a5bc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5b6:	2104      	movs	r1, #4
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a5bc:	2064      	movs	r0, #100	; 0x64
 800a5be:	f004 f94a 	bl	800e856 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f004 f816 	bl	800e5f4 <USBH_LL_GetSpeed>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2205      	movs	r2, #5
 800a5d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a5d8:	2100      	movs	r1, #0
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f001 fb1f 	bl	800bc1e <USBH_AllocPipe>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5e8:	2180      	movs	r1, #128	; 0x80
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f001 fb17 	bl	800bc1e <USBH_AllocPipe>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7919      	ldrb	r1, [r3, #4]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a60c:	b292      	uxth	r2, r2
 800a60e:	9202      	str	r2, [sp, #8]
 800a610:	2200      	movs	r2, #0
 800a612:	9201      	str	r2, [sp, #4]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	4603      	mov	r3, r0
 800a618:	2280      	movs	r2, #128	; 0x80
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 fad0 	bl	800bbc0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	7959      	ldrb	r1, [r3, #5]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a634:	b292      	uxth	r2, r2
 800a636:	9202      	str	r2, [sp, #8]
 800a638:	2200      	movs	r2, #0
 800a63a:	9201      	str	r2, [sp, #4]
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	4603      	mov	r3, r0
 800a640:	2200      	movs	r2, #0
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f001 fabc 	bl	800bbc0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a65c:	2200      	movs	r2, #0
 800a65e:	4619      	mov	r1, r3
 800a660:	f001 fbe6 	bl	800be30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a664:	e160      	b.n	800a928 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f964 	bl	800a934 <USBH_HandleEnum>
 800a66c:	4603      	mov	r3, r0
 800a66e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b00      	cmp	r3, #0
 800a676:	f040 8152 	bne.w	800a91e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d103      	bne.n	800a694 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2208      	movs	r2, #8
 800a690:	701a      	strb	r2, [r3, #0]
 800a692:	e002      	b.n	800a69a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2207      	movs	r2, #7
 800a698:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2205      	movs	r2, #5
 800a69e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f001 fbbd 	bl	800be30 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a6b6:	e132      	b.n	800a91e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 812f 	beq.w	800a922 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2208      	movs	r2, #8
 800a6d4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2205      	movs	r2, #5
 800a6da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	f001 fb9f 	bl	800be30 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a6f2:	e116      	b.n	800a922 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fcf6 	bl	800b0f0 <USBH_SetCfg>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d102      	bne.n	800a710 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2209      	movs	r2, #9
 800a70e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a724:	2200      	movs	r2, #0
 800a726:	4619      	mov	r1, r3
 800a728:	f001 fb82 	bl	800be30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a72c:	e0fc      	b.n	800a928 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a734:	f003 0320 	and.w	r3, r3, #32
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00a      	beq.n	800a752 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a73c:	2101      	movs	r1, #1
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fcf9 	bl	800b136 <USBH_SetFeature>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d106      	bne.n	800a758 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	220a      	movs	r2, #10
 800a74e:	701a      	strb	r2, [r3, #0]
 800a750:	e002      	b.n	800a758 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	220a      	movs	r2, #10
 800a756:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a76c:	2200      	movs	r2, #0
 800a76e:	4619      	mov	r1, r3
 800a770:	f001 fb5e 	bl	800be30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a774:	e0d8      	b.n	800a928 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d03f      	beq.n	800a800 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
 800a78c:	e016      	b.n	800a7bc <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a78e:	7bfa      	ldrb	r2, [r7, #15]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	32de      	adds	r2, #222	; 0xde
 800a794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a798:	791a      	ldrb	r2, [r3, #4]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d108      	bne.n	800a7b6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a7a4:	7bfa      	ldrb	r2, [r7, #15]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	32de      	adds	r2, #222	; 0xde
 800a7aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a7b4:	e005      	b.n	800a7c2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	73fb      	strb	r3, [r7, #15]
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d0e5      	beq.n	800a78e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d016      	beq.n	800a7fa <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d109      	bne.n	800a7f2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2206      	movs	r2, #6
 800a7e2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7ea:	2103      	movs	r1, #3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	4798      	blx	r3
 800a7f0:	e006      	b.n	800a800 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	220d      	movs	r2, #13
 800a7f6:	701a      	strb	r2, [r3, #0]
 800a7f8:	e002      	b.n	800a800 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	220d      	movs	r2, #13
 800a7fe:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2205      	movs	r2, #5
 800a804:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a814:	2200      	movs	r2, #0
 800a816:	4619      	mov	r1, r3
 800a818:	f001 fb0a 	bl	800be30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a81c:	e084      	b.n	800a928 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a824:	2b00      	cmp	r3, #0
 800a826:	d017      	beq.n	800a858 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	4798      	blx	r3
 800a834:	4603      	mov	r3, r0
 800a836:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d103      	bne.n	800a848 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	220b      	movs	r2, #11
 800a844:	701a      	strb	r2, [r3, #0]
 800a846:	e00a      	b.n	800a85e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d106      	bne.n	800a85e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	220d      	movs	r2, #13
 800a854:	701a      	strb	r2, [r3, #0]
 800a856:	e002      	b.n	800a85e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	220d      	movs	r2, #13
 800a85c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2205      	movs	r2, #5
 800a862:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a872:	2200      	movs	r2, #0
 800a874:	4619      	mov	r1, r3
 800a876:	f001 fadb 	bl	800be30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a87a:	e055      	b.n	800a928 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a882:	2b00      	cmp	r3, #0
 800a884:	d04f      	beq.n	800a926 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	4798      	blx	r3
      }
      break;
 800a892:	e048      	b.n	800a926 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7ff fcf7 	bl	800a290 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d009      	beq.n	800a8c0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d005      	beq.n	800a8d6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8d0:	2105      	movs	r1, #5
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d107      	bne.n	800a8f2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fdb0 	bl	800a450 <USBH_Start>
 800a8f0:	e002      	b.n	800a8f8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f003 fe48 	bl	800e588 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a90c:	2200      	movs	r2, #0
 800a90e:	4619      	mov	r1, r3
 800a910:	f001 fa8e 	bl	800be30 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a914:	e008      	b.n	800a928 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a916:	bf00      	nop
 800a918:	e006      	b.n	800a928 <USBH_Process+0x4b8>
      break;
 800a91a:	bf00      	nop
 800a91c:	e004      	b.n	800a928 <USBH_Process+0x4b8>
      break;
 800a91e:	bf00      	nop
 800a920:	e002      	b.n	800a928 <USBH_Process+0x4b8>
    break;
 800a922:	bf00      	nop
 800a924:	e000      	b.n	800a928 <USBH_Process+0x4b8>
      break;
 800a926:	bf00      	nop
  }
  return USBH_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop

0800a934 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b088      	sub	sp, #32
 800a938:	af04      	add	r7, sp, #16
 800a93a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a93c:	2301      	movs	r3, #1
 800a93e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a940:	2301      	movs	r3, #1
 800a942:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	785b      	ldrb	r3, [r3, #1]
 800a948:	2b07      	cmp	r3, #7
 800a94a:	f200 8208 	bhi.w	800ad5e <USBH_HandleEnum+0x42a>
 800a94e:	a201      	add	r2, pc, #4	; (adr r2, 800a954 <USBH_HandleEnum+0x20>)
 800a950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a954:	0800a975 	.word	0x0800a975
 800a958:	0800aa33 	.word	0x0800aa33
 800a95c:	0800aa9d 	.word	0x0800aa9d
 800a960:	0800ab2b 	.word	0x0800ab2b
 800a964:	0800ab95 	.word	0x0800ab95
 800a968:	0800ac05 	.word	0x0800ac05
 800a96c:	0800aca1 	.word	0x0800aca1
 800a970:	0800ad1f 	.word	0x0800ad1f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a974:	2108      	movs	r1, #8
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 faea 	bl	800af50 <USBH_Get_DevDesc>
 800a97c:	4603      	mov	r3, r0
 800a97e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d130      	bne.n	800a9e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7919      	ldrb	r1, [r3, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a9aa:	b292      	uxth	r2, r2
 800a9ac:	9202      	str	r2, [sp, #8]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	9201      	str	r2, [sp, #4]
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2280      	movs	r2, #128	; 0x80
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f001 f901 	bl	800bbc0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	7959      	ldrb	r1, [r3, #5]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9d2:	b292      	uxth	r2, r2
 800a9d4:	9202      	str	r2, [sp, #8]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	9201      	str	r2, [sp, #4]
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2200      	movs	r2, #0
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 f8ed 	bl	800bbc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a9e6:	e1bc      	b.n	800ad62 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	f040 81b9 	bne.w	800ad62 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d903      	bls.n	800aa12 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	220d      	movs	r2, #13
 800aa0e:	701a      	strb	r2, [r3, #0]
      break;
 800aa10:	e1a7      	b.n	800ad62 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	795b      	ldrb	r3, [r3, #5]
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 f921 	bl	800bc60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	791b      	ldrb	r3, [r3, #4]
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 f91b 	bl	800bc60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	701a      	strb	r2, [r3, #0]
      break;
 800aa30:	e197      	b.n	800ad62 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aa32:	2112      	movs	r1, #18
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fa8b 	bl	800af50 <USBH_Get_DevDesc>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa3e:	7bbb      	ldrb	r3, [r7, #14]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d103      	bne.n	800aa4c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2202      	movs	r2, #2
 800aa48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa4a:	e18c      	b.n	800ad66 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	f040 8189 	bne.w	800ad66 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d903      	bls.n	800aa76 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	220d      	movs	r2, #13
 800aa72:	701a      	strb	r2, [r3, #0]
      break;
 800aa74:	e177      	b.n	800ad66 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	795b      	ldrb	r3, [r3, #5]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f001 f8ef 	bl	800bc60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	791b      	ldrb	r3, [r3, #4]
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f001 f8e9 	bl	800bc60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	701a      	strb	r2, [r3, #0]
      break;
 800aa9a:	e164      	b.n	800ad66 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800aa9c:	2101      	movs	r1, #1
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fb02 	bl	800b0a8 <USBH_SetAddress>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d132      	bne.n	800ab14 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800aaae:	2002      	movs	r0, #2
 800aab0:	f003 fed1 	bl	800e856 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2203      	movs	r2, #3
 800aac0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	7919      	ldrb	r1, [r3, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aad6:	b292      	uxth	r2, r2
 800aad8:	9202      	str	r2, [sp, #8]
 800aada:	2200      	movs	r2, #0
 800aadc:	9201      	str	r2, [sp, #4]
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	4603      	mov	r3, r0
 800aae2:	2280      	movs	r2, #128	; 0x80
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 f86b 	bl	800bbc0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	7959      	ldrb	r1, [r3, #5]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aafe:	b292      	uxth	r2, r2
 800ab00:	9202      	str	r2, [sp, #8]
 800ab02:	2200      	movs	r2, #0
 800ab04:	9201      	str	r2, [sp, #4]
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 f857 	bl	800bbc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab12:	e12a      	b.n	800ad6a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	f040 8127 	bne.w	800ad6a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	220d      	movs	r2, #13
 800ab20:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	705a      	strb	r2, [r3, #1]
      break;
 800ab28:	e11f      	b.n	800ad6a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ab2a:	2109      	movs	r1, #9
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fa37 	bl	800afa0 <USBH_Get_CfgDesc>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d103      	bne.n	800ab44 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2204      	movs	r2, #4
 800ab40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab42:	e114      	b.n	800ad6e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab44:	7bbb      	ldrb	r3, [r7, #14]
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	f040 8111 	bne.w	800ad6e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab52:	3301      	adds	r3, #1
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d903      	bls.n	800ab6e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	220d      	movs	r2, #13
 800ab6a:	701a      	strb	r2, [r3, #0]
      break;
 800ab6c:	e0ff      	b.n	800ad6e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	795b      	ldrb	r3, [r3, #5]
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f001 f873 	bl	800bc60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	791b      	ldrb	r3, [r3, #4]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f001 f86d 	bl	800bc60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]
      break;
 800ab92:	e0ec      	b.n	800ad6e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f9ff 	bl	800afa0 <USBH_Get_CfgDesc>
 800aba2:	4603      	mov	r3, r0
 800aba4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aba6:	7bbb      	ldrb	r3, [r7, #14]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d103      	bne.n	800abb4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2205      	movs	r2, #5
 800abb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800abb2:	e0de      	b.n	800ad72 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	2b03      	cmp	r3, #3
 800abb8:	f040 80db 	bne.w	800ad72 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abc2:	3301      	adds	r3, #1
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d903      	bls.n	800abde <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	220d      	movs	r2, #13
 800abda:	701a      	strb	r2, [r3, #0]
      break;
 800abdc:	e0c9      	b.n	800ad72 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	795b      	ldrb	r3, [r3, #5]
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f001 f83b 	bl	800bc60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	791b      	ldrb	r3, [r3, #4]
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f001 f835 	bl	800bc60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	701a      	strb	r2, [r3, #0]
      break;
 800ac02:	e0b6      	b.n	800ad72 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d036      	beq.n	800ac7c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ac1a:	23ff      	movs	r3, #255	; 0xff
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f9e3 	bl	800afe8 <USBH_Get_StringDesc>
 800ac22:	4603      	mov	r3, r0
 800ac24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d111      	bne.n	800ac50 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2206      	movs	r2, #6
 800ac30:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2205      	movs	r2, #5
 800ac36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac46:	2200      	movs	r2, #0
 800ac48:	4619      	mov	r1, r3
 800ac4a:	f001 f8f1 	bl	800be30 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ac4e:	e092      	b.n	800ad76 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	f040 808f 	bne.w	800ad76 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2206      	movs	r2, #6
 800ac5c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2205      	movs	r2, #5
 800ac62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac72:	2200      	movs	r2, #0
 800ac74:	4619      	mov	r1, r3
 800ac76:	f001 f8db 	bl	800be30 <osMessagePut>
      break;
 800ac7a:	e07c      	b.n	800ad76 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2206      	movs	r2, #6
 800ac80:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2205      	movs	r2, #5
 800ac86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac96:	2200      	movs	r2, #0
 800ac98:	4619      	mov	r1, r3
 800ac9a:	f001 f8c9 	bl	800be30 <osMessagePut>
      break;
 800ac9e:	e06a      	b.n	800ad76 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d027      	beq.n	800acfa <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800acb6:	23ff      	movs	r3, #255	; 0xff
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f995 	bl	800afe8 <USBH_Get_StringDesc>
 800acbe:	4603      	mov	r3, r0
 800acc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800acc2:	7bbb      	ldrb	r3, [r7, #14]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d103      	bne.n	800acd0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2207      	movs	r2, #7
 800accc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800acce:	e054      	b.n	800ad7a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d151      	bne.n	800ad7a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2207      	movs	r2, #7
 800acda:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2205      	movs	r2, #5
 800ace0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acf0:	2200      	movs	r2, #0
 800acf2:	4619      	mov	r1, r3
 800acf4:	f001 f89c 	bl	800be30 <osMessagePut>
      break;
 800acf8:	e03f      	b.n	800ad7a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2207      	movs	r2, #7
 800acfe:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2205      	movs	r2, #5
 800ad04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad14:	2200      	movs	r2, #0
 800ad16:	4619      	mov	r1, r3
 800ad18:	f001 f88a 	bl	800be30 <osMessagePut>
      break;
 800ad1c:	e02d      	b.n	800ad7a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d017      	beq.n	800ad58 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad34:	23ff      	movs	r3, #255	; 0xff
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f956 	bl	800afe8 <USBH_Get_StringDesc>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ad4a:	e018      	b.n	800ad7e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad4c:	7bbb      	ldrb	r3, [r7, #14]
 800ad4e:	2b03      	cmp	r3, #3
 800ad50:	d115      	bne.n	800ad7e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]
      break;
 800ad56:	e012      	b.n	800ad7e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad5c:	e00f      	b.n	800ad7e <USBH_HandleEnum+0x44a>

    default:
      break;
 800ad5e:	bf00      	nop
 800ad60:	e00e      	b.n	800ad80 <USBH_HandleEnum+0x44c>
      break;
 800ad62:	bf00      	nop
 800ad64:	e00c      	b.n	800ad80 <USBH_HandleEnum+0x44c>
      break;
 800ad66:	bf00      	nop
 800ad68:	e00a      	b.n	800ad80 <USBH_HandleEnum+0x44c>
      break;
 800ad6a:	bf00      	nop
 800ad6c:	e008      	b.n	800ad80 <USBH_HandleEnum+0x44c>
      break;
 800ad6e:	bf00      	nop
 800ad70:	e006      	b.n	800ad80 <USBH_HandleEnum+0x44c>
      break;
 800ad72:	bf00      	nop
 800ad74:	e004      	b.n	800ad80 <USBH_HandleEnum+0x44c>
      break;
 800ad76:	bf00      	nop
 800ad78:	e002      	b.n	800ad80 <USBH_HandleEnum+0x44c>
      break;
 800ad7a:	bf00      	nop
 800ad7c:	e000      	b.n	800ad80 <USBH_HandleEnum+0x44c>
      break;
 800ad7e:	bf00      	nop
  }
  return Status;
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop

0800ad8c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ad9e:	bf00      	nop
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 f804 	bl	800adce <USBH_HandleSof>
}
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b082      	sub	sp, #8
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b0b      	cmp	r3, #11
 800adde:	d10a      	bne.n	800adf6 <USBH_HandleSof+0x28>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d005      	beq.n	800adf6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	4798      	blx	r3
  }
}
 800adf6:	bf00      	nop
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b082      	sub	sp, #8
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae22:	2200      	movs	r2, #0
 800ae24:	4619      	mov	r1, r3
 800ae26:	f001 f803 	bl	800be30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ae2a:	bf00      	nop
}
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b083      	sub	sp, #12
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ae42:	bf00      	nop
}
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b082      	sub	sp, #8
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae82:	2200      	movs	r2, #0
 800ae84:	4619      	mov	r1, r3
 800ae86:	f000 ffd3 	bl	800be30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f003 fb82 	bl	800e5be <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	791b      	ldrb	r3, [r3, #4]
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fecd 	bl	800bc60 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	795b      	ldrb	r3, [r3, #5]
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fec7 	bl	800bc60 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aee6:	2200      	movs	r2, #0
 800aee8:	4619      	mov	r1, r3
 800aeea:	f000 ffa1 	bl	800be30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800af06:	f107 030c 	add.w	r3, r7, #12
 800af0a:	f04f 32ff 	mov.w	r2, #4294967295
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 ffce 	bl	800beb0 <osMessageGet>
    if (event.status == osEventMessage)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b10      	cmp	r3, #16
 800af18:	d1f2      	bne.n	800af00 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff faa8 	bl	800a470 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800af20:	e7ee      	b.n	800af00 <USBH_Process_OS+0x8>

0800af22 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af3e:	2200      	movs	r2, #0
 800af40:	4619      	mov	r1, r3
 800af42:	f000 ff75 	bl	800be30 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af02      	add	r7, sp, #8
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	b29b      	uxth	r3, r3
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	4613      	mov	r3, r2
 800af6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af6e:	2100      	movs	r1, #0
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f864 	bl	800b03e <USBH_GetDescriptor>
 800af76:	4603      	mov	r3, r0
 800af78:	73fb      	strb	r3, [r7, #15]
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10a      	bne.n	800af96 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f203 3026 	addw	r0, r3, #806	; 0x326
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af8c:	78fa      	ldrb	r2, [r7, #3]
 800af8e:	b292      	uxth	r2, r2
 800af90:	4619      	mov	r1, r3
 800af92:	f000 f918 	bl	800b1c6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800af96:	7bfb      	ldrb	r3, [r7, #15]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	331c      	adds	r3, #28
 800afb0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800afb2:	887b      	ldrh	r3, [r7, #2]
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afbc:	2100      	movs	r1, #0
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f83d 	bl	800b03e <USBH_GetDescriptor>
 800afc4:	4603      	mov	r3, r0
 800afc6:	72fb      	strb	r3, [r7, #11]
 800afc8:	7afb      	ldrb	r3, [r7, #11]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d107      	bne.n	800afde <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800afd4:	887a      	ldrh	r2, [r7, #2]
 800afd6:	68f9      	ldr	r1, [r7, #12]
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 f964 	bl	800b2a6 <USBH_ParseCfgDesc>
  }

  return status;
 800afde:	7afb      	ldrb	r3, [r7, #11]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af02      	add	r7, sp, #8
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	607a      	str	r2, [r7, #4]
 800aff2:	461a      	mov	r2, r3
 800aff4:	460b      	mov	r3, r1
 800aff6:	72fb      	strb	r3, [r7, #11]
 800aff8:	4613      	mov	r3, r2
 800affa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800affc:	7afb      	ldrb	r3, [r7, #11]
 800affe:	b29b      	uxth	r3, r3
 800b000:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b004:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b00c:	893b      	ldrh	r3, [r7, #8]
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	460b      	mov	r3, r1
 800b012:	2100      	movs	r1, #0
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f000 f812 	bl	800b03e <USBH_GetDescriptor>
 800b01a:	4603      	mov	r3, r0
 800b01c:	75fb      	strb	r3, [r7, #23]
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d107      	bne.n	800b034 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b02a:	893a      	ldrh	r2, [r7, #8]
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fa37 	bl	800b4a2 <USBH_ParseStringDesc>
  }

  return status;
 800b034:	7dfb      	ldrb	r3, [r7, #23]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b084      	sub	sp, #16
 800b042:	af00      	add	r7, sp, #0
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	607b      	str	r3, [r7, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	72fb      	strb	r3, [r7, #11]
 800b04c:	4613      	mov	r3, r2
 800b04e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	789b      	ldrb	r3, [r3, #2]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d11c      	bne.n	800b092 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b058:	7afb      	ldrb	r3, [r7, #11]
 800b05a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2206      	movs	r2, #6
 800b068:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	893a      	ldrh	r2, [r7, #8]
 800b06e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b070:	893b      	ldrh	r3, [r7, #8]
 800b072:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b07a:	d104      	bne.n	800b086 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f240 4209 	movw	r2, #1033	; 0x409
 800b082:	829a      	strh	r2, [r3, #20]
 800b084:	e002      	b.n	800b08c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	8b3a      	ldrh	r2, [r7, #24]
 800b090:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b092:	8b3b      	ldrh	r3, [r7, #24]
 800b094:	461a      	mov	r2, r3
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 fa50 	bl	800b53e <USBH_CtlReq>
 800b09e:	4603      	mov	r3, r0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	789b      	ldrb	r3, [r3, #2]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d10f      	bne.n	800b0dc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2205      	movs	r2, #5
 800b0c6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b0c8:	78fb      	ldrb	r3, [r7, #3]
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2100      	movs	r1, #0
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fa2c 	bl	800b53e <USBH_CtlReq>
 800b0e6:	4603      	mov	r3, r0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	789b      	ldrb	r3, [r3, #2]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d10e      	bne.n	800b122 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2209      	movs	r2, #9
 800b10e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	887a      	ldrh	r2, [r7, #2]
 800b114:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b122:	2200      	movs	r2, #0
 800b124:	2100      	movs	r1, #0
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fa09 	bl	800b53e <USBH_CtlReq>
 800b12c:	4603      	mov	r3, r0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b082      	sub	sp, #8
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	460b      	mov	r3, r1
 800b140:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	789b      	ldrb	r3, [r3, #2]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d10f      	bne.n	800b16a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2203      	movs	r2, #3
 800b154:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b156:	78fb      	ldrb	r3, [r7, #3]
 800b158:	b29a      	uxth	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b16a:	2200      	movs	r2, #0
 800b16c:	2100      	movs	r1, #0
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f9e5 	bl	800b53e <USBH_CtlReq>
 800b174:	4603      	mov	r3, r0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b082      	sub	sp, #8
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	789b      	ldrb	r3, [r3, #2]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d10f      	bne.n	800b1b2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2202      	movs	r2, #2
 800b196:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f9c1 	bl	800b53e <USBH_CtlReq>
 800b1bc:	4603      	mov	r3, r0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b085      	sub	sp, #20
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	781a      	ldrb	r2, [r3, #0]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	785a      	ldrb	r2, [r3, #1]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	3302      	adds	r3, #2
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	3303      	adds	r3, #3
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	021b      	lsls	r3, r3, #8
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	791a      	ldrb	r2, [r3, #4]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	795a      	ldrb	r2, [r3, #5]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	799a      	ldrb	r2, [r3, #6]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	79da      	ldrb	r2, [r3, #7]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b220:	88fb      	ldrh	r3, [r7, #6]
 800b222:	2b08      	cmp	r3, #8
 800b224:	d939      	bls.n	800b29a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	3308      	adds	r3, #8
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	3309      	adds	r3, #9
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	b29b      	uxth	r3, r3
 800b236:	021b      	lsls	r3, r3, #8
 800b238:	b29b      	uxth	r3, r3
 800b23a:	4313      	orrs	r3, r2
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	330a      	adds	r3, #10
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	b29a      	uxth	r2, r3
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	330b      	adds	r3, #11
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	b29b      	uxth	r3, r3
 800b252:	021b      	lsls	r3, r3, #8
 800b254:	b29b      	uxth	r3, r3
 800b256:	4313      	orrs	r3, r2
 800b258:	b29a      	uxth	r2, r3
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	330c      	adds	r3, #12
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	b29a      	uxth	r2, r3
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	330d      	adds	r3, #13
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	021b      	lsls	r3, r3, #8
 800b270:	b29b      	uxth	r3, r3
 800b272:	4313      	orrs	r3, r2
 800b274:	b29a      	uxth	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	7b9a      	ldrb	r2, [r3, #14]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	7bda      	ldrb	r2, [r3, #15]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	7c1a      	ldrb	r2, [r3, #16]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	7c5a      	ldrb	r2, [r3, #17]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	745a      	strb	r2, [r3, #17]
  }
}
 800b29a:	bf00      	nop
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b08a      	sub	sp, #40	; 0x28
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	60f8      	str	r0, [r7, #12]
 800b2ae:	60b9      	str	r1, [r7, #8]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	781a      	ldrb	r2, [r3, #0]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	785a      	ldrb	r2, [r3, #1]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	3302      	adds	r3, #2
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	3303      	adds	r3, #3
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	021b      	lsls	r3, r3, #8
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	791a      	ldrb	r2, [r3, #4]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	795a      	ldrb	r2, [r3, #5]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	799a      	ldrb	r2, [r3, #6]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	79da      	ldrb	r2, [r3, #7]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	7a1a      	ldrb	r2, [r3, #8]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b31c:	88fb      	ldrh	r3, [r7, #6]
 800b31e:	2b09      	cmp	r3, #9
 800b320:	d95f      	bls.n	800b3e2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b322:	2309      	movs	r3, #9
 800b324:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b326:	2300      	movs	r3, #0
 800b328:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b32a:	e051      	b.n	800b3d0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b32c:	f107 0316 	add.w	r3, r7, #22
 800b330:	4619      	mov	r1, r3
 800b332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b334:	f000 f8e8 	bl	800b508 <USBH_GetNextDesc>
 800b338:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	785b      	ldrb	r3, [r3, #1]
 800b33e:	2b04      	cmp	r3, #4
 800b340:	d146      	bne.n	800b3d0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b346:	221a      	movs	r2, #26
 800b348:	fb02 f303 	mul.w	r3, r2, r3
 800b34c:	3308      	adds	r3, #8
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	4413      	add	r3, r2
 800b352:	3302      	adds	r3, #2
 800b354:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b358:	69f8      	ldr	r0, [r7, #28]
 800b35a:	f000 f846 	bl	800b3ea <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b35e:	2300      	movs	r3, #0
 800b360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b364:	2300      	movs	r3, #0
 800b366:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b368:	e022      	b.n	800b3b0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b36a:	f107 0316 	add.w	r3, r7, #22
 800b36e:	4619      	mov	r1, r3
 800b370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b372:	f000 f8c9 	bl	800b508 <USBH_GetNextDesc>
 800b376:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	785b      	ldrb	r3, [r3, #1]
 800b37c:	2b05      	cmp	r3, #5
 800b37e:	d117      	bne.n	800b3b0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b380:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b384:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b388:	3201      	adds	r2, #1
 800b38a:	00d2      	lsls	r2, r2, #3
 800b38c:	211a      	movs	r1, #26
 800b38e:	fb01 f303 	mul.w	r3, r1, r3
 800b392:	4413      	add	r3, r2
 800b394:	3308      	adds	r3, #8
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	4413      	add	r3, r2
 800b39a:	3304      	adds	r3, #4
 800b39c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b39e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3a0:	69b8      	ldr	r0, [r7, #24]
 800b3a2:	f000 f851 	bl	800b448 <USBH_ParseEPDesc>
            ep_ix++;
 800b3a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	791b      	ldrb	r3, [r3, #4]
 800b3b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d204      	bcs.n	800b3c6 <USBH_ParseCfgDesc+0x120>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	885a      	ldrh	r2, [r3, #2]
 800b3c0:	8afb      	ldrh	r3, [r7, #22]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d8d1      	bhi.n	800b36a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b3c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b3d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d804      	bhi.n	800b3e2 <USBH_ParseCfgDesc+0x13c>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	885a      	ldrh	r2, [r3, #2]
 800b3dc:	8afb      	ldrh	r3, [r7, #22]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d8a4      	bhi.n	800b32c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b3e2:	bf00      	nop
 800b3e4:	3728      	adds	r7, #40	; 0x28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	781a      	ldrb	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	785a      	ldrb	r2, [r3, #1]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	789a      	ldrb	r2, [r3, #2]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	78da      	ldrb	r2, [r3, #3]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	791a      	ldrb	r2, [r3, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	795a      	ldrb	r2, [r3, #5]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	799a      	ldrb	r2, [r3, #6]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	79da      	ldrb	r2, [r3, #7]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	7a1a      	ldrb	r2, [r3, #8]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	721a      	strb	r2, [r3, #8]
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781a      	ldrb	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	785a      	ldrb	r2, [r3, #1]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	789a      	ldrb	r2, [r3, #2]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	78da      	ldrb	r2, [r3, #3]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	3304      	adds	r3, #4
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	b29a      	uxth	r2, r3
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	3305      	adds	r3, #5
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	b29b      	uxth	r3, r3
 800b482:	021b      	lsls	r3, r3, #8
 800b484:	b29b      	uxth	r3, r3
 800b486:	4313      	orrs	r3, r2
 800b488:	b29a      	uxth	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	799a      	ldrb	r2, [r3, #6]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	719a      	strb	r2, [r3, #6]
}
 800b496:	bf00      	nop
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b087      	sub	sp, #28
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d120      	bne.n	800b4fc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	1e9a      	subs	r2, r3, #2
 800b4c0:	88fb      	ldrh	r3, [r7, #6]
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	bf28      	it	cs
 800b4c6:	4613      	movcs	r3, r2
 800b4c8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	82fb      	strh	r3, [r7, #22]
 800b4d4:	e00b      	b.n	800b4ee <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b4d6:	8afb      	ldrh	r3, [r7, #22]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4413      	add	r3, r2
 800b4dc:	781a      	ldrb	r2, [r3, #0]
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b4e8:	8afb      	ldrh	r3, [r7, #22]
 800b4ea:	3302      	adds	r3, #2
 800b4ec:	82fb      	strh	r3, [r7, #22]
 800b4ee:	8afa      	ldrh	r2, [r7, #22]
 800b4f0:	8abb      	ldrh	r3, [r7, #20]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d3ef      	bcc.n	800b4d6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	701a      	strb	r2, [r3, #0]
  }
}
 800b4fc:	bf00      	nop
 800b4fe:	371c      	adds	r7, #28
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	881a      	ldrh	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	4413      	add	r3, r2
 800b51e:	b29a      	uxth	r2, r3
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4413      	add	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b530:	68fb      	ldr	r3, [r7, #12]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr

0800b53e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b086      	sub	sp, #24
 800b542:	af00      	add	r7, sp, #0
 800b544:	60f8      	str	r0, [r7, #12]
 800b546:	60b9      	str	r1, [r7, #8]
 800b548:	4613      	mov	r3, r2
 800b54a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b54c:	2301      	movs	r3, #1
 800b54e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	789b      	ldrb	r3, [r3, #2]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d002      	beq.n	800b55e <USBH_CtlReq+0x20>
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d01d      	beq.n	800b598 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b55c:	e043      	b.n	800b5e6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	88fa      	ldrh	r2, [r7, #6]
 800b568:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2201      	movs	r2, #1
 800b56e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2202      	movs	r2, #2
 800b574:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b576:	2301      	movs	r3, #1
 800b578:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2203      	movs	r2, #3
 800b57e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b58e:	2200      	movs	r2, #0
 800b590:	4619      	mov	r1, r3
 800b592:	f000 fc4d 	bl	800be30 <osMessagePut>
      break;
 800b596:	e026      	b.n	800b5e6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 f829 	bl	800b5f0 <USBH_HandleControl>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d002      	beq.n	800b5ae <USBH_CtlReq+0x70>
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d106      	bne.n	800b5bc <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	761a      	strb	r2, [r3, #24]
 800b5ba:	e005      	b.n	800b5c8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b5bc:	7dfb      	ldrb	r3, [r7, #23]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d102      	bne.n	800b5c8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2203      	movs	r2, #3
 800b5cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5dc:	2200      	movs	r2, #0
 800b5de:	4619      	mov	r1, r3
 800b5e0:	f000 fc26 	bl	800be30 <osMessagePut>
      break;
 800b5e4:	bf00      	nop
  }
  return status;
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b086      	sub	sp, #24
 800b5f4:	af02      	add	r7, sp, #8
 800b5f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	7e1b      	ldrb	r3, [r3, #24]
 800b604:	3b01      	subs	r3, #1
 800b606:	2b0a      	cmp	r3, #10
 800b608:	f200 8229 	bhi.w	800ba5e <USBH_HandleControl+0x46e>
 800b60c:	a201      	add	r2, pc, #4	; (adr r2, 800b614 <USBH_HandleControl+0x24>)
 800b60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b612:	bf00      	nop
 800b614:	0800b641 	.word	0x0800b641
 800b618:	0800b65b 	.word	0x0800b65b
 800b61c:	0800b6fd 	.word	0x0800b6fd
 800b620:	0800b723 	.word	0x0800b723
 800b624:	0800b7af 	.word	0x0800b7af
 800b628:	0800b7d9 	.word	0x0800b7d9
 800b62c:	0800b89b 	.word	0x0800b89b
 800b630:	0800b8bd 	.word	0x0800b8bd
 800b634:	0800b94f 	.word	0x0800b94f
 800b638:	0800b975 	.word	0x0800b975
 800b63c:	0800ba07 	.word	0x0800ba07
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f103 0110 	add.w	r1, r3, #16
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	795b      	ldrb	r3, [r3, #5]
 800b64a:	461a      	mov	r2, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fa17 	bl	800ba80 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2202      	movs	r2, #2
 800b656:	761a      	strb	r2, [r3, #24]
      break;
 800b658:	e20c      	b.n	800ba74 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	795b      	ldrb	r3, [r3, #5]
 800b65e:	4619      	mov	r1, r3
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f003 f89b 	bl	800e79c <USBH_LL_GetURBState>
 800b666:	4603      	mov	r3, r0
 800b668:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d12c      	bne.n	800b6ca <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	7c1b      	ldrb	r3, [r3, #16]
 800b674:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b678:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	8adb      	ldrh	r3, [r3, #22]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00a      	beq.n	800b698 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b682:	7b7b      	ldrb	r3, [r7, #13]
 800b684:	2b80      	cmp	r3, #128	; 0x80
 800b686:	d103      	bne.n	800b690 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2203      	movs	r2, #3
 800b68c:	761a      	strb	r2, [r3, #24]
 800b68e:	e00d      	b.n	800b6ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2205      	movs	r2, #5
 800b694:	761a      	strb	r2, [r3, #24]
 800b696:	e009      	b.n	800b6ac <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b698:	7b7b      	ldrb	r3, [r7, #13]
 800b69a:	2b80      	cmp	r3, #128	; 0x80
 800b69c:	d103      	bne.n	800b6a6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2209      	movs	r2, #9
 800b6a2:	761a      	strb	r2, [r3, #24]
 800b6a4:	e002      	b.n	800b6ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2207      	movs	r2, #7
 800b6aa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2203      	movs	r2, #3
 800b6b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	f000 fbb4 	bl	800be30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b6c8:	e1cb      	b.n	800ba62 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b6ca:	7bbb      	ldrb	r3, [r7, #14]
 800b6cc:	2b04      	cmp	r3, #4
 800b6ce:	d003      	beq.n	800b6d8 <USBH_HandleControl+0xe8>
 800b6d0:	7bbb      	ldrb	r3, [r7, #14]
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	f040 81c5 	bne.w	800ba62 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	220b      	movs	r2, #11
 800b6dc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2203      	movs	r2, #3
 800b6e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	f000 fb9b 	bl	800be30 <osMessagePut>
      break;
 800b6fa:	e1b2      	b.n	800ba62 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b702:	b29a      	uxth	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6899      	ldr	r1, [r3, #8]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	899a      	ldrh	r2, [r3, #12]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	791b      	ldrb	r3, [r3, #4]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f9f2 	bl	800bafe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2204      	movs	r2, #4
 800b71e:	761a      	strb	r2, [r3, #24]
      break;
 800b720:	e1a8      	b.n	800ba74 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	791b      	ldrb	r3, [r3, #4]
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f003 f837 	bl	800e79c <USBH_LL_GetURBState>
 800b72e:	4603      	mov	r3, r0
 800b730:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b732:	7bbb      	ldrb	r3, [r7, #14]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d110      	bne.n	800b75a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2209      	movs	r2, #9
 800b73c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2203      	movs	r2, #3
 800b742:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b752:	2200      	movs	r2, #0
 800b754:	4619      	mov	r1, r3
 800b756:	f000 fb6b 	bl	800be30 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b75a:	7bbb      	ldrb	r3, [r7, #14]
 800b75c:	2b05      	cmp	r3, #5
 800b75e:	d110      	bne.n	800b782 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b760:	2303      	movs	r3, #3
 800b762:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2203      	movs	r2, #3
 800b768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b778:	2200      	movs	r2, #0
 800b77a:	4619      	mov	r1, r3
 800b77c:	f000 fb58 	bl	800be30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b780:	e171      	b.n	800ba66 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	2b04      	cmp	r3, #4
 800b786:	f040 816e 	bne.w	800ba66 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	220b      	movs	r2, #11
 800b78e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2203      	movs	r2, #3
 800b794:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	f000 fb42 	bl	800be30 <osMessagePut>
      break;
 800b7ac:	e15b      	b.n	800ba66 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6899      	ldr	r1, [r3, #8]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	899a      	ldrh	r2, [r3, #12]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	795b      	ldrb	r3, [r3, #5]
 800b7ba:	2001      	movs	r0, #1
 800b7bc:	9000      	str	r0, [sp, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f978 	bl	800bab4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2206      	movs	r2, #6
 800b7d4:	761a      	strb	r2, [r3, #24]
      break;
 800b7d6:	e14d      	b.n	800ba74 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	795b      	ldrb	r3, [r3, #5]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f002 ffdc 	bl	800e79c <USBH_LL_GetURBState>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d111      	bne.n	800b812 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2207      	movs	r2, #7
 800b7f2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2203      	movs	r2, #3
 800b7f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b808:	2200      	movs	r2, #0
 800b80a:	4619      	mov	r1, r3
 800b80c:	f000 fb10 	bl	800be30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b810:	e12b      	b.n	800ba6a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b812:	7bbb      	ldrb	r3, [r7, #14]
 800b814:	2b05      	cmp	r3, #5
 800b816:	d113      	bne.n	800b840 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	220c      	movs	r2, #12
 800b81c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b81e:	2303      	movs	r3, #3
 800b820:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2203      	movs	r2, #3
 800b826:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b836:	2200      	movs	r2, #0
 800b838:	4619      	mov	r1, r3
 800b83a:	f000 faf9 	bl	800be30 <osMessagePut>
      break;
 800b83e:	e114      	b.n	800ba6a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	2b02      	cmp	r3, #2
 800b844:	d111      	bne.n	800b86a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2205      	movs	r2, #5
 800b84a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2203      	movs	r2, #3
 800b850:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b860:	2200      	movs	r2, #0
 800b862:	4619      	mov	r1, r3
 800b864:	f000 fae4 	bl	800be30 <osMessagePut>
      break;
 800b868:	e0ff      	b.n	800ba6a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b86a:	7bbb      	ldrb	r3, [r7, #14]
 800b86c:	2b04      	cmp	r3, #4
 800b86e:	f040 80fc 	bne.w	800ba6a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	220b      	movs	r2, #11
 800b876:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b878:	2302      	movs	r3, #2
 800b87a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2203      	movs	r2, #3
 800b880:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b890:	2200      	movs	r2, #0
 800b892:	4619      	mov	r1, r3
 800b894:	f000 facc 	bl	800be30 <osMessagePut>
      break;
 800b898:	e0e7      	b.n	800ba6a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	791b      	ldrb	r3, [r3, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f92b 	bl	800bafe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2208      	movs	r2, #8
 800b8b8:	761a      	strb	r2, [r3, #24]

      break;
 800b8ba:	e0db      	b.n	800ba74 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	791b      	ldrb	r3, [r3, #4]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f002 ff6a 	bl	800e79c <USBH_LL_GetURBState>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b8cc:	7bbb      	ldrb	r3, [r7, #14]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d113      	bne.n	800b8fa <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	220d      	movs	r2, #13
 800b8d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2203      	movs	r2, #3
 800b8e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	f000 fa9c 	bl	800be30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8f8:	e0b9      	b.n	800ba6e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b8fa:	7bbb      	ldrb	r3, [r7, #14]
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	d111      	bne.n	800b924 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	220b      	movs	r2, #11
 800b904:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2203      	movs	r2, #3
 800b90a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b91a:	2200      	movs	r2, #0
 800b91c:	4619      	mov	r1, r3
 800b91e:	f000 fa87 	bl	800be30 <osMessagePut>
      break;
 800b922:	e0a4      	b.n	800ba6e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	2b05      	cmp	r3, #5
 800b928:	f040 80a1 	bne.w	800ba6e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b92c:	2303      	movs	r3, #3
 800b92e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2203      	movs	r2, #3
 800b934:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b944:	2200      	movs	r2, #0
 800b946:	4619      	mov	r1, r3
 800b948:	f000 fa72 	bl	800be30 <osMessagePut>
      break;
 800b94c:	e08f      	b.n	800ba6e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	795b      	ldrb	r3, [r3, #5]
 800b952:	2201      	movs	r2, #1
 800b954:	9200      	str	r2, [sp, #0]
 800b956:	2200      	movs	r2, #0
 800b958:	2100      	movs	r1, #0
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f8aa 	bl	800bab4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b966:	b29a      	uxth	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	220a      	movs	r2, #10
 800b970:	761a      	strb	r2, [r3, #24]
      break;
 800b972:	e07f      	b.n	800ba74 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	795b      	ldrb	r3, [r3, #5]
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f002 ff0e 	bl	800e79c <USBH_LL_GetURBState>
 800b980:	4603      	mov	r3, r0
 800b982:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b984:	7bbb      	ldrb	r3, [r7, #14]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d113      	bne.n	800b9b2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	220d      	movs	r2, #13
 800b992:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2203      	movs	r2, #3
 800b998:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	f000 fa40 	bl	800be30 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9b0:	e05f      	b.n	800ba72 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d111      	bne.n	800b9dc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2209      	movs	r2, #9
 800b9bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2203      	movs	r2, #3
 800b9c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	f000 fa2b 	bl	800be30 <osMessagePut>
      break;
 800b9da:	e04a      	b.n	800ba72 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	2b04      	cmp	r3, #4
 800b9e0:	d147      	bne.n	800ba72 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	220b      	movs	r2, #11
 800b9e6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2203      	movs	r2, #3
 800b9ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4619      	mov	r1, r3
 800ba00:	f000 fa16 	bl	800be30 <osMessagePut>
      break;
 800ba04:	e035      	b.n	800ba72 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	7e5b      	ldrb	r3, [r3, #25]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	765a      	strb	r2, [r3, #25]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	7e5b      	ldrb	r3, [r3, #25]
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d806      	bhi.n	800ba28 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ba26:	e025      	b.n	800ba74 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba2e:	2106      	movs	r1, #6
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	795b      	ldrb	r3, [r3, #5]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f90d 	bl	800bc60 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	791b      	ldrb	r3, [r3, #4]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f907 	bl	800bc60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba5c:	e00a      	b.n	800ba74 <USBH_HandleControl+0x484>

    default:
      break;
 800ba5e:	bf00      	nop
 800ba60:	e008      	b.n	800ba74 <USBH_HandleControl+0x484>
      break;
 800ba62:	bf00      	nop
 800ba64:	e006      	b.n	800ba74 <USBH_HandleControl+0x484>
      break;
 800ba66:	bf00      	nop
 800ba68:	e004      	b.n	800ba74 <USBH_HandleControl+0x484>
      break;
 800ba6a:	bf00      	nop
 800ba6c:	e002      	b.n	800ba74 <USBH_HandleControl+0x484>
      break;
 800ba6e:	bf00      	nop
 800ba70:	e000      	b.n	800ba74 <USBH_HandleControl+0x484>
      break;
 800ba72:	bf00      	nop
  }

  return status;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop

0800ba80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b088      	sub	sp, #32
 800ba84:	af04      	add	r7, sp, #16
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba8e:	79f9      	ldrb	r1, [r7, #7]
 800ba90:	2300      	movs	r3, #0
 800ba92:	9303      	str	r3, [sp, #12]
 800ba94:	2308      	movs	r3, #8
 800ba96:	9302      	str	r3, [sp, #8]
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	9301      	str	r3, [sp, #4]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	2300      	movs	r3, #0
 800baa2:	2200      	movs	r2, #0
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f002 fe48 	bl	800e73a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af04      	add	r7, sp, #16
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	4611      	mov	r1, r2
 800bac0:	461a      	mov	r2, r3
 800bac2:	460b      	mov	r3, r1
 800bac4:	80fb      	strh	r3, [r7, #6]
 800bac6:	4613      	mov	r3, r2
 800bac8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bad8:	7979      	ldrb	r1, [r7, #5]
 800bada:	7e3b      	ldrb	r3, [r7, #24]
 800badc:	9303      	str	r3, [sp, #12]
 800bade:	88fb      	ldrh	r3, [r7, #6]
 800bae0:	9302      	str	r3, [sp, #8]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	2301      	movs	r3, #1
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	2300      	movs	r3, #0
 800baec:	2200      	movs	r2, #0
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f002 fe23 	bl	800e73a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b088      	sub	sp, #32
 800bb02:	af04      	add	r7, sp, #16
 800bb04:	60f8      	str	r0, [r7, #12]
 800bb06:	60b9      	str	r1, [r7, #8]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	80fb      	strh	r3, [r7, #6]
 800bb10:	4613      	mov	r3, r2
 800bb12:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb14:	7979      	ldrb	r1, [r7, #5]
 800bb16:	2300      	movs	r3, #0
 800bb18:	9303      	str	r3, [sp, #12]
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	9302      	str	r3, [sp, #8]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	9301      	str	r3, [sp, #4]
 800bb22:	2301      	movs	r3, #1
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	2300      	movs	r3, #0
 800bb28:	2201      	movs	r2, #1
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f002 fe05 	bl	800e73a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bb30:	2300      	movs	r3, #0

}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b088      	sub	sp, #32
 800bb3e:	af04      	add	r7, sp, #16
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	4611      	mov	r1, r2
 800bb46:	461a      	mov	r2, r3
 800bb48:	460b      	mov	r3, r1
 800bb4a:	80fb      	strh	r3, [r7, #6]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb5e:	7979      	ldrb	r1, [r7, #5]
 800bb60:	7e3b      	ldrb	r3, [r7, #24]
 800bb62:	9303      	str	r3, [sp, #12]
 800bb64:	88fb      	ldrh	r3, [r7, #6]
 800bb66:	9302      	str	r3, [sp, #8]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	9301      	str	r3, [sp, #4]
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	2302      	movs	r3, #2
 800bb72:	2200      	movs	r2, #0
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f002 fde0 	bl	800e73a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af04      	add	r7, sp, #16
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	4611      	mov	r1, r2
 800bb90:	461a      	mov	r2, r3
 800bb92:	460b      	mov	r3, r1
 800bb94:	80fb      	strh	r3, [r7, #6]
 800bb96:	4613      	mov	r3, r2
 800bb98:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb9a:	7979      	ldrb	r1, [r7, #5]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9303      	str	r3, [sp, #12]
 800bba0:	88fb      	ldrh	r3, [r7, #6]
 800bba2:	9302      	str	r3, [sp, #8]
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	2301      	movs	r3, #1
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	2302      	movs	r3, #2
 800bbae:	2201      	movs	r2, #1
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f002 fdc2 	bl	800e73a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af04      	add	r7, sp, #16
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	4608      	mov	r0, r1
 800bbca:	4611      	mov	r1, r2
 800bbcc:	461a      	mov	r2, r3
 800bbce:	4603      	mov	r3, r0
 800bbd0:	70fb      	strb	r3, [r7, #3]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70bb      	strb	r3, [r7, #2]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bbda:	7878      	ldrb	r0, [r7, #1]
 800bbdc:	78ba      	ldrb	r2, [r7, #2]
 800bbde:	78f9      	ldrb	r1, [r7, #3]
 800bbe0:	8b3b      	ldrh	r3, [r7, #24]
 800bbe2:	9302      	str	r3, [sp, #8]
 800bbe4:	7d3b      	ldrb	r3, [r7, #20]
 800bbe6:	9301      	str	r3, [sp, #4]
 800bbe8:	7c3b      	ldrb	r3, [r7, #16]
 800bbea:	9300      	str	r3, [sp, #0]
 800bbec:	4603      	mov	r3, r0
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f002 fd55 	bl	800e69e <USBH_LL_OpenPipe>

  return USBH_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b082      	sub	sp, #8
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bc0a:	78fb      	ldrb	r3, [r7, #3]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f002 fd74 	bl	800e6fc <USBH_LL_ClosePipe>

  return USBH_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b084      	sub	sp, #16
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	460b      	mov	r3, r1
 800bc28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f836 	bl	800bc9c <USBH_GetFreePipe>
 800bc30:	4603      	mov	r3, r0
 800bc32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bc34:	89fb      	ldrh	r3, [r7, #14]
 800bc36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d00a      	beq.n	800bc54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bc3e:	78fa      	ldrb	r2, [r7, #3]
 800bc40:	89fb      	ldrh	r3, [r7, #14]
 800bc42:	f003 030f 	and.w	r3, r3, #15
 800bc46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	33e0      	adds	r3, #224	; 0xe0
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	440b      	add	r3, r1
 800bc52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bc54:	89fb      	ldrh	r3, [r7, #14]
 800bc56:	b2db      	uxtb	r3, r3
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bc6c:	78fb      	ldrb	r3, [r7, #3]
 800bc6e:	2b0a      	cmp	r3, #10
 800bc70:	d80d      	bhi.n	800bc8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bc72:	78fb      	ldrb	r3, [r7, #3]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	33e0      	adds	r3, #224	; 0xe0
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	78fb      	ldrb	r3, [r7, #3]
 800bc80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bc84:	6879      	ldr	r1, [r7, #4]
 800bc86:	33e0      	adds	r3, #224	; 0xe0
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	440b      	add	r3, r1
 800bc8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	73fb      	strb	r3, [r7, #15]
 800bcac:	e00f      	b.n	800bcce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	33e0      	adds	r3, #224	; 0xe0
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d102      	bne.n	800bcc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	e007      	b.n	800bcd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
 800bcca:	3301      	adds	r3, #1
 800bccc:	73fb      	strb	r3, [r7, #15]
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
 800bcd0:	2b0a      	cmp	r3, #10
 800bcd2:	d9ec      	bls.n	800bcae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bcd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bcf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcf6:	2b84      	cmp	r3, #132	; 0x84
 800bcf8:	d005      	beq.n	800bd06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bcfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	4413      	add	r3, r2
 800bd02:	3303      	adds	r3, #3
 800bd04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bd06:	68fb      	ldr	r3, [r7, #12]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3714      	adds	r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd1a:	f3ef 8305 	mrs	r3, IPSR
 800bd1e:	607b      	str	r3, [r7, #4]
  return(result);
 800bd20:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	bf14      	ite	ne
 800bd26:	2301      	movne	r3, #1
 800bd28:	2300      	moveq	r3, #0
 800bd2a:	b2db      	uxtb	r3, r3
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bd3c:	f001 f976 	bl	800d02c <vTaskStartScheduler>
  
  return osOK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bd46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd48:	b089      	sub	sp, #36	; 0x24
 800bd4a:	af04      	add	r7, sp, #16
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	695b      	ldr	r3, [r3, #20]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d020      	beq.n	800bd9a <osThreadCreate+0x54>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d01c      	beq.n	800bd9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	685c      	ldr	r4, [r3, #4]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681d      	ldr	r5, [r3, #0]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	691e      	ldr	r6, [r3, #16]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff ffb6 	bl	800bce4 <makeFreeRtosPriority>
 800bd78:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd82:	9202      	str	r2, [sp, #8]
 800bd84:	9301      	str	r3, [sp, #4]
 800bd86:	9100      	str	r1, [sp, #0]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	4632      	mov	r2, r6
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 fefc 	bl	800cb8c <xTaskCreateStatic>
 800bd94:	4603      	mov	r3, r0
 800bd96:	60fb      	str	r3, [r7, #12]
 800bd98:	e01c      	b.n	800bdd4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	685c      	ldr	r4, [r3, #4]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bda6:	b29e      	uxth	r6, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff ff98 	bl	800bce4 <makeFreeRtosPriority>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	f107 030c 	add.w	r3, r7, #12
 800bdba:	9301      	str	r3, [sp, #4]
 800bdbc:	9200      	str	r2, [sp, #0]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	4632      	mov	r2, r6
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f000 ff3e 	bl	800cc46 <xTaskCreate>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d001      	beq.n	800bdd4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	e000      	b.n	800bdd6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bdde <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bdde:	b590      	push	{r4, r7, lr}
 800bde0:	b085      	sub	sp, #20
 800bde2:	af02      	add	r7, sp, #8
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d011      	beq.n	800be14 <osMessageCreate+0x36>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00d      	beq.n	800be14 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6818      	ldr	r0, [r3, #0]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6859      	ldr	r1, [r3, #4]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	689a      	ldr	r2, [r3, #8]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	2400      	movs	r4, #0
 800be0a:	9400      	str	r4, [sp, #0]
 800be0c:	f000 f9e0 	bl	800c1d0 <xQueueGenericCreateStatic>
 800be10:	4603      	mov	r3, r0
 800be12:	e008      	b.n	800be26 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6818      	ldr	r0, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	4619      	mov	r1, r3
 800be20:	f000 fa4e 	bl	800c2c0 <xQueueGenericCreate>
 800be24:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800be26:	4618      	mov	r0, r3
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd90      	pop	{r4, r7, pc}
	...

0800be30 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800be3c:	2300      	movs	r3, #0
 800be3e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d101      	bne.n	800be4e <osMessagePut+0x1e>
    ticks = 1;
 800be4a:	2301      	movs	r3, #1
 800be4c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800be4e:	f7ff ff61 	bl	800bd14 <inHandlerMode>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d018      	beq.n	800be8a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800be58:	f107 0210 	add.w	r2, r7, #16
 800be5c:	f107 0108 	add.w	r1, r7, #8
 800be60:	2300      	movs	r3, #0
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f000 fb8a 	bl	800c57c <xQueueGenericSendFromISR>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d001      	beq.n	800be72 <osMessagePut+0x42>
      return osErrorOS;
 800be6e:	23ff      	movs	r3, #255	; 0xff
 800be70:	e018      	b.n	800bea4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d014      	beq.n	800bea2 <osMessagePut+0x72>
 800be78:	4b0c      	ldr	r3, [pc, #48]	; (800beac <osMessagePut+0x7c>)
 800be7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be7e:	601a      	str	r2, [r3, #0]
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	e00b      	b.n	800bea2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800be8a:	f107 0108 	add.w	r1, r7, #8
 800be8e:	2300      	movs	r3, #0
 800be90:	697a      	ldr	r2, [r7, #20]
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f000 fa74 	bl	800c380 <xQueueGenericSend>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d001      	beq.n	800bea2 <osMessagePut+0x72>
      return osErrorOS;
 800be9e:	23ff      	movs	r3, #255	; 0xff
 800bea0:	e000      	b.n	800bea4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3718      	adds	r7, #24
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	e000ed04 	.word	0xe000ed04

0800beb0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800beb0:	b590      	push	{r4, r7, lr}
 800beb2:	b08b      	sub	sp, #44	; 0x2c
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10a      	bne.n	800bee0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800beca:	2380      	movs	r3, #128	; 0x80
 800becc:	617b      	str	r3, [r7, #20]
    return event;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	461c      	mov	r4, r3
 800bed2:	f107 0314 	add.w	r3, r7, #20
 800bed6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800beda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bede:	e054      	b.n	800bf8a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bee0:	2300      	movs	r3, #0
 800bee2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beee:	d103      	bne.n	800bef8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bef0:	f04f 33ff 	mov.w	r3, #4294967295
 800bef4:	627b      	str	r3, [r7, #36]	; 0x24
 800bef6:	e009      	b.n	800bf0c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d006      	beq.n	800bf0c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d101      	bne.n	800bf0c <osMessageGet+0x5c>
      ticks = 1;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bf0c:	f7ff ff02 	bl	800bd14 <inHandlerMode>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d01c      	beq.n	800bf50 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bf16:	f107 0220 	add.w	r2, r7, #32
 800bf1a:	f107 0314 	add.w	r3, r7, #20
 800bf1e:	3304      	adds	r3, #4
 800bf20:	4619      	mov	r1, r3
 800bf22:	68b8      	ldr	r0, [r7, #8]
 800bf24:	f000 fca2 	bl	800c86c <xQueueReceiveFromISR>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d102      	bne.n	800bf34 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bf2e:	2310      	movs	r3, #16
 800bf30:	617b      	str	r3, [r7, #20]
 800bf32:	e001      	b.n	800bf38 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bf34:	2300      	movs	r3, #0
 800bf36:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf38:	6a3b      	ldr	r3, [r7, #32]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d01d      	beq.n	800bf7a <osMessageGet+0xca>
 800bf3e:	4b15      	ldr	r3, [pc, #84]	; (800bf94 <osMessageGet+0xe4>)
 800bf40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	f3bf 8f4f 	dsb	sy
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	e014      	b.n	800bf7a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bf50:	f107 0314 	add.w	r3, r7, #20
 800bf54:	3304      	adds	r3, #4
 800bf56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf58:	4619      	mov	r1, r3
 800bf5a:	68b8      	ldr	r0, [r7, #8]
 800bf5c:	f000 fba6 	bl	800c6ac <xQueueReceive>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d102      	bne.n	800bf6c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bf66:	2310      	movs	r3, #16
 800bf68:	617b      	str	r3, [r7, #20]
 800bf6a:	e006      	b.n	800bf7a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <osMessageGet+0xc6>
 800bf72:	2300      	movs	r3, #0
 800bf74:	e000      	b.n	800bf78 <osMessageGet+0xc8>
 800bf76:	2340      	movs	r3, #64	; 0x40
 800bf78:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	461c      	mov	r4, r3
 800bf7e:	f107 0314 	add.w	r3, r7, #20
 800bf82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	372c      	adds	r7, #44	; 0x2c
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd90      	pop	{r4, r7, pc}
 800bf92:	bf00      	nop
 800bf94:	e000ed04 	.word	0xe000ed04

0800bf98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f103 0208 	add.w	r2, r3, #8
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f103 0208 	add.w	r2, r3, #8
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f103 0208 	add.w	r2, r3, #8
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bfe6:	bf00      	nop
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bff2:	b480      	push	{r7}
 800bff4:	b085      	sub	sp, #20
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	1c5a      	adds	r2, r3, #1
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	601a      	str	r2, [r3, #0]
}
 800c02e:	bf00      	nop
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c03a:	b480      	push	{r7}
 800c03c:	b085      	sub	sp, #20
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c050:	d103      	bne.n	800c05a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	60fb      	str	r3, [r7, #12]
 800c058:	e00c      	b.n	800c074 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3308      	adds	r3, #8
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	e002      	b.n	800c068 <vListInsert+0x2e>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	60fb      	str	r3, [r7, #12]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	429a      	cmp	r2, r3
 800c072:	d2f6      	bcs.n	800c062 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	685a      	ldr	r2, [r3, #4]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	601a      	str	r2, [r3, #0]
}
 800c0a0:	bf00      	nop
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	6892      	ldr	r2, [r2, #8]
 800c0c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	6852      	ldr	r2, [r2, #4]
 800c0cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d103      	bne.n	800c0e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	689a      	ldr	r2, [r3, #8]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	1e5a      	subs	r2, r3, #1
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10a      	bne.n	800c12a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c12a:	f001 fddb 	bl	800dce4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c136:	68f9      	ldr	r1, [r7, #12]
 800c138:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c13a:	fb01 f303 	mul.w	r3, r1, r3
 800c13e:	441a      	add	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15a:	3b01      	subs	r3, #1
 800c15c:	68f9      	ldr	r1, [r7, #12]
 800c15e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c160:	fb01 f303 	mul.w	r3, r1, r3
 800c164:	441a      	add	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	22ff      	movs	r2, #255	; 0xff
 800c16e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	22ff      	movs	r2, #255	; 0xff
 800c176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d114      	bne.n	800c1aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d01a      	beq.n	800c1be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3310      	adds	r3, #16
 800c18c:	4618      	mov	r0, r3
 800c18e:	f001 f9b3 	bl	800d4f8 <xTaskRemoveFromEventList>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d012      	beq.n	800c1be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c198:	4b0c      	ldr	r3, [pc, #48]	; (800c1cc <xQueueGenericReset+0xcc>)
 800c19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c19e:	601a      	str	r2, [r3, #0]
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	e009      	b.n	800c1be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3310      	adds	r3, #16
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff fef2 	bl	800bf98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3324      	adds	r3, #36	; 0x24
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff feed 	bl	800bf98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c1be:	f001 fdc1 	bl	800dd44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c1c2:	2301      	movs	r3, #1
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	e000ed04 	.word	0xe000ed04

0800c1d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b08e      	sub	sp, #56	; 0x38
 800c1d4:	af02      	add	r7, sp, #8
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
 800c1dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10a      	bne.n	800c1fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1f6:	bf00      	nop
 800c1f8:	e7fe      	b.n	800c1f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10a      	bne.n	800c216 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c212:	bf00      	nop
 800c214:	e7fe      	b.n	800c214 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d002      	beq.n	800c222 <xQueueGenericCreateStatic+0x52>
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d001      	beq.n	800c226 <xQueueGenericCreateStatic+0x56>
 800c222:	2301      	movs	r3, #1
 800c224:	e000      	b.n	800c228 <xQueueGenericCreateStatic+0x58>
 800c226:	2300      	movs	r3, #0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10a      	bne.n	800c242 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	623b      	str	r3, [r7, #32]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d102      	bne.n	800c24e <xQueueGenericCreateStatic+0x7e>
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d101      	bne.n	800c252 <xQueueGenericCreateStatic+0x82>
 800c24e:	2301      	movs	r3, #1
 800c250:	e000      	b.n	800c254 <xQueueGenericCreateStatic+0x84>
 800c252:	2300      	movs	r3, #0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	61fb      	str	r3, [r7, #28]
}
 800c26a:	bf00      	nop
 800c26c:	e7fe      	b.n	800c26c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c26e:	2348      	movs	r3, #72	; 0x48
 800c270:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b48      	cmp	r3, #72	; 0x48
 800c276:	d00a      	beq.n	800c28e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	61bb      	str	r3, [r7, #24]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c28e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00d      	beq.n	800c2b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29c:	2201      	movs	r2, #1
 800c29e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	68b9      	ldr	r1, [r7, #8]
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f000 f845 	bl	800c340 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3730      	adds	r7, #48	; 0x30
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b08a      	sub	sp, #40	; 0x28
 800c2c4:	af02      	add	r7, sp, #8
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10a      	bne.n	800c2ea <xQueueGenericCreate+0x2a>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	613b      	str	r3, [r7, #16]
}
 800c2e6:	bf00      	nop
 800c2e8:	e7fe      	b.n	800c2e8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d102      	bne.n	800c2f6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	61fb      	str	r3, [r7, #28]
 800c2f4:	e004      	b.n	800c300 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	fb02 f303 	mul.w	r3, r2, r3
 800c2fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	3348      	adds	r3, #72	; 0x48
 800c304:	4618      	mov	r0, r3
 800c306:	f001 fe0f 	bl	800df28 <pvPortMalloc>
 800c30a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d011      	beq.n	800c336 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	3348      	adds	r3, #72	; 0x48
 800c31a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	2200      	movs	r2, #0
 800c320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c324:	79fa      	ldrb	r2, [r7, #7]
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	4613      	mov	r3, r2
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	68b9      	ldr	r1, [r7, #8]
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f000 f805 	bl	800c340 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c336:	69bb      	ldr	r3, [r7, #24]
	}
 800c338:	4618      	mov	r0, r3
 800c33a:	3720      	adds	r7, #32
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
 800c34c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d103      	bne.n	800c35c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	69ba      	ldr	r2, [r7, #24]
 800c358:	601a      	str	r2, [r3, #0]
 800c35a:	e002      	b.n	800c362 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c36e:	2101      	movs	r1, #1
 800c370:	69b8      	ldr	r0, [r7, #24]
 800c372:	f7ff fec5 	bl	800c100 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c376:	bf00      	nop
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
	...

0800c380 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b08e      	sub	sp, #56	; 0x38
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c38e:	2300      	movs	r3, #0
 800c390:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10a      	bne.n	800c3b2 <xQueueGenericSend+0x32>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d103      	bne.n	800c3c0 <xQueueGenericSend+0x40>
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <xQueueGenericSend+0x44>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e000      	b.n	800c3c6 <xQueueGenericSend+0x46>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <xQueueGenericSend+0x60>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d103      	bne.n	800c3ee <xQueueGenericSend+0x6e>
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d101      	bne.n	800c3f2 <xQueueGenericSend+0x72>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e000      	b.n	800c3f4 <xQueueGenericSend+0x74>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10a      	bne.n	800c40e <xQueueGenericSend+0x8e>
	__asm volatile
 800c3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fc:	f383 8811 	msr	BASEPRI, r3
 800c400:	f3bf 8f6f 	isb	sy
 800c404:	f3bf 8f4f 	dsb	sy
 800c408:	623b      	str	r3, [r7, #32]
}
 800c40a:	bf00      	nop
 800c40c:	e7fe      	b.n	800c40c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c40e:	f001 fa31 	bl	800d874 <xTaskGetSchedulerState>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <xQueueGenericSend+0x9e>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <xQueueGenericSend+0xa2>
 800c41e:	2301      	movs	r3, #1
 800c420:	e000      	b.n	800c424 <xQueueGenericSend+0xa4>
 800c422:	2300      	movs	r3, #0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10a      	bne.n	800c43e <xQueueGenericSend+0xbe>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	61fb      	str	r3, [r7, #28]
}
 800c43a:	bf00      	nop
 800c43c:	e7fe      	b.n	800c43c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c43e:	f001 fc51 	bl	800dce4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d302      	bcc.n	800c454 <xQueueGenericSend+0xd4>
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	2b02      	cmp	r3, #2
 800c452:	d129      	bne.n	800c4a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c454:	683a      	ldr	r2, [r7, #0]
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c45a:	f000 fa87 	bl	800c96c <prvCopyDataToQueue>
 800c45e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c464:	2b00      	cmp	r3, #0
 800c466:	d010      	beq.n	800c48a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	3324      	adds	r3, #36	; 0x24
 800c46c:	4618      	mov	r0, r3
 800c46e:	f001 f843 	bl	800d4f8 <xTaskRemoveFromEventList>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d013      	beq.n	800c4a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c478:	4b3f      	ldr	r3, [pc, #252]	; (800c578 <xQueueGenericSend+0x1f8>)
 800c47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c47e:	601a      	str	r2, [r3, #0]
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	e00a      	b.n	800c4a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d007      	beq.n	800c4a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c490:	4b39      	ldr	r3, [pc, #228]	; (800c578 <xQueueGenericSend+0x1f8>)
 800c492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c496:	601a      	str	r2, [r3, #0]
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c4a0:	f001 fc50 	bl	800dd44 <vPortExitCritical>
				return pdPASS;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e063      	b.n	800c570 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d103      	bne.n	800c4b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4ae:	f001 fc49 	bl	800dd44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	e05c      	b.n	800c570 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d106      	bne.n	800c4ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4bc:	f107 0314 	add.w	r3, r7, #20
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f001 f87b 	bl	800d5bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4ca:	f001 fc3b 	bl	800dd44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4ce:	f000 fe0d 	bl	800d0ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4d2:	f001 fc07 	bl	800dce4 <vPortEnterCritical>
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4dc:	b25b      	sxtb	r3, r3
 800c4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e2:	d103      	bne.n	800c4ec <xQueueGenericSend+0x16c>
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4f2:	b25b      	sxtb	r3, r3
 800c4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f8:	d103      	bne.n	800c502 <xQueueGenericSend+0x182>
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c502:	f001 fc1f 	bl	800dd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c506:	1d3a      	adds	r2, r7, #4
 800c508:	f107 0314 	add.w	r3, r7, #20
 800c50c:	4611      	mov	r1, r2
 800c50e:	4618      	mov	r0, r3
 800c510:	f001 f86a 	bl	800d5e8 <xTaskCheckForTimeOut>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d124      	bne.n	800c564 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c51a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c51c:	f000 fb1e 	bl	800cb5c <prvIsQueueFull>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d018      	beq.n	800c558 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c528:	3310      	adds	r3, #16
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	4611      	mov	r1, r2
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 ffbe 	bl	800d4b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c536:	f000 faa9 	bl	800ca8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c53a:	f000 fde5 	bl	800d108 <xTaskResumeAll>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	f47f af7c 	bne.w	800c43e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c546:	4b0c      	ldr	r3, [pc, #48]	; (800c578 <xQueueGenericSend+0x1f8>)
 800c548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c54c:	601a      	str	r2, [r3, #0]
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	e772      	b.n	800c43e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c55a:	f000 fa97 	bl	800ca8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c55e:	f000 fdd3 	bl	800d108 <xTaskResumeAll>
 800c562:	e76c      	b.n	800c43e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c566:	f000 fa91 	bl	800ca8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c56a:	f000 fdcd 	bl	800d108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c56e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c570:	4618      	mov	r0, r3
 800c572:	3738      	adds	r7, #56	; 0x38
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	e000ed04 	.word	0xe000ed04

0800c57c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b08e      	sub	sp, #56	; 0x38
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
 800c588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10a      	bne.n	800c5aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5a6:	bf00      	nop
 800c5a8:	e7fe      	b.n	800c5a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d103      	bne.n	800c5b8 <xQueueGenericSendFromISR+0x3c>
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <xQueueGenericSendFromISR+0x40>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e000      	b.n	800c5be <xQueueGenericSendFromISR+0x42>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10a      	bne.n	800c5d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	623b      	str	r3, [r7, #32]
}
 800c5d4:	bf00      	nop
 800c5d6:	e7fe      	b.n	800c5d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d103      	bne.n	800c5e6 <xQueueGenericSendFromISR+0x6a>
 800c5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d101      	bne.n	800c5ea <xQueueGenericSendFromISR+0x6e>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e000      	b.n	800c5ec <xQueueGenericSendFromISR+0x70>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10a      	bne.n	800c606 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	61fb      	str	r3, [r7, #28]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c606:	f001 fc4f 	bl	800dea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c60a:	f3ef 8211 	mrs	r2, BASEPRI
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	61ba      	str	r2, [r7, #24]
 800c620:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c622:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c624:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c62e:	429a      	cmp	r2, r3
 800c630:	d302      	bcc.n	800c638 <xQueueGenericSendFromISR+0xbc>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b02      	cmp	r3, #2
 800c636:	d12c      	bne.n	800c692 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c63e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	68b9      	ldr	r1, [r7, #8]
 800c646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c648:	f000 f990 	bl	800c96c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c64c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c654:	d112      	bne.n	800c67c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d016      	beq.n	800c68c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c660:	3324      	adds	r3, #36	; 0x24
 800c662:	4618      	mov	r0, r3
 800c664:	f000 ff48 	bl	800d4f8 <xTaskRemoveFromEventList>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00e      	beq.n	800c68c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00b      	beq.n	800c68c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	601a      	str	r2, [r3, #0]
 800c67a:	e007      	b.n	800c68c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c67c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c680:	3301      	adds	r3, #1
 800c682:	b2db      	uxtb	r3, r3
 800c684:	b25a      	sxtb	r2, r3
 800c686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c68c:	2301      	movs	r3, #1
 800c68e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c690:	e001      	b.n	800c696 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c692:	2300      	movs	r3, #0
 800c694:	637b      	str	r3, [r7, #52]	; 0x34
 800c696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c698:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c6a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3738      	adds	r7, #56	; 0x38
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b08c      	sub	sp, #48	; 0x30
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10a      	bne.n	800c6dc <xQueueReceive+0x30>
	__asm volatile
 800c6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ca:	f383 8811 	msr	BASEPRI, r3
 800c6ce:	f3bf 8f6f 	isb	sy
 800c6d2:	f3bf 8f4f 	dsb	sy
 800c6d6:	623b      	str	r3, [r7, #32]
}
 800c6d8:	bf00      	nop
 800c6da:	e7fe      	b.n	800c6da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d103      	bne.n	800c6ea <xQueueReceive+0x3e>
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d101      	bne.n	800c6ee <xQueueReceive+0x42>
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	e000      	b.n	800c6f0 <xQueueReceive+0x44>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10a      	bne.n	800c70a <xQueueReceive+0x5e>
	__asm volatile
 800c6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f8:	f383 8811 	msr	BASEPRI, r3
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	61fb      	str	r3, [r7, #28]
}
 800c706:	bf00      	nop
 800c708:	e7fe      	b.n	800c708 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c70a:	f001 f8b3 	bl	800d874 <xTaskGetSchedulerState>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d102      	bne.n	800c71a <xQueueReceive+0x6e>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d101      	bne.n	800c71e <xQueueReceive+0x72>
 800c71a:	2301      	movs	r3, #1
 800c71c:	e000      	b.n	800c720 <xQueueReceive+0x74>
 800c71e:	2300      	movs	r3, #0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10a      	bne.n	800c73a <xQueueReceive+0x8e>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	61bb      	str	r3, [r7, #24]
}
 800c736:	bf00      	nop
 800c738:	e7fe      	b.n	800c738 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c73a:	f001 fad3 	bl	800dce4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c742:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c746:	2b00      	cmp	r3, #0
 800c748:	d01f      	beq.n	800c78a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c74a:	68b9      	ldr	r1, [r7, #8]
 800c74c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c74e:	f000 f977 	bl	800ca40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c754:	1e5a      	subs	r2, r3, #1
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00f      	beq.n	800c782 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	3310      	adds	r3, #16
 800c766:	4618      	mov	r0, r3
 800c768:	f000 fec6 	bl	800d4f8 <xTaskRemoveFromEventList>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d007      	beq.n	800c782 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c772:	4b3d      	ldr	r3, [pc, #244]	; (800c868 <xQueueReceive+0x1bc>)
 800c774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c778:	601a      	str	r2, [r3, #0]
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c782:	f001 fadf 	bl	800dd44 <vPortExitCritical>
				return pdPASS;
 800c786:	2301      	movs	r3, #1
 800c788:	e069      	b.n	800c85e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d103      	bne.n	800c798 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c790:	f001 fad8 	bl	800dd44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c794:	2300      	movs	r3, #0
 800c796:	e062      	b.n	800c85e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d106      	bne.n	800c7ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c79e:	f107 0310 	add.w	r3, r7, #16
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 ff0a 	bl	800d5bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7ac:	f001 faca 	bl	800dd44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7b0:	f000 fc9c 	bl	800d0ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7b4:	f001 fa96 	bl	800dce4 <vPortEnterCritical>
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7be:	b25b      	sxtb	r3, r3
 800c7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c4:	d103      	bne.n	800c7ce <xQueueReceive+0x122>
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7d4:	b25b      	sxtb	r3, r3
 800c7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7da:	d103      	bne.n	800c7e4 <xQueueReceive+0x138>
 800c7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7e4:	f001 faae 	bl	800dd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7e8:	1d3a      	adds	r2, r7, #4
 800c7ea:	f107 0310 	add.w	r3, r7, #16
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f000 fef9 	bl	800d5e8 <xTaskCheckForTimeOut>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d123      	bne.n	800c844 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7fe:	f000 f997 	bl	800cb30 <prvIsQueueEmpty>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d017      	beq.n	800c838 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	3324      	adds	r3, #36	; 0x24
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	4611      	mov	r1, r2
 800c810:	4618      	mov	r0, r3
 800c812:	f000 fe4d 	bl	800d4b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c818:	f000 f938 	bl	800ca8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c81c:	f000 fc74 	bl	800d108 <xTaskResumeAll>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d189      	bne.n	800c73a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c826:	4b10      	ldr	r3, [pc, #64]	; (800c868 <xQueueReceive+0x1bc>)
 800c828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	e780      	b.n	800c73a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c83a:	f000 f927 	bl	800ca8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c83e:	f000 fc63 	bl	800d108 <xTaskResumeAll>
 800c842:	e77a      	b.n	800c73a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c846:	f000 f921 	bl	800ca8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c84a:	f000 fc5d 	bl	800d108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c84e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c850:	f000 f96e 	bl	800cb30 <prvIsQueueEmpty>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	f43f af6f 	beq.w	800c73a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c85c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3730      	adds	r7, #48	; 0x30
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	e000ed04 	.word	0xe000ed04

0800c86c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b08e      	sub	sp, #56	; 0x38
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10a      	bne.n	800c898 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	623b      	str	r3, [r7, #32]
}
 800c894:	bf00      	nop
 800c896:	e7fe      	b.n	800c896 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d103      	bne.n	800c8a6 <xQueueReceiveFromISR+0x3a>
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <xQueueReceiveFromISR+0x3e>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e000      	b.n	800c8ac <xQueueReceiveFromISR+0x40>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10a      	bne.n	800c8c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	61fb      	str	r3, [r7, #28]
}
 800c8c2:	bf00      	nop
 800c8c4:	e7fe      	b.n	800c8c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8c6:	f001 faef 	bl	800dea8 <vPortValidateInterruptPriority>
	__asm volatile
 800c8ca:	f3ef 8211 	mrs	r2, BASEPRI
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	61ba      	str	r2, [r7, #24]
 800c8e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c8e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d02f      	beq.n	800c952 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c8fc:	68b9      	ldr	r1, [r7, #8]
 800c8fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c900:	f000 f89e 	bl	800ca40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	1e5a      	subs	r2, r3, #1
 800c908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c90c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c914:	d112      	bne.n	800c93c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d016      	beq.n	800c94c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c920:	3310      	adds	r3, #16
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fde8 	bl	800d4f8 <xTaskRemoveFromEventList>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00e      	beq.n	800c94c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00b      	beq.n	800c94c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	601a      	str	r2, [r3, #0]
 800c93a:	e007      	b.n	800c94c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c940:	3301      	adds	r3, #1
 800c942:	b2db      	uxtb	r3, r3
 800c944:	b25a      	sxtb	r2, r3
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c94c:	2301      	movs	r3, #1
 800c94e:	637b      	str	r3, [r7, #52]	; 0x34
 800c950:	e001      	b.n	800c956 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c952:	2300      	movs	r3, #0
 800c954:	637b      	str	r3, [r7, #52]	; 0x34
 800c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c958:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	f383 8811 	msr	BASEPRI, r3
}
 800c960:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c964:	4618      	mov	r0, r3
 800c966:	3738      	adds	r7, #56	; 0x38
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c978:	2300      	movs	r3, #0
 800c97a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c980:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10d      	bne.n	800c9a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d14d      	bne.n	800ca2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	4618      	mov	r0, r3
 800c998:	f000 ff8a 	bl	800d8b0 <xTaskPriorityDisinherit>
 800c99c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	609a      	str	r2, [r3, #8]
 800c9a4:	e043      	b.n	800ca2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d119      	bne.n	800c9e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6858      	ldr	r0, [r3, #4]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	68b9      	ldr	r1, [r7, #8]
 800c9b8:	f001 ffda 	bl	800e970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	685a      	ldr	r2, [r3, #4]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c4:	441a      	add	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	685a      	ldr	r2, [r3, #4]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d32b      	bcc.n	800ca2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	605a      	str	r2, [r3, #4]
 800c9de:	e026      	b.n	800ca2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68d8      	ldr	r0, [r3, #12]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	68b9      	ldr	r1, [r7, #8]
 800c9ec:	f001 ffc0 	bl	800e970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	68da      	ldr	r2, [r3, #12]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f8:	425b      	negs	r3, r3
 800c9fa:	441a      	add	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	68da      	ldr	r2, [r3, #12]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d207      	bcs.n	800ca1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	689a      	ldr	r2, [r3, #8]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca14:	425b      	negs	r3, r3
 800ca16:	441a      	add	r2, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d105      	bne.n	800ca2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca36:	697b      	ldr	r3, [r7, #20]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3718      	adds	r7, #24
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d018      	beq.n	800ca84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	68da      	ldr	r2, [r3, #12]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5a:	441a      	add	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	68da      	ldr	r2, [r3, #12]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d303      	bcc.n	800ca74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68d9      	ldr	r1, [r3, #12]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	6838      	ldr	r0, [r7, #0]
 800ca80:	f001 ff76 	bl	800e970 <memcpy>
	}
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca94:	f001 f926 	bl	800dce4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caa0:	e011      	b.n	800cac6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d012      	beq.n	800cad0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	3324      	adds	r3, #36	; 0x24
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 fd22 	bl	800d4f8 <xTaskRemoveFromEventList>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d001      	beq.n	800cabe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800caba:	f000 fdf7 	bl	800d6ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	3b01      	subs	r3, #1
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	dce9      	bgt.n	800caa2 <prvUnlockQueue+0x16>
 800cace:	e000      	b.n	800cad2 <prvUnlockQueue+0x46>
					break;
 800cad0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	22ff      	movs	r2, #255	; 0xff
 800cad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cada:	f001 f933 	bl	800dd44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cade:	f001 f901 	bl	800dce4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cae8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800caea:	e011      	b.n	800cb10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	691b      	ldr	r3, [r3, #16]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d012      	beq.n	800cb1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	3310      	adds	r3, #16
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 fcfd 	bl	800d4f8 <xTaskRemoveFromEventList>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d001      	beq.n	800cb08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb04:	f000 fdd2 	bl	800d6ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	dce9      	bgt.n	800caec <prvUnlockQueue+0x60>
 800cb18:	e000      	b.n	800cb1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	22ff      	movs	r2, #255	; 0xff
 800cb20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cb24:	f001 f90e 	bl	800dd44 <vPortExitCritical>
}
 800cb28:	bf00      	nop
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb38:	f001 f8d4 	bl	800dce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d102      	bne.n	800cb4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb44:	2301      	movs	r3, #1
 800cb46:	60fb      	str	r3, [r7, #12]
 800cb48:	e001      	b.n	800cb4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb4e:	f001 f8f9 	bl	800dd44 <vPortExitCritical>

	return xReturn;
 800cb52:	68fb      	ldr	r3, [r7, #12]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb64:	f001 f8be 	bl	800dce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d102      	bne.n	800cb7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb74:	2301      	movs	r3, #1
 800cb76:	60fb      	str	r3, [r7, #12]
 800cb78:	e001      	b.n	800cb7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb7e:	f001 f8e1 	bl	800dd44 <vPortExitCritical>

	return xReturn;
 800cb82:	68fb      	ldr	r3, [r7, #12]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b08e      	sub	sp, #56	; 0x38
 800cb90:	af04      	add	r7, sp, #16
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
 800cb98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10a      	bne.n	800cbb6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	623b      	str	r3, [r7, #32]
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10a      	bne.n	800cbd2 <xTaskCreateStatic+0x46>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	61fb      	str	r3, [r7, #28]
}
 800cbce:	bf00      	nop
 800cbd0:	e7fe      	b.n	800cbd0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbd2:	2358      	movs	r3, #88	; 0x58
 800cbd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	2b58      	cmp	r3, #88	; 0x58
 800cbda:	d00a      	beq.n	800cbf2 <xTaskCreateStatic+0x66>
	__asm volatile
 800cbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	61bb      	str	r3, [r7, #24]
}
 800cbee:	bf00      	nop
 800cbf0:	e7fe      	b.n	800cbf0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbf2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d01e      	beq.n	800cc38 <xTaskCreateStatic+0xac>
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d01b      	beq.n	800cc38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0c:	2202      	movs	r2, #2
 800cc0e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc12:	2300      	movs	r3, #0
 800cc14:	9303      	str	r3, [sp, #12]
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	9302      	str	r3, [sp, #8]
 800cc1a:	f107 0314 	add.w	r3, r7, #20
 800cc1e:	9301      	str	r3, [sp, #4]
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	68b9      	ldr	r1, [r7, #8]
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f000 f850 	bl	800ccd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc32:	f000 f8df 	bl	800cdf4 <prvAddNewTaskToReadyList>
 800cc36:	e001      	b.n	800cc3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc3c:	697b      	ldr	r3, [r7, #20]
	}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3728      	adds	r7, #40	; 0x28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b08c      	sub	sp, #48	; 0x30
 800cc4a:	af04      	add	r7, sp, #16
 800cc4c:	60f8      	str	r0, [r7, #12]
 800cc4e:	60b9      	str	r1, [r7, #8]
 800cc50:	603b      	str	r3, [r7, #0]
 800cc52:	4613      	mov	r3, r2
 800cc54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc56:	88fb      	ldrh	r3, [r7, #6]
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f001 f964 	bl	800df28 <pvPortMalloc>
 800cc60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00e      	beq.n	800cc86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc68:	2058      	movs	r0, #88	; 0x58
 800cc6a:	f001 f95d 	bl	800df28 <pvPortMalloc>
 800cc6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d003      	beq.n	800cc7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	697a      	ldr	r2, [r7, #20]
 800cc7a:	631a      	str	r2, [r3, #48]	; 0x30
 800cc7c:	e005      	b.n	800cc8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc7e:	6978      	ldr	r0, [r7, #20]
 800cc80:	f001 fa1c 	bl	800e0bc <vPortFree>
 800cc84:	e001      	b.n	800cc8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d017      	beq.n	800ccc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc98:	88fa      	ldrh	r2, [r7, #6]
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	9303      	str	r3, [sp, #12]
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	9302      	str	r3, [sp, #8]
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	9301      	str	r3, [sp, #4]
 800cca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	68b9      	ldr	r1, [r7, #8]
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f000 f80e 	bl	800ccd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccb4:	69f8      	ldr	r0, [r7, #28]
 800ccb6:	f000 f89d 	bl	800cdf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	61bb      	str	r3, [r7, #24]
 800ccbe:	e002      	b.n	800ccc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ccc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ccc6:	69bb      	ldr	r3, [r7, #24]
	}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3720      	adds	r7, #32
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	461a      	mov	r2, r3
 800cce8:	21a5      	movs	r1, #165	; 0xa5
 800ccea:	f001 fe4f 	bl	800e98c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	4413      	add	r3, r2
 800ccfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	f023 0307 	bic.w	r3, r3, #7
 800cd06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	f003 0307 	and.w	r3, r3, #7
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00a      	beq.n	800cd28 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	617b      	str	r3, [r7, #20]
}
 800cd24:	bf00      	nop
 800cd26:	e7fe      	b.n	800cd26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d01f      	beq.n	800cd6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd2e:	2300      	movs	r3, #0
 800cd30:	61fb      	str	r3, [r7, #28]
 800cd32:	e012      	b.n	800cd5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	4413      	add	r3, r2
 800cd3a:	7819      	ldrb	r1, [r3, #0]
 800cd3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	4413      	add	r3, r2
 800cd42:	3334      	adds	r3, #52	; 0x34
 800cd44:	460a      	mov	r2, r1
 800cd46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d006      	beq.n	800cd62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	3301      	adds	r3, #1
 800cd58:	61fb      	str	r3, [r7, #28]
 800cd5a:	69fb      	ldr	r3, [r7, #28]
 800cd5c:	2b0f      	cmp	r3, #15
 800cd5e:	d9e9      	bls.n	800cd34 <prvInitialiseNewTask+0x64>
 800cd60:	e000      	b.n	800cd64 <prvInitialiseNewTask+0x94>
			{
				break;
 800cd62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd66:	2200      	movs	r2, #0
 800cd68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd6c:	e003      	b.n	800cd76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd78:	2b06      	cmp	r3, #6
 800cd7a:	d901      	bls.n	800cd80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd7c:	2306      	movs	r3, #6
 800cd7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd8a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	2200      	movs	r2, #0
 800cd90:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd94:	3304      	adds	r3, #4
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7ff f91e 	bl	800bfd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	3318      	adds	r3, #24
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff f919 	bl	800bfd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	f1c3 0207 	rsb	r2, r3, #7
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	68f9      	ldr	r1, [r7, #12]
 800cdd4:	69b8      	ldr	r0, [r7, #24]
 800cdd6:	f000 fe57 	bl	800da88 <pxPortInitialiseStack>
 800cdda:	4602      	mov	r2, r0
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d002      	beq.n	800cdec <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdec:	bf00      	nop
 800cdee:	3720      	adds	r7, #32
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cdfc:	f000 ff72 	bl	800dce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce00:	4b2a      	ldr	r3, [pc, #168]	; (800ceac <prvAddNewTaskToReadyList+0xb8>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3301      	adds	r3, #1
 800ce06:	4a29      	ldr	r2, [pc, #164]	; (800ceac <prvAddNewTaskToReadyList+0xb8>)
 800ce08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce0a:	4b29      	ldr	r3, [pc, #164]	; (800ceb0 <prvAddNewTaskToReadyList+0xbc>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d109      	bne.n	800ce26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce12:	4a27      	ldr	r2, [pc, #156]	; (800ceb0 <prvAddNewTaskToReadyList+0xbc>)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce18:	4b24      	ldr	r3, [pc, #144]	; (800ceac <prvAddNewTaskToReadyList+0xb8>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d110      	bne.n	800ce42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce20:	f000 fc6a 	bl	800d6f8 <prvInitialiseTaskLists>
 800ce24:	e00d      	b.n	800ce42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce26:	4b23      	ldr	r3, [pc, #140]	; (800ceb4 <prvAddNewTaskToReadyList+0xc0>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d109      	bne.n	800ce42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce2e:	4b20      	ldr	r3, [pc, #128]	; (800ceb0 <prvAddNewTaskToReadyList+0xbc>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d802      	bhi.n	800ce42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce3c:	4a1c      	ldr	r2, [pc, #112]	; (800ceb0 <prvAddNewTaskToReadyList+0xbc>)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce42:	4b1d      	ldr	r3, [pc, #116]	; (800ceb8 <prvAddNewTaskToReadyList+0xc4>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3301      	adds	r3, #1
 800ce48:	4a1b      	ldr	r2, [pc, #108]	; (800ceb8 <prvAddNewTaskToReadyList+0xc4>)
 800ce4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce50:	2201      	movs	r2, #1
 800ce52:	409a      	lsls	r2, r3
 800ce54:	4b19      	ldr	r3, [pc, #100]	; (800cebc <prvAddNewTaskToReadyList+0xc8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	4a18      	ldr	r2, [pc, #96]	; (800cebc <prvAddNewTaskToReadyList+0xc8>)
 800ce5c:	6013      	str	r3, [r2, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce62:	4613      	mov	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	4a15      	ldr	r2, [pc, #84]	; (800cec0 <prvAddNewTaskToReadyList+0xcc>)
 800ce6c:	441a      	add	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	3304      	adds	r3, #4
 800ce72:	4619      	mov	r1, r3
 800ce74:	4610      	mov	r0, r2
 800ce76:	f7ff f8bc 	bl	800bff2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce7a:	f000 ff63 	bl	800dd44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce7e:	4b0d      	ldr	r3, [pc, #52]	; (800ceb4 <prvAddNewTaskToReadyList+0xc0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00e      	beq.n	800cea4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce86:	4b0a      	ldr	r3, [pc, #40]	; (800ceb0 <prvAddNewTaskToReadyList+0xbc>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d207      	bcs.n	800cea4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce94:	4b0b      	ldr	r3, [pc, #44]	; (800cec4 <prvAddNewTaskToReadyList+0xd0>)
 800ce96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	2000048c 	.word	0x2000048c
 800ceb0:	2000038c 	.word	0x2000038c
 800ceb4:	20000498 	.word	0x20000498
 800ceb8:	200004a8 	.word	0x200004a8
 800cebc:	20000494 	.word	0x20000494
 800cec0:	20000390 	.word	0x20000390
 800cec4:	e000ed04 	.word	0xe000ed04

0800cec8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b08a      	sub	sp, #40	; 0x28
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ced2:	2300      	movs	r3, #0
 800ced4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10a      	bne.n	800cef2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	617b      	str	r3, [r7, #20]
}
 800ceee:	bf00      	nop
 800cef0:	e7fe      	b.n	800cef0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10a      	bne.n	800cf0e <vTaskDelayUntil+0x46>
	__asm volatile
 800cef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	613b      	str	r3, [r7, #16]
}
 800cf0a:	bf00      	nop
 800cf0c:	e7fe      	b.n	800cf0c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800cf0e:	4b2a      	ldr	r3, [pc, #168]	; (800cfb8 <vTaskDelayUntil+0xf0>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00a      	beq.n	800cf2c <vTaskDelayUntil+0x64>
	__asm volatile
 800cf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	60fb      	str	r3, [r7, #12]
}
 800cf28:	bf00      	nop
 800cf2a:	e7fe      	b.n	800cf2a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800cf2c:	f000 f8de 	bl	800d0ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800cf30:	4b22      	ldr	r3, [pc, #136]	; (800cfbc <vTaskDelayUntil+0xf4>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	683a      	ldr	r2, [r7, #0]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	6a3a      	ldr	r2, [r7, #32]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d20b      	bcs.n	800cf62 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	69fa      	ldr	r2, [r7, #28]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d211      	bcs.n	800cf78 <vTaskDelayUntil+0xb0>
 800cf54:	69fa      	ldr	r2, [r7, #28]
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d90d      	bls.n	800cf78 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	627b      	str	r3, [r7, #36]	; 0x24
 800cf60:	e00a      	b.n	800cf78 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69fa      	ldr	r2, [r7, #28]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d303      	bcc.n	800cf74 <vTaskDelayUntil+0xac>
 800cf6c:	69fa      	ldr	r2, [r7, #28]
 800cf6e:	6a3b      	ldr	r3, [r7, #32]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d901      	bls.n	800cf78 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800cf74:	2301      	movs	r3, #1
 800cf76:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	69fa      	ldr	r2, [r7, #28]
 800cf7c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d006      	beq.n	800cf92 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cf84:	69fa      	ldr	r2, [r7, #28]
 800cf86:	6a3b      	ldr	r3, [r7, #32]
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	2100      	movs	r1, #0
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f000 fd15 	bl	800d9bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800cf92:	f000 f8b9 	bl	800d108 <xTaskResumeAll>
 800cf96:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d107      	bne.n	800cfae <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800cf9e:	4b08      	ldr	r3, [pc, #32]	; (800cfc0 <vTaskDelayUntil+0xf8>)
 800cfa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa4:	601a      	str	r2, [r3, #0]
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfae:	bf00      	nop
 800cfb0:	3728      	adds	r7, #40	; 0x28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	200004b4 	.word	0x200004b4
 800cfbc:	20000490 	.word	0x20000490
 800cfc0:	e000ed04 	.word	0xe000ed04

0800cfc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d017      	beq.n	800d006 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cfd6:	4b13      	ldr	r3, [pc, #76]	; (800d024 <vTaskDelay+0x60>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00a      	beq.n	800cff4 <vTaskDelay+0x30>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	60bb      	str	r3, [r7, #8]
}
 800cff0:	bf00      	nop
 800cff2:	e7fe      	b.n	800cff2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cff4:	f000 f87a 	bl	800d0ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cff8:	2100      	movs	r1, #0
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fcde 	bl	800d9bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d000:	f000 f882 	bl	800d108 <xTaskResumeAll>
 800d004:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d107      	bne.n	800d01c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d00c:	4b06      	ldr	r3, [pc, #24]	; (800d028 <vTaskDelay+0x64>)
 800d00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d01c:	bf00      	nop
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	200004b4 	.word	0x200004b4
 800d028:	e000ed04 	.word	0xe000ed04

0800d02c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b08a      	sub	sp, #40	; 0x28
 800d030:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d032:	2300      	movs	r3, #0
 800d034:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d036:	2300      	movs	r3, #0
 800d038:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d03a:	463a      	mov	r2, r7
 800d03c:	1d39      	adds	r1, r7, #4
 800d03e:	f107 0308 	add.w	r3, r7, #8
 800d042:	4618      	mov	r0, r3
 800d044:	f7f3 feb0 	bl	8000da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	9202      	str	r2, [sp, #8]
 800d050:	9301      	str	r3, [sp, #4]
 800d052:	2300      	movs	r3, #0
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	2300      	movs	r3, #0
 800d058:	460a      	mov	r2, r1
 800d05a:	491e      	ldr	r1, [pc, #120]	; (800d0d4 <vTaskStartScheduler+0xa8>)
 800d05c:	481e      	ldr	r0, [pc, #120]	; (800d0d8 <vTaskStartScheduler+0xac>)
 800d05e:	f7ff fd95 	bl	800cb8c <xTaskCreateStatic>
 800d062:	4603      	mov	r3, r0
 800d064:	4a1d      	ldr	r2, [pc, #116]	; (800d0dc <vTaskStartScheduler+0xb0>)
 800d066:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d068:	4b1c      	ldr	r3, [pc, #112]	; (800d0dc <vTaskStartScheduler+0xb0>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d070:	2301      	movs	r3, #1
 800d072:	617b      	str	r3, [r7, #20]
 800d074:	e001      	b.n	800d07a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d076:	2300      	movs	r3, #0
 800d078:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d116      	bne.n	800d0ae <vTaskStartScheduler+0x82>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	613b      	str	r3, [r7, #16]
}
 800d092:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d094:	4b12      	ldr	r3, [pc, #72]	; (800d0e0 <vTaskStartScheduler+0xb4>)
 800d096:	f04f 32ff 	mov.w	r2, #4294967295
 800d09a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d09c:	4b11      	ldr	r3, [pc, #68]	; (800d0e4 <vTaskStartScheduler+0xb8>)
 800d09e:	2201      	movs	r2, #1
 800d0a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d0a2:	4b11      	ldr	r3, [pc, #68]	; (800d0e8 <vTaskStartScheduler+0xbc>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d0a8:	f000 fd7a 	bl	800dba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d0ac:	e00e      	b.n	800d0cc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b4:	d10a      	bne.n	800d0cc <vTaskStartScheduler+0xa0>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	60fb      	str	r3, [r7, #12]
}
 800d0c8:	bf00      	nop
 800d0ca:	e7fe      	b.n	800d0ca <vTaskStartScheduler+0x9e>
}
 800d0cc:	bf00      	nop
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	0800f2a8 	.word	0x0800f2a8
 800d0d8:	0800d6c5 	.word	0x0800d6c5
 800d0dc:	200004b0 	.word	0x200004b0
 800d0e0:	200004ac 	.word	0x200004ac
 800d0e4:	20000498 	.word	0x20000498
 800d0e8:	20000490 	.word	0x20000490

0800d0ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d0f0:	4b04      	ldr	r3, [pc, #16]	; (800d104 <vTaskSuspendAll+0x18>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	4a03      	ldr	r2, [pc, #12]	; (800d104 <vTaskSuspendAll+0x18>)
 800d0f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d0fa:	bf00      	nop
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	200004b4 	.word	0x200004b4

0800d108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d10e:	2300      	movs	r3, #0
 800d110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d112:	2300      	movs	r3, #0
 800d114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d116:	4b41      	ldr	r3, [pc, #260]	; (800d21c <xTaskResumeAll+0x114>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10a      	bne.n	800d134 <xTaskResumeAll+0x2c>
	__asm volatile
 800d11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	603b      	str	r3, [r7, #0]
}
 800d130:	bf00      	nop
 800d132:	e7fe      	b.n	800d132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d134:	f000 fdd6 	bl	800dce4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d138:	4b38      	ldr	r3, [pc, #224]	; (800d21c <xTaskResumeAll+0x114>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	3b01      	subs	r3, #1
 800d13e:	4a37      	ldr	r2, [pc, #220]	; (800d21c <xTaskResumeAll+0x114>)
 800d140:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d142:	4b36      	ldr	r3, [pc, #216]	; (800d21c <xTaskResumeAll+0x114>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d161      	bne.n	800d20e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d14a:	4b35      	ldr	r3, [pc, #212]	; (800d220 <xTaskResumeAll+0x118>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d05d      	beq.n	800d20e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d152:	e02e      	b.n	800d1b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d154:	4b33      	ldr	r3, [pc, #204]	; (800d224 <xTaskResumeAll+0x11c>)
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	3318      	adds	r3, #24
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe ffa3 	bl	800c0ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	3304      	adds	r3, #4
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fe ff9e 	bl	800c0ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d174:	2201      	movs	r2, #1
 800d176:	409a      	lsls	r2, r3
 800d178:	4b2b      	ldr	r3, [pc, #172]	; (800d228 <xTaskResumeAll+0x120>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	4a2a      	ldr	r2, [pc, #168]	; (800d228 <xTaskResumeAll+0x120>)
 800d180:	6013      	str	r3, [r2, #0]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d186:	4613      	mov	r3, r2
 800d188:	009b      	lsls	r3, r3, #2
 800d18a:	4413      	add	r3, r2
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4a27      	ldr	r2, [pc, #156]	; (800d22c <xTaskResumeAll+0x124>)
 800d190:	441a      	add	r2, r3
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	3304      	adds	r3, #4
 800d196:	4619      	mov	r1, r3
 800d198:	4610      	mov	r0, r2
 800d19a:	f7fe ff2a 	bl	800bff2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a2:	4b23      	ldr	r3, [pc, #140]	; (800d230 <xTaskResumeAll+0x128>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d302      	bcc.n	800d1b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d1ac:	4b21      	ldr	r3, [pc, #132]	; (800d234 <xTaskResumeAll+0x12c>)
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d1b2:	4b1c      	ldr	r3, [pc, #112]	; (800d224 <xTaskResumeAll+0x11c>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1cc      	bne.n	800d154 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d1c0:	f000 fb38 	bl	800d834 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d1c4:	4b1c      	ldr	r3, [pc, #112]	; (800d238 <xTaskResumeAll+0x130>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d010      	beq.n	800d1f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d1d0:	f000 f836 	bl	800d240 <xTaskIncrementTick>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d1da:	4b16      	ldr	r3, [pc, #88]	; (800d234 <xTaskResumeAll+0x12c>)
 800d1dc:	2201      	movs	r2, #1
 800d1de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1f1      	bne.n	800d1d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d1ec:	4b12      	ldr	r3, [pc, #72]	; (800d238 <xTaskResumeAll+0x130>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d1f2:	4b10      	ldr	r3, [pc, #64]	; (800d234 <xTaskResumeAll+0x12c>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d009      	beq.n	800d20e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d1fe:	4b0f      	ldr	r3, [pc, #60]	; (800d23c <xTaskResumeAll+0x134>)
 800d200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d20e:	f000 fd99 	bl	800dd44 <vPortExitCritical>

	return xAlreadyYielded;
 800d212:	68bb      	ldr	r3, [r7, #8]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	200004b4 	.word	0x200004b4
 800d220:	2000048c 	.word	0x2000048c
 800d224:	2000044c 	.word	0x2000044c
 800d228:	20000494 	.word	0x20000494
 800d22c:	20000390 	.word	0x20000390
 800d230:	2000038c 	.word	0x2000038c
 800d234:	200004a0 	.word	0x200004a0
 800d238:	2000049c 	.word	0x2000049c
 800d23c:	e000ed04 	.word	0xe000ed04

0800d240 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d246:	2300      	movs	r3, #0
 800d248:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d24a:	4b4e      	ldr	r3, [pc, #312]	; (800d384 <xTaskIncrementTick+0x144>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f040 8088 	bne.w	800d364 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d254:	4b4c      	ldr	r3, [pc, #304]	; (800d388 <xTaskIncrementTick+0x148>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3301      	adds	r3, #1
 800d25a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d25c:	4a4a      	ldr	r2, [pc, #296]	; (800d388 <xTaskIncrementTick+0x148>)
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d120      	bne.n	800d2aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d268:	4b48      	ldr	r3, [pc, #288]	; (800d38c <xTaskIncrementTick+0x14c>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00a      	beq.n	800d288 <xTaskIncrementTick+0x48>
	__asm volatile
 800d272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d276:	f383 8811 	msr	BASEPRI, r3
 800d27a:	f3bf 8f6f 	isb	sy
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	603b      	str	r3, [r7, #0]
}
 800d284:	bf00      	nop
 800d286:	e7fe      	b.n	800d286 <xTaskIncrementTick+0x46>
 800d288:	4b40      	ldr	r3, [pc, #256]	; (800d38c <xTaskIncrementTick+0x14c>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	60fb      	str	r3, [r7, #12]
 800d28e:	4b40      	ldr	r3, [pc, #256]	; (800d390 <xTaskIncrementTick+0x150>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a3e      	ldr	r2, [pc, #248]	; (800d38c <xTaskIncrementTick+0x14c>)
 800d294:	6013      	str	r3, [r2, #0]
 800d296:	4a3e      	ldr	r2, [pc, #248]	; (800d390 <xTaskIncrementTick+0x150>)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	6013      	str	r3, [r2, #0]
 800d29c:	4b3d      	ldr	r3, [pc, #244]	; (800d394 <xTaskIncrementTick+0x154>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	4a3c      	ldr	r2, [pc, #240]	; (800d394 <xTaskIncrementTick+0x154>)
 800d2a4:	6013      	str	r3, [r2, #0]
 800d2a6:	f000 fac5 	bl	800d834 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d2aa:	4b3b      	ldr	r3, [pc, #236]	; (800d398 <xTaskIncrementTick+0x158>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	693a      	ldr	r2, [r7, #16]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d348      	bcc.n	800d346 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2b4:	4b35      	ldr	r3, [pc, #212]	; (800d38c <xTaskIncrementTick+0x14c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d104      	bne.n	800d2c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2be:	4b36      	ldr	r3, [pc, #216]	; (800d398 <xTaskIncrementTick+0x158>)
 800d2c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c4:	601a      	str	r2, [r3, #0]
					break;
 800d2c6:	e03e      	b.n	800d346 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2c8:	4b30      	ldr	r3, [pc, #192]	; (800d38c <xTaskIncrementTick+0x14c>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	68db      	ldr	r3, [r3, #12]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d203      	bcs.n	800d2e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d2e0:	4a2d      	ldr	r2, [pc, #180]	; (800d398 <xTaskIncrementTick+0x158>)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2e6:	e02e      	b.n	800d346 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fe fedd 	bl	800c0ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d004      	beq.n	800d304 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	3318      	adds	r3, #24
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fe fed4 	bl	800c0ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d308:	2201      	movs	r2, #1
 800d30a:	409a      	lsls	r2, r3
 800d30c:	4b23      	ldr	r3, [pc, #140]	; (800d39c <xTaskIncrementTick+0x15c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4313      	orrs	r3, r2
 800d312:	4a22      	ldr	r2, [pc, #136]	; (800d39c <xTaskIncrementTick+0x15c>)
 800d314:	6013      	str	r3, [r2, #0]
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31a:	4613      	mov	r3, r2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	4413      	add	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4a1f      	ldr	r2, [pc, #124]	; (800d3a0 <xTaskIncrementTick+0x160>)
 800d324:	441a      	add	r2, r3
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	3304      	adds	r3, #4
 800d32a:	4619      	mov	r1, r3
 800d32c:	4610      	mov	r0, r2
 800d32e:	f7fe fe60 	bl	800bff2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d336:	4b1b      	ldr	r3, [pc, #108]	; (800d3a4 <xTaskIncrementTick+0x164>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d3b9      	bcc.n	800d2b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d340:	2301      	movs	r3, #1
 800d342:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d344:	e7b6      	b.n	800d2b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d346:	4b17      	ldr	r3, [pc, #92]	; (800d3a4 <xTaskIncrementTick+0x164>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d34c:	4914      	ldr	r1, [pc, #80]	; (800d3a0 <xTaskIncrementTick+0x160>)
 800d34e:	4613      	mov	r3, r2
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4413      	add	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	440b      	add	r3, r1
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d907      	bls.n	800d36e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d35e:	2301      	movs	r3, #1
 800d360:	617b      	str	r3, [r7, #20]
 800d362:	e004      	b.n	800d36e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d364:	4b10      	ldr	r3, [pc, #64]	; (800d3a8 <xTaskIncrementTick+0x168>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3301      	adds	r3, #1
 800d36a:	4a0f      	ldr	r2, [pc, #60]	; (800d3a8 <xTaskIncrementTick+0x168>)
 800d36c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d36e:	4b0f      	ldr	r3, [pc, #60]	; (800d3ac <xTaskIncrementTick+0x16c>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d001      	beq.n	800d37a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d376:	2301      	movs	r3, #1
 800d378:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d37a:	697b      	ldr	r3, [r7, #20]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3718      	adds	r7, #24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	200004b4 	.word	0x200004b4
 800d388:	20000490 	.word	0x20000490
 800d38c:	20000444 	.word	0x20000444
 800d390:	20000448 	.word	0x20000448
 800d394:	200004a4 	.word	0x200004a4
 800d398:	200004ac 	.word	0x200004ac
 800d39c:	20000494 	.word	0x20000494
 800d3a0:	20000390 	.word	0x20000390
 800d3a4:	2000038c 	.word	0x2000038c
 800d3a8:	2000049c 	.word	0x2000049c
 800d3ac:	200004a0 	.word	0x200004a0

0800d3b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b088      	sub	sp, #32
 800d3b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d3b6:	4b39      	ldr	r3, [pc, #228]	; (800d49c <vTaskSwitchContext+0xec>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d003      	beq.n	800d3c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d3be:	4b38      	ldr	r3, [pc, #224]	; (800d4a0 <vTaskSwitchContext+0xf0>)
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d3c4:	e066      	b.n	800d494 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800d3c6:	4b36      	ldr	r3, [pc, #216]	; (800d4a0 <vTaskSwitchContext+0xf0>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d3cc:	4b35      	ldr	r3, [pc, #212]	; (800d4a4 <vTaskSwitchContext+0xf4>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d2:	61fb      	str	r3, [r7, #28]
 800d3d4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d3d8:	61bb      	str	r3, [r7, #24]
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	69ba      	ldr	r2, [r7, #24]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d111      	bne.n	800d408 <vTaskSwitchContext+0x58>
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d10b      	bne.n	800d408 <vTaskSwitchContext+0x58>
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	3308      	adds	r3, #8
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	69ba      	ldr	r2, [r7, #24]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d105      	bne.n	800d408 <vTaskSwitchContext+0x58>
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	330c      	adds	r3, #12
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	69ba      	ldr	r2, [r7, #24]
 800d404:	429a      	cmp	r2, r3
 800d406:	d008      	beq.n	800d41a <vTaskSwitchContext+0x6a>
 800d408:	4b26      	ldr	r3, [pc, #152]	; (800d4a4 <vTaskSwitchContext+0xf4>)
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	4b25      	ldr	r3, [pc, #148]	; (800d4a4 <vTaskSwitchContext+0xf4>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3334      	adds	r3, #52	; 0x34
 800d412:	4619      	mov	r1, r3
 800d414:	4610      	mov	r0, r2
 800d416:	f7f3 fcb4 	bl	8000d82 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d41a:	4b23      	ldr	r3, [pc, #140]	; (800d4a8 <vTaskSwitchContext+0xf8>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	fab3 f383 	clz	r3, r3
 800d426:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d428:	7afb      	ldrb	r3, [r7, #11]
 800d42a:	f1c3 031f 	rsb	r3, r3, #31
 800d42e:	617b      	str	r3, [r7, #20]
 800d430:	491e      	ldr	r1, [pc, #120]	; (800d4ac <vTaskSwitchContext+0xfc>)
 800d432:	697a      	ldr	r2, [r7, #20]
 800d434:	4613      	mov	r3, r2
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	4413      	add	r3, r2
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	440b      	add	r3, r1
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10a      	bne.n	800d45a <vTaskSwitchContext+0xaa>
	__asm volatile
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	607b      	str	r3, [r7, #4]
}
 800d456:	bf00      	nop
 800d458:	e7fe      	b.n	800d458 <vTaskSwitchContext+0xa8>
 800d45a:	697a      	ldr	r2, [r7, #20]
 800d45c:	4613      	mov	r3, r2
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4413      	add	r3, r2
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	4a11      	ldr	r2, [pc, #68]	; (800d4ac <vTaskSwitchContext+0xfc>)
 800d466:	4413      	add	r3, r2
 800d468:	613b      	str	r3, [r7, #16]
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	685a      	ldr	r2, [r3, #4]
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	605a      	str	r2, [r3, #4]
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	685a      	ldr	r2, [r3, #4]
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	3308      	adds	r3, #8
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d104      	bne.n	800d48a <vTaskSwitchContext+0xda>
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	685a      	ldr	r2, [r3, #4]
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	605a      	str	r2, [r3, #4]
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	4a04      	ldr	r2, [pc, #16]	; (800d4a4 <vTaskSwitchContext+0xf4>)
 800d492:	6013      	str	r3, [r2, #0]
}
 800d494:	bf00      	nop
 800d496:	3720      	adds	r7, #32
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	200004b4 	.word	0x200004b4
 800d4a0:	200004a0 	.word	0x200004a0
 800d4a4:	2000038c 	.word	0x2000038c
 800d4a8:	20000494 	.word	0x20000494
 800d4ac:	20000390 	.word	0x20000390

0800d4b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	60fb      	str	r3, [r7, #12]
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4d6:	4b07      	ldr	r3, [pc, #28]	; (800d4f4 <vTaskPlaceOnEventList+0x44>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3318      	adds	r3, #24
 800d4dc:	4619      	mov	r1, r3
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7fe fdab 	bl	800c03a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4e4:	2101      	movs	r1, #1
 800d4e6:	6838      	ldr	r0, [r7, #0]
 800d4e8:	f000 fa68 	bl	800d9bc <prvAddCurrentTaskToDelayedList>
}
 800d4ec:	bf00      	nop
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	2000038c 	.word	0x2000038c

0800d4f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d10a      	bne.n	800d524 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	60fb      	str	r3, [r7, #12]
}
 800d520:	bf00      	nop
 800d522:	e7fe      	b.n	800d522 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	3318      	adds	r3, #24
 800d528:	4618      	mov	r0, r3
 800d52a:	f7fe fdbf 	bl	800c0ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d52e:	4b1d      	ldr	r3, [pc, #116]	; (800d5a4 <xTaskRemoveFromEventList+0xac>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d11c      	bne.n	800d570 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	3304      	adds	r3, #4
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe fdb6 	bl	800c0ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d544:	2201      	movs	r2, #1
 800d546:	409a      	lsls	r2, r3
 800d548:	4b17      	ldr	r3, [pc, #92]	; (800d5a8 <xTaskRemoveFromEventList+0xb0>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	4a16      	ldr	r2, [pc, #88]	; (800d5a8 <xTaskRemoveFromEventList+0xb0>)
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d556:	4613      	mov	r3, r2
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	4413      	add	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4a13      	ldr	r2, [pc, #76]	; (800d5ac <xTaskRemoveFromEventList+0xb4>)
 800d560:	441a      	add	r2, r3
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	3304      	adds	r3, #4
 800d566:	4619      	mov	r1, r3
 800d568:	4610      	mov	r0, r2
 800d56a:	f7fe fd42 	bl	800bff2 <vListInsertEnd>
 800d56e:	e005      	b.n	800d57c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	3318      	adds	r3, #24
 800d574:	4619      	mov	r1, r3
 800d576:	480e      	ldr	r0, [pc, #56]	; (800d5b0 <xTaskRemoveFromEventList+0xb8>)
 800d578:	f7fe fd3b 	bl	800bff2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d580:	4b0c      	ldr	r3, [pc, #48]	; (800d5b4 <xTaskRemoveFromEventList+0xbc>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d586:	429a      	cmp	r2, r3
 800d588:	d905      	bls.n	800d596 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d58a:	2301      	movs	r3, #1
 800d58c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d58e:	4b0a      	ldr	r3, [pc, #40]	; (800d5b8 <xTaskRemoveFromEventList+0xc0>)
 800d590:	2201      	movs	r2, #1
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	e001      	b.n	800d59a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d596:	2300      	movs	r3, #0
 800d598:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d59a:	697b      	ldr	r3, [r7, #20]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3718      	adds	r7, #24
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	200004b4 	.word	0x200004b4
 800d5a8:	20000494 	.word	0x20000494
 800d5ac:	20000390 	.word	0x20000390
 800d5b0:	2000044c 	.word	0x2000044c
 800d5b4:	2000038c 	.word	0x2000038c
 800d5b8:	200004a0 	.word	0x200004a0

0800d5bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5c4:	4b06      	ldr	r3, [pc, #24]	; (800d5e0 <vTaskInternalSetTimeOutState+0x24>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5cc:	4b05      	ldr	r3, [pc, #20]	; (800d5e4 <vTaskInternalSetTimeOutState+0x28>)
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	605a      	str	r2, [r3, #4]
}
 800d5d4:	bf00      	nop
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr
 800d5e0:	200004a4 	.word	0x200004a4
 800d5e4:	20000490 	.word	0x20000490

0800d5e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b088      	sub	sp, #32
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10a      	bne.n	800d60e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fc:	f383 8811 	msr	BASEPRI, r3
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	613b      	str	r3, [r7, #16]
}
 800d60a:	bf00      	nop
 800d60c:	e7fe      	b.n	800d60c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10a      	bne.n	800d62a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	60fb      	str	r3, [r7, #12]
}
 800d626:	bf00      	nop
 800d628:	e7fe      	b.n	800d628 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d62a:	f000 fb5b 	bl	800dce4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d62e:	4b1d      	ldr	r3, [pc, #116]	; (800d6a4 <xTaskCheckForTimeOut+0xbc>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	69ba      	ldr	r2, [r7, #24]
 800d63a:	1ad3      	subs	r3, r2, r3
 800d63c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d646:	d102      	bne.n	800d64e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d648:	2300      	movs	r3, #0
 800d64a:	61fb      	str	r3, [r7, #28]
 800d64c:	e023      	b.n	800d696 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	4b15      	ldr	r3, [pc, #84]	; (800d6a8 <xTaskCheckForTimeOut+0xc0>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	429a      	cmp	r2, r3
 800d658:	d007      	beq.n	800d66a <xTaskCheckForTimeOut+0x82>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	69ba      	ldr	r2, [r7, #24]
 800d660:	429a      	cmp	r2, r3
 800d662:	d302      	bcc.n	800d66a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d664:	2301      	movs	r3, #1
 800d666:	61fb      	str	r3, [r7, #28]
 800d668:	e015      	b.n	800d696 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	697a      	ldr	r2, [r7, #20]
 800d670:	429a      	cmp	r2, r3
 800d672:	d20b      	bcs.n	800d68c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	681a      	ldr	r2, [r3, #0]
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	1ad2      	subs	r2, r2, r3
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7ff ff9b 	bl	800d5bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d686:	2300      	movs	r3, #0
 800d688:	61fb      	str	r3, [r7, #28]
 800d68a:	e004      	b.n	800d696 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2200      	movs	r2, #0
 800d690:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d692:	2301      	movs	r3, #1
 800d694:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d696:	f000 fb55 	bl	800dd44 <vPortExitCritical>

	return xReturn;
 800d69a:	69fb      	ldr	r3, [r7, #28]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3720      	adds	r7, #32
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	20000490 	.word	0x20000490
 800d6a8:	200004a4 	.word	0x200004a4

0800d6ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d6b0:	4b03      	ldr	r3, [pc, #12]	; (800d6c0 <vTaskMissedYield+0x14>)
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	601a      	str	r2, [r3, #0]
}
 800d6b6:	bf00      	nop
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr
 800d6c0:	200004a0 	.word	0x200004a0

0800d6c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d6cc:	f000 f854 	bl	800d778 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d6d0:	4b07      	ldr	r3, [pc, #28]	; (800d6f0 <prvIdleTask+0x2c>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d907      	bls.n	800d6e8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d6d8:	4b06      	ldr	r3, [pc, #24]	; (800d6f4 <prvIdleTask+0x30>)
 800d6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d6e8:	f7f3 fb44 	bl	8000d74 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d6ec:	e7ee      	b.n	800d6cc <prvIdleTask+0x8>
 800d6ee:	bf00      	nop
 800d6f0:	20000390 	.word	0x20000390
 800d6f4:	e000ed04 	.word	0xe000ed04

0800d6f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6fe:	2300      	movs	r3, #0
 800d700:	607b      	str	r3, [r7, #4]
 800d702:	e00c      	b.n	800d71e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	4613      	mov	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4a12      	ldr	r2, [pc, #72]	; (800d758 <prvInitialiseTaskLists+0x60>)
 800d710:	4413      	add	r3, r2
 800d712:	4618      	mov	r0, r3
 800d714:	f7fe fc40 	bl	800bf98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	3301      	adds	r3, #1
 800d71c:	607b      	str	r3, [r7, #4]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2b06      	cmp	r3, #6
 800d722:	d9ef      	bls.n	800d704 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d724:	480d      	ldr	r0, [pc, #52]	; (800d75c <prvInitialiseTaskLists+0x64>)
 800d726:	f7fe fc37 	bl	800bf98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d72a:	480d      	ldr	r0, [pc, #52]	; (800d760 <prvInitialiseTaskLists+0x68>)
 800d72c:	f7fe fc34 	bl	800bf98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d730:	480c      	ldr	r0, [pc, #48]	; (800d764 <prvInitialiseTaskLists+0x6c>)
 800d732:	f7fe fc31 	bl	800bf98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d736:	480c      	ldr	r0, [pc, #48]	; (800d768 <prvInitialiseTaskLists+0x70>)
 800d738:	f7fe fc2e 	bl	800bf98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d73c:	480b      	ldr	r0, [pc, #44]	; (800d76c <prvInitialiseTaskLists+0x74>)
 800d73e:	f7fe fc2b 	bl	800bf98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d742:	4b0b      	ldr	r3, [pc, #44]	; (800d770 <prvInitialiseTaskLists+0x78>)
 800d744:	4a05      	ldr	r2, [pc, #20]	; (800d75c <prvInitialiseTaskLists+0x64>)
 800d746:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d748:	4b0a      	ldr	r3, [pc, #40]	; (800d774 <prvInitialiseTaskLists+0x7c>)
 800d74a:	4a05      	ldr	r2, [pc, #20]	; (800d760 <prvInitialiseTaskLists+0x68>)
 800d74c:	601a      	str	r2, [r3, #0]
}
 800d74e:	bf00      	nop
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20000390 	.word	0x20000390
 800d75c:	2000041c 	.word	0x2000041c
 800d760:	20000430 	.word	0x20000430
 800d764:	2000044c 	.word	0x2000044c
 800d768:	20000460 	.word	0x20000460
 800d76c:	20000478 	.word	0x20000478
 800d770:	20000444 	.word	0x20000444
 800d774:	20000448 	.word	0x20000448

0800d778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d77e:	e019      	b.n	800d7b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d780:	f000 fab0 	bl	800dce4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d784:	4b10      	ldr	r3, [pc, #64]	; (800d7c8 <prvCheckTasksWaitingTermination+0x50>)
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	3304      	adds	r3, #4
 800d790:	4618      	mov	r0, r3
 800d792:	f7fe fc8b 	bl	800c0ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d796:	4b0d      	ldr	r3, [pc, #52]	; (800d7cc <prvCheckTasksWaitingTermination+0x54>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	3b01      	subs	r3, #1
 800d79c:	4a0b      	ldr	r2, [pc, #44]	; (800d7cc <prvCheckTasksWaitingTermination+0x54>)
 800d79e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d7a0:	4b0b      	ldr	r3, [pc, #44]	; (800d7d0 <prvCheckTasksWaitingTermination+0x58>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	4a0a      	ldr	r2, [pc, #40]	; (800d7d0 <prvCheckTasksWaitingTermination+0x58>)
 800d7a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d7aa:	f000 facb 	bl	800dd44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 f810 	bl	800d7d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7b4:	4b06      	ldr	r3, [pc, #24]	; (800d7d0 <prvCheckTasksWaitingTermination+0x58>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1e1      	bne.n	800d780 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d7bc:	bf00      	nop
 800d7be:	bf00      	nop
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	20000460 	.word	0x20000460
 800d7cc:	2000048c 	.word	0x2000048c
 800d7d0:	20000474 	.word	0x20000474

0800d7d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d108      	bne.n	800d7f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f000 fc66 	bl	800e0bc <vPortFree>
				vPortFree( pxTCB );
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 fc63 	bl	800e0bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d7f6:	e018      	b.n	800d82a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d103      	bne.n	800d80a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 fc5a 	bl	800e0bc <vPortFree>
	}
 800d808:	e00f      	b.n	800d82a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d810:	2b02      	cmp	r3, #2
 800d812:	d00a      	beq.n	800d82a <prvDeleteTCB+0x56>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	60fb      	str	r3, [r7, #12]
}
 800d826:	bf00      	nop
 800d828:	e7fe      	b.n	800d828 <prvDeleteTCB+0x54>
	}
 800d82a:	bf00      	nop
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
	...

0800d834 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d83a:	4b0c      	ldr	r3, [pc, #48]	; (800d86c <prvResetNextTaskUnblockTime+0x38>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d104      	bne.n	800d84e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d844:	4b0a      	ldr	r3, [pc, #40]	; (800d870 <prvResetNextTaskUnblockTime+0x3c>)
 800d846:	f04f 32ff 	mov.w	r2, #4294967295
 800d84a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d84c:	e008      	b.n	800d860 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d84e:	4b07      	ldr	r3, [pc, #28]	; (800d86c <prvResetNextTaskUnblockTime+0x38>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	4a04      	ldr	r2, [pc, #16]	; (800d870 <prvResetNextTaskUnblockTime+0x3c>)
 800d85e:	6013      	str	r3, [r2, #0]
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	20000444 	.word	0x20000444
 800d870:	200004ac 	.word	0x200004ac

0800d874 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d87a:	4b0b      	ldr	r3, [pc, #44]	; (800d8a8 <xTaskGetSchedulerState+0x34>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d102      	bne.n	800d888 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d882:	2301      	movs	r3, #1
 800d884:	607b      	str	r3, [r7, #4]
 800d886:	e008      	b.n	800d89a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d888:	4b08      	ldr	r3, [pc, #32]	; (800d8ac <xTaskGetSchedulerState+0x38>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d102      	bne.n	800d896 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d890:	2302      	movs	r3, #2
 800d892:	607b      	str	r3, [r7, #4]
 800d894:	e001      	b.n	800d89a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d896:	2300      	movs	r3, #0
 800d898:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d89a:	687b      	ldr	r3, [r7, #4]
	}
 800d89c:	4618      	mov	r0, r3
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	20000498 	.word	0x20000498
 800d8ac:	200004b4 	.word	0x200004b4

0800d8b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d06e      	beq.n	800d9a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8c6:	4b3a      	ldr	r3, [pc, #232]	; (800d9b0 <xTaskPriorityDisinherit+0x100>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	693a      	ldr	r2, [r7, #16]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d00a      	beq.n	800d8e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d4:	f383 8811 	msr	BASEPRI, r3
 800d8d8:	f3bf 8f6f 	isb	sy
 800d8dc:	f3bf 8f4f 	dsb	sy
 800d8e0:	60fb      	str	r3, [r7, #12]
}
 800d8e2:	bf00      	nop
 800d8e4:	e7fe      	b.n	800d8e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10a      	bne.n	800d904 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f2:	f383 8811 	msr	BASEPRI, r3
 800d8f6:	f3bf 8f6f 	isb	sy
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	60bb      	str	r3, [r7, #8]
}
 800d900:	bf00      	nop
 800d902:	e7fe      	b.n	800d902 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d908:	1e5a      	subs	r2, r3, #1
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d916:	429a      	cmp	r2, r3
 800d918:	d044      	beq.n	800d9a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d140      	bne.n	800d9a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	3304      	adds	r3, #4
 800d926:	4618      	mov	r0, r3
 800d928:	f7fe fbc0 	bl	800c0ac <uxListRemove>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d115      	bne.n	800d95e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d936:	491f      	ldr	r1, [pc, #124]	; (800d9b4 <xTaskPriorityDisinherit+0x104>)
 800d938:	4613      	mov	r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	4413      	add	r3, r2
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	440b      	add	r3, r1
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10a      	bne.n	800d95e <xTaskPriorityDisinherit+0xae>
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94c:	2201      	movs	r2, #1
 800d94e:	fa02 f303 	lsl.w	r3, r2, r3
 800d952:	43da      	mvns	r2, r3
 800d954:	4b18      	ldr	r3, [pc, #96]	; (800d9b8 <xTaskPriorityDisinherit+0x108>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4013      	ands	r3, r2
 800d95a:	4a17      	ldr	r2, [pc, #92]	; (800d9b8 <xTaskPriorityDisinherit+0x108>)
 800d95c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96a:	f1c3 0207 	rsb	r2, r3, #7
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d976:	2201      	movs	r2, #1
 800d978:	409a      	lsls	r2, r3
 800d97a:	4b0f      	ldr	r3, [pc, #60]	; (800d9b8 <xTaskPriorityDisinherit+0x108>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4313      	orrs	r3, r2
 800d980:	4a0d      	ldr	r2, [pc, #52]	; (800d9b8 <xTaskPriorityDisinherit+0x108>)
 800d982:	6013      	str	r3, [r2, #0]
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d988:	4613      	mov	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4413      	add	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	4a08      	ldr	r2, [pc, #32]	; (800d9b4 <xTaskPriorityDisinherit+0x104>)
 800d992:	441a      	add	r2, r3
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	3304      	adds	r3, #4
 800d998:	4619      	mov	r1, r3
 800d99a:	4610      	mov	r0, r2
 800d99c:	f7fe fb29 	bl	800bff2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9a4:	697b      	ldr	r3, [r7, #20]
	}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3718      	adds	r7, #24
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	2000038c 	.word	0x2000038c
 800d9b4:	20000390 	.word	0x20000390
 800d9b8:	20000494 	.word	0x20000494

0800d9bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d9c6:	4b29      	ldr	r3, [pc, #164]	; (800da6c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9cc:	4b28      	ldr	r3, [pc, #160]	; (800da70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe fb6a 	bl	800c0ac <uxListRemove>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10b      	bne.n	800d9f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d9de:	4b24      	ldr	r3, [pc, #144]	; (800da70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ea:	43da      	mvns	r2, r3
 800d9ec:	4b21      	ldr	r3, [pc, #132]	; (800da74 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4013      	ands	r3, r2
 800d9f2:	4a20      	ldr	r2, [pc, #128]	; (800da74 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fc:	d10a      	bne.n	800da14 <prvAddCurrentTaskToDelayedList+0x58>
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d007      	beq.n	800da14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da04:	4b1a      	ldr	r3, [pc, #104]	; (800da70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3304      	adds	r3, #4
 800da0a:	4619      	mov	r1, r3
 800da0c:	481a      	ldr	r0, [pc, #104]	; (800da78 <prvAddCurrentTaskToDelayedList+0xbc>)
 800da0e:	f7fe faf0 	bl	800bff2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800da12:	e026      	b.n	800da62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	4413      	add	r3, r2
 800da1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800da1c:	4b14      	ldr	r3, [pc, #80]	; (800da70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d209      	bcs.n	800da40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da2c:	4b13      	ldr	r3, [pc, #76]	; (800da7c <prvAddCurrentTaskToDelayedList+0xc0>)
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	4b0f      	ldr	r3, [pc, #60]	; (800da70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	3304      	adds	r3, #4
 800da36:	4619      	mov	r1, r3
 800da38:	4610      	mov	r0, r2
 800da3a:	f7fe fafe 	bl	800c03a <vListInsert>
}
 800da3e:	e010      	b.n	800da62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da40:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <prvAddCurrentTaskToDelayedList+0xc4>)
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	4b0a      	ldr	r3, [pc, #40]	; (800da70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	3304      	adds	r3, #4
 800da4a:	4619      	mov	r1, r3
 800da4c:	4610      	mov	r0, r2
 800da4e:	f7fe faf4 	bl	800c03a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da52:	4b0c      	ldr	r3, [pc, #48]	; (800da84 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d202      	bcs.n	800da62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800da5c:	4a09      	ldr	r2, [pc, #36]	; (800da84 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	6013      	str	r3, [r2, #0]
}
 800da62:	bf00      	nop
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	20000490 	.word	0x20000490
 800da70:	2000038c 	.word	0x2000038c
 800da74:	20000494 	.word	0x20000494
 800da78:	20000478 	.word	0x20000478
 800da7c:	20000448 	.word	0x20000448
 800da80:	20000444 	.word	0x20000444
 800da84:	200004ac 	.word	0x200004ac

0800da88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	3b04      	subs	r3, #4
 800da98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800daa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	3b04      	subs	r3, #4
 800daa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	f023 0201 	bic.w	r2, r3, #1
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	3b04      	subs	r3, #4
 800dab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dab8:	4a0c      	ldr	r2, [pc, #48]	; (800daec <pxPortInitialiseStack+0x64>)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	3b14      	subs	r3, #20
 800dac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	3b04      	subs	r3, #4
 800dace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f06f 0202 	mvn.w	r2, #2
 800dad6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	3b20      	subs	r3, #32
 800dadc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dade:	68fb      	ldr	r3, [r7, #12]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3714      	adds	r7, #20
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr
 800daec:	0800daf1 	.word	0x0800daf1

0800daf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dafa:	4b12      	ldr	r3, [pc, #72]	; (800db44 <prvTaskExitError+0x54>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db02:	d00a      	beq.n	800db1a <prvTaskExitError+0x2a>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	60fb      	str	r3, [r7, #12]
}
 800db16:	bf00      	nop
 800db18:	e7fe      	b.n	800db18 <prvTaskExitError+0x28>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	60bb      	str	r3, [r7, #8]
}
 800db2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db2e:	bf00      	nop
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0fc      	beq.n	800db30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db36:	bf00      	nop
 800db38:	bf00      	nop
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr
 800db44:	20000078 	.word	0x20000078
	...

0800db50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db50:	4b07      	ldr	r3, [pc, #28]	; (800db70 <pxCurrentTCBConst2>)
 800db52:	6819      	ldr	r1, [r3, #0]
 800db54:	6808      	ldr	r0, [r1, #0]
 800db56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5a:	f380 8809 	msr	PSP, r0
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f04f 0000 	mov.w	r0, #0
 800db66:	f380 8811 	msr	BASEPRI, r0
 800db6a:	4770      	bx	lr
 800db6c:	f3af 8000 	nop.w

0800db70 <pxCurrentTCBConst2>:
 800db70:	2000038c 	.word	0x2000038c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db74:	bf00      	nop
 800db76:	bf00      	nop

0800db78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db78:	4808      	ldr	r0, [pc, #32]	; (800db9c <prvPortStartFirstTask+0x24>)
 800db7a:	6800      	ldr	r0, [r0, #0]
 800db7c:	6800      	ldr	r0, [r0, #0]
 800db7e:	f380 8808 	msr	MSP, r0
 800db82:	f04f 0000 	mov.w	r0, #0
 800db86:	f380 8814 	msr	CONTROL, r0
 800db8a:	b662      	cpsie	i
 800db8c:	b661      	cpsie	f
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	df00      	svc	0
 800db98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db9a:	bf00      	nop
 800db9c:	e000ed08 	.word	0xe000ed08

0800dba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dba6:	4b46      	ldr	r3, [pc, #280]	; (800dcc0 <xPortStartScheduler+0x120>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a46      	ldr	r2, [pc, #280]	; (800dcc4 <xPortStartScheduler+0x124>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d10a      	bne.n	800dbc6 <xPortStartScheduler+0x26>
	__asm volatile
 800dbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	613b      	str	r3, [r7, #16]
}
 800dbc2:	bf00      	nop
 800dbc4:	e7fe      	b.n	800dbc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dbc6:	4b3e      	ldr	r3, [pc, #248]	; (800dcc0 <xPortStartScheduler+0x120>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4a3f      	ldr	r2, [pc, #252]	; (800dcc8 <xPortStartScheduler+0x128>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d10a      	bne.n	800dbe6 <xPortStartScheduler+0x46>
	__asm volatile
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	60fb      	str	r3, [r7, #12]
}
 800dbe2:	bf00      	nop
 800dbe4:	e7fe      	b.n	800dbe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dbe6:	4b39      	ldr	r3, [pc, #228]	; (800dccc <xPortStartScheduler+0x12c>)
 800dbe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	22ff      	movs	r2, #255	; 0xff
 800dbf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc00:	78fb      	ldrb	r3, [r7, #3]
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	4b31      	ldr	r3, [pc, #196]	; (800dcd0 <xPortStartScheduler+0x130>)
 800dc0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc0e:	4b31      	ldr	r3, [pc, #196]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc10:	2207      	movs	r2, #7
 800dc12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc14:	e009      	b.n	800dc2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dc16:	4b2f      	ldr	r3, [pc, #188]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	4a2d      	ldr	r2, [pc, #180]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc20:	78fb      	ldrb	r3, [r7, #3]
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc2a:	78fb      	ldrb	r3, [r7, #3]
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc32:	2b80      	cmp	r3, #128	; 0x80
 800dc34:	d0ef      	beq.n	800dc16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc36:	4b27      	ldr	r3, [pc, #156]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f1c3 0307 	rsb	r3, r3, #7
 800dc3e:	2b04      	cmp	r3, #4
 800dc40:	d00a      	beq.n	800dc58 <xPortStartScheduler+0xb8>
	__asm volatile
 800dc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc46:	f383 8811 	msr	BASEPRI, r3
 800dc4a:	f3bf 8f6f 	isb	sy
 800dc4e:	f3bf 8f4f 	dsb	sy
 800dc52:	60bb      	str	r3, [r7, #8]
}
 800dc54:	bf00      	nop
 800dc56:	e7fe      	b.n	800dc56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc58:	4b1e      	ldr	r3, [pc, #120]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	021b      	lsls	r3, r3, #8
 800dc5e:	4a1d      	ldr	r2, [pc, #116]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc62:	4b1c      	ldr	r3, [pc, #112]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc6a:	4a1a      	ldr	r2, [pc, #104]	; (800dcd4 <xPortStartScheduler+0x134>)
 800dc6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	b2da      	uxtb	r2, r3
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dc76:	4b18      	ldr	r3, [pc, #96]	; (800dcd8 <xPortStartScheduler+0x138>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a17      	ldr	r2, [pc, #92]	; (800dcd8 <xPortStartScheduler+0x138>)
 800dc7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dc82:	4b15      	ldr	r3, [pc, #84]	; (800dcd8 <xPortStartScheduler+0x138>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a14      	ldr	r2, [pc, #80]	; (800dcd8 <xPortStartScheduler+0x138>)
 800dc88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dc8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dc8e:	f000 f8dd 	bl	800de4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dc92:	4b12      	ldr	r3, [pc, #72]	; (800dcdc <xPortStartScheduler+0x13c>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc98:	f000 f8fc 	bl	800de94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc9c:	4b10      	ldr	r3, [pc, #64]	; (800dce0 <xPortStartScheduler+0x140>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a0f      	ldr	r2, [pc, #60]	; (800dce0 <xPortStartScheduler+0x140>)
 800dca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dca8:	f7ff ff66 	bl	800db78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dcac:	f7ff fb80 	bl	800d3b0 <vTaskSwitchContext>
	prvTaskExitError();
 800dcb0:	f7ff ff1e 	bl	800daf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3718      	adds	r7, #24
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	e000ed00 	.word	0xe000ed00
 800dcc4:	410fc271 	.word	0x410fc271
 800dcc8:	410fc270 	.word	0x410fc270
 800dccc:	e000e400 	.word	0xe000e400
 800dcd0:	200004b8 	.word	0x200004b8
 800dcd4:	200004bc 	.word	0x200004bc
 800dcd8:	e000ed20 	.word	0xe000ed20
 800dcdc:	20000078 	.word	0x20000078
 800dce0:	e000ef34 	.word	0xe000ef34

0800dce4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
	__asm volatile
 800dcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcee:	f383 8811 	msr	BASEPRI, r3
 800dcf2:	f3bf 8f6f 	isb	sy
 800dcf6:	f3bf 8f4f 	dsb	sy
 800dcfa:	607b      	str	r3, [r7, #4]
}
 800dcfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dcfe:	4b0f      	ldr	r3, [pc, #60]	; (800dd3c <vPortEnterCritical+0x58>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	3301      	adds	r3, #1
 800dd04:	4a0d      	ldr	r2, [pc, #52]	; (800dd3c <vPortEnterCritical+0x58>)
 800dd06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd08:	4b0c      	ldr	r3, [pc, #48]	; (800dd3c <vPortEnterCritical+0x58>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d10f      	bne.n	800dd30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd10:	4b0b      	ldr	r3, [pc, #44]	; (800dd40 <vPortEnterCritical+0x5c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00a      	beq.n	800dd30 <vPortEnterCritical+0x4c>
	__asm volatile
 800dd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1e:	f383 8811 	msr	BASEPRI, r3
 800dd22:	f3bf 8f6f 	isb	sy
 800dd26:	f3bf 8f4f 	dsb	sy
 800dd2a:	603b      	str	r3, [r7, #0]
}
 800dd2c:	bf00      	nop
 800dd2e:	e7fe      	b.n	800dd2e <vPortEnterCritical+0x4a>
	}
}
 800dd30:	bf00      	nop
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	20000078 	.word	0x20000078
 800dd40:	e000ed04 	.word	0xe000ed04

0800dd44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd4a:	4b12      	ldr	r3, [pc, #72]	; (800dd94 <vPortExitCritical+0x50>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d10a      	bne.n	800dd68 <vPortExitCritical+0x24>
	__asm volatile
 800dd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd56:	f383 8811 	msr	BASEPRI, r3
 800dd5a:	f3bf 8f6f 	isb	sy
 800dd5e:	f3bf 8f4f 	dsb	sy
 800dd62:	607b      	str	r3, [r7, #4]
}
 800dd64:	bf00      	nop
 800dd66:	e7fe      	b.n	800dd66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dd68:	4b0a      	ldr	r3, [pc, #40]	; (800dd94 <vPortExitCritical+0x50>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	4a09      	ldr	r2, [pc, #36]	; (800dd94 <vPortExitCritical+0x50>)
 800dd70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd72:	4b08      	ldr	r3, [pc, #32]	; (800dd94 <vPortExitCritical+0x50>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d105      	bne.n	800dd86 <vPortExitCritical+0x42>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	f383 8811 	msr	BASEPRI, r3
}
 800dd84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dd86:	bf00      	nop
 800dd88:	370c      	adds	r7, #12
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	20000078 	.word	0x20000078
	...

0800dda0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dda0:	f3ef 8009 	mrs	r0, PSP
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	4b15      	ldr	r3, [pc, #84]	; (800de00 <pxCurrentTCBConst>)
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	f01e 0f10 	tst.w	lr, #16
 800ddb0:	bf08      	it	eq
 800ddb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ddb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddba:	6010      	str	r0, [r2, #0]
 800ddbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ddc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ddc4:	f380 8811 	msr	BASEPRI, r0
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f7ff faee 	bl	800d3b0 <vTaskSwitchContext>
 800ddd4:	f04f 0000 	mov.w	r0, #0
 800ddd8:	f380 8811 	msr	BASEPRI, r0
 800dddc:	bc09      	pop	{r0, r3}
 800ddde:	6819      	ldr	r1, [r3, #0]
 800dde0:	6808      	ldr	r0, [r1, #0]
 800dde2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde6:	f01e 0f10 	tst.w	lr, #16
 800ddea:	bf08      	it	eq
 800ddec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ddf0:	f380 8809 	msr	PSP, r0
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	f3af 8000 	nop.w

0800de00 <pxCurrentTCBConst>:
 800de00:	2000038c 	.word	0x2000038c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de04:	bf00      	nop
 800de06:	bf00      	nop

0800de08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	607b      	str	r3, [r7, #4]
}
 800de20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de22:	f7ff fa0d 	bl	800d240 <xTaskIncrementTick>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d003      	beq.n	800de34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de2c:	4b06      	ldr	r3, [pc, #24]	; (800de48 <SysTick_Handler+0x40>)
 800de2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de32:	601a      	str	r2, [r3, #0]
 800de34:	2300      	movs	r3, #0
 800de36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	f383 8811 	msr	BASEPRI, r3
}
 800de3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800de40:	bf00      	nop
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	e000ed04 	.word	0xe000ed04

0800de4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de4c:	b480      	push	{r7}
 800de4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de50:	4b0b      	ldr	r3, [pc, #44]	; (800de80 <vPortSetupTimerInterrupt+0x34>)
 800de52:	2200      	movs	r2, #0
 800de54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de56:	4b0b      	ldr	r3, [pc, #44]	; (800de84 <vPortSetupTimerInterrupt+0x38>)
 800de58:	2200      	movs	r2, #0
 800de5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de5c:	4b0a      	ldr	r3, [pc, #40]	; (800de88 <vPortSetupTimerInterrupt+0x3c>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a0a      	ldr	r2, [pc, #40]	; (800de8c <vPortSetupTimerInterrupt+0x40>)
 800de62:	fba2 2303 	umull	r2, r3, r2, r3
 800de66:	099b      	lsrs	r3, r3, #6
 800de68:	4a09      	ldr	r2, [pc, #36]	; (800de90 <vPortSetupTimerInterrupt+0x44>)
 800de6a:	3b01      	subs	r3, #1
 800de6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de6e:	4b04      	ldr	r3, [pc, #16]	; (800de80 <vPortSetupTimerInterrupt+0x34>)
 800de70:	2207      	movs	r2, #7
 800de72:	601a      	str	r2, [r3, #0]
}
 800de74:	bf00      	nop
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	e000e010 	.word	0xe000e010
 800de84:	e000e018 	.word	0xe000e018
 800de88:	20000000 	.word	0x20000000
 800de8c:	10624dd3 	.word	0x10624dd3
 800de90:	e000e014 	.word	0xe000e014

0800de94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dea4 <vPortEnableVFP+0x10>
 800de98:	6801      	ldr	r1, [r0, #0]
 800de9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800de9e:	6001      	str	r1, [r0, #0]
 800dea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dea2:	bf00      	nop
 800dea4:	e000ed88 	.word	0xe000ed88

0800dea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dea8:	b480      	push	{r7}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800deae:	f3ef 8305 	mrs	r3, IPSR
 800deb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2b0f      	cmp	r3, #15
 800deb8:	d914      	bls.n	800dee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800deba:	4a17      	ldr	r2, [pc, #92]	; (800df18 <vPortValidateInterruptPriority+0x70>)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	4413      	add	r3, r2
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dec4:	4b15      	ldr	r3, [pc, #84]	; (800df1c <vPortValidateInterruptPriority+0x74>)
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	7afa      	ldrb	r2, [r7, #11]
 800deca:	429a      	cmp	r2, r3
 800decc:	d20a      	bcs.n	800dee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	607b      	str	r3, [r7, #4]
}
 800dee0:	bf00      	nop
 800dee2:	e7fe      	b.n	800dee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dee4:	4b0e      	ldr	r3, [pc, #56]	; (800df20 <vPortValidateInterruptPriority+0x78>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800deec:	4b0d      	ldr	r3, [pc, #52]	; (800df24 <vPortValidateInterruptPriority+0x7c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	429a      	cmp	r2, r3
 800def2:	d90a      	bls.n	800df0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	603b      	str	r3, [r7, #0]
}
 800df06:	bf00      	nop
 800df08:	e7fe      	b.n	800df08 <vPortValidateInterruptPriority+0x60>
	}
 800df0a:	bf00      	nop
 800df0c:	3714      	adds	r7, #20
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	e000e3f0 	.word	0xe000e3f0
 800df1c:	200004b8 	.word	0x200004b8
 800df20:	e000ed0c 	.word	0xe000ed0c
 800df24:	200004bc 	.word	0x200004bc

0800df28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b08a      	sub	sp, #40	; 0x28
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df30:	2300      	movs	r3, #0
 800df32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df34:	f7ff f8da 	bl	800d0ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df38:	4b5b      	ldr	r3, [pc, #364]	; (800e0a8 <pvPortMalloc+0x180>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d101      	bne.n	800df44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df40:	f000 f916 	bl	800e170 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df44:	4b59      	ldr	r3, [pc, #356]	; (800e0ac <pvPortMalloc+0x184>)
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	4013      	ands	r3, r2
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f040 808e 	bne.w	800e06e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d01d      	beq.n	800df94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800df58:	2208      	movs	r2, #8
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4413      	add	r3, r2
 800df5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f003 0307 	and.w	r3, r3, #7
 800df66:	2b00      	cmp	r3, #0
 800df68:	d014      	beq.n	800df94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f023 0307 	bic.w	r3, r3, #7
 800df70:	3308      	adds	r3, #8
 800df72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f003 0307 	and.w	r3, r3, #7
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00a      	beq.n	800df94 <pvPortMalloc+0x6c>
	__asm volatile
 800df7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	617b      	str	r3, [r7, #20]
}
 800df90:	bf00      	nop
 800df92:	e7fe      	b.n	800df92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d069      	beq.n	800e06e <pvPortMalloc+0x146>
 800df9a:	4b45      	ldr	r3, [pc, #276]	; (800e0b0 <pvPortMalloc+0x188>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d864      	bhi.n	800e06e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dfa4:	4b43      	ldr	r3, [pc, #268]	; (800e0b4 <pvPortMalloc+0x18c>)
 800dfa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dfa8:	4b42      	ldr	r3, [pc, #264]	; (800e0b4 <pvPortMalloc+0x18c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfae:	e004      	b.n	800dfba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d903      	bls.n	800dfcc <pvPortMalloc+0xa4>
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1f1      	bne.n	800dfb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dfcc:	4b36      	ldr	r3, [pc, #216]	; (800e0a8 <pvPortMalloc+0x180>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d04b      	beq.n	800e06e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2208      	movs	r2, #8
 800dfdc:	4413      	add	r3, r2
 800dfde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	6a3b      	ldr	r3, [r7, #32]
 800dfe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	685a      	ldr	r2, [r3, #4]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	1ad2      	subs	r2, r2, r3
 800dff0:	2308      	movs	r3, #8
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d91f      	bls.n	800e038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4413      	add	r3, r2
 800dffe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	f003 0307 	and.w	r3, r3, #7
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00a      	beq.n	800e020 <pvPortMalloc+0xf8>
	__asm volatile
 800e00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00e:	f383 8811 	msr	BASEPRI, r3
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	613b      	str	r3, [r7, #16]
}
 800e01c:	bf00      	nop
 800e01e:	e7fe      	b.n	800e01e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	685a      	ldr	r2, [r3, #4]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	1ad2      	subs	r2, r2, r3
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e032:	69b8      	ldr	r0, [r7, #24]
 800e034:	f000 f8fe 	bl	800e234 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e038:	4b1d      	ldr	r3, [pc, #116]	; (800e0b0 <pvPortMalloc+0x188>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	4a1b      	ldr	r2, [pc, #108]	; (800e0b0 <pvPortMalloc+0x188>)
 800e044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e046:	4b1a      	ldr	r3, [pc, #104]	; (800e0b0 <pvPortMalloc+0x188>)
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	4b1b      	ldr	r3, [pc, #108]	; (800e0b8 <pvPortMalloc+0x190>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d203      	bcs.n	800e05a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e052:	4b17      	ldr	r3, [pc, #92]	; (800e0b0 <pvPortMalloc+0x188>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a18      	ldr	r2, [pc, #96]	; (800e0b8 <pvPortMalloc+0x190>)
 800e058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05c:	685a      	ldr	r2, [r3, #4]
 800e05e:	4b13      	ldr	r3, [pc, #76]	; (800e0ac <pvPortMalloc+0x184>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	431a      	orrs	r2, r3
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	2200      	movs	r2, #0
 800e06c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e06e:	f7ff f84b 	bl	800d108 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d101      	bne.n	800e07c <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e078:	f7f2 fe8e 	bl	8000d98 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	f003 0307 	and.w	r3, r3, #7
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00a      	beq.n	800e09c <pvPortMalloc+0x174>
	__asm volatile
 800e086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08a:	f383 8811 	msr	BASEPRI, r3
 800e08e:	f3bf 8f6f 	isb	sy
 800e092:	f3bf 8f4f 	dsb	sy
 800e096:	60fb      	str	r3, [r7, #12]
}
 800e098:	bf00      	nop
 800e09a:	e7fe      	b.n	800e09a <pvPortMalloc+0x172>
	return pvReturn;
 800e09c:	69fb      	ldr	r3, [r7, #28]
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3728      	adds	r7, #40	; 0x28
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	200084c8 	.word	0x200084c8
 800e0ac:	200084d4 	.word	0x200084d4
 800e0b0:	200084cc 	.word	0x200084cc
 800e0b4:	200084c0 	.word	0x200084c0
 800e0b8:	200084d0 	.word	0x200084d0

0800e0bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b086      	sub	sp, #24
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d048      	beq.n	800e160 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e0ce:	2308      	movs	r3, #8
 800e0d0:	425b      	negs	r3, r3
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	685a      	ldr	r2, [r3, #4]
 800e0e0:	4b21      	ldr	r3, [pc, #132]	; (800e168 <vPortFree+0xac>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4013      	ands	r3, r2
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10a      	bne.n	800e100 <vPortFree+0x44>
	__asm volatile
 800e0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	60fb      	str	r3, [r7, #12]
}
 800e0fc:	bf00      	nop
 800e0fe:	e7fe      	b.n	800e0fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00a      	beq.n	800e11e <vPortFree+0x62>
	__asm volatile
 800e108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10c:	f383 8811 	msr	BASEPRI, r3
 800e110:	f3bf 8f6f 	isb	sy
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	60bb      	str	r3, [r7, #8]
}
 800e11a:	bf00      	nop
 800e11c:	e7fe      	b.n	800e11c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	685a      	ldr	r2, [r3, #4]
 800e122:	4b11      	ldr	r3, [pc, #68]	; (800e168 <vPortFree+0xac>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4013      	ands	r3, r2
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d019      	beq.n	800e160 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d115      	bne.n	800e160 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	685a      	ldr	r2, [r3, #4]
 800e138:	4b0b      	ldr	r3, [pc, #44]	; (800e168 <vPortFree+0xac>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	43db      	mvns	r3, r3
 800e13e:	401a      	ands	r2, r3
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e144:	f7fe ffd2 	bl	800d0ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	685a      	ldr	r2, [r3, #4]
 800e14c:	4b07      	ldr	r3, [pc, #28]	; (800e16c <vPortFree+0xb0>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4413      	add	r3, r2
 800e152:	4a06      	ldr	r2, [pc, #24]	; (800e16c <vPortFree+0xb0>)
 800e154:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e156:	6938      	ldr	r0, [r7, #16]
 800e158:	f000 f86c 	bl	800e234 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e15c:	f7fe ffd4 	bl	800d108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e160:	bf00      	nop
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	200084d4 	.word	0x200084d4
 800e16c:	200084cc 	.word	0x200084cc

0800e170 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e17a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e17c:	4b27      	ldr	r3, [pc, #156]	; (800e21c <prvHeapInit+0xac>)
 800e17e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f003 0307 	and.w	r3, r3, #7
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00c      	beq.n	800e1a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	3307      	adds	r3, #7
 800e18e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f023 0307 	bic.w	r3, r3, #7
 800e196:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e198:	68ba      	ldr	r2, [r7, #8]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	4a1f      	ldr	r2, [pc, #124]	; (800e21c <prvHeapInit+0xac>)
 800e1a0:	4413      	add	r3, r2
 800e1a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1a8:	4a1d      	ldr	r2, [pc, #116]	; (800e220 <prvHeapInit+0xb0>)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1ae:	4b1c      	ldr	r3, [pc, #112]	; (800e220 <prvHeapInit+0xb0>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	68ba      	ldr	r2, [r7, #8]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e1bc:	2208      	movs	r2, #8
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	1a9b      	subs	r3, r3, r2
 800e1c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f023 0307 	bic.w	r3, r3, #7
 800e1ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	4a15      	ldr	r2, [pc, #84]	; (800e224 <prvHeapInit+0xb4>)
 800e1d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e1d2:	4b14      	ldr	r3, [pc, #80]	; (800e224 <prvHeapInit+0xb4>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e1da:	4b12      	ldr	r3, [pc, #72]	; (800e224 <prvHeapInit+0xb4>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	1ad2      	subs	r2, r2, r3
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e1f0:	4b0c      	ldr	r3, [pc, #48]	; (800e224 <prvHeapInit+0xb4>)
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	4a0a      	ldr	r2, [pc, #40]	; (800e228 <prvHeapInit+0xb8>)
 800e1fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	4a09      	ldr	r2, [pc, #36]	; (800e22c <prvHeapInit+0xbc>)
 800e206:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e208:	4b09      	ldr	r3, [pc, #36]	; (800e230 <prvHeapInit+0xc0>)
 800e20a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e20e:	601a      	str	r2, [r3, #0]
}
 800e210:	bf00      	nop
 800e212:	3714      	adds	r7, #20
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	200004c0 	.word	0x200004c0
 800e220:	200084c0 	.word	0x200084c0
 800e224:	200084c8 	.word	0x200084c8
 800e228:	200084d0 	.word	0x200084d0
 800e22c:	200084cc 	.word	0x200084cc
 800e230:	200084d4 	.word	0x200084d4

0800e234 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e23c:	4b28      	ldr	r3, [pc, #160]	; (800e2e0 <prvInsertBlockIntoFreeList+0xac>)
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	e002      	b.n	800e248 <prvInsertBlockIntoFreeList+0x14>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d8f7      	bhi.n	800e242 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	4413      	add	r3, r2
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	429a      	cmp	r2, r3
 800e262:	d108      	bne.n	800e276 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	685a      	ldr	r2, [r3, #4]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	441a      	add	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	441a      	add	r2, r3
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	429a      	cmp	r2, r3
 800e288:	d118      	bne.n	800e2bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	4b15      	ldr	r3, [pc, #84]	; (800e2e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	429a      	cmp	r2, r3
 800e294:	d00d      	beq.n	800e2b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	685a      	ldr	r2, [r3, #4]
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	441a      	add	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	601a      	str	r2, [r3, #0]
 800e2b0:	e008      	b.n	800e2c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e2b2:	4b0c      	ldr	r3, [pc, #48]	; (800e2e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	e003      	b.n	800e2c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d002      	beq.n	800e2d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2d2:	bf00      	nop
 800e2d4:	3714      	adds	r7, #20
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop
 800e2e0:	200084c0 	.word	0x200084c0
 800e2e4:	200084c8 	.word	0x200084c8

0800e2e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	490e      	ldr	r1, [pc, #56]	; (800e328 <MX_USB_HOST_Init+0x40>)
 800e2f0:	480e      	ldr	r0, [pc, #56]	; (800e32c <MX_USB_HOST_Init+0x44>)
 800e2f2:	f7fb ff6b 	bl	800a1cc <USBH_Init>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d001      	beq.n	800e300 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e2fc:	f7f3 fb40 	bl	8001980 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800e300:	490b      	ldr	r1, [pc, #44]	; (800e330 <MX_USB_HOST_Init+0x48>)
 800e302:	480a      	ldr	r0, [pc, #40]	; (800e32c <MX_USB_HOST_Init+0x44>)
 800e304:	f7fc f818 	bl	800a338 <USBH_RegisterClass>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d001      	beq.n	800e312 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e30e:	f7f3 fb37 	bl	8001980 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800e312:	4806      	ldr	r0, [pc, #24]	; (800e32c <MX_USB_HOST_Init+0x44>)
 800e314:	f7fc f89c 	bl	800a450 <USBH_Start>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e31e:	f7f3 fb2f 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e322:	bf00      	nop
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	0800e335 	.word	0x0800e335
 800e32c:	200088d4 	.word	0x200088d4
 800e330:	20000058 	.word	0x20000058

0800e334 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	460b      	mov	r3, r1
 800e33e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e340:	78fb      	ldrb	r3, [r7, #3]
 800e342:	3b01      	subs	r3, #1
 800e344:	2b04      	cmp	r3, #4
 800e346:	d819      	bhi.n	800e37c <USBH_UserProcess+0x48>
 800e348:	a201      	add	r2, pc, #4	; (adr r2, 800e350 <USBH_UserProcess+0x1c>)
 800e34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e34e:	bf00      	nop
 800e350:	0800e37d 	.word	0x0800e37d
 800e354:	0800e36d 	.word	0x0800e36d
 800e358:	0800e37d 	.word	0x0800e37d
 800e35c:	0800e375 	.word	0x0800e375
 800e360:	0800e365 	.word	0x0800e365
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e364:	4b09      	ldr	r3, [pc, #36]	; (800e38c <USBH_UserProcess+0x58>)
 800e366:	2203      	movs	r2, #3
 800e368:	701a      	strb	r2, [r3, #0]
  break;
 800e36a:	e008      	b.n	800e37e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e36c:	4b07      	ldr	r3, [pc, #28]	; (800e38c <USBH_UserProcess+0x58>)
 800e36e:	2202      	movs	r2, #2
 800e370:	701a      	strb	r2, [r3, #0]
  break;
 800e372:	e004      	b.n	800e37e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e374:	4b05      	ldr	r3, [pc, #20]	; (800e38c <USBH_UserProcess+0x58>)
 800e376:	2201      	movs	r2, #1
 800e378:	701a      	strb	r2, [r3, #0]
  break;
 800e37a:	e000      	b.n	800e37e <USBH_UserProcess+0x4a>

  default:
  break;
 800e37c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e37e:	bf00      	nop
 800e380:	370c      	adds	r7, #12
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop
 800e38c:	200084d8 	.word	0x200084d8

0800e390 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b08a      	sub	sp, #40	; 0x28
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e398:	f107 0314 	add.w	r3, r7, #20
 800e39c:	2200      	movs	r2, #0
 800e39e:	601a      	str	r2, [r3, #0]
 800e3a0:	605a      	str	r2, [r3, #4]
 800e3a2:	609a      	str	r2, [r3, #8]
 800e3a4:	60da      	str	r2, [r3, #12]
 800e3a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a24      	ldr	r2, [pc, #144]	; (800e440 <HAL_HCD_MspInit+0xb0>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d141      	bne.n	800e436 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	613b      	str	r3, [r7, #16]
 800e3b6:	4b23      	ldr	r3, [pc, #140]	; (800e444 <HAL_HCD_MspInit+0xb4>)
 800e3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ba:	4a22      	ldr	r2, [pc, #136]	; (800e444 <HAL_HCD_MspInit+0xb4>)
 800e3bc:	f043 0302 	orr.w	r3, r3, #2
 800e3c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e3c2:	4b20      	ldr	r3, [pc, #128]	; (800e444 <HAL_HCD_MspInit+0xb4>)
 800e3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	613b      	str	r3, [r7, #16]
 800e3cc:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800e3ce:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800e3d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e3e0:	230c      	movs	r3, #12
 800e3e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e3e4:	f107 0314 	add.w	r3, r7, #20
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4817      	ldr	r0, [pc, #92]	; (800e448 <HAL_HCD_MspInit+0xb8>)
 800e3ec:	f7f5 fc14 	bl	8003c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800e3f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e3f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800e3fe:	f107 0314 	add.w	r3, r7, #20
 800e402:	4619      	mov	r1, r3
 800e404:	4810      	ldr	r0, [pc, #64]	; (800e448 <HAL_HCD_MspInit+0xb8>)
 800e406:	f7f5 fc07 	bl	8003c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e40a:	2300      	movs	r3, #0
 800e40c:	60fb      	str	r3, [r7, #12]
 800e40e:	4b0d      	ldr	r3, [pc, #52]	; (800e444 <HAL_HCD_MspInit+0xb4>)
 800e410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e412:	4a0c      	ldr	r2, [pc, #48]	; (800e444 <HAL_HCD_MspInit+0xb4>)
 800e414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e418:	6313      	str	r3, [r2, #48]	; 0x30
 800e41a:	4b0a      	ldr	r3, [pc, #40]	; (800e444 <HAL_HCD_MspInit+0xb4>)
 800e41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e41e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e426:	2200      	movs	r2, #0
 800e428:	2105      	movs	r1, #5
 800e42a:	204d      	movs	r0, #77	; 0x4d
 800e42c:	f7f5 f9c2 	bl	80037b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e430:	204d      	movs	r0, #77	; 0x4d
 800e432:	f7f5 f9db 	bl	80037ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e436:	bf00      	nop
 800e438:	3728      	adds	r7, #40	; 0x28
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	40040000 	.word	0x40040000
 800e444:	40023800 	.word	0x40023800
 800e448:	40020400 	.word	0x40020400

0800e44c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fc fca5 	bl	800adaa <USBH_LL_IncTimer>
}
 800e460:	bf00      	nop
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e476:	4618      	mov	r0, r3
 800e478:	f7fc fce9 	bl	800ae4e <USBH_LL_Connect>
}
 800e47c:	bf00      	nop
 800e47e:	3708      	adds	r7, #8
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e492:	4618      	mov	r0, r3
 800e494:	f7fc fcfe 	bl	800ae94 <USBH_LL_Disconnect>
}
 800e498:	bf00      	nop
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	70fb      	strb	r3, [r7, #3]
 800e4ac:	4613      	mov	r3, r2
 800e4ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7fc fd33 	bl	800af22 <USBH_LL_NotifyURBChange>
#endif
}
 800e4bc:	bf00      	nop
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7fc fc93 	bl	800adfe <USBH_LL_PortEnabled>
}
 800e4d8:	bf00      	nop
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fc fc9f 	bl	800ae32 <USBH_LL_PortDisabled>
}
 800e4f4:	bf00      	nop
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d132      	bne.n	800e574 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800e50e:	4a1c      	ldr	r2, [pc, #112]	; (800e580 <USBH_LL_Init+0x84>)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4a19      	ldr	r2, [pc, #100]	; (800e580 <USBH_LL_Init+0x84>)
 800e51a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e51e:	4b18      	ldr	r3, [pc, #96]	; (800e580 <USBH_LL_Init+0x84>)
 800e520:	4a18      	ldr	r2, [pc, #96]	; (800e584 <USBH_LL_Init+0x88>)
 800e522:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800e524:	4b16      	ldr	r3, [pc, #88]	; (800e580 <USBH_LL_Init+0x84>)
 800e526:	220c      	movs	r2, #12
 800e528:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800e52a:	4b15      	ldr	r3, [pc, #84]	; (800e580 <USBH_LL_Init+0x84>)
 800e52c:	2201      	movs	r2, #1
 800e52e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e530:	4b13      	ldr	r3, [pc, #76]	; (800e580 <USBH_LL_Init+0x84>)
 800e532:	2200      	movs	r2, #0
 800e534:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e536:	4b12      	ldr	r3, [pc, #72]	; (800e580 <USBH_LL_Init+0x84>)
 800e538:	2202      	movs	r2, #2
 800e53a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e53c:	4b10      	ldr	r3, [pc, #64]	; (800e580 <USBH_LL_Init+0x84>)
 800e53e:	2200      	movs	r2, #0
 800e540:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e542:	4b0f      	ldr	r3, [pc, #60]	; (800e580 <USBH_LL_Init+0x84>)
 800e544:	2200      	movs	r2, #0
 800e546:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e548:	4b0d      	ldr	r3, [pc, #52]	; (800e580 <USBH_LL_Init+0x84>)
 800e54a:	2200      	movs	r2, #0
 800e54c:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e54e:	4b0c      	ldr	r3, [pc, #48]	; (800e580 <USBH_LL_Init+0x84>)
 800e550:	2200      	movs	r2, #0
 800e552:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800e554:	480a      	ldr	r0, [pc, #40]	; (800e580 <USBH_LL_Init+0x84>)
 800e556:	f7f5 fd24 	bl	8003fa2 <HAL_HCD_Init>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d001      	beq.n	800e564 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800e560:	f7f3 fa0e 	bl	8001980 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800e564:	4806      	ldr	r0, [pc, #24]	; (800e580 <USBH_LL_Init+0x84>)
 800e566:	f7f6 f927 	bl	80047b8 <HAL_HCD_GetCurrentFrame>
 800e56a:	4603      	mov	r3, r0
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7fc fc0c 	bl	800ad8c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e574:	2300      	movs	r3, #0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	20008cb8 	.word	0x20008cb8
 800e584:	40040000 	.word	0x40040000

0800e588 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e590:	2300      	movs	r3, #0
 800e592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e594:	2300      	movs	r3, #0
 800e596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7f6 f892 	bl	80046c8 <HAL_HCD_Start>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e5a8:	7bfb      	ldrb	r3, [r7, #15]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f000 f95e 	bl	800e86c <USBH_Get_USB_Status>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b084      	sub	sp, #16
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7f6 f89a 	bl	800470e <HAL_HCD_Stop>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e5de:	7bfb      	ldrb	r3, [r7, #15]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f000 f943 	bl	800e86c <USBH_Get_USB_Status>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3710      	adds	r7, #16
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e606:	4618      	mov	r0, r3
 800e608:	f7f6 f8e4 	bl	80047d4 <HAL_HCD_GetCurrentSpeed>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2b02      	cmp	r3, #2
 800e610:	d00c      	beq.n	800e62c <USBH_LL_GetSpeed+0x38>
 800e612:	2b02      	cmp	r3, #2
 800e614:	d80d      	bhi.n	800e632 <USBH_LL_GetSpeed+0x3e>
 800e616:	2b00      	cmp	r3, #0
 800e618:	d002      	beq.n	800e620 <USBH_LL_GetSpeed+0x2c>
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d003      	beq.n	800e626 <USBH_LL_GetSpeed+0x32>
 800e61e:	e008      	b.n	800e632 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e620:	2300      	movs	r3, #0
 800e622:	73fb      	strb	r3, [r7, #15]
    break;
 800e624:	e008      	b.n	800e638 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e626:	2301      	movs	r3, #1
 800e628:	73fb      	strb	r3, [r7, #15]
    break;
 800e62a:	e005      	b.n	800e638 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e62c:	2302      	movs	r3, #2
 800e62e:	73fb      	strb	r3, [r7, #15]
    break;
 800e630:	e002      	b.n	800e638 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e632:	2301      	movs	r3, #1
 800e634:	73fb      	strb	r3, [r7, #15]
    break;
 800e636:	bf00      	nop
  }
  return  speed;
 800e638:	7bfb      	ldrb	r3, [r7, #15]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e64a:	2300      	movs	r3, #0
 800e64c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e64e:	2300      	movs	r3, #0
 800e650:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e658:	4618      	mov	r0, r3
 800e65a:	f7f6 f875 	bl	8004748 <HAL_HCD_ResetPort>
 800e65e:	4603      	mov	r3, r0
 800e660:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e662:	7bfb      	ldrb	r3, [r7, #15]
 800e664:	4618      	mov	r0, r3
 800e666:	f000 f901 	bl	800e86c <USBH_Get_USB_Status>
 800e66a:	4603      	mov	r3, r0
 800e66c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e66e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	460b      	mov	r3, r1
 800e682:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e68a:	78fa      	ldrb	r2, [r7, #3]
 800e68c:	4611      	mov	r1, r2
 800e68e:	4618      	mov	r0, r3
 800e690:	f7f6 f87d 	bl	800478e <HAL_HCD_HC_GetXferCount>
 800e694:	4603      	mov	r3, r0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3708      	adds	r7, #8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e69e:	b590      	push	{r4, r7, lr}
 800e6a0:	b089      	sub	sp, #36	; 0x24
 800e6a2:	af04      	add	r7, sp, #16
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	4608      	mov	r0, r1
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	70fb      	strb	r3, [r7, #3]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	70bb      	strb	r3, [r7, #2]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e6c6:	787c      	ldrb	r4, [r7, #1]
 800e6c8:	78ba      	ldrb	r2, [r7, #2]
 800e6ca:	78f9      	ldrb	r1, [r7, #3]
 800e6cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e6ce:	9302      	str	r3, [sp, #8]
 800e6d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e6d4:	9301      	str	r3, [sp, #4]
 800e6d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	4623      	mov	r3, r4
 800e6de:	f7f5 fcc2 	bl	8004066 <HAL_HCD_HC_Init>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6e6:	7bfb      	ldrb	r3, [r7, #15]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f000 f8bf 	bl	800e86c <USBH_Get_USB_Status>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3714      	adds	r7, #20
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd90      	pop	{r4, r7, pc}

0800e6fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	460b      	mov	r3, r1
 800e706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e70c:	2300      	movs	r3, #0
 800e70e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e716:	78fa      	ldrb	r2, [r7, #3]
 800e718:	4611      	mov	r1, r2
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7f5 fd3b 	bl	8004196 <HAL_HCD_HC_Halt>
 800e720:	4603      	mov	r3, r0
 800e722:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e724:	7bfb      	ldrb	r3, [r7, #15]
 800e726:	4618      	mov	r0, r3
 800e728:	f000 f8a0 	bl	800e86c <USBH_Get_USB_Status>
 800e72c:	4603      	mov	r3, r0
 800e72e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e730:	7bbb      	ldrb	r3, [r7, #14]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}

0800e73a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e73a:	b590      	push	{r4, r7, lr}
 800e73c:	b089      	sub	sp, #36	; 0x24
 800e73e:	af04      	add	r7, sp, #16
 800e740:	6078      	str	r0, [r7, #4]
 800e742:	4608      	mov	r0, r1
 800e744:	4611      	mov	r1, r2
 800e746:	461a      	mov	r2, r3
 800e748:	4603      	mov	r3, r0
 800e74a:	70fb      	strb	r3, [r7, #3]
 800e74c:	460b      	mov	r3, r1
 800e74e:	70bb      	strb	r3, [r7, #2]
 800e750:	4613      	mov	r3, r2
 800e752:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e758:	2300      	movs	r3, #0
 800e75a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e762:	787c      	ldrb	r4, [r7, #1]
 800e764:	78ba      	ldrb	r2, [r7, #2]
 800e766:	78f9      	ldrb	r1, [r7, #3]
 800e768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e76c:	9303      	str	r3, [sp, #12]
 800e76e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e770:	9302      	str	r3, [sp, #8]
 800e772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e774:	9301      	str	r3, [sp, #4]
 800e776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	4623      	mov	r3, r4
 800e77e:	f7f5 fd2d 	bl	80041dc <HAL_HCD_HC_SubmitRequest>
 800e782:	4603      	mov	r3, r0
 800e784:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e786:	7bfb      	ldrb	r3, [r7, #15]
 800e788:	4618      	mov	r0, r3
 800e78a:	f000 f86f 	bl	800e86c <USBH_Get_USB_Status>
 800e78e:	4603      	mov	r3, r0
 800e790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e792:	7bbb      	ldrb	r3, [r7, #14]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3714      	adds	r7, #20
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd90      	pop	{r4, r7, pc}

0800e79c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e7ae:	78fa      	ldrb	r2, [r7, #3]
 800e7b0:	4611      	mov	r1, r2
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7f5 ffd6 	bl	8004764 <HAL_HCD_HC_GetURBState>
 800e7b8:	4603      	mov	r3, r0
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b082      	sub	sp, #8
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d103      	bne.n	800e7e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800e7d8:	78fb      	ldrb	r3, [r7, #3]
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f000 f872 	bl	800e8c4 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e7e0:	20c8      	movs	r0, #200	; 0xc8
 800e7e2:	f7f4 fb41 	bl	8002e68 <HAL_Delay>
  return USBH_OK;
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3708      	adds	r7, #8
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	70fb      	strb	r3, [r7, #3]
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e806:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e808:	78fa      	ldrb	r2, [r7, #3]
 800e80a:	68f9      	ldr	r1, [r7, #12]
 800e80c:	4613      	mov	r3, r2
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	4413      	add	r3, r2
 800e812:	00db      	lsls	r3, r3, #3
 800e814:	440b      	add	r3, r1
 800e816:	333b      	adds	r3, #59	; 0x3b
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00a      	beq.n	800e834 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e81e:	78fa      	ldrb	r2, [r7, #3]
 800e820:	68f9      	ldr	r1, [r7, #12]
 800e822:	4613      	mov	r3, r2
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	4413      	add	r3, r2
 800e828:	00db      	lsls	r3, r3, #3
 800e82a:	440b      	add	r3, r1
 800e82c:	3350      	adds	r3, #80	; 0x50
 800e82e:	78ba      	ldrb	r2, [r7, #2]
 800e830:	701a      	strb	r2, [r3, #0]
 800e832:	e009      	b.n	800e848 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e834:	78fa      	ldrb	r2, [r7, #3]
 800e836:	68f9      	ldr	r1, [r7, #12]
 800e838:	4613      	mov	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	4413      	add	r3, r2
 800e83e:	00db      	lsls	r3, r3, #3
 800e840:	440b      	add	r3, r1
 800e842:	3351      	adds	r3, #81	; 0x51
 800e844:	78ba      	ldrb	r2, [r7, #2]
 800e846:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3714      	adds	r7, #20
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr

0800e856 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b082      	sub	sp, #8
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f7f4 fb02 	bl	8002e68 <HAL_Delay>
}
 800e864:	bf00      	nop
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	4603      	mov	r3, r0
 800e874:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e876:	2300      	movs	r3, #0
 800e878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e87a:	79fb      	ldrb	r3, [r7, #7]
 800e87c:	2b03      	cmp	r3, #3
 800e87e:	d817      	bhi.n	800e8b0 <USBH_Get_USB_Status+0x44>
 800e880:	a201      	add	r2, pc, #4	; (adr r2, 800e888 <USBH_Get_USB_Status+0x1c>)
 800e882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e886:	bf00      	nop
 800e888:	0800e899 	.word	0x0800e899
 800e88c:	0800e89f 	.word	0x0800e89f
 800e890:	0800e8a5 	.word	0x0800e8a5
 800e894:	0800e8ab 	.word	0x0800e8ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e898:	2300      	movs	r3, #0
 800e89a:	73fb      	strb	r3, [r7, #15]
    break;
 800e89c:	e00b      	b.n	800e8b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e89e:	2302      	movs	r3, #2
 800e8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800e8a2:	e008      	b.n	800e8b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e8a8:	e005      	b.n	800e8b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e8aa:	2302      	movs	r3, #2
 800e8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800e8ae:	e002      	b.n	800e8b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e8b4:	bf00      	nop
  }
  return usb_status;
 800e8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3714      	adds	r7, #20
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e8ce:	79fb      	ldrb	r3, [r7, #7]
 800e8d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e8d2:	79fb      	ldrb	r3, [r7, #7]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d102      	bne.n	800e8de <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	73fb      	strb	r3, [r7, #15]
 800e8dc:	e001      	b.n	800e8e2 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e8e2:	7bfb      	ldrb	r3, [r7, #15]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	2110      	movs	r1, #16
 800e8e8:	4803      	ldr	r0, [pc, #12]	; (800e8f8 <MX_DriverVbusHS+0x34>)
 800e8ea:	f7f5 fb41 	bl	8003f70 <HAL_GPIO_WritePin>
}
 800e8ee:	bf00      	nop
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	40020800 	.word	0x40020800

0800e8fc <__errno>:
 800e8fc:	4b01      	ldr	r3, [pc, #4]	; (800e904 <__errno+0x8>)
 800e8fe:	6818      	ldr	r0, [r3, #0]
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	2000007c 	.word	0x2000007c

0800e908 <__libc_init_array>:
 800e908:	b570      	push	{r4, r5, r6, lr}
 800e90a:	4d0d      	ldr	r5, [pc, #52]	; (800e940 <__libc_init_array+0x38>)
 800e90c:	4c0d      	ldr	r4, [pc, #52]	; (800e944 <__libc_init_array+0x3c>)
 800e90e:	1b64      	subs	r4, r4, r5
 800e910:	10a4      	asrs	r4, r4, #2
 800e912:	2600      	movs	r6, #0
 800e914:	42a6      	cmp	r6, r4
 800e916:	d109      	bne.n	800e92c <__libc_init_array+0x24>
 800e918:	4d0b      	ldr	r5, [pc, #44]	; (800e948 <__libc_init_array+0x40>)
 800e91a:	4c0c      	ldr	r4, [pc, #48]	; (800e94c <__libc_init_array+0x44>)
 800e91c:	f000 fc5e 	bl	800f1dc <_init>
 800e920:	1b64      	subs	r4, r4, r5
 800e922:	10a4      	asrs	r4, r4, #2
 800e924:	2600      	movs	r6, #0
 800e926:	42a6      	cmp	r6, r4
 800e928:	d105      	bne.n	800e936 <__libc_init_array+0x2e>
 800e92a:	bd70      	pop	{r4, r5, r6, pc}
 800e92c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e930:	4798      	blx	r3
 800e932:	3601      	adds	r6, #1
 800e934:	e7ee      	b.n	800e914 <__libc_init_array+0xc>
 800e936:	f855 3b04 	ldr.w	r3, [r5], #4
 800e93a:	4798      	blx	r3
 800e93c:	3601      	adds	r6, #1
 800e93e:	e7f2      	b.n	800e926 <__libc_init_array+0x1e>
 800e940:	0800f304 	.word	0x0800f304
 800e944:	0800f304 	.word	0x0800f304
 800e948:	0800f304 	.word	0x0800f304
 800e94c:	0800f308 	.word	0x0800f308

0800e950 <malloc>:
 800e950:	4b02      	ldr	r3, [pc, #8]	; (800e95c <malloc+0xc>)
 800e952:	4601      	mov	r1, r0
 800e954:	6818      	ldr	r0, [r3, #0]
 800e956:	f000 b871 	b.w	800ea3c <_malloc_r>
 800e95a:	bf00      	nop
 800e95c:	2000007c 	.word	0x2000007c

0800e960 <free>:
 800e960:	4b02      	ldr	r3, [pc, #8]	; (800e96c <free+0xc>)
 800e962:	4601      	mov	r1, r0
 800e964:	6818      	ldr	r0, [r3, #0]
 800e966:	f000 b819 	b.w	800e99c <_free_r>
 800e96a:	bf00      	nop
 800e96c:	2000007c 	.word	0x2000007c

0800e970 <memcpy>:
 800e970:	440a      	add	r2, r1
 800e972:	4291      	cmp	r1, r2
 800e974:	f100 33ff 	add.w	r3, r0, #4294967295
 800e978:	d100      	bne.n	800e97c <memcpy+0xc>
 800e97a:	4770      	bx	lr
 800e97c:	b510      	push	{r4, lr}
 800e97e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e982:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e986:	4291      	cmp	r1, r2
 800e988:	d1f9      	bne.n	800e97e <memcpy+0xe>
 800e98a:	bd10      	pop	{r4, pc}

0800e98c <memset>:
 800e98c:	4402      	add	r2, r0
 800e98e:	4603      	mov	r3, r0
 800e990:	4293      	cmp	r3, r2
 800e992:	d100      	bne.n	800e996 <memset+0xa>
 800e994:	4770      	bx	lr
 800e996:	f803 1b01 	strb.w	r1, [r3], #1
 800e99a:	e7f9      	b.n	800e990 <memset+0x4>

0800e99c <_free_r>:
 800e99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e99e:	2900      	cmp	r1, #0
 800e9a0:	d048      	beq.n	800ea34 <_free_r+0x98>
 800e9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9a6:	9001      	str	r0, [sp, #4]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f1a1 0404 	sub.w	r4, r1, #4
 800e9ae:	bfb8      	it	lt
 800e9b0:	18e4      	addlt	r4, r4, r3
 800e9b2:	f000 f8cd 	bl	800eb50 <__malloc_lock>
 800e9b6:	4a20      	ldr	r2, [pc, #128]	; (800ea38 <_free_r+0x9c>)
 800e9b8:	9801      	ldr	r0, [sp, #4]
 800e9ba:	6813      	ldr	r3, [r2, #0]
 800e9bc:	4615      	mov	r5, r2
 800e9be:	b933      	cbnz	r3, 800e9ce <_free_r+0x32>
 800e9c0:	6063      	str	r3, [r4, #4]
 800e9c2:	6014      	str	r4, [r2, #0]
 800e9c4:	b003      	add	sp, #12
 800e9c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9ca:	f000 b8c7 	b.w	800eb5c <__malloc_unlock>
 800e9ce:	42a3      	cmp	r3, r4
 800e9d0:	d90b      	bls.n	800e9ea <_free_r+0x4e>
 800e9d2:	6821      	ldr	r1, [r4, #0]
 800e9d4:	1862      	adds	r2, r4, r1
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	bf04      	itt	eq
 800e9da:	681a      	ldreq	r2, [r3, #0]
 800e9dc:	685b      	ldreq	r3, [r3, #4]
 800e9de:	6063      	str	r3, [r4, #4]
 800e9e0:	bf04      	itt	eq
 800e9e2:	1852      	addeq	r2, r2, r1
 800e9e4:	6022      	streq	r2, [r4, #0]
 800e9e6:	602c      	str	r4, [r5, #0]
 800e9e8:	e7ec      	b.n	800e9c4 <_free_r+0x28>
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	b10b      	cbz	r3, 800e9f4 <_free_r+0x58>
 800e9f0:	42a3      	cmp	r3, r4
 800e9f2:	d9fa      	bls.n	800e9ea <_free_r+0x4e>
 800e9f4:	6811      	ldr	r1, [r2, #0]
 800e9f6:	1855      	adds	r5, r2, r1
 800e9f8:	42a5      	cmp	r5, r4
 800e9fa:	d10b      	bne.n	800ea14 <_free_r+0x78>
 800e9fc:	6824      	ldr	r4, [r4, #0]
 800e9fe:	4421      	add	r1, r4
 800ea00:	1854      	adds	r4, r2, r1
 800ea02:	42a3      	cmp	r3, r4
 800ea04:	6011      	str	r1, [r2, #0]
 800ea06:	d1dd      	bne.n	800e9c4 <_free_r+0x28>
 800ea08:	681c      	ldr	r4, [r3, #0]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	6053      	str	r3, [r2, #4]
 800ea0e:	4421      	add	r1, r4
 800ea10:	6011      	str	r1, [r2, #0]
 800ea12:	e7d7      	b.n	800e9c4 <_free_r+0x28>
 800ea14:	d902      	bls.n	800ea1c <_free_r+0x80>
 800ea16:	230c      	movs	r3, #12
 800ea18:	6003      	str	r3, [r0, #0]
 800ea1a:	e7d3      	b.n	800e9c4 <_free_r+0x28>
 800ea1c:	6825      	ldr	r5, [r4, #0]
 800ea1e:	1961      	adds	r1, r4, r5
 800ea20:	428b      	cmp	r3, r1
 800ea22:	bf04      	itt	eq
 800ea24:	6819      	ldreq	r1, [r3, #0]
 800ea26:	685b      	ldreq	r3, [r3, #4]
 800ea28:	6063      	str	r3, [r4, #4]
 800ea2a:	bf04      	itt	eq
 800ea2c:	1949      	addeq	r1, r1, r5
 800ea2e:	6021      	streq	r1, [r4, #0]
 800ea30:	6054      	str	r4, [r2, #4]
 800ea32:	e7c7      	b.n	800e9c4 <_free_r+0x28>
 800ea34:	b003      	add	sp, #12
 800ea36:	bd30      	pop	{r4, r5, pc}
 800ea38:	200084dc 	.word	0x200084dc

0800ea3c <_malloc_r>:
 800ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3e:	1ccd      	adds	r5, r1, #3
 800ea40:	f025 0503 	bic.w	r5, r5, #3
 800ea44:	3508      	adds	r5, #8
 800ea46:	2d0c      	cmp	r5, #12
 800ea48:	bf38      	it	cc
 800ea4a:	250c      	movcc	r5, #12
 800ea4c:	2d00      	cmp	r5, #0
 800ea4e:	4606      	mov	r6, r0
 800ea50:	db01      	blt.n	800ea56 <_malloc_r+0x1a>
 800ea52:	42a9      	cmp	r1, r5
 800ea54:	d903      	bls.n	800ea5e <_malloc_r+0x22>
 800ea56:	230c      	movs	r3, #12
 800ea58:	6033      	str	r3, [r6, #0]
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea5e:	f000 f877 	bl	800eb50 <__malloc_lock>
 800ea62:	4921      	ldr	r1, [pc, #132]	; (800eae8 <_malloc_r+0xac>)
 800ea64:	680a      	ldr	r2, [r1, #0]
 800ea66:	4614      	mov	r4, r2
 800ea68:	b99c      	cbnz	r4, 800ea92 <_malloc_r+0x56>
 800ea6a:	4f20      	ldr	r7, [pc, #128]	; (800eaec <_malloc_r+0xb0>)
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	b923      	cbnz	r3, 800ea7a <_malloc_r+0x3e>
 800ea70:	4621      	mov	r1, r4
 800ea72:	4630      	mov	r0, r6
 800ea74:	f000 f83c 	bl	800eaf0 <_sbrk_r>
 800ea78:	6038      	str	r0, [r7, #0]
 800ea7a:	4629      	mov	r1, r5
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f000 f837 	bl	800eaf0 <_sbrk_r>
 800ea82:	1c43      	adds	r3, r0, #1
 800ea84:	d123      	bne.n	800eace <_malloc_r+0x92>
 800ea86:	230c      	movs	r3, #12
 800ea88:	6033      	str	r3, [r6, #0]
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	f000 f866 	bl	800eb5c <__malloc_unlock>
 800ea90:	e7e3      	b.n	800ea5a <_malloc_r+0x1e>
 800ea92:	6823      	ldr	r3, [r4, #0]
 800ea94:	1b5b      	subs	r3, r3, r5
 800ea96:	d417      	bmi.n	800eac8 <_malloc_r+0x8c>
 800ea98:	2b0b      	cmp	r3, #11
 800ea9a:	d903      	bls.n	800eaa4 <_malloc_r+0x68>
 800ea9c:	6023      	str	r3, [r4, #0]
 800ea9e:	441c      	add	r4, r3
 800eaa0:	6025      	str	r5, [r4, #0]
 800eaa2:	e004      	b.n	800eaae <_malloc_r+0x72>
 800eaa4:	6863      	ldr	r3, [r4, #4]
 800eaa6:	42a2      	cmp	r2, r4
 800eaa8:	bf0c      	ite	eq
 800eaaa:	600b      	streq	r3, [r1, #0]
 800eaac:	6053      	strne	r3, [r2, #4]
 800eaae:	4630      	mov	r0, r6
 800eab0:	f000 f854 	bl	800eb5c <__malloc_unlock>
 800eab4:	f104 000b 	add.w	r0, r4, #11
 800eab8:	1d23      	adds	r3, r4, #4
 800eaba:	f020 0007 	bic.w	r0, r0, #7
 800eabe:	1ac2      	subs	r2, r0, r3
 800eac0:	d0cc      	beq.n	800ea5c <_malloc_r+0x20>
 800eac2:	1a1b      	subs	r3, r3, r0
 800eac4:	50a3      	str	r3, [r4, r2]
 800eac6:	e7c9      	b.n	800ea5c <_malloc_r+0x20>
 800eac8:	4622      	mov	r2, r4
 800eaca:	6864      	ldr	r4, [r4, #4]
 800eacc:	e7cc      	b.n	800ea68 <_malloc_r+0x2c>
 800eace:	1cc4      	adds	r4, r0, #3
 800ead0:	f024 0403 	bic.w	r4, r4, #3
 800ead4:	42a0      	cmp	r0, r4
 800ead6:	d0e3      	beq.n	800eaa0 <_malloc_r+0x64>
 800ead8:	1a21      	subs	r1, r4, r0
 800eada:	4630      	mov	r0, r6
 800eadc:	f000 f808 	bl	800eaf0 <_sbrk_r>
 800eae0:	3001      	adds	r0, #1
 800eae2:	d1dd      	bne.n	800eaa0 <_malloc_r+0x64>
 800eae4:	e7cf      	b.n	800ea86 <_malloc_r+0x4a>
 800eae6:	bf00      	nop
 800eae8:	200084dc 	.word	0x200084dc
 800eaec:	200084e0 	.word	0x200084e0

0800eaf0 <_sbrk_r>:
 800eaf0:	b538      	push	{r3, r4, r5, lr}
 800eaf2:	4d06      	ldr	r5, [pc, #24]	; (800eb0c <_sbrk_r+0x1c>)
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	4608      	mov	r0, r1
 800eafa:	602b      	str	r3, [r5, #0]
 800eafc:	f7f3 fc64 	bl	80023c8 <_sbrk>
 800eb00:	1c43      	adds	r3, r0, #1
 800eb02:	d102      	bne.n	800eb0a <_sbrk_r+0x1a>
 800eb04:	682b      	ldr	r3, [r5, #0]
 800eb06:	b103      	cbz	r3, 800eb0a <_sbrk_r+0x1a>
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
 800eb0c:	20008f7c 	.word	0x20008f7c

0800eb10 <siprintf>:
 800eb10:	b40e      	push	{r1, r2, r3}
 800eb12:	b500      	push	{lr}
 800eb14:	b09c      	sub	sp, #112	; 0x70
 800eb16:	ab1d      	add	r3, sp, #116	; 0x74
 800eb18:	9002      	str	r0, [sp, #8]
 800eb1a:	9006      	str	r0, [sp, #24]
 800eb1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb20:	4809      	ldr	r0, [pc, #36]	; (800eb48 <siprintf+0x38>)
 800eb22:	9107      	str	r1, [sp, #28]
 800eb24:	9104      	str	r1, [sp, #16]
 800eb26:	4909      	ldr	r1, [pc, #36]	; (800eb4c <siprintf+0x3c>)
 800eb28:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb2c:	9105      	str	r1, [sp, #20]
 800eb2e:	6800      	ldr	r0, [r0, #0]
 800eb30:	9301      	str	r3, [sp, #4]
 800eb32:	a902      	add	r1, sp, #8
 800eb34:	f000 f874 	bl	800ec20 <_svfiprintf_r>
 800eb38:	9b02      	ldr	r3, [sp, #8]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	701a      	strb	r2, [r3, #0]
 800eb3e:	b01c      	add	sp, #112	; 0x70
 800eb40:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb44:	b003      	add	sp, #12
 800eb46:	4770      	bx	lr
 800eb48:	2000007c 	.word	0x2000007c
 800eb4c:	ffff0208 	.word	0xffff0208

0800eb50 <__malloc_lock>:
 800eb50:	4801      	ldr	r0, [pc, #4]	; (800eb58 <__malloc_lock+0x8>)
 800eb52:	f000 baf9 	b.w	800f148 <__retarget_lock_acquire_recursive>
 800eb56:	bf00      	nop
 800eb58:	20008f84 	.word	0x20008f84

0800eb5c <__malloc_unlock>:
 800eb5c:	4801      	ldr	r0, [pc, #4]	; (800eb64 <__malloc_unlock+0x8>)
 800eb5e:	f000 baf4 	b.w	800f14a <__retarget_lock_release_recursive>
 800eb62:	bf00      	nop
 800eb64:	20008f84 	.word	0x20008f84

0800eb68 <__ssputs_r>:
 800eb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb6c:	688e      	ldr	r6, [r1, #8]
 800eb6e:	429e      	cmp	r6, r3
 800eb70:	4682      	mov	sl, r0
 800eb72:	460c      	mov	r4, r1
 800eb74:	4690      	mov	r8, r2
 800eb76:	461f      	mov	r7, r3
 800eb78:	d838      	bhi.n	800ebec <__ssputs_r+0x84>
 800eb7a:	898a      	ldrh	r2, [r1, #12]
 800eb7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb80:	d032      	beq.n	800ebe8 <__ssputs_r+0x80>
 800eb82:	6825      	ldr	r5, [r4, #0]
 800eb84:	6909      	ldr	r1, [r1, #16]
 800eb86:	eba5 0901 	sub.w	r9, r5, r1
 800eb8a:	6965      	ldr	r5, [r4, #20]
 800eb8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb94:	3301      	adds	r3, #1
 800eb96:	444b      	add	r3, r9
 800eb98:	106d      	asrs	r5, r5, #1
 800eb9a:	429d      	cmp	r5, r3
 800eb9c:	bf38      	it	cc
 800eb9e:	461d      	movcc	r5, r3
 800eba0:	0553      	lsls	r3, r2, #21
 800eba2:	d531      	bpl.n	800ec08 <__ssputs_r+0xa0>
 800eba4:	4629      	mov	r1, r5
 800eba6:	f7ff ff49 	bl	800ea3c <_malloc_r>
 800ebaa:	4606      	mov	r6, r0
 800ebac:	b950      	cbnz	r0, 800ebc4 <__ssputs_r+0x5c>
 800ebae:	230c      	movs	r3, #12
 800ebb0:	f8ca 3000 	str.w	r3, [sl]
 800ebb4:	89a3      	ldrh	r3, [r4, #12]
 800ebb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebba:	81a3      	strh	r3, [r4, #12]
 800ebbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebc4:	6921      	ldr	r1, [r4, #16]
 800ebc6:	464a      	mov	r2, r9
 800ebc8:	f7ff fed2 	bl	800e970 <memcpy>
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ebd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebd6:	81a3      	strh	r3, [r4, #12]
 800ebd8:	6126      	str	r6, [r4, #16]
 800ebda:	6165      	str	r5, [r4, #20]
 800ebdc:	444e      	add	r6, r9
 800ebde:	eba5 0509 	sub.w	r5, r5, r9
 800ebe2:	6026      	str	r6, [r4, #0]
 800ebe4:	60a5      	str	r5, [r4, #8]
 800ebe6:	463e      	mov	r6, r7
 800ebe8:	42be      	cmp	r6, r7
 800ebea:	d900      	bls.n	800ebee <__ssputs_r+0x86>
 800ebec:	463e      	mov	r6, r7
 800ebee:	4632      	mov	r2, r6
 800ebf0:	6820      	ldr	r0, [r4, #0]
 800ebf2:	4641      	mov	r1, r8
 800ebf4:	f000 faaa 	bl	800f14c <memmove>
 800ebf8:	68a3      	ldr	r3, [r4, #8]
 800ebfa:	6822      	ldr	r2, [r4, #0]
 800ebfc:	1b9b      	subs	r3, r3, r6
 800ebfe:	4432      	add	r2, r6
 800ec00:	60a3      	str	r3, [r4, #8]
 800ec02:	6022      	str	r2, [r4, #0]
 800ec04:	2000      	movs	r0, #0
 800ec06:	e7db      	b.n	800ebc0 <__ssputs_r+0x58>
 800ec08:	462a      	mov	r2, r5
 800ec0a:	f000 fab9 	bl	800f180 <_realloc_r>
 800ec0e:	4606      	mov	r6, r0
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d1e1      	bne.n	800ebd8 <__ssputs_r+0x70>
 800ec14:	6921      	ldr	r1, [r4, #16]
 800ec16:	4650      	mov	r0, sl
 800ec18:	f7ff fec0 	bl	800e99c <_free_r>
 800ec1c:	e7c7      	b.n	800ebae <__ssputs_r+0x46>
	...

0800ec20 <_svfiprintf_r>:
 800ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec24:	4698      	mov	r8, r3
 800ec26:	898b      	ldrh	r3, [r1, #12]
 800ec28:	061b      	lsls	r3, r3, #24
 800ec2a:	b09d      	sub	sp, #116	; 0x74
 800ec2c:	4607      	mov	r7, r0
 800ec2e:	460d      	mov	r5, r1
 800ec30:	4614      	mov	r4, r2
 800ec32:	d50e      	bpl.n	800ec52 <_svfiprintf_r+0x32>
 800ec34:	690b      	ldr	r3, [r1, #16]
 800ec36:	b963      	cbnz	r3, 800ec52 <_svfiprintf_r+0x32>
 800ec38:	2140      	movs	r1, #64	; 0x40
 800ec3a:	f7ff feff 	bl	800ea3c <_malloc_r>
 800ec3e:	6028      	str	r0, [r5, #0]
 800ec40:	6128      	str	r0, [r5, #16]
 800ec42:	b920      	cbnz	r0, 800ec4e <_svfiprintf_r+0x2e>
 800ec44:	230c      	movs	r3, #12
 800ec46:	603b      	str	r3, [r7, #0]
 800ec48:	f04f 30ff 	mov.w	r0, #4294967295
 800ec4c:	e0d1      	b.n	800edf2 <_svfiprintf_r+0x1d2>
 800ec4e:	2340      	movs	r3, #64	; 0x40
 800ec50:	616b      	str	r3, [r5, #20]
 800ec52:	2300      	movs	r3, #0
 800ec54:	9309      	str	r3, [sp, #36]	; 0x24
 800ec56:	2320      	movs	r3, #32
 800ec58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec60:	2330      	movs	r3, #48	; 0x30
 800ec62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ee0c <_svfiprintf_r+0x1ec>
 800ec66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec6a:	f04f 0901 	mov.w	r9, #1
 800ec6e:	4623      	mov	r3, r4
 800ec70:	469a      	mov	sl, r3
 800ec72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec76:	b10a      	cbz	r2, 800ec7c <_svfiprintf_r+0x5c>
 800ec78:	2a25      	cmp	r2, #37	; 0x25
 800ec7a:	d1f9      	bne.n	800ec70 <_svfiprintf_r+0x50>
 800ec7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ec80:	d00b      	beq.n	800ec9a <_svfiprintf_r+0x7a>
 800ec82:	465b      	mov	r3, fp
 800ec84:	4622      	mov	r2, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	4638      	mov	r0, r7
 800ec8a:	f7ff ff6d 	bl	800eb68 <__ssputs_r>
 800ec8e:	3001      	adds	r0, #1
 800ec90:	f000 80aa 	beq.w	800ede8 <_svfiprintf_r+0x1c8>
 800ec94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec96:	445a      	add	r2, fp
 800ec98:	9209      	str	r2, [sp, #36]	; 0x24
 800ec9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f000 80a2 	beq.w	800ede8 <_svfiprintf_r+0x1c8>
 800eca4:	2300      	movs	r3, #0
 800eca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ecaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecae:	f10a 0a01 	add.w	sl, sl, #1
 800ecb2:	9304      	str	r3, [sp, #16]
 800ecb4:	9307      	str	r3, [sp, #28]
 800ecb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecba:	931a      	str	r3, [sp, #104]	; 0x68
 800ecbc:	4654      	mov	r4, sl
 800ecbe:	2205      	movs	r2, #5
 800ecc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc4:	4851      	ldr	r0, [pc, #324]	; (800ee0c <_svfiprintf_r+0x1ec>)
 800ecc6:	f7f1 fa9b 	bl	8000200 <memchr>
 800ecca:	9a04      	ldr	r2, [sp, #16]
 800eccc:	b9d8      	cbnz	r0, 800ed06 <_svfiprintf_r+0xe6>
 800ecce:	06d0      	lsls	r0, r2, #27
 800ecd0:	bf44      	itt	mi
 800ecd2:	2320      	movmi	r3, #32
 800ecd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecd8:	0711      	lsls	r1, r2, #28
 800ecda:	bf44      	itt	mi
 800ecdc:	232b      	movmi	r3, #43	; 0x2b
 800ecde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ece2:	f89a 3000 	ldrb.w	r3, [sl]
 800ece6:	2b2a      	cmp	r3, #42	; 0x2a
 800ece8:	d015      	beq.n	800ed16 <_svfiprintf_r+0xf6>
 800ecea:	9a07      	ldr	r2, [sp, #28]
 800ecec:	4654      	mov	r4, sl
 800ecee:	2000      	movs	r0, #0
 800ecf0:	f04f 0c0a 	mov.w	ip, #10
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecfa:	3b30      	subs	r3, #48	; 0x30
 800ecfc:	2b09      	cmp	r3, #9
 800ecfe:	d94e      	bls.n	800ed9e <_svfiprintf_r+0x17e>
 800ed00:	b1b0      	cbz	r0, 800ed30 <_svfiprintf_r+0x110>
 800ed02:	9207      	str	r2, [sp, #28]
 800ed04:	e014      	b.n	800ed30 <_svfiprintf_r+0x110>
 800ed06:	eba0 0308 	sub.w	r3, r0, r8
 800ed0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	9304      	str	r3, [sp, #16]
 800ed12:	46a2      	mov	sl, r4
 800ed14:	e7d2      	b.n	800ecbc <_svfiprintf_r+0x9c>
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	1d19      	adds	r1, r3, #4
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	9103      	str	r1, [sp, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	bfbb      	ittet	lt
 800ed22:	425b      	neglt	r3, r3
 800ed24:	f042 0202 	orrlt.w	r2, r2, #2
 800ed28:	9307      	strge	r3, [sp, #28]
 800ed2a:	9307      	strlt	r3, [sp, #28]
 800ed2c:	bfb8      	it	lt
 800ed2e:	9204      	strlt	r2, [sp, #16]
 800ed30:	7823      	ldrb	r3, [r4, #0]
 800ed32:	2b2e      	cmp	r3, #46	; 0x2e
 800ed34:	d10c      	bne.n	800ed50 <_svfiprintf_r+0x130>
 800ed36:	7863      	ldrb	r3, [r4, #1]
 800ed38:	2b2a      	cmp	r3, #42	; 0x2a
 800ed3a:	d135      	bne.n	800eda8 <_svfiprintf_r+0x188>
 800ed3c:	9b03      	ldr	r3, [sp, #12]
 800ed3e:	1d1a      	adds	r2, r3, #4
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	9203      	str	r2, [sp, #12]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	bfb8      	it	lt
 800ed48:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed4c:	3402      	adds	r4, #2
 800ed4e:	9305      	str	r3, [sp, #20]
 800ed50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ee1c <_svfiprintf_r+0x1fc>
 800ed54:	7821      	ldrb	r1, [r4, #0]
 800ed56:	2203      	movs	r2, #3
 800ed58:	4650      	mov	r0, sl
 800ed5a:	f7f1 fa51 	bl	8000200 <memchr>
 800ed5e:	b140      	cbz	r0, 800ed72 <_svfiprintf_r+0x152>
 800ed60:	2340      	movs	r3, #64	; 0x40
 800ed62:	eba0 000a 	sub.w	r0, r0, sl
 800ed66:	fa03 f000 	lsl.w	r0, r3, r0
 800ed6a:	9b04      	ldr	r3, [sp, #16]
 800ed6c:	4303      	orrs	r3, r0
 800ed6e:	3401      	adds	r4, #1
 800ed70:	9304      	str	r3, [sp, #16]
 800ed72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed76:	4826      	ldr	r0, [pc, #152]	; (800ee10 <_svfiprintf_r+0x1f0>)
 800ed78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed7c:	2206      	movs	r2, #6
 800ed7e:	f7f1 fa3f 	bl	8000200 <memchr>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	d038      	beq.n	800edf8 <_svfiprintf_r+0x1d8>
 800ed86:	4b23      	ldr	r3, [pc, #140]	; (800ee14 <_svfiprintf_r+0x1f4>)
 800ed88:	bb1b      	cbnz	r3, 800edd2 <_svfiprintf_r+0x1b2>
 800ed8a:	9b03      	ldr	r3, [sp, #12]
 800ed8c:	3307      	adds	r3, #7
 800ed8e:	f023 0307 	bic.w	r3, r3, #7
 800ed92:	3308      	adds	r3, #8
 800ed94:	9303      	str	r3, [sp, #12]
 800ed96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed98:	4433      	add	r3, r6
 800ed9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed9c:	e767      	b.n	800ec6e <_svfiprintf_r+0x4e>
 800ed9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eda2:	460c      	mov	r4, r1
 800eda4:	2001      	movs	r0, #1
 800eda6:	e7a5      	b.n	800ecf4 <_svfiprintf_r+0xd4>
 800eda8:	2300      	movs	r3, #0
 800edaa:	3401      	adds	r4, #1
 800edac:	9305      	str	r3, [sp, #20]
 800edae:	4619      	mov	r1, r3
 800edb0:	f04f 0c0a 	mov.w	ip, #10
 800edb4:	4620      	mov	r0, r4
 800edb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edba:	3a30      	subs	r2, #48	; 0x30
 800edbc:	2a09      	cmp	r2, #9
 800edbe:	d903      	bls.n	800edc8 <_svfiprintf_r+0x1a8>
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d0c5      	beq.n	800ed50 <_svfiprintf_r+0x130>
 800edc4:	9105      	str	r1, [sp, #20]
 800edc6:	e7c3      	b.n	800ed50 <_svfiprintf_r+0x130>
 800edc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800edcc:	4604      	mov	r4, r0
 800edce:	2301      	movs	r3, #1
 800edd0:	e7f0      	b.n	800edb4 <_svfiprintf_r+0x194>
 800edd2:	ab03      	add	r3, sp, #12
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	462a      	mov	r2, r5
 800edd8:	4b0f      	ldr	r3, [pc, #60]	; (800ee18 <_svfiprintf_r+0x1f8>)
 800edda:	a904      	add	r1, sp, #16
 800eddc:	4638      	mov	r0, r7
 800edde:	f3af 8000 	nop.w
 800ede2:	1c42      	adds	r2, r0, #1
 800ede4:	4606      	mov	r6, r0
 800ede6:	d1d6      	bne.n	800ed96 <_svfiprintf_r+0x176>
 800ede8:	89ab      	ldrh	r3, [r5, #12]
 800edea:	065b      	lsls	r3, r3, #25
 800edec:	f53f af2c 	bmi.w	800ec48 <_svfiprintf_r+0x28>
 800edf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edf2:	b01d      	add	sp, #116	; 0x74
 800edf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf8:	ab03      	add	r3, sp, #12
 800edfa:	9300      	str	r3, [sp, #0]
 800edfc:	462a      	mov	r2, r5
 800edfe:	4b06      	ldr	r3, [pc, #24]	; (800ee18 <_svfiprintf_r+0x1f8>)
 800ee00:	a904      	add	r1, sp, #16
 800ee02:	4638      	mov	r0, r7
 800ee04:	f000 f87a 	bl	800eefc <_printf_i>
 800ee08:	e7eb      	b.n	800ede2 <_svfiprintf_r+0x1c2>
 800ee0a:	bf00      	nop
 800ee0c:	0800f2c8 	.word	0x0800f2c8
 800ee10:	0800f2d2 	.word	0x0800f2d2
 800ee14:	00000000 	.word	0x00000000
 800ee18:	0800eb69 	.word	0x0800eb69
 800ee1c:	0800f2ce 	.word	0x0800f2ce

0800ee20 <_printf_common>:
 800ee20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee24:	4616      	mov	r6, r2
 800ee26:	4699      	mov	r9, r3
 800ee28:	688a      	ldr	r2, [r1, #8]
 800ee2a:	690b      	ldr	r3, [r1, #16]
 800ee2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee30:	4293      	cmp	r3, r2
 800ee32:	bfb8      	it	lt
 800ee34:	4613      	movlt	r3, r2
 800ee36:	6033      	str	r3, [r6, #0]
 800ee38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee3c:	4607      	mov	r7, r0
 800ee3e:	460c      	mov	r4, r1
 800ee40:	b10a      	cbz	r2, 800ee46 <_printf_common+0x26>
 800ee42:	3301      	adds	r3, #1
 800ee44:	6033      	str	r3, [r6, #0]
 800ee46:	6823      	ldr	r3, [r4, #0]
 800ee48:	0699      	lsls	r1, r3, #26
 800ee4a:	bf42      	ittt	mi
 800ee4c:	6833      	ldrmi	r3, [r6, #0]
 800ee4e:	3302      	addmi	r3, #2
 800ee50:	6033      	strmi	r3, [r6, #0]
 800ee52:	6825      	ldr	r5, [r4, #0]
 800ee54:	f015 0506 	ands.w	r5, r5, #6
 800ee58:	d106      	bne.n	800ee68 <_printf_common+0x48>
 800ee5a:	f104 0a19 	add.w	sl, r4, #25
 800ee5e:	68e3      	ldr	r3, [r4, #12]
 800ee60:	6832      	ldr	r2, [r6, #0]
 800ee62:	1a9b      	subs	r3, r3, r2
 800ee64:	42ab      	cmp	r3, r5
 800ee66:	dc26      	bgt.n	800eeb6 <_printf_common+0x96>
 800ee68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee6c:	1e13      	subs	r3, r2, #0
 800ee6e:	6822      	ldr	r2, [r4, #0]
 800ee70:	bf18      	it	ne
 800ee72:	2301      	movne	r3, #1
 800ee74:	0692      	lsls	r2, r2, #26
 800ee76:	d42b      	bmi.n	800eed0 <_printf_common+0xb0>
 800ee78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee7c:	4649      	mov	r1, r9
 800ee7e:	4638      	mov	r0, r7
 800ee80:	47c0      	blx	r8
 800ee82:	3001      	adds	r0, #1
 800ee84:	d01e      	beq.n	800eec4 <_printf_common+0xa4>
 800ee86:	6823      	ldr	r3, [r4, #0]
 800ee88:	68e5      	ldr	r5, [r4, #12]
 800ee8a:	6832      	ldr	r2, [r6, #0]
 800ee8c:	f003 0306 	and.w	r3, r3, #6
 800ee90:	2b04      	cmp	r3, #4
 800ee92:	bf08      	it	eq
 800ee94:	1aad      	subeq	r5, r5, r2
 800ee96:	68a3      	ldr	r3, [r4, #8]
 800ee98:	6922      	ldr	r2, [r4, #16]
 800ee9a:	bf0c      	ite	eq
 800ee9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eea0:	2500      	movne	r5, #0
 800eea2:	4293      	cmp	r3, r2
 800eea4:	bfc4      	itt	gt
 800eea6:	1a9b      	subgt	r3, r3, r2
 800eea8:	18ed      	addgt	r5, r5, r3
 800eeaa:	2600      	movs	r6, #0
 800eeac:	341a      	adds	r4, #26
 800eeae:	42b5      	cmp	r5, r6
 800eeb0:	d11a      	bne.n	800eee8 <_printf_common+0xc8>
 800eeb2:	2000      	movs	r0, #0
 800eeb4:	e008      	b.n	800eec8 <_printf_common+0xa8>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	4652      	mov	r2, sl
 800eeba:	4649      	mov	r1, r9
 800eebc:	4638      	mov	r0, r7
 800eebe:	47c0      	blx	r8
 800eec0:	3001      	adds	r0, #1
 800eec2:	d103      	bne.n	800eecc <_printf_common+0xac>
 800eec4:	f04f 30ff 	mov.w	r0, #4294967295
 800eec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eecc:	3501      	adds	r5, #1
 800eece:	e7c6      	b.n	800ee5e <_printf_common+0x3e>
 800eed0:	18e1      	adds	r1, r4, r3
 800eed2:	1c5a      	adds	r2, r3, #1
 800eed4:	2030      	movs	r0, #48	; 0x30
 800eed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eeda:	4422      	add	r2, r4
 800eedc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eee4:	3302      	adds	r3, #2
 800eee6:	e7c7      	b.n	800ee78 <_printf_common+0x58>
 800eee8:	2301      	movs	r3, #1
 800eeea:	4622      	mov	r2, r4
 800eeec:	4649      	mov	r1, r9
 800eeee:	4638      	mov	r0, r7
 800eef0:	47c0      	blx	r8
 800eef2:	3001      	adds	r0, #1
 800eef4:	d0e6      	beq.n	800eec4 <_printf_common+0xa4>
 800eef6:	3601      	adds	r6, #1
 800eef8:	e7d9      	b.n	800eeae <_printf_common+0x8e>
	...

0800eefc <_printf_i>:
 800eefc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef00:	460c      	mov	r4, r1
 800ef02:	4691      	mov	r9, r2
 800ef04:	7e27      	ldrb	r7, [r4, #24]
 800ef06:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef08:	2f78      	cmp	r7, #120	; 0x78
 800ef0a:	4680      	mov	r8, r0
 800ef0c:	469a      	mov	sl, r3
 800ef0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef12:	d807      	bhi.n	800ef24 <_printf_i+0x28>
 800ef14:	2f62      	cmp	r7, #98	; 0x62
 800ef16:	d80a      	bhi.n	800ef2e <_printf_i+0x32>
 800ef18:	2f00      	cmp	r7, #0
 800ef1a:	f000 80d8 	beq.w	800f0ce <_printf_i+0x1d2>
 800ef1e:	2f58      	cmp	r7, #88	; 0x58
 800ef20:	f000 80a3 	beq.w	800f06a <_printf_i+0x16e>
 800ef24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ef28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef2c:	e03a      	b.n	800efa4 <_printf_i+0xa8>
 800ef2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef32:	2b15      	cmp	r3, #21
 800ef34:	d8f6      	bhi.n	800ef24 <_printf_i+0x28>
 800ef36:	a001      	add	r0, pc, #4	; (adr r0, 800ef3c <_printf_i+0x40>)
 800ef38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ef3c:	0800ef95 	.word	0x0800ef95
 800ef40:	0800efa9 	.word	0x0800efa9
 800ef44:	0800ef25 	.word	0x0800ef25
 800ef48:	0800ef25 	.word	0x0800ef25
 800ef4c:	0800ef25 	.word	0x0800ef25
 800ef50:	0800ef25 	.word	0x0800ef25
 800ef54:	0800efa9 	.word	0x0800efa9
 800ef58:	0800ef25 	.word	0x0800ef25
 800ef5c:	0800ef25 	.word	0x0800ef25
 800ef60:	0800ef25 	.word	0x0800ef25
 800ef64:	0800ef25 	.word	0x0800ef25
 800ef68:	0800f0b5 	.word	0x0800f0b5
 800ef6c:	0800efd9 	.word	0x0800efd9
 800ef70:	0800f097 	.word	0x0800f097
 800ef74:	0800ef25 	.word	0x0800ef25
 800ef78:	0800ef25 	.word	0x0800ef25
 800ef7c:	0800f0d7 	.word	0x0800f0d7
 800ef80:	0800ef25 	.word	0x0800ef25
 800ef84:	0800efd9 	.word	0x0800efd9
 800ef88:	0800ef25 	.word	0x0800ef25
 800ef8c:	0800ef25 	.word	0x0800ef25
 800ef90:	0800f09f 	.word	0x0800f09f
 800ef94:	680b      	ldr	r3, [r1, #0]
 800ef96:	1d1a      	adds	r2, r3, #4
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	600a      	str	r2, [r1, #0]
 800ef9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800efa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efa4:	2301      	movs	r3, #1
 800efa6:	e0a3      	b.n	800f0f0 <_printf_i+0x1f4>
 800efa8:	6825      	ldr	r5, [r4, #0]
 800efaa:	6808      	ldr	r0, [r1, #0]
 800efac:	062e      	lsls	r6, r5, #24
 800efae:	f100 0304 	add.w	r3, r0, #4
 800efb2:	d50a      	bpl.n	800efca <_printf_i+0xce>
 800efb4:	6805      	ldr	r5, [r0, #0]
 800efb6:	600b      	str	r3, [r1, #0]
 800efb8:	2d00      	cmp	r5, #0
 800efba:	da03      	bge.n	800efc4 <_printf_i+0xc8>
 800efbc:	232d      	movs	r3, #45	; 0x2d
 800efbe:	426d      	negs	r5, r5
 800efc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efc4:	485e      	ldr	r0, [pc, #376]	; (800f140 <_printf_i+0x244>)
 800efc6:	230a      	movs	r3, #10
 800efc8:	e019      	b.n	800effe <_printf_i+0x102>
 800efca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800efce:	6805      	ldr	r5, [r0, #0]
 800efd0:	600b      	str	r3, [r1, #0]
 800efd2:	bf18      	it	ne
 800efd4:	b22d      	sxthne	r5, r5
 800efd6:	e7ef      	b.n	800efb8 <_printf_i+0xbc>
 800efd8:	680b      	ldr	r3, [r1, #0]
 800efda:	6825      	ldr	r5, [r4, #0]
 800efdc:	1d18      	adds	r0, r3, #4
 800efde:	6008      	str	r0, [r1, #0]
 800efe0:	0628      	lsls	r0, r5, #24
 800efe2:	d501      	bpl.n	800efe8 <_printf_i+0xec>
 800efe4:	681d      	ldr	r5, [r3, #0]
 800efe6:	e002      	b.n	800efee <_printf_i+0xf2>
 800efe8:	0669      	lsls	r1, r5, #25
 800efea:	d5fb      	bpl.n	800efe4 <_printf_i+0xe8>
 800efec:	881d      	ldrh	r5, [r3, #0]
 800efee:	4854      	ldr	r0, [pc, #336]	; (800f140 <_printf_i+0x244>)
 800eff0:	2f6f      	cmp	r7, #111	; 0x6f
 800eff2:	bf0c      	ite	eq
 800eff4:	2308      	moveq	r3, #8
 800eff6:	230a      	movne	r3, #10
 800eff8:	2100      	movs	r1, #0
 800effa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800effe:	6866      	ldr	r6, [r4, #4]
 800f000:	60a6      	str	r6, [r4, #8]
 800f002:	2e00      	cmp	r6, #0
 800f004:	bfa2      	ittt	ge
 800f006:	6821      	ldrge	r1, [r4, #0]
 800f008:	f021 0104 	bicge.w	r1, r1, #4
 800f00c:	6021      	strge	r1, [r4, #0]
 800f00e:	b90d      	cbnz	r5, 800f014 <_printf_i+0x118>
 800f010:	2e00      	cmp	r6, #0
 800f012:	d04d      	beq.n	800f0b0 <_printf_i+0x1b4>
 800f014:	4616      	mov	r6, r2
 800f016:	fbb5 f1f3 	udiv	r1, r5, r3
 800f01a:	fb03 5711 	mls	r7, r3, r1, r5
 800f01e:	5dc7      	ldrb	r7, [r0, r7]
 800f020:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f024:	462f      	mov	r7, r5
 800f026:	42bb      	cmp	r3, r7
 800f028:	460d      	mov	r5, r1
 800f02a:	d9f4      	bls.n	800f016 <_printf_i+0x11a>
 800f02c:	2b08      	cmp	r3, #8
 800f02e:	d10b      	bne.n	800f048 <_printf_i+0x14c>
 800f030:	6823      	ldr	r3, [r4, #0]
 800f032:	07df      	lsls	r7, r3, #31
 800f034:	d508      	bpl.n	800f048 <_printf_i+0x14c>
 800f036:	6923      	ldr	r3, [r4, #16]
 800f038:	6861      	ldr	r1, [r4, #4]
 800f03a:	4299      	cmp	r1, r3
 800f03c:	bfde      	ittt	le
 800f03e:	2330      	movle	r3, #48	; 0x30
 800f040:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f044:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f048:	1b92      	subs	r2, r2, r6
 800f04a:	6122      	str	r2, [r4, #16]
 800f04c:	f8cd a000 	str.w	sl, [sp]
 800f050:	464b      	mov	r3, r9
 800f052:	aa03      	add	r2, sp, #12
 800f054:	4621      	mov	r1, r4
 800f056:	4640      	mov	r0, r8
 800f058:	f7ff fee2 	bl	800ee20 <_printf_common>
 800f05c:	3001      	adds	r0, #1
 800f05e:	d14c      	bne.n	800f0fa <_printf_i+0x1fe>
 800f060:	f04f 30ff 	mov.w	r0, #4294967295
 800f064:	b004      	add	sp, #16
 800f066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f06a:	4835      	ldr	r0, [pc, #212]	; (800f140 <_printf_i+0x244>)
 800f06c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	680e      	ldr	r6, [r1, #0]
 800f074:	061f      	lsls	r7, r3, #24
 800f076:	f856 5b04 	ldr.w	r5, [r6], #4
 800f07a:	600e      	str	r6, [r1, #0]
 800f07c:	d514      	bpl.n	800f0a8 <_printf_i+0x1ac>
 800f07e:	07d9      	lsls	r1, r3, #31
 800f080:	bf44      	itt	mi
 800f082:	f043 0320 	orrmi.w	r3, r3, #32
 800f086:	6023      	strmi	r3, [r4, #0]
 800f088:	b91d      	cbnz	r5, 800f092 <_printf_i+0x196>
 800f08a:	6823      	ldr	r3, [r4, #0]
 800f08c:	f023 0320 	bic.w	r3, r3, #32
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	2310      	movs	r3, #16
 800f094:	e7b0      	b.n	800eff8 <_printf_i+0xfc>
 800f096:	6823      	ldr	r3, [r4, #0]
 800f098:	f043 0320 	orr.w	r3, r3, #32
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	2378      	movs	r3, #120	; 0x78
 800f0a0:	4828      	ldr	r0, [pc, #160]	; (800f144 <_printf_i+0x248>)
 800f0a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0a6:	e7e3      	b.n	800f070 <_printf_i+0x174>
 800f0a8:	065e      	lsls	r6, r3, #25
 800f0aa:	bf48      	it	mi
 800f0ac:	b2ad      	uxthmi	r5, r5
 800f0ae:	e7e6      	b.n	800f07e <_printf_i+0x182>
 800f0b0:	4616      	mov	r6, r2
 800f0b2:	e7bb      	b.n	800f02c <_printf_i+0x130>
 800f0b4:	680b      	ldr	r3, [r1, #0]
 800f0b6:	6826      	ldr	r6, [r4, #0]
 800f0b8:	6960      	ldr	r0, [r4, #20]
 800f0ba:	1d1d      	adds	r5, r3, #4
 800f0bc:	600d      	str	r5, [r1, #0]
 800f0be:	0635      	lsls	r5, r6, #24
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	d501      	bpl.n	800f0c8 <_printf_i+0x1cc>
 800f0c4:	6018      	str	r0, [r3, #0]
 800f0c6:	e002      	b.n	800f0ce <_printf_i+0x1d2>
 800f0c8:	0671      	lsls	r1, r6, #25
 800f0ca:	d5fb      	bpl.n	800f0c4 <_printf_i+0x1c8>
 800f0cc:	8018      	strh	r0, [r3, #0]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	6123      	str	r3, [r4, #16]
 800f0d2:	4616      	mov	r6, r2
 800f0d4:	e7ba      	b.n	800f04c <_printf_i+0x150>
 800f0d6:	680b      	ldr	r3, [r1, #0]
 800f0d8:	1d1a      	adds	r2, r3, #4
 800f0da:	600a      	str	r2, [r1, #0]
 800f0dc:	681e      	ldr	r6, [r3, #0]
 800f0de:	6862      	ldr	r2, [r4, #4]
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f7f1 f88c 	bl	8000200 <memchr>
 800f0e8:	b108      	cbz	r0, 800f0ee <_printf_i+0x1f2>
 800f0ea:	1b80      	subs	r0, r0, r6
 800f0ec:	6060      	str	r0, [r4, #4]
 800f0ee:	6863      	ldr	r3, [r4, #4]
 800f0f0:	6123      	str	r3, [r4, #16]
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0f8:	e7a8      	b.n	800f04c <_printf_i+0x150>
 800f0fa:	6923      	ldr	r3, [r4, #16]
 800f0fc:	4632      	mov	r2, r6
 800f0fe:	4649      	mov	r1, r9
 800f100:	4640      	mov	r0, r8
 800f102:	47d0      	blx	sl
 800f104:	3001      	adds	r0, #1
 800f106:	d0ab      	beq.n	800f060 <_printf_i+0x164>
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	079b      	lsls	r3, r3, #30
 800f10c:	d413      	bmi.n	800f136 <_printf_i+0x23a>
 800f10e:	68e0      	ldr	r0, [r4, #12]
 800f110:	9b03      	ldr	r3, [sp, #12]
 800f112:	4298      	cmp	r0, r3
 800f114:	bfb8      	it	lt
 800f116:	4618      	movlt	r0, r3
 800f118:	e7a4      	b.n	800f064 <_printf_i+0x168>
 800f11a:	2301      	movs	r3, #1
 800f11c:	4632      	mov	r2, r6
 800f11e:	4649      	mov	r1, r9
 800f120:	4640      	mov	r0, r8
 800f122:	47d0      	blx	sl
 800f124:	3001      	adds	r0, #1
 800f126:	d09b      	beq.n	800f060 <_printf_i+0x164>
 800f128:	3501      	adds	r5, #1
 800f12a:	68e3      	ldr	r3, [r4, #12]
 800f12c:	9903      	ldr	r1, [sp, #12]
 800f12e:	1a5b      	subs	r3, r3, r1
 800f130:	42ab      	cmp	r3, r5
 800f132:	dcf2      	bgt.n	800f11a <_printf_i+0x21e>
 800f134:	e7eb      	b.n	800f10e <_printf_i+0x212>
 800f136:	2500      	movs	r5, #0
 800f138:	f104 0619 	add.w	r6, r4, #25
 800f13c:	e7f5      	b.n	800f12a <_printf_i+0x22e>
 800f13e:	bf00      	nop
 800f140:	0800f2d9 	.word	0x0800f2d9
 800f144:	0800f2ea 	.word	0x0800f2ea

0800f148 <__retarget_lock_acquire_recursive>:
 800f148:	4770      	bx	lr

0800f14a <__retarget_lock_release_recursive>:
 800f14a:	4770      	bx	lr

0800f14c <memmove>:
 800f14c:	4288      	cmp	r0, r1
 800f14e:	b510      	push	{r4, lr}
 800f150:	eb01 0402 	add.w	r4, r1, r2
 800f154:	d902      	bls.n	800f15c <memmove+0x10>
 800f156:	4284      	cmp	r4, r0
 800f158:	4623      	mov	r3, r4
 800f15a:	d807      	bhi.n	800f16c <memmove+0x20>
 800f15c:	1e43      	subs	r3, r0, #1
 800f15e:	42a1      	cmp	r1, r4
 800f160:	d008      	beq.n	800f174 <memmove+0x28>
 800f162:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f16a:	e7f8      	b.n	800f15e <memmove+0x12>
 800f16c:	4402      	add	r2, r0
 800f16e:	4601      	mov	r1, r0
 800f170:	428a      	cmp	r2, r1
 800f172:	d100      	bne.n	800f176 <memmove+0x2a>
 800f174:	bd10      	pop	{r4, pc}
 800f176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f17a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f17e:	e7f7      	b.n	800f170 <memmove+0x24>

0800f180 <_realloc_r>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	4607      	mov	r7, r0
 800f184:	4614      	mov	r4, r2
 800f186:	460e      	mov	r6, r1
 800f188:	b921      	cbnz	r1, 800f194 <_realloc_r+0x14>
 800f18a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f18e:	4611      	mov	r1, r2
 800f190:	f7ff bc54 	b.w	800ea3c <_malloc_r>
 800f194:	b922      	cbnz	r2, 800f1a0 <_realloc_r+0x20>
 800f196:	f7ff fc01 	bl	800e99c <_free_r>
 800f19a:	4625      	mov	r5, r4
 800f19c:	4628      	mov	r0, r5
 800f19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1a0:	f000 f814 	bl	800f1cc <_malloc_usable_size_r>
 800f1a4:	42a0      	cmp	r0, r4
 800f1a6:	d20f      	bcs.n	800f1c8 <_realloc_r+0x48>
 800f1a8:	4621      	mov	r1, r4
 800f1aa:	4638      	mov	r0, r7
 800f1ac:	f7ff fc46 	bl	800ea3c <_malloc_r>
 800f1b0:	4605      	mov	r5, r0
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	d0f2      	beq.n	800f19c <_realloc_r+0x1c>
 800f1b6:	4631      	mov	r1, r6
 800f1b8:	4622      	mov	r2, r4
 800f1ba:	f7ff fbd9 	bl	800e970 <memcpy>
 800f1be:	4631      	mov	r1, r6
 800f1c0:	4638      	mov	r0, r7
 800f1c2:	f7ff fbeb 	bl	800e99c <_free_r>
 800f1c6:	e7e9      	b.n	800f19c <_realloc_r+0x1c>
 800f1c8:	4635      	mov	r5, r6
 800f1ca:	e7e7      	b.n	800f19c <_realloc_r+0x1c>

0800f1cc <_malloc_usable_size_r>:
 800f1cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1d0:	1f18      	subs	r0, r3, #4
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	bfbc      	itt	lt
 800f1d6:	580b      	ldrlt	r3, [r1, r0]
 800f1d8:	18c0      	addlt	r0, r0, r3
 800f1da:	4770      	bx	lr

0800f1dc <_init>:
 800f1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1de:	bf00      	nop
 800f1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1e2:	bc08      	pop	{r3}
 800f1e4:	469e      	mov	lr, r3
 800f1e6:	4770      	bx	lr

0800f1e8 <_fini>:
 800f1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ea:	bf00      	nop
 800f1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ee:	bc08      	pop	{r3}
 800f1f0:	469e      	mov	lr, r3
 800f1f2:	4770      	bx	lr
