
295_Autonomous_Vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f568  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800f718  0800f718  0001f718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f834  0800f834  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f834  0800f834  0001f834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f83c  0800f83c  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f83c  0800f83c  0001f83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f840  0800f840  0001f840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800f844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008f14  200000d8  0800f91c  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008fec  0800f91c  00028fec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000354b8  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ecb  00000000  00000000  000555c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002540  00000000  00000000  0005c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002280  00000000  00000000  0005e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d441  00000000  00000000  00060c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d659  00000000  00000000  0008e091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8517  00000000  00000000  000bb6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b3c01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a26c  00000000  00000000  001b3c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f700 	.word	0x0800f700

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000dc 	.word	0x200000dc
 80001ec:	0800f700 	.word	0x0800f700

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8000dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200000f4 	.word	0x200000f4
 8000dd8:	2000014c 	.word	0x2000014c

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de2:	f002 f8d7 	bl	8002f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de6:	f000 f85b 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 fc8b 	bl	8001704 <MX_GPIO_Init>
  MX_CRC_Init();
 8000dee:	f000 f9d1 	bl	8001194 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000df2:	f000 f9e3 	bl	80011bc <MX_DMA2D_Init>
  MX_FMC_Init();
 8000df6:	f000 fc35 	bl	8001664 <MX_FMC_Init>
  MX_I2C3_Init();
 8000dfa:	f000 fa11 	bl	8001220 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000dfe:	f000 fa4f 	bl	80012a0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000e02:	f000 facd 	bl	80013a0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000e06:	f000 fb01 	bl	800140c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e0a:	f000 fc01 	bl	8001610 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e0e:	f000 f8cb 	bl	8000fa8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e12:	f000 f91b 	bl	800104c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000e16:	f000 f96b 	bl	80010f0 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000e1a:	f000 fb47 	bl	80014ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e1e:	f000 fb9d 	bl	800155c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000e22:	481a      	ldr	r0, [pc, #104]	; (8000e8c <main+0xb0>)
 8000e24:	f006 fae9 	bl	80073fa <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //SERVO_PWM
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4819      	ldr	r0, [pc, #100]	; (8000e90 <main+0xb4>)
 8000e2c:	f006 fb58 	bl	80074e0 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //DC_PWM
 8000e30:	2100      	movs	r1, #0
 8000e32:	4818      	ldr	r0, [pc, #96]	; (8000e94 <main+0xb8>)
 8000e34:	f006 fb54 	bl	80074e0 <HAL_TIM_PWM_Start>

   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1500);  //Set Servo Duty cycle to 15%
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <main+0xb4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);  //Set DC motor Duty cycle to 15%
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <main+0xb8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34

  const bool run_1000hz = true;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  const size_t stack_size_bytes = 2048 / sizeof(void *);
 8000e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e56:	623b      	str	r3, [r7, #32]
  periodic_scheduler__initialize(stack_size_bytes, run_1000hz);
 8000e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	6a38      	ldr	r0, [r7, #32]
 8000e60:	f001 fe9c 	bl	8002b9c <periodic_scheduler__initialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <main+0xbc>)
 8000e66:	1d3c      	adds	r4, r7, #4
 8000e68:	461d      	mov	r5, r3
 8000e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00b f855 	bl	800bf2a <osThreadCreate>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <main+0xc0>)
 8000e84:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e86:	f00b f849 	bl	800bf1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <main+0xae>
 8000e8c:	200087dc 	.word	0x200087dc
 8000e90:	2000885c 	.word	0x2000885c
 8000e94:	20008624 	.word	0x20008624
 8000e98:	0800f724 	.word	0x0800f724
 8000e9c:	20008524 	.word	0x20008524

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0a0      	sub	sp, #128	; 0x80
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eaa:	2230      	movs	r2, #48	; 0x30
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f00d fe64 	bl	800eb7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2230      	movs	r2, #48	; 0x30
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f00d fe55 	bl	800eb7c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <SystemClock_Config+0x100>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <SystemClock_Config+0x100>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <SystemClock_Config+0x100>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <SystemClock_Config+0x104>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000efa:	4a2a      	ldr	r2, [pc, #168]	; (8000fa4 <SystemClock_Config+0x104>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <SystemClock_Config+0x104>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f22:	2304      	movs	r3, #4
 8000f24:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f26:	2348      	movs	r3, #72	; 0x48
 8000f28:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 fb40 	bl	80065bc <HAL_RCC_OscConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f42:	f000 fd27 	bl	8001994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 fd9a 	bl	8006a9c <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f6e:	f000 fd11 	bl	8001994 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f72:	2308      	movs	r3, #8
 8000f74:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f76:	2332      	movs	r3, #50	; 0x32
 8000f78:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 ffb6 	bl	8006ef8 <HAL_RCCEx_PeriphCLKConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000f92:	f000 fcff 	bl	8001994 <Error_Handler>
  }
}
 8000f96:	bf00      	nop
 8000f98:	3780      	adds	r7, #128	; 0x80
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <MX_ADC1_Init+0xa0>)
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_ADC1_Init+0x98>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_ADC1_Init+0x98>)
 8001002:	2201      	movs	r2, #1
 8001004:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <MX_ADC1_Init+0x98>)
 8001008:	f002 f82a 	bl	8003060 <HAL_ADC_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 fcbf 	bl	8001994 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001016:	2305      	movs	r3, #5
 8001018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_ADC1_Init+0x98>)
 8001028:	f002 f9b6 	bl	8003398 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001032:	f000 fcaf 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000870c 	.word	0x2000870c
 8001044:	40012000 	.word	0x40012000
 8001048:	0f000001 	.word	0x0f000001

0800104c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <MX_ADC2_Init+0x9c>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_ADC2_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_ADC2_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_ADC2_Init+0x98>)
 800108c:	4a17      	ldr	r2, [pc, #92]	; (80010ec <MX_ADC2_Init+0xa0>)
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <MX_ADC2_Init+0x98>)
 8001098:	2201      	movs	r2, #1
 800109a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_ADC2_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_ADC2_Init+0x98>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <MX_ADC2_Init+0x98>)
 80010ac:	f001 ffd8 	bl	8003060 <HAL_ADC_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80010b6:	f000 fc6d 	bl	8001994 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010ba:	230d      	movs	r3, #13
 80010bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_ADC2_Init+0x98>)
 80010cc:	f002 f964 	bl	8003398 <HAL_ADC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80010d6:	f000 fc5d 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200085d4 	.word	0x200085d4
 80010e8:	40012100 	.word	0x40012100
 80010ec:	0f000001 	.word	0x0f000001

080010f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_ADC3_Init+0x98>)
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <MX_ADC3_Init+0x9c>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_ADC3_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_ADC3_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_ADC3_Init+0x98>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_ADC3_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_ADC3_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_ADC3_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_ADC3_Init+0x98>)
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <MX_ADC3_Init+0xa0>)
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_ADC3_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_ADC3_Init+0x98>)
 800113c:	2201      	movs	r2, #1
 800113e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_ADC3_Init+0x98>)
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_ADC3_Init+0x98>)
 800114a:	2201      	movs	r2, #1
 800114c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800114e:	480e      	ldr	r0, [pc, #56]	; (8001188 <MX_ADC3_Init+0x98>)
 8001150:	f001 ff86 	bl	8003060 <HAL_ADC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800115a:	f000 fc1b 	bl	8001994 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800115e:	2304      	movs	r3, #4
 8001160:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_ADC3_Init+0x98>)
 8001170:	f002 f912 	bl	8003398 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800117a:	f000 fc0b 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20008754 	.word	0x20008754
 800118c:	40012200 	.word	0x40012200
 8001190:	0f000001 	.word	0x0f000001

08001194 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_CRC_Init+0x20>)
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <MX_CRC_Init+0x24>)
 800119c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_CRC_Init+0x20>)
 80011a0:	f002 fc0a 	bl	80039b8 <HAL_CRC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011aa:	f000 fbf3 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000861c 	.word	0x2000861c
 80011b8:	40023000 	.word	0x40023000

080011bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011c2:	4a16      	ldr	r2, [pc, #88]	; (800121c <MX_DMA2D_Init+0x60>)
 80011c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <MX_DMA2D_Init+0x5c>)
 80011f2:	f002 fbfd 	bl	80039f0 <HAL_DMA2D_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80011fc:	f000 fbca 	bl	8001994 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001200:	2101      	movs	r1, #1
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_DMA2D_Init+0x5c>)
 8001204:	f002 fd4e 	bl	8003ca4 <HAL_DMA2D_ConfigLayer>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800120e:	f000 fbc1 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000881c 	.word	0x2000881c
 800121c:	4002b000 	.word	0x4002b000

08001220 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_I2C3_Init+0x74>)
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <MX_I2C3_Init+0x78>)
 8001228:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_I2C3_Init+0x74>)
 800122c:	4a1b      	ldr	r2, [pc, #108]	; (800129c <MX_I2C3_Init+0x7c>)
 800122e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_I2C3_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_I2C3_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_I2C3_Init+0x74>)
 800123e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001242:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_I2C3_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_I2C3_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_I2C3_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_I2C3_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_I2C3_Init+0x74>)
 800125e:	f004 fc85 	bl	8005b6c <HAL_I2C_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001268:	f000 fb94 	bl	8001994 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <MX_I2C3_Init+0x74>)
 8001270:	f004 fdc0 	bl	8005df4 <HAL_I2CEx_ConfigAnalogFilter>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800127a:	f000 fb8b 	bl	8001994 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800127e:	2100      	movs	r1, #0
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_I2C3_Init+0x74>)
 8001282:	f004 fdf3 	bl	8005e6c <HAL_I2CEx_ConfigDigitalFilter>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800128c:	f000 fb82 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20008528 	.word	0x20008528
 8001298:	40005c00 	.word	0x40005c00
 800129c:	000186a0 	.word	0x000186a0

080012a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2234      	movs	r2, #52	; 0x34
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00d fc65 	bl	800eb7c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012b4:	4a39      	ldr	r2, [pc, #228]	; (800139c <MX_LTDC_Init+0xfc>)
 80012b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012b8:	4b37      	ldr	r3, [pc, #220]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012be:	4b36      	ldr	r3, [pc, #216]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012ca:	4b33      	ldr	r3, [pc, #204]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80012d0:	4b31      	ldr	r3, [pc, #196]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012d2:	2209      	movs	r2, #9
 80012d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012d8:	2201      	movs	r2, #1
 80012da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80012dc:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012de:	221d      	movs	r2, #29
 80012e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012e4:	2203      	movs	r2, #3
 80012e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012ea:	f240 120d 	movw	r2, #269	; 0x10d
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012f2:	f240 1243 	movw	r2, #323	; 0x143
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MX_LTDC_Init+0xf8>)
 80012fa:	f240 1217 	movw	r2, #279	; 0x117
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <MX_LTDC_Init+0xf8>)
 8001302:	f240 1247 	movw	r2, #327	; 0x147
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <MX_LTDC_Init+0xf8>)
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_LTDC_Init+0xf8>)
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_LTDC_Init+0xf8>)
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <MX_LTDC_Init+0xf8>)
 8001322:	f004 fde3 	bl	8005eec <HAL_LTDC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800132c:	f000 fb32 	bl	8001994 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001334:	23f0      	movs	r3, #240	; 0xf0
 8001336:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800133c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001340:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001342:	2302      	movs	r3, #2
 8001344:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800134e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001352:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001354:	2307      	movs	r3, #7
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001358:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800135e:	23f0      	movs	r3, #240	; 0xf0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001362:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_LTDC_Init+0xf8>)
 8001382:	f004 ff45 	bl	8006210 <HAL_LTDC_ConfigLayer>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800138c:	f000 fb02 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3738      	adds	r7, #56	; 0x38
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20008664 	.word	0x20008664
 800139c:	40016800 	.word	0x40016800

080013a0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_SPI5_Init+0x64>)
 80013a6:	4a18      	ldr	r2, [pc, #96]	; (8001408 <MX_SPI5_Init+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_SPI5_Init+0x64>)
 80013ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_SPI5_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_SPI5_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_SPI5_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_SPI5_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_SPI5_Init+0x64>)
 80013cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_SPI5_Init+0x64>)
 80013d4:	2218      	movs	r2, #24
 80013d6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <MX_SPI5_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_SPI5_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_SPI5_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_SPI5_Init+0x64>)
 80013ec:	220a      	movs	r2, #10
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_SPI5_Init+0x64>)
 80013f2:	f005 ff73 	bl	80072dc <HAL_SPI_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80013fc:	f000 faca 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000857c 	.word	0x2000857c
 8001408:	40015000 	.word	0x40015000

0800140c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_TIM1_Init+0x98>)
 800142a:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <MX_TIM1_Init+0x9c>)
 800142c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001430:	2247      	movs	r2, #71	; 0x47
 8001432:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM1_Init+0x98>)
 800143c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001440:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_TIM1_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001456:	f005 ffa5 	bl	80073a4 <HAL_TIM_Base_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001460:	f000 fa98 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001472:	f006 fa41 	bl	80078f8 <HAL_TIM_ConfigClockSource>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800147c:	f000 fa8a 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_TIM1_Init+0x98>)
 800148e:	f006 fe2f 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001498:	f000 fa7c 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200087dc 	.word	0x200087dc
 80014a8:	40010000 	.word	0x40010000

080014ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	615a      	str	r2, [r3, #20]
 80014cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_TIM2_Init+0xac>)
 80014d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <MX_TIM2_Init+0xac>)
 80014d8:	2247      	movs	r2, #71	; 0x47
 80014da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_TIM2_Init+0xac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM2_Init+0xac>)
 80014e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80014e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_TIM2_Init+0xac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_TIM2_Init+0xac>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <MX_TIM2_Init+0xac>)
 80014f8:	f005 ffc7 	bl	800748a <HAL_TIM_PWM_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001502:	f000 fa47 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	4619      	mov	r1, r3
 8001514:	4810      	ldr	r0, [pc, #64]	; (8001558 <MX_TIM2_Init+0xac>)
 8001516:	f006 fdeb 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001520:	f000 fa38 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001524:	2360      	movs	r3, #96	; 0x60
 8001526:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2204      	movs	r2, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM2_Init+0xac>)
 800153c:	f006 f916 	bl	800776c <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001546:	f000 fa25 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <MX_TIM2_Init+0xac>)
 800154c:	f000 fd68 	bl	8002020 <HAL_TIM_MspPostInit>

}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2000885c 	.word	0x2000885c

0800155c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <MX_TIM3_Init+0xac>)
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <MX_TIM3_Init+0xb0>)
 8001582:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <MX_TIM3_Init+0xac>)
 8001586:	2247      	movs	r2, #71	; 0x47
 8001588:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_TIM3_Init+0xac>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_TIM3_Init+0xac>)
 8001592:	f242 720f 	movw	r2, #9999	; 0x270f
 8001596:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_TIM3_Init+0xac>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM3_Init+0xac>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015a4:	4818      	ldr	r0, [pc, #96]	; (8001608 <MX_TIM3_Init+0xac>)
 80015a6:	f005 ff70 	bl	800748a <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80015b0:	f000 f9f0 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4619      	mov	r1, r3
 80015c2:	4811      	ldr	r0, [pc, #68]	; (8001608 <MX_TIM3_Init+0xac>)
 80015c4:	f006 fd94 	bl	80080f0 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80015ce:	f000 f9e1 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	; 0x60
 80015d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM3_Init+0xac>)
 80015ea:	f006 f8bf 	bl	800776c <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015f4:	f000 f9ce 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM3_Init+0xac>)
 80015fa:	f000 fd11 	bl	8002020 <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20008624 	.word	0x20008624
 800160c:	40000400 	.word	0x40000400

08001610 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <MX_USART1_UART_Init+0x50>)
 8001618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_USART1_UART_Init+0x4c>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_USART1_UART_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <MX_USART1_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_USART1_UART_Init+0x4c>)
 8001648:	f006 fde2 	bl	8008210 <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001652:	f000 f99f 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000879c 	.word	0x2000879c
 8001660:	40011000 	.word	0x40011000

08001664 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_FMC_Init+0x98>)
 800167e:	4a20      	ldr	r2, [pc, #128]	; (8001700 <MX_FMC_Init+0x9c>)
 8001680:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_FMC_Init+0x98>)
 8001684:	2201      	movs	r2, #1
 8001686:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_FMC_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <MX_FMC_Init+0x98>)
 8001690:	2204      	movs	r2, #4
 8001692:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_FMC_Init+0x98>)
 8001696:	2210      	movs	r2, #16
 8001698:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <MX_FMC_Init+0x98>)
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_FMC_Init+0x98>)
 80016a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80016a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_FMC_Init+0x98>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_FMC_Init+0x98>)
 80016b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_FMC_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_FMC_Init+0x98>)
 80016be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80016c8:	2307      	movs	r3, #7
 80016ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80016d0:	2307      	movs	r3, #7
 80016d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80016d4:	2303      	movs	r3, #3
 80016d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016dc:	2302      	movs	r3, #2
 80016de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_FMC_Init+0x98>)
 80016e6:	f005 fdc5 	bl	8007274 <HAL_SDRAM_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80016f0:	f000 f950 	bl	8001994 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	2000889c 	.word	0x2000889c
 8001700:	a0000140 	.word	0xa0000140

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
 800171e:	4b87      	ldr	r3, [pc, #540]	; (800193c <MX_GPIO_Init+0x238>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a86      	ldr	r2, [pc, #536]	; (800193c <MX_GPIO_Init+0x238>)
 8001724:	f043 0310 	orr.w	r3, r3, #16
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b84      	ldr	r3, [pc, #528]	; (800193c <MX_GPIO_Init+0x238>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	4b80      	ldr	r3, [pc, #512]	; (800193c <MX_GPIO_Init+0x238>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a7f      	ldr	r2, [pc, #508]	; (800193c <MX_GPIO_Init+0x238>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b7d      	ldr	r3, [pc, #500]	; (800193c <MX_GPIO_Init+0x238>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	4b79      	ldr	r3, [pc, #484]	; (800193c <MX_GPIO_Init+0x238>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a78      	ldr	r2, [pc, #480]	; (800193c <MX_GPIO_Init+0x238>)
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b76      	ldr	r3, [pc, #472]	; (800193c <MX_GPIO_Init+0x238>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	4b72      	ldr	r3, [pc, #456]	; (800193c <MX_GPIO_Init+0x238>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a71      	ldr	r2, [pc, #452]	; (800193c <MX_GPIO_Init+0x238>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <MX_GPIO_Init+0x238>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b6b      	ldr	r3, [pc, #428]	; (800193c <MX_GPIO_Init+0x238>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a6a      	ldr	r2, [pc, #424]	; (800193c <MX_GPIO_Init+0x238>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b68      	ldr	r3, [pc, #416]	; (800193c <MX_GPIO_Init+0x238>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b64      	ldr	r3, [pc, #400]	; (800193c <MX_GPIO_Init+0x238>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a63      	ldr	r2, [pc, #396]	; (800193c <MX_GPIO_Init+0x238>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b61      	ldr	r3, [pc, #388]	; (800193c <MX_GPIO_Init+0x238>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b5d      	ldr	r3, [pc, #372]	; (800193c <MX_GPIO_Init+0x238>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a5c      	ldr	r2, [pc, #368]	; (800193c <MX_GPIO_Init+0x238>)
 80017cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b5a      	ldr	r3, [pc, #360]	; (800193c <MX_GPIO_Init+0x238>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b56      	ldr	r3, [pc, #344]	; (800193c <MX_GPIO_Init+0x238>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a55      	ldr	r2, [pc, #340]	; (800193c <MX_GPIO_Init+0x238>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b53      	ldr	r3, [pc, #332]	; (800193c <MX_GPIO_Init+0x238>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	211c      	movs	r1, #28
 80017fe:	4850      	ldr	r0, [pc, #320]	; (8001940 <MX_GPIO_Init+0x23c>)
 8001800:	f002 fc8e 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2116      	movs	r1, #22
 8001808:	484e      	ldr	r0, [pc, #312]	; (8001944 <MX_GPIO_Init+0x240>)
 800180a:	f002 fc89 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	484d      	ldr	r0, [pc, #308]	; (8001948 <MX_GPIO_Init+0x244>)
 8001814:	f002 fc84 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800181e:	484b      	ldr	r0, [pc, #300]	; (800194c <MX_GPIO_Init+0x248>)
 8001820:	f002 fc7e 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800182a:	4849      	ldr	r0, [pc, #292]	; (8001950 <MX_GPIO_Init+0x24c>)
 800182c:	f002 fc78 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001830:	231c      	movs	r3, #28
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	483e      	ldr	r0, [pc, #248]	; (8001940 <MX_GPIO_Init+0x23c>)
 8001848:	f002 fabe 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800184c:	2316      	movs	r3, #22
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	4619      	mov	r1, r3
 8001862:	4838      	ldr	r0, [pc, #224]	; (8001944 <MX_GPIO_Init+0x240>)
 8001864:	f002 fab0 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001868:	f248 0307 	movw	r3, #32775	; 0x8007
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800186e:	4b39      	ldr	r3, [pc, #228]	; (8001954 <MX_GPIO_Init+0x250>)
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187a:	4619      	mov	r1, r3
 800187c:	4832      	ldr	r0, [pc, #200]	; (8001948 <MX_GPIO_Init+0x244>)
 800187e:	f002 faa3 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	482b      	ldr	r0, [pc, #172]	; (8001948 <MX_GPIO_Init+0x244>)
 800189a:	f002 fa95 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800189e:	2304      	movs	r3, #4
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ae:	4619      	mov	r1, r3
 80018b0:	4829      	ldr	r0, [pc, #164]	; (8001958 <MX_GPIO_Init+0x254>)
 80018b2:	f002 fa89 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80018b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c8:	4619      	mov	r1, r3
 80018ca:	4820      	ldr	r0, [pc, #128]	; (800194c <MX_GPIO_Init+0x248>)
 80018cc:	f002 fa7c 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80018d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4818      	ldr	r0, [pc, #96]	; (800194c <MX_GPIO_Init+0x248>)
 80018ea:	f002 fa6d 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ee:	2320      	movs	r3, #32
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_GPIO_Init+0x258>)
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fe:	4619      	mov	r1, r3
 8001900:	4812      	ldr	r0, [pc, #72]	; (800194c <MX_GPIO_Init+0x248>)
 8001902:	f002 fa61 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001906:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_GPIO_Init+0x24c>)
 8001920:	f002 fa52 	bl	8003dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2105      	movs	r1, #5
 8001928:	2017      	movs	r0, #23
 800192a:	f002 f81b 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800192e:	2017      	movs	r0, #23
 8001930:	f002 f834 	bl	800399c <HAL_NVIC_EnableIRQ>

}
 8001934:	bf00      	nop
 8001936:	3738      	adds	r7, #56	; 0x38
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	40021000 	.word	0x40021000
 8001944:	40020800 	.word	0x40020800
 8001948:	40020000 	.word	0x40020000
 800194c:	40020c00 	.word	0x40020c00
 8001950:	40021800 	.word	0x40021800
 8001954:	10120000 	.word	0x10120000
 8001958:	40020400 	.word	0x40020400
 800195c:	10110000 	.word	0x10110000

08001960 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001968:	f00c fdae 	bl	800e4c8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 800196c:	e7fe      	b.n	800196c <StartDefaultTask+0xc>
	...

08001970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001982:	f001 fb29 	bl	8002fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40001000 	.word	0x40001000

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_MspInit+0x54>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_MspInit+0x54>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_MspInit+0x54>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_MspInit+0x54>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_MspInit+0x54>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_MspInit+0x54>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	210f      	movs	r1, #15
 80019e6:	f06f 0001 	mvn.w	r0, #1
 80019ea:	f001 ffbb 	bl	8003964 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08e      	sub	sp, #56	; 0x38
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a45      	ldr	r2, [pc, #276]	; (8001b30 <HAL_ADC_MspInit+0x134>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d128      	bne.n	8001a70 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a43      	ldr	r2, [pc, #268]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a36:	623b      	str	r3, [r7, #32]
 8001a38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a3c      	ldr	r2, [pc, #240]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a56:	2320      	movs	r3, #32
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a66:	4619      	mov	r1, r3
 8001a68:	4833      	ldr	r0, [pc, #204]	; (8001b38 <HAL_ADC_MspInit+0x13c>)
 8001a6a:	f002 f9ad 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a6e:	e05a      	b.n	8001b26 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <HAL_ADC_MspInit+0x140>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d128      	bne.n	8001acc <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001a84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	481e      	ldr	r0, [pc, #120]	; (8001b40 <HAL_ADC_MspInit+0x144>)
 8001ac6:	f002 f97f 	bl	8003dc8 <HAL_GPIO_Init>
}
 8001aca:	e02c      	b.n	8001b26 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_ADC_MspInit+0x148>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d127      	bne.n	8001b26 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001ae0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001afc:	f043 0320 	orr.w	r3, r3, #32
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_ADC_MspInit+0x138>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b0e:	2340      	movs	r3, #64	; 0x40
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b12:	2303      	movs	r3, #3
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4809      	ldr	r0, [pc, #36]	; (8001b48 <HAL_ADC_MspInit+0x14c>)
 8001b22:	f002 f951 	bl	8003dc8 <HAL_GPIO_Init>
}
 8001b26:	bf00      	nop
 8001b28:	3738      	adds	r7, #56	; 0x38
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40012000 	.word	0x40012000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40012100 	.word	0x40012100
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40012200 	.word	0x40012200
 8001b48:	40021400 	.word	0x40021400

08001b4c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_CRC_MspInit+0x3c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10d      	bne.n	8001b7a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_CRC_MspInit+0x40>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_CRC_MspInit+0x40>)
 8001b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_CRC_MspInit+0x40>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023000 	.word	0x40023000
 8001b8c:	40023800 	.word	0x40023800

08001b90 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_DMA2D_MspInit+0x48>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d115      	bne.n	8001bce <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_DMA2D_MspInit+0x4c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <HAL_DMA2D_MspInit+0x4c>)
 8001bac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_DMA2D_MspInit+0x4c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2105      	movs	r1, #5
 8001bc2:	205a      	movs	r0, #90	; 0x5a
 8001bc4:	f001 fece 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001bc8:	205a      	movs	r0, #90	; 0x5a
 8001bca:	f001 fee7 	bl	800399c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	4002b000 	.word	0x4002b000
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_I2C_MspInit+0xc4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d14b      	bne.n	8001c9a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <HAL_I2C_MspInit+0xc8>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a27      	ldr	r2, [pc, #156]	; (8001ca8 <HAL_I2C_MspInit+0xc8>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_I2C_MspInit+0xc8>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_I2C_MspInit+0xc8>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <HAL_I2C_MspInit+0xc8>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_I2C_MspInit+0xc8>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c40:	2312      	movs	r3, #18
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	4815      	ldr	r0, [pc, #84]	; (8001cac <HAL_I2C_MspInit+0xcc>)
 8001c58:	f002 f8b6 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c62:	2312      	movs	r3, #18
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <HAL_I2C_MspInit+0xd0>)
 8001c7a:	f002 f8a5 	bl	8003dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_I2C_MspInit+0xc8>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_I2C_MspInit+0xc8>)
 8001c88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_I2C_MspInit+0xc8>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40005c00 	.word	0x40005c00
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08e      	sub	sp, #56	; 0x38
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a7b      	ldr	r2, [pc, #492]	; (8001ec0 <HAL_LTDC_MspInit+0x20c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	f040 80f0 	bne.w	8001eb8 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	4b79      	ldr	r3, [pc, #484]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	4a78      	ldr	r2, [pc, #480]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001ce2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ce6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce8:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	4b72      	ldr	r3, [pc, #456]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	4a71      	ldr	r2, [pc, #452]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001cfe:	f043 0320 	orr.w	r3, r3, #32
 8001d02:	6313      	str	r3, [r2, #48]	; 0x30
 8001d04:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	4b6b      	ldr	r3, [pc, #428]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	4a6a      	ldr	r2, [pc, #424]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d20:	4b68      	ldr	r3, [pc, #416]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	4b64      	ldr	r3, [pc, #400]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	4a63      	ldr	r2, [pc, #396]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3c:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a55      	ldr	r2, [pc, #340]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6313      	str	r3, [r2, #48]	; 0x30
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4a4e      	ldr	r2, [pc, #312]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d8a:	f043 0308 	orr.w	r3, r3, #8
 8001d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d90:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_LTDC_MspInit+0x210>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dae:	230e      	movs	r3, #14
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db6:	4619      	mov	r1, r3
 8001db8:	4843      	ldr	r0, [pc, #268]	; (8001ec8 <HAL_LTDC_MspInit+0x214>)
 8001dba:	f002 f805 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001dbe:	f641 0358 	movw	r3, #6232	; 0x1858
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dd0:	230e      	movs	r3, #14
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	483c      	ldr	r0, [pc, #240]	; (8001ecc <HAL_LTDC_MspInit+0x218>)
 8001ddc:	f001 fff4 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001de0:	2303      	movs	r3, #3
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001df0:	2309      	movs	r3, #9
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4835      	ldr	r0, [pc, #212]	; (8001ed0 <HAL_LTDC_MspInit+0x21c>)
 8001dfc:	f001 ffe4 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001e00:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e12:	230e      	movs	r3, #14
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	482c      	ldr	r0, [pc, #176]	; (8001ed0 <HAL_LTDC_MspInit+0x21c>)
 8001e1e:	f001 ffd3 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001e22:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e34:	230e      	movs	r3, #14
 8001e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4825      	ldr	r0, [pc, #148]	; (8001ed4 <HAL_LTDC_MspInit+0x220>)
 8001e40:	f001 ffc2 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001e44:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e56:	230e      	movs	r3, #14
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5e:	4619      	mov	r1, r3
 8001e60:	481d      	ldr	r0, [pc, #116]	; (8001ed8 <HAL_LTDC_MspInit+0x224>)
 8001e62:	f001 ffb1 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001e66:	2348      	movs	r3, #72	; 0x48
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e76:	230e      	movs	r3, #14
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4816      	ldr	r0, [pc, #88]	; (8001edc <HAL_LTDC_MspInit+0x228>)
 8001e82:	f001 ffa1 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001e86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e98:	2309      	movs	r3, #9
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <HAL_LTDC_MspInit+0x220>)
 8001ea4:	f001 ff90 	bl	8003dc8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2105      	movs	r1, #5
 8001eac:	2058      	movs	r0, #88	; 0x58
 8001eae:	f001 fd59 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001eb2:	2058      	movs	r0, #88	; 0x58
 8001eb4:	f001 fd72 	bl	800399c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001eb8:	bf00      	nop
 8001eba:	3738      	adds	r7, #56	; 0x38
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40016800 	.word	0x40016800
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40021400 	.word	0x40021400
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40021800 	.word	0x40021800
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	40020c00 	.word	0x40020c00

08001ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_SPI_MspInit+0x84>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d12c      	bne.n	8001f5c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f28:	f043 0320 	orr.w	r3, r3, #32
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001f3a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <HAL_SPI_MspInit+0x8c>)
 8001f58:	f001 ff36 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40015000 	.word	0x40015000
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40021400 	.word	0x40021400

08001f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <HAL_TIM_Base_MspInit+0x3c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10d      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_TIM_Base_MspInit+0x40>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <HAL_TIM_Base_MspInit+0x40>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_TIM_Base_MspInit+0x40>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_TIM_PWM_MspInit+0x64>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <HAL_TIM_PWM_MspInit+0x64>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_TIM_PWM_MspInit+0x64>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fe2:	e012      	b.n	800200a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	; (800201c <HAL_TIM_PWM_MspInit+0x68>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10d      	bne.n	800200a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_TIM_PWM_MspInit+0x64>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_TIM_PWM_MspInit+0x64>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_TIM_PWM_MspInit+0x64>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40000400 	.word	0x40000400

08002020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002040:	d11e      	bne.n	8002080 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_TIM_MspPostInit+0xb0>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <HAL_TIM_MspPostInit+0xb0>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_TIM_MspPostInit+0xb0>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800205e:	2308      	movs	r3, #8
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800206e:	2301      	movs	r3, #1
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4816      	ldr	r0, [pc, #88]	; (80020d4 <HAL_TIM_MspPostInit+0xb4>)
 800207a:	f001 fea5 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800207e:	e022      	b.n	80020c6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_TIM_MspPostInit+0xb8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d11d      	bne.n	80020c6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_TIM_MspPostInit+0xb0>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <HAL_TIM_MspPostInit+0xb0>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_TIM_MspPostInit+0xb0>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020a6:	2310      	movs	r3, #16
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020b6:	2302      	movs	r3, #2
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4804      	ldr	r0, [pc, #16]	; (80020d4 <HAL_TIM_MspPostInit+0xb4>)
 80020c2:	f001 fe81 	bl	8003dc8 <HAL_GPIO_Init>
}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40000400 	.word	0x40000400

080020dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_UART_MspInit+0x84>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d12c      	bne.n	8002158 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_UART_MspInit+0x88>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_UART_MspInit+0x88>)
 8002108:	f043 0310 	orr.w	r3, r3, #16
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_UART_MspInit+0x88>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_UART_MspInit+0x88>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_UART_MspInit+0x88>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_UART_MspInit+0x88>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002136:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002148:	2307      	movs	r3, #7
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4619      	mov	r1, r3
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <HAL_UART_MspInit+0x8c>)
 8002154:	f001 fe38 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40011000 	.word	0x40011000
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000

0800216c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_FMC_MspInit+0x104>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d16f      	bne.n	8002268 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002188:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_FMC_MspInit+0x104>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_FMC_MspInit+0x108>)
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	4a37      	ldr	r2, [pc, #220]	; (8002274 <HAL_FMC_MspInit+0x108>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6393      	str	r3, [r2, #56]	; 0x38
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <HAL_FMC_MspInit+0x108>)
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80021aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80021ae:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021bc:	230c      	movs	r3, #12
 80021be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	482c      	ldr	r0, [pc, #176]	; (8002278 <HAL_FMC_MspInit+0x10c>)
 80021c6:	f001 fdff 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80021ca:	2301      	movs	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021da:	230c      	movs	r3, #12
 80021dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	4619      	mov	r1, r3
 80021e2:	4826      	ldr	r0, [pc, #152]	; (800227c <HAL_FMC_MspInit+0x110>)
 80021e4:	f001 fdf0 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80021e8:	f248 1333 	movw	r3, #33075	; 0x8133
 80021ec:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021fa:	230c      	movs	r3, #12
 80021fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	4619      	mov	r1, r3
 8002202:	481f      	ldr	r0, [pc, #124]	; (8002280 <HAL_FMC_MspInit+0x114>)
 8002204:	f001 fde0 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002208:	f64f 7383 	movw	r3, #65411	; 0xff83
 800220c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800221a:	230c      	movs	r3, #12
 800221c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	4619      	mov	r1, r3
 8002222:	4818      	ldr	r0, [pc, #96]	; (8002284 <HAL_FMC_MspInit+0x118>)
 8002224:	f001 fdd0 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002228:	f24c 7303 	movw	r3, #50947	; 0xc703
 800222c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800223a:	230c      	movs	r3, #12
 800223c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4811      	ldr	r0, [pc, #68]	; (8002288 <HAL_FMC_MspInit+0x11c>)
 8002244:	f001 fdc0 	bl	8003dc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002248:	2360      	movs	r3, #96	; 0x60
 800224a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002258:	230c      	movs	r3, #12
 800225a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	4619      	mov	r1, r3
 8002260:	480a      	ldr	r0, [pc, #40]	; (800228c <HAL_FMC_MspInit+0x120>)
 8002262:	f001 fdb1 	bl	8003dc8 <HAL_GPIO_Init>
 8002266:	e000      	b.n	800226a <HAL_FMC_MspInit+0xfe>
    return;
 8002268:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000034c 	.word	0x2000034c
 8002274:	40023800 	.word	0x40023800
 8002278:	40021400 	.word	0x40021400
 800227c:	40020800 	.word	0x40020800
 8002280:	40021800 	.word	0x40021800
 8002284:	40021000 	.word	0x40021000
 8002288:	40020c00 	.word	0x40020c00
 800228c:	40020400 	.word	0x40020400

08002290 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002298:	f7ff ff68 	bl	800216c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	; 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	2036      	movs	r0, #54	; 0x36
 80022ba:	f001 fb53 	bl	8003964 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022be:	2036      	movs	r0, #54	; 0x36
 80022c0:	f001 fb6c 	bl	800399c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_InitTick+0xa4>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_InitTick+0xa4>)
 80022ce:	f043 0310 	orr.w	r3, r3, #16
 80022d2:	6413      	str	r3, [r2, #64]	; 0x40
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_InitTick+0xa4>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022e0:	f107 0210 	add.w	r2, r7, #16
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f004 fdd2 	bl	8006e94 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80022f0:	f004 fda8 	bl	8006e44 <HAL_RCC_GetPCLK1Freq>
 80022f4:	4603      	mov	r3, r0
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_InitTick+0xa8>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	3b01      	subs	r3, #1
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_InitTick+0xac>)
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_InitTick+0xb0>)
 800230c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_InitTick+0xac>)
 8002310:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002314:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <HAL_InitTick+0xac>)
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_InitTick+0xac>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_InitTick+0xac>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002328:	4809      	ldr	r0, [pc, #36]	; (8002350 <HAL_InitTick+0xac>)
 800232a:	f005 f83b 	bl	80073a4 <HAL_TIM_Base_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d104      	bne.n	800233e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002334:	4806      	ldr	r0, [pc, #24]	; (8002350 <HAL_InitTick+0xac>)
 8002336:	f005 f884 	bl	8007442 <HAL_TIM_Base_Start_IT>
 800233a:	4603      	mov	r3, r0
 800233c:	e000      	b.n	8002340 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3730      	adds	r7, #48	; 0x30
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	431bde83 	.word	0x431bde83
 8002350:	200088d0 	.word	0x200088d0
 8002354:	40001000 	.word	0x40001000

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <UsageFault_Handler+0x4>

0800237e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002390:	2020      	movs	r0, #32
 8002392:	f001 fedf 	bl	8004154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <TIM6_DAC_IRQHandler+0x10>)
 80023a2:	f005 f8db 	bl	800755c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200088d0 	.word	0x200088d0

080023b0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <OTG_HS_IRQHandler+0x10>)
 80023b6:	f002 f975 	bl	80046a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20008d18 	.word	0x20008d18

080023c4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <LTDC_IRQHandler+0x10>)
 80023ca:	f003 fe5f 	bl	800608c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20008664 	.word	0x20008664

080023d8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <DMA2D_IRQHandler+0x10>)
 80023de:	f001 fb50 	bl	8003a82 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000881c 	.word	0x2000881c

080023ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <_sbrk+0x50>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x16>
		heap_end = &end;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <_sbrk+0x50>)
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <_sbrk+0x54>)
 8002400:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <_sbrk+0x50>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <_sbrk+0x50>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	466a      	mov	r2, sp
 8002412:	4293      	cmp	r3, r2
 8002414:	d907      	bls.n	8002426 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002416:	f00c fb69 	bl	800eaec <__errno>
 800241a:	4603      	mov	r3, r0
 800241c:	220c      	movs	r2, #12
 800241e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	e006      	b.n	8002434 <_sbrk+0x48>
	}

	heap_end += incr;
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <_sbrk+0x50>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a03      	ldr	r2, [pc, #12]	; (800243c <_sbrk+0x50>)
 8002430:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000350 	.word	0x20000350
 8002440:	20008ff0 	.word	0x20008ff0

08002444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <SystemInit+0x28>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	4a07      	ldr	r2, [pc, #28]	; (800246c <SystemInit+0x28>)
 8002450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <SystemInit+0x28>)
 800245a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800245e:	609a      	str	r2, [r3, #8]
#endif
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002474:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002476:	e003      	b.n	8002480 <LoopCopyDataInit>

08002478 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800247a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800247c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800247e:	3104      	adds	r1, #4

08002480 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002480:	480b      	ldr	r0, [pc, #44]	; (80024b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002484:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002486:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002488:	d3f6      	bcc.n	8002478 <CopyDataInit>
  ldr  r2, =_sbss
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800248c:	e002      	b.n	8002494 <LoopFillZerobss>

0800248e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800248e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002490:	f842 3b04 	str.w	r3, [r2], #4

08002494 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002496:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002498:	d3f9      	bcc.n	800248e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800249a:	f7ff ffd3 	bl	8002444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249e:	f00c fb2b 	bl	800eaf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a2:	f7fe fc9b 	bl	8000ddc <main>
  bx  lr    
 80024a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024a8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80024ac:	0800f844 	.word	0x0800f844
  ldr  r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024b4:	200000d8 	.word	0x200000d8
  ldr  r2, =_sbss
 80024b8:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 80024bc:	20008fec 	.word	0x20008fec

080024c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC_IRQHandler>
	...

080024c4 <HAL_GPIO_EXTI_Callback>:
//    LPC_GPIOINT->IO0IntClr = encoder_pin_mask;
//  }
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  rotation_counter++;
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x20>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x20>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	20000354 	.word	0x20000354

080024e8 <motor_esc__control_speed>:
int received_speed = 0;
float calculated_pwm_dc = 15;

static uint8_t reverse_counter = 0;

void motor_esc__control_speed(float motor_speed) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	ed87 0a01 	vstr	s0, [r7, #4]
//    // calculated_pwm_dc = 15;
//  }
//  // }
//  //  }

  motor_esc__set_motor_speed(motor_speed);
 80024f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80024f6:	f000 f9cf 	bl	8002898 <motor_esc__set_motor_speed>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <motor_esc__steer_handler>:
  }
}

void motor_esc__stop_motor() { motor_esc__set_motor_speed(PWM_NEUTRAL); }

void motor_esc__steer_handler(int8_t angle) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  uint8_t calculated_angle = PWM_STRAIGHT;
 800250e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8002512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002516:	edc7 7a00 	vstr	s15, [r7]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	73fb      	strb	r3, [r7, #15]

  if (angle >= (-45) && angle <= (-40))
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 8002526:	db07      	blt.n	8002538 <motor_esc__steer_handler+0x34>
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8002530:	da02      	bge.n	8002538 <motor_esc__steer_handler+0x34>
    calculated_angle = RIGHT_1;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e0cf      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle > (-40) && angle < (-35))
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8002540:	db07      	blt.n	8002552 <motor_esc__steer_handler+0x4e>
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	f113 0f23 	cmn.w	r3, #35	; 0x23
 800254a:	da02      	bge.n	8002552 <motor_esc__steer_handler+0x4e>
    calculated_angle = RIGHT_2;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e0c2      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-35) && angle < (-30))
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	f113 0f23 	cmn.w	r3, #35	; 0x23
 800255a:	db07      	blt.n	800256c <motor_esc__steer_handler+0x68>
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	f113 0f1e 	cmn.w	r3, #30
 8002564:	da02      	bge.n	800256c <motor_esc__steer_handler+0x68>
    calculated_angle = RIGHT_3;
 8002566:	2302      	movs	r3, #2
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	e0b5      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-30) && angle < (-25))
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	f113 0f1e 	cmn.w	r3, #30
 8002574:	db07      	blt.n	8002586 <motor_esc__steer_handler+0x82>
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	f113 0f19 	cmn.w	r3, #25
 800257e:	da02      	bge.n	8002586 <motor_esc__steer_handler+0x82>
    calculated_angle = RIGHT_4;
 8002580:	2303      	movs	r3, #3
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	e0a8      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-25) && angle < (-20))
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	f113 0f19 	cmn.w	r3, #25
 800258e:	db07      	blt.n	80025a0 <motor_esc__steer_handler+0x9c>
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	f113 0f14 	cmn.w	r3, #20
 8002598:	da02      	bge.n	80025a0 <motor_esc__steer_handler+0x9c>
    calculated_angle = RIGHT_5;
 800259a:	2304      	movs	r3, #4
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e09b      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-20) && angle < (-15))
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	f113 0f14 	cmn.w	r3, #20
 80025a8:	db07      	blt.n	80025ba <motor_esc__steer_handler+0xb6>
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	f113 0f0f 	cmn.w	r3, #15
 80025b2:	da02      	bge.n	80025ba <motor_esc__steer_handler+0xb6>
    calculated_angle = RIGHT_6;
 80025b4:	2305      	movs	r3, #5
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	e08e      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-15) && angle < (-10))
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	f113 0f0f 	cmn.w	r3, #15
 80025c2:	db07      	blt.n	80025d4 <motor_esc__steer_handler+0xd0>
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	f113 0f0a 	cmn.w	r3, #10
 80025cc:	da02      	bge.n	80025d4 <motor_esc__steer_handler+0xd0>
    calculated_angle = RIGHT_7;
 80025ce:	2306      	movs	r3, #6
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	e081      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-10) && angle < (-5))
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	f113 0f0a 	cmn.w	r3, #10
 80025dc:	db07      	blt.n	80025ee <motor_esc__steer_handler+0xea>
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	f113 0f05 	cmn.w	r3, #5
 80025e6:	da02      	bge.n	80025ee <motor_esc__steer_handler+0xea>
    calculated_angle = RIGHT_8;
 80025e8:	2307      	movs	r3, #7
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e074      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-5) && angle < (0))
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	f113 0f05 	cmn.w	r3, #5
 80025f6:	db06      	blt.n	8002606 <motor_esc__steer_handler+0x102>
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da02      	bge.n	8002606 <motor_esc__steer_handler+0x102>
    calculated_angle = RIGHT_9;
 8002600:	2308      	movs	r3, #8
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e068      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle == 0)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <motor_esc__steer_handler+0x110>
    calculated_angle = STRAIGHT;
 800260e:	2312      	movs	r3, #18
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e061      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle > 0 && angle < 5)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	dd06      	ble.n	800262a <motor_esc__steer_handler+0x126>
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b04      	cmp	r3, #4
 8002622:	dc02      	bgt.n	800262a <motor_esc__steer_handler+0x126>
    calculated_angle = LEFT_9;
 8002624:	2311      	movs	r3, #17
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e056      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 5 && angle < 10)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b04      	cmp	r3, #4
 8002630:	dd06      	ble.n	8002640 <motor_esc__steer_handler+0x13c>
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b09      	cmp	r3, #9
 8002638:	dc02      	bgt.n	8002640 <motor_esc__steer_handler+0x13c>
    calculated_angle = LEFT_8;
 800263a:	2310      	movs	r3, #16
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e04b      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 10 && angle < 15)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b09      	cmp	r3, #9
 8002646:	dd06      	ble.n	8002656 <motor_esc__steer_handler+0x152>
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b0e      	cmp	r3, #14
 800264e:	dc02      	bgt.n	8002656 <motor_esc__steer_handler+0x152>
    calculated_angle = LEFT_7;
 8002650:	230f      	movs	r3, #15
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e040      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 15 && angle < 20)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	2b0e      	cmp	r3, #14
 800265c:	dd06      	ble.n	800266c <motor_esc__steer_handler+0x168>
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b13      	cmp	r3, #19
 8002664:	dc02      	bgt.n	800266c <motor_esc__steer_handler+0x168>
    calculated_angle = LEFT_6;
 8002666:	230e      	movs	r3, #14
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	e035      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 20 && angle < 25)
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	2b13      	cmp	r3, #19
 8002672:	dd06      	ble.n	8002682 <motor_esc__steer_handler+0x17e>
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	2b18      	cmp	r3, #24
 800267a:	dc02      	bgt.n	8002682 <motor_esc__steer_handler+0x17e>
    calculated_angle = LEFT_5;
 800267c:	230d      	movs	r3, #13
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	e02a      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 25 && angle < 30)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b18      	cmp	r3, #24
 8002688:	dd06      	ble.n	8002698 <motor_esc__steer_handler+0x194>
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b1d      	cmp	r3, #29
 8002690:	dc02      	bgt.n	8002698 <motor_esc__steer_handler+0x194>
    calculated_angle = LEFT_4;
 8002692:	230c      	movs	r3, #12
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e01f      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 30 && angle < 35)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b1d      	cmp	r3, #29
 800269e:	dd06      	ble.n	80026ae <motor_esc__steer_handler+0x1aa>
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b22      	cmp	r3, #34	; 0x22
 80026a6:	dc02      	bgt.n	80026ae <motor_esc__steer_handler+0x1aa>
    calculated_angle = LEFT_3;
 80026a8:	230b      	movs	r3, #11
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e014      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 35 && angle < 40)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b22      	cmp	r3, #34	; 0x22
 80026b4:	dd06      	ble.n	80026c4 <motor_esc__steer_handler+0x1c0>
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	2b27      	cmp	r3, #39	; 0x27
 80026bc:	dc02      	bgt.n	80026c4 <motor_esc__steer_handler+0x1c0>
    calculated_angle = LEFT_2;
 80026be:	230a      	movs	r3, #10
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e009      	b.n	80026d8 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 40 && angle <= 45)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b27      	cmp	r3, #39	; 0x27
 80026ca:	dd05      	ble.n	80026d8 <motor_esc__steer_handler+0x1d4>
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	2b2d      	cmp	r3, #45	; 0x2d
 80026d2:	dc01      	bgt.n	80026d8 <motor_esc__steer_handler+0x1d4>
    calculated_angle = LEFT_1;
 80026d4:	2309      	movs	r3, #9
 80026d6:	73fb      	strb	r3, [r7, #15]

  switch (calculated_angle) {
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b12      	cmp	r3, #18
 80026dc:	f200 80af 	bhi.w	800283e <motor_esc__steer_handler+0x33a>
 80026e0:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <motor_esc__steer_handler+0x1e4>)
 80026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e6:	bf00      	nop
 80026e8:	080027b3 	.word	0x080027b3
 80026ec:	080027c1 	.word	0x080027c1
 80026f0:	080027cf 	.word	0x080027cf
 80026f4:	080027dd 	.word	0x080027dd
 80026f8:	080027eb 	.word	0x080027eb
 80026fc:	080027f9 	.word	0x080027f9
 8002700:	08002807 	.word	0x08002807
 8002704:	08002815 	.word	0x08002815
 8002708:	08002823 	.word	0x08002823
 800270c:	08002735 	.word	0x08002735
 8002710:	08002743 	.word	0x08002743
 8002714:	08002751 	.word	0x08002751
 8002718:	0800275f 	.word	0x0800275f
 800271c:	0800276d 	.word	0x0800276d
 8002720:	0800277b 	.word	0x0800277b
 8002724:	08002789 	.word	0x08002789
 8002728:	08002797 	.word	0x08002797
 800272c:	080027a5 	.word	0x080027a5
 8002730:	08002831 	.word	0x08002831
  case LEFT_1:
    motor_esc__set_steer_angle(PWM_LEFT_1);
 8002734:	eef2 7a06 	vmov.f32	s15, #38	; 0x41300000  11.0
 8002738:	eeb0 0a67 	vmov.f32	s0, s15
 800273c:	f000 f88e 	bl	800285c <motor_esc__set_steer_angle>
    break;
 8002740:	e07e      	b.n	8002840 <motor_esc__steer_handler+0x33c>

  case LEFT_2:
    motor_esc__set_steer_angle(PWM_LEFT_2);
 8002742:	eef2 7a07 	vmov.f32	s15, #39	; 0x41380000  11.5
 8002746:	eeb0 0a67 	vmov.f32	s0, s15
 800274a:	f000 f887 	bl	800285c <motor_esc__set_steer_angle>
    break;
 800274e:	e077      	b.n	8002840 <motor_esc__steer_handler+0x33c>

  case LEFT_3:
    motor_esc__set_steer_angle(PWM_LEFT_3);
 8002750:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 8002754:	eeb0 0a67 	vmov.f32	s0, s15
 8002758:	f000 f880 	bl	800285c <motor_esc__set_steer_angle>
    break;
 800275c:	e070      	b.n	8002840 <motor_esc__steer_handler+0x33c>

  case LEFT_4:
    motor_esc__set_steer_angle(PWM_LEFT_4);
 800275e:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	f000 f879 	bl	800285c <motor_esc__set_steer_angle>
    break;
 800276a:	e069      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case LEFT_5:
    motor_esc__set_steer_angle(PWM_LEFT_5);
 800276c:	eef2 7a0a 	vmov.f32	s15, #42	; 0x41500000  13.0
 8002770:	eeb0 0a67 	vmov.f32	s0, s15
 8002774:	f000 f872 	bl	800285c <motor_esc__set_steer_angle>
    break;
 8002778:	e062      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case LEFT_6:
    motor_esc__set_steer_angle(PWM_LEFT_6);
 800277a:	eef2 7a0b 	vmov.f32	s15, #43	; 0x41580000  13.5
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	f000 f86b 	bl	800285c <motor_esc__set_steer_angle>
    break;
 8002786:	e05b      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case LEFT_7:
    motor_esc__set_steer_angle(PWM_LEFT_7);
 8002788:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
 800278c:	eeb0 0a67 	vmov.f32	s0, s15
 8002790:	f000 f864 	bl	800285c <motor_esc__set_steer_angle>
    break;
 8002794:	e054      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case LEFT_8:
    motor_esc__set_steer_angle(PWM_LEFT_8);
 8002796:	eef2 7a0d 	vmov.f32	s15, #45	; 0x41680000  14.5
 800279a:	eeb0 0a67 	vmov.f32	s0, s15
 800279e:	f000 f85d 	bl	800285c <motor_esc__set_steer_angle>
    break;
 80027a2:	e04d      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case LEFT_9:
    motor_esc__set_steer_angle(PWM_LEFT_9);
 80027a4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002848 <motor_esc__steer_handler+0x344>
 80027a8:	eeb0 0a67 	vmov.f32	s0, s15
 80027ac:	f000 f856 	bl	800285c <motor_esc__set_steer_angle>
    break;
 80027b0:	e046      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case RIGHT_1:
    motor_esc__set_steer_angle(PWM_RIGHT_1);
 80027b2:	eef3 7a03 	vmov.f32	s15, #51	; 0x41980000  19.0
 80027b6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ba:	f000 f84f 	bl	800285c <motor_esc__set_steer_angle>

    break;
 80027be:	e03f      	b.n	8002840 <motor_esc__steer_handler+0x33c>

  case RIGHT_2:
    motor_esc__set_steer_angle(PWM_RIGHT_2);
 80027c0:	eddf 7a22 	vldr	s15, [pc, #136]	; 800284c <motor_esc__steer_handler+0x348>
 80027c4:	eeb0 0a67 	vmov.f32	s0, s15
 80027c8:	f000 f848 	bl	800285c <motor_esc__set_steer_angle>
    break;
 80027cc:	e038      	b.n	8002840 <motor_esc__steer_handler+0x33c>

  case RIGHT_3:
    motor_esc__set_steer_angle(PWM_RIGHT_3);
 80027ce:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 80027d2:	eeb0 0a67 	vmov.f32	s0, s15
 80027d6:	f000 f841 	bl	800285c <motor_esc__set_steer_angle>
    break;
 80027da:	e031      	b.n	8002840 <motor_esc__steer_handler+0x33c>

  case RIGHT_4:
    motor_esc__set_steer_angle(PWM_RIGHT_4);
 80027dc:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002850 <motor_esc__steer_handler+0x34c>
 80027e0:	eeb0 0a67 	vmov.f32	s0, s15
 80027e4:	f000 f83a 	bl	800285c <motor_esc__set_steer_angle>
    break;
 80027e8:	e02a      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case RIGHT_5:
    motor_esc__set_steer_angle(PWM_RIGHT_5);
 80027ea:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 80027ee:	eeb0 0a67 	vmov.f32	s0, s15
 80027f2:	f000 f833 	bl	800285c <motor_esc__set_steer_angle>
    break;
 80027f6:	e023      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case RIGHT_6:
    motor_esc__set_steer_angle(PWM_RIGHT_6);
 80027f8:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002854 <motor_esc__steer_handler+0x350>
 80027fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002800:	f000 f82c 	bl	800285c <motor_esc__set_steer_angle>
    break;
 8002804:	e01c      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case RIGHT_7:
    motor_esc__set_steer_angle(PWM_RIGHT_7);
 8002806:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 800280a:	eeb0 0a67 	vmov.f32	s0, s15
 800280e:	f000 f825 	bl	800285c <motor_esc__set_steer_angle>
    break;
 8002812:	e015      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case RIGHT_8:
    motor_esc__set_steer_angle(PWM_RIGHT_8);
 8002814:	eef2 7a0f 	vmov.f32	s15, #47	; 0x41780000  15.5
 8002818:	eeb0 0a67 	vmov.f32	s0, s15
 800281c:	f000 f81e 	bl	800285c <motor_esc__set_steer_angle>
    break;
 8002820:	e00e      	b.n	8002840 <motor_esc__steer_handler+0x33c>
  case RIGHT_9:
    motor_esc__set_steer_angle(PWM_RIGHT_9);
 8002822:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002858 <motor_esc__steer_handler+0x354>
 8002826:	eeb0 0a67 	vmov.f32	s0, s15
 800282a:	f000 f817 	bl	800285c <motor_esc__set_steer_angle>
    break;
 800282e:	e007      	b.n	8002840 <motor_esc__steer_handler+0x33c>

  case STRAIGHT:
    motor_esc__set_steer_angle(PWM_STRAIGHT);
 8002830:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8002834:	eeb0 0a67 	vmov.f32	s0, s15
 8002838:	f000 f810 	bl	800285c <motor_esc__set_steer_angle>
    break;
 800283c:	e000      	b.n	8002840 <motor_esc__steer_handler+0x33c>

  default:
    break;
 800283e:	bf00      	nop
  }
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	416ccccd 	.word	0x416ccccd
 800284c:	41940000 	.word	0x41940000
 8002850:	418c0000 	.word	0x418c0000
 8002854:	41840000 	.word	0x41840000
 8002858:	41733333 	.word	0x41733333

0800285c <motor_esc__set_steer_angle>:
float get_dc_motor_pwm() { return calculated_pwm_dc; }

float get_servo_motor_pwm() { return steer_pwm_val; }

// Private Functions
static void motor_esc__set_steer_angle(float servo_pwm_val) {
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	ed87 0a01 	vstr	s0, [r7, #4]
  //  fprintf(stderr, " Current pwm val on servo : %f", steer_pwm_val);
  steer_pwm_val = 5;//servo_pwm_val;
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <motor_esc__set_steer_angle+0x30>)
 8002868:	4a09      	ldr	r2, [pc, #36]	; (8002890 <motor_esc__set_steer_angle+0x34>)
 800286a:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, servo_pwm_val);  //Set Servo Duty cycle
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <motor_esc__set_steer_angle+0x38>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	edd7 7a01 	vldr	s15, [r7, #4]
 8002874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002878:	ee17 2a90 	vmov	r2, s15
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000358 	.word	0x20000358
 8002890:	40a00000 	.word	0x40a00000
 8002894:	2000885c 	.word	0x2000885c

08002898 <motor_esc__set_motor_speed>:

static void motor_esc__set_motor_speed(float motor_speed) {
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	ed87 0a01 	vstr	s0, [r7, #4]
  calculated_pwm_dc = motor_speed;
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <motor_esc__set_motor_speed+0x30>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6013      	str	r3, [r2, #0]
//  if (boost_pwm && (motor_speed > 15.7f)) {
//    motor_speed = motor_speed + 0.25;
//    boost_pwm = false;
//  }
  // Pin Congiguration: PA 6
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motor_speed);  //Set DC motor Duty cycle
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <motor_esc__set_motor_speed+0x34>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80028b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b4:	ee17 2a90 	vmov	r2, s15
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000004 	.word	0x20000004
 80028cc:	20008624 	.word	0x20008624

080028d0 <periodic_callbacks__initialize>:
/******************************************************************************
 * Your board will reset if the periodic function does not return within its deadline
 * For 1Hz, the function must return within 1000ms
 * For 1000Hz, the function must return within 1ms
 */
void periodic_callbacks__initialize(void) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  // This method is invoked once when the periodic tasks are created
	motor_esc__control_speed(5);
 80028d4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80028d8:	f7ff fe06 	bl	80024e8 <motor_esc__control_speed>
	motor_esc__steer_handler(43);
 80028dc:	202b      	movs	r0, #43	; 0x2b
 80028de:	f7ff fe11 	bl	8002504 <motor_esc__steer_handler>
	sens_val_conv__buffer_init();
 80028e2:	f000 fa9b 	bl	8002e1c <sens_val_conv__buffer_init>
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}

080028ea <periodic_callbacks__1Hz>:

bool flag = true;
void periodic_callbacks__1Hz(uint32_t callback_count) {
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
//	flag = false;
//	}else {
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
//	flag = true;
//	}
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <periodic_callbacks__10Hz>:

void periodic_callbacks__10Hz(uint32_t callback_count) {
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]

}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <periodic_callbacks__100Hz>:

char buff[100] = "";
void periodic_callbacks__100Hz(uint32_t callback_count) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af02      	add	r7, sp, #8
 800291a:	6078      	str	r0, [r7, #4]
	  volatile static int chance = 0;
	  uint16_t current_adc_value_front = 0, current_adc_value_left = 0, current_adc_value_right = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	82fb      	strh	r3, [r7, #22]
 8002920:	2300      	movs	r3, #0
 8002922:	82bb      	strh	r3, [r7, #20]
 8002924:	2300      	movs	r3, #0
 8002926:	827b      	strh	r3, [r7, #18]
	  uint16_t SENSOR_SONARS_left = 0, SENSOR_SONARS_middle = 0, SENSOR_SONARS_right = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	823b      	strh	r3, [r7, #16]
 800292c:	2300      	movs	r3, #0
 800292e:	81fb      	strh	r3, [r7, #14]
 8002930:	2300      	movs	r3, #0
 8002932:	81bb      	strh	r3, [r7, #12]
	  if (callback_count % 5 == 0) {
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <periodic_callbacks__100Hz+0x118>)
 8002938:	fba3 2301 	umull	r2, r3, r3, r1
 800293c:	089a      	lsrs	r2, r3, #2
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	1aca      	subs	r2, r1, r3
 8002946:	2a00      	cmp	r2, #0
 8002948:	d132      	bne.n	80029b0 <periodic_callbacks__100Hz+0x9c>
	    if (chance == 0) {
 800294a:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <periodic_callbacks__100Hz+0x11c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <periodic_callbacks__100Hz+0x44>

	      sensor_node__trigger_Front_ultrasonic();
 8002952:	f000 f99d 	bl	8002c90 <sensor_node__trigger_Front_ultrasonic>
 8002956:	e007      	b.n	8002968 <periodic_callbacks__100Hz+0x54>
	    } else if (chance == 1) {
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <periodic_callbacks__100Hz+0x11c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d103      	bne.n	8002968 <periodic_callbacks__100Hz+0x54>
//
	      sensor_node__trigger_Left_ultrasonic();
 8002960:	f000 f9ac 	bl	8002cbc <sensor_node__trigger_Left_ultrasonic>
	      sensor_node__trigger_Right_ultrasonic();
 8002964:	f000 f9c0 	bl	8002ce8 <sensor_node__trigger_Right_ultrasonic>
	    }
	    SENSOR_SONARS_left = sens_val_conv__get_filtered_val_in_cm(LEFT_SENSOR);
 8002968:	2001      	movs	r0, #1
 800296a:	f000 faa9 	bl	8002ec0 <sens_val_conv__get_filtered_val_in_cm>
 800296e:	4603      	mov	r3, r0
 8002970:	823b      	strh	r3, [r7, #16]
	    SENSOR_SONARS_middle = sens_val_conv__get_filtered_val_in_cm(FRONT_SENSOR);
 8002972:	2000      	movs	r0, #0
 8002974:	f000 faa4 	bl	8002ec0 <sens_val_conv__get_filtered_val_in_cm>
 8002978:	4603      	mov	r3, r0
 800297a:	81fb      	strh	r3, [r7, #14]
	    SENSOR_SONARS_right = sens_val_conv__get_filtered_val_in_cm(RIGHT_SENSOR);
 800297c:	2002      	movs	r0, #2
 800297e:	f000 fa9f 	bl	8002ec0 <sens_val_conv__get_filtered_val_in_cm>
 8002982:	4603      	mov	r3, r0
 8002984:	81bb      	strh	r3, [r7, #12]
	    sprintf(buff, "front ADC value %d   left ADC value %d   Right ADC value %d\r\n", SENSOR_SONARS_middle, SENSOR_SONARS_left, SENSOR_SONARS_right);
 8002986:	89fa      	ldrh	r2, [r7, #14]
 8002988:	8a39      	ldrh	r1, [r7, #16]
 800298a:	89bb      	ldrh	r3, [r7, #12]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	460b      	mov	r3, r1
 8002990:	4928      	ldr	r1, [pc, #160]	; (8002a34 <periodic_callbacks__100Hz+0x120>)
 8002992:	4829      	ldr	r0, [pc, #164]	; (8002a38 <periodic_callbacks__100Hz+0x124>)
 8002994:	f00c fb4e 	bl	800f034 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
 8002998:	4827      	ldr	r0, [pc, #156]	; (8002a38 <periodic_callbacks__100Hz+0x124>)
 800299a:	f7fd fc29 	bl	80001f0 <strlen>
 800299e:	4603      	mov	r3, r0
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	4924      	ldr	r1, [pc, #144]	; (8002a38 <periodic_callbacks__100Hz+0x124>)
 80029a8:	4824      	ldr	r0, [pc, #144]	; (8002a3c <periodic_callbacks__100Hz+0x128>)
 80029aa:	f005 fc7e 	bl	80082aa <HAL_UART_Transmit>
//	    sens_val_conv__update_buffer(REAR_SENSOR, current_adc_value4);
//	    sens_val_conv__set_rear_sens(current_adc_value4);
	      //current_adc_value++;

	  }
}
 80029ae:	e039      	b.n	8002a24 <periodic_callbacks__100Hz+0x110>
	  } else if (callback_count % 5 == 4) {
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <periodic_callbacks__100Hz+0x118>)
 80029b4:	fba3 2301 	umull	r2, r3, r3, r1
 80029b8:	089a      	lsrs	r2, r3, #2
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	1aca      	subs	r2, r1, r3
 80029c2:	2a04      	cmp	r2, #4
 80029c4:	d12e      	bne.n	8002a24 <periodic_callbacks__100Hz+0x110>
	    if (chance == 0) {
 80029c6:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <periodic_callbacks__100Hz+0x11c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <periodic_callbacks__100Hz+0xda>
	    	current_adc_value_front = sens_val_conv__get_sens_val_in_cm(FRONT_SENSOR);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f000 fa9a 	bl	8002f08 <sens_val_conv__get_sens_val_in_cm>
 80029d4:	4603      	mov	r3, r0
 80029d6:	82fb      	strh	r3, [r7, #22]
	      sens_val_conv__update_buffer(FRONT_SENSOR, current_adc_value_front);
 80029d8:	8afb      	ldrh	r3, [r7, #22]
 80029da:	4619      	mov	r1, r3
 80029dc:	2000      	movs	r0, #0
 80029de:	f000 fa41 	bl	8002e64 <sens_val_conv__update_buffer>
	      chance++;
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <periodic_callbacks__100Hz+0x11c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <periodic_callbacks__100Hz+0x11c>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	e01a      	b.n	8002a24 <periodic_callbacks__100Hz+0x110>
	    } else if (chance == 1) {
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <periodic_callbacks__100Hz+0x11c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d116      	bne.n	8002a24 <periodic_callbacks__100Hz+0x110>
	      current_adc_value_left = sens_val_conv__get_sens_val_in_cm(LEFT_SENSOR);
 80029f6:	2001      	movs	r0, #1
 80029f8:	f000 fa86 	bl	8002f08 <sens_val_conv__get_sens_val_in_cm>
 80029fc:	4603      	mov	r3, r0
 80029fe:	82bb      	strh	r3, [r7, #20]
	      sens_val_conv__update_buffer(LEFT_SENSOR, current_adc_value_left);
 8002a00:	8abb      	ldrh	r3, [r7, #20]
 8002a02:	4619      	mov	r1, r3
 8002a04:	2001      	movs	r0, #1
 8002a06:	f000 fa2d 	bl	8002e64 <sens_val_conv__update_buffer>
	      current_adc_value_right = sens_val_conv__get_sens_val_in_cm(RIGHT_SENSOR);
 8002a0a:	2002      	movs	r0, #2
 8002a0c:	f000 fa7c 	bl	8002f08 <sens_val_conv__get_sens_val_in_cm>
 8002a10:	4603      	mov	r3, r0
 8002a12:	827b      	strh	r3, [r7, #18]
	      sens_val_conv__update_buffer(RIGHT_SENSOR, current_adc_value_right);
 8002a14:	8a7b      	ldrh	r3, [r7, #18]
 8002a16:	4619      	mov	r1, r3
 8002a18:	2002      	movs	r0, #2
 8002a1a:	f000 fa23 	bl	8002e64 <sens_val_conv__update_buffer>
	      chance = 0;
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <periodic_callbacks__100Hz+0x11c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
}
 8002a24:	bf00      	nop
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	cccccccd 	.word	0xcccccccd
 8002a30:	200003c0 	.word	0x200003c0
 8002a34:	0800f740 	.word	0x0800f740
 8002a38:	2000035c 	.word	0x2000035c
 8002a3c:	2000879c 	.word	0x2000879c

08002a40 <periodic_callbacks__1000Hz>:
/**
 * @warning
 * This is a very fast 1ms task and care must be taken to use this
 * This may be disabled based on intialization of periodic_scheduler__initialize()
 */
void periodic_callbacks__1000Hz(uint32_t callback_count) {}
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <periodic_scheduler__run>:
static periodic_scheduler_s periodic_scheduler__1000Hz = {1, periodic_callbacks__1000Hz};

static bool periodic_scheduler__run_1000hz;

/// Common task runner for each periodic task
static void periodic_scheduler__run(periodic_scheduler_s *periodic) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  TickType_t previous_tick = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  uint32_t callback_counter = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]

  // Note: the order of the while loop's logic is critical; change with care
  while (true) {
    periodic->callback(callback_counter);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	4798      	blx	r3
    ++callback_counter;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
    periodic->task_finished_flag = true;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	731a      	strb	r2, [r3, #12]

    vTaskDelayUntil(&previous_tick, periodic->task_delay_in_ticks);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	f107 0308 	add.w	r3, r7, #8
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f00a fb12 	bl	800d0ac <vTaskDelayUntil>
    periodic->callback(callback_counter);
 8002a88:	e7ec      	b.n	8002a64 <periodic_scheduler__run+0x10>
	...

08002a8c <periodic_scheduler__1Hz_task>:
  }
}

static void periodic_scheduler__1Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__1Hz); }
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	4803      	ldr	r0, [pc, #12]	; (8002aa4 <periodic_scheduler__1Hz_task+0x18>)
 8002a96:	f7ff ffdd 	bl	8002a54 <periodic_scheduler__run>
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000008 	.word	0x20000008

08002aa8 <periodic_scheduler__10Hz_task>:
static void periodic_scheduler__10Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__10Hz); }
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <periodic_scheduler__10Hz_task+0x18>)
 8002ab2:	f7ff ffcf 	bl	8002a54 <periodic_scheduler__run>
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000018 	.word	0x20000018

08002ac4 <periodic_scheduler__100Hz_task>:
static void periodic_scheduler__100Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__100Hz); }
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	4803      	ldr	r0, [pc, #12]	; (8002adc <periodic_scheduler__100Hz_task+0x18>)
 8002ace:	f7ff ffc1 	bl	8002a54 <periodic_scheduler__run>
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000028 	.word	0x20000028

08002ae0 <periodic_scheduler__1000Hz_task>:
static void periodic_scheduler__1000Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__1000Hz); }
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	4803      	ldr	r0, [pc, #12]	; (8002af8 <periodic_scheduler__1000Hz_task+0x18>)
 8002aea:	f7ff ffb3 	bl	8002a54 <periodic_scheduler__run>
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000038 	.word	0x20000038

08002afc <periodic_scheduler__check_flag>:

static void periodic_scheduler__check_flag(periodic_scheduler_s *periodic_task, TickType_t tick_delay) {
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  periodic_task->ticks_elapsed += tick_delay;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	609a      	str	r2, [r3, #8]

  if (periodic_task->ticks_elapsed >= periodic_task->task_delay_in_ticks) {
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d30a      	bcc.n	8002b34 <periodic_scheduler__check_flag+0x38>
    periodic_task->ticks_elapsed = 0;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]

    if (periodic_task->task_finished_flag) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	7b1b      	ldrb	r3, [r3, #12]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <periodic_scheduler__check_flag+0x38>
      periodic_task->task_finished_flag = false;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	731a      	strb	r2, [r3, #12]
    } else {
    	// TODO:: Check how to do system reset here
      //NVIC_SystemReset();
    }
  }
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <periodic_scheduler__task_monitor>:
static void periodic_scheduler__task_monitor(void *param) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  const TickType_t tick_delay = periodic_scheduler__run_1000hz ? 1 : 10;
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <periodic_scheduler__task_monitor+0x48>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <periodic_scheduler__task_monitor+0x14>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <periodic_scheduler__task_monitor+0x16>
 8002b54:	230a      	movs	r3, #10
 8002b56:	60fb      	str	r3, [r7, #12]

  // We let all the other tasks run first, and then check their flags
  while (true) {
    vTaskDelay(tick_delay);
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f00a fb25 	bl	800d1a8 <vTaskDelay>

    if (periodic_scheduler__run_1000hz) {
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <periodic_scheduler__task_monitor+0x48>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <periodic_scheduler__task_monitor+0x2e>
      periodic_scheduler__check_flag(&periodic_scheduler__1000Hz, tick_delay);
 8002b66:	68f9      	ldr	r1, [r7, #12]
 8002b68:	4808      	ldr	r0, [pc, #32]	; (8002b8c <periodic_scheduler__task_monitor+0x4c>)
 8002b6a:	f7ff ffc7 	bl	8002afc <periodic_scheduler__check_flag>
    }

    periodic_scheduler__check_flag(&periodic_scheduler__100Hz, tick_delay);
 8002b6e:	68f9      	ldr	r1, [r7, #12]
 8002b70:	4807      	ldr	r0, [pc, #28]	; (8002b90 <periodic_scheduler__task_monitor+0x50>)
 8002b72:	f7ff ffc3 	bl	8002afc <periodic_scheduler__check_flag>
    periodic_scheduler__check_flag(&periodic_scheduler__10Hz, tick_delay);
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	4806      	ldr	r0, [pc, #24]	; (8002b94 <periodic_scheduler__task_monitor+0x54>)
 8002b7a:	f7ff ffbf 	bl	8002afc <periodic_scheduler__check_flag>
    periodic_scheduler__check_flag(&periodic_scheduler__1Hz, tick_delay);
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	4805      	ldr	r0, [pc, #20]	; (8002b98 <periodic_scheduler__task_monitor+0x58>)
 8002b82:	f7ff ffbb 	bl	8002afc <periodic_scheduler__check_flag>
    vTaskDelay(tick_delay);
 8002b86:	e7e7      	b.n	8002b58 <periodic_scheduler__task_monitor+0x18>
 8002b88:	200003c4 	.word	0x200003c4
 8002b8c:	20000038 	.word	0x20000038
 8002b90:	20000028 	.word	0x20000028
 8002b94:	20000018 	.word	0x20000018
 8002b98:	20000008 	.word	0x20000008

08002b9c <periodic_scheduler__initialize>:
  }
}

void periodic_scheduler__initialize(uint32_t task_stack_size, bool run_1000hz) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  xTaskCreate(periodic_scheduler__1Hz_task, "1Hz", task_stack_size, NULL, PRIORITY_PERIODIC_1HZ, NULL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	2300      	movs	r3, #0
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	2305      	movs	r3, #5
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	491e      	ldr	r1, [pc, #120]	; (8002c30 <periodic_scheduler__initialize+0x94>)
 8002bb8:	481e      	ldr	r0, [pc, #120]	; (8002c34 <periodic_scheduler__initialize+0x98>)
 8002bba:	f00a f936 	bl	800ce2a <xTaskCreate>
  xTaskCreate(periodic_scheduler__10Hz_task, "10Hz", task_stack_size, NULL, PRIORITY_PERIODIC_10HZ, NULL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	491a      	ldr	r1, [pc, #104]	; (8002c38 <periodic_scheduler__initialize+0x9c>)
 8002bce:	481b      	ldr	r0, [pc, #108]	; (8002c3c <periodic_scheduler__initialize+0xa0>)
 8002bd0:	f00a f92b 	bl	800ce2a <xTaskCreate>
  xTaskCreate(periodic_scheduler__100Hz_task, "100Hz", task_stack_size, NULL, PRIORITY_PERIODIC_100HZ, NULL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2307      	movs	r3, #7
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2300      	movs	r3, #0
 8002be2:	4917      	ldr	r1, [pc, #92]	; (8002c40 <periodic_scheduler__initialize+0xa4>)
 8002be4:	4817      	ldr	r0, [pc, #92]	; (8002c44 <periodic_scheduler__initialize+0xa8>)
 8002be6:	f00a f920 	bl	800ce2a <xTaskCreate>

  // Only create the 1Khz task if enabled
  periodic_scheduler__run_1000hz = run_1000hz;
 8002bea:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <periodic_scheduler__initialize+0xac>)
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	7013      	strb	r3, [r2, #0]
  if (periodic_scheduler__run_1000hz) {
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <periodic_scheduler__initialize+0xac>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <periodic_scheduler__initialize+0x72>
    xTaskCreate(periodic_scheduler__1000Hz_task, "1000Hz", task_stack_size, NULL, PRIORITY_PERIODIC_1000HZ, NULL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	2308      	movs	r3, #8
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2300      	movs	r3, #0
 8002c06:	4911      	ldr	r1, [pc, #68]	; (8002c4c <periodic_scheduler__initialize+0xb0>)
 8002c08:	4811      	ldr	r0, [pc, #68]	; (8002c50 <periodic_scheduler__initialize+0xb4>)
 8002c0a:	f00a f90e 	bl	800ce2a <xTaskCreate>
  }

  xTaskCreate(periodic_scheduler__task_monitor, "Hz_wdt", task_stack_size, NULL, PRIORITY_PERIODIC_MONITOR, NULL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	2309      	movs	r3, #9
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	490d      	ldr	r1, [pc, #52]	; (8002c54 <periodic_scheduler__initialize+0xb8>)
 8002c1e:	480e      	ldr	r0, [pc, #56]	; (8002c58 <periodic_scheduler__initialize+0xbc>)
 8002c20:	f00a f903 	bl	800ce2a <xTaskCreate>

  periodic_callbacks__initialize();
 8002c24:	f7ff fe54 	bl	80028d0 <periodic_callbacks__initialize>
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	0800f780 	.word	0x0800f780
 8002c34:	08002a8d 	.word	0x08002a8d
 8002c38:	0800f784 	.word	0x0800f784
 8002c3c:	08002aa9 	.word	0x08002aa9
 8002c40:	0800f78c 	.word	0x0800f78c
 8002c44:	08002ac5 	.word	0x08002ac5
 8002c48:	200003c4 	.word	0x200003c4
 8002c4c:	0800f794 	.word	0x0800f794
 8002c50:	08002ae1 	.word	0x08002ae1
 8002c54:	0800f79c 	.word	0x0800f79c
 8002c58:	08002b41 	.word	0x08002b41

08002c5c <delay__us>:
/****************************************************************************************
 **************************** P U B L I C    F U N C T I O N S **************************
 ****************************************************************************************/

void delay__us (uint16_t us)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <delay__us+0x30>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002c6e:	bf00      	nop
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <delay__us+0x30>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3f9      	bcc.n	8002c70 <delay__us+0x14>
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	200087dc 	.word	0x200087dc

08002c90 <sensor_node__trigger_Front_ultrasonic>:

bool toggle = true;
void sensor_node__trigger_Front_ultrasonic(void) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2104      	movs	r1, #4
 8002c98:	4807      	ldr	r0, [pc, #28]	; (8002cb8 <sensor_node__trigger_Front_ultrasonic+0x28>)
 8002c9a:	f001 fa41 	bl	8004120 <HAL_GPIO_WritePin>
	delay__us(trigger_delay_time);
 8002c9e:	231e      	movs	r3, #30
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ffda 	bl	8002c5c <delay__us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8002ca8:	2201      	movs	r2, #1
 8002caa:	2104      	movs	r1, #4
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <sensor_node__trigger_Front_ultrasonic+0x28>)
 8002cae:	f001 fa37 	bl	8004120 <HAL_GPIO_WritePin>
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000

08002cbc <sensor_node__trigger_Left_ultrasonic>:

void sensor_node__trigger_Left_ultrasonic(void) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2108      	movs	r1, #8
 8002cc4:	4807      	ldr	r0, [pc, #28]	; (8002ce4 <sensor_node__trigger_Left_ultrasonic+0x28>)
 8002cc6:	f001 fa2b 	bl	8004120 <HAL_GPIO_WritePin>
	delay__us(trigger_delay_time);
 8002cca:	231e      	movs	r3, #30
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ffc4 	bl	8002c5c <delay__us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2108      	movs	r1, #8
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <sensor_node__trigger_Left_ultrasonic+0x28>)
 8002cda:	f001 fa21 	bl	8004120 <HAL_GPIO_WritePin>
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000

08002ce8 <sensor_node__trigger_Right_ultrasonic>:

void sensor_node__trigger_Right_ultrasonic(void) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2110      	movs	r1, #16
 8002cf0:	4807      	ldr	r0, [pc, #28]	; (8002d10 <sensor_node__trigger_Right_ultrasonic+0x28>)
 8002cf2:	f001 fa15 	bl	8004120 <HAL_GPIO_WritePin>
	delay__us(trigger_delay_time);
 8002cf6:	231e      	movs	r3, #30
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ffae 	bl	8002c5c <delay__us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8002d00:	2201      	movs	r2, #1
 8002d02:	2110      	movs	r1, #16
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <sensor_node__trigger_Right_ultrasonic+0x28>)
 8002d06:	f001 fa0b 	bl	8004120 <HAL_GPIO_WritePin>
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000

08002d14 <sensor_config__read_sens_raw_value>:
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
//	delay__us(trigger_delay_time);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
}

uint32_t sensor_config__read_sens_raw_value(sensor_index current_sensor) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  switch (current_sensor) {
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d020      	beq.n	8002d66 <sensor_config__read_sens_raw_value+0x52>
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	dc2b      	bgt.n	8002d80 <sensor_config__read_sens_raw_value+0x6c>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <sensor_config__read_sens_raw_value+0x1e>
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d00d      	beq.n	8002d4c <sensor_config__read_sens_raw_value+0x38>
 8002d30:	e026      	b.n	8002d80 <sensor_config__read_sens_raw_value+0x6c>
  case FRONT_SENSOR:
	  HAL_ADC_Start(&hadc1);
 8002d32:	4816      	ldr	r0, [pc, #88]	; (8002d8c <sensor_config__read_sens_raw_value+0x78>)
 8002d34:	f000 f9d8 	bl	80030e8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	4813      	ldr	r0, [pc, #76]	; (8002d8c <sensor_config__read_sens_raw_value+0x78>)
 8002d3e:	f000 fa99 	bl	8003274 <HAL_ADC_PollForConversion>
	  return HAL_ADC_GetValue(&hadc1);
 8002d42:	4812      	ldr	r0, [pc, #72]	; (8002d8c <sensor_config__read_sens_raw_value+0x78>)
 8002d44:	f000 fb1a 	bl	800337c <HAL_ADC_GetValue>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	e01b      	b.n	8002d84 <sensor_config__read_sens_raw_value+0x70>

  case LEFT_SENSOR:
	  HAL_ADC_Start(&hadc2);
 8002d4c:	4810      	ldr	r0, [pc, #64]	; (8002d90 <sensor_config__read_sens_raw_value+0x7c>)
 8002d4e:	f000 f9cb 	bl	80030e8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8002d52:	f04f 31ff 	mov.w	r1, #4294967295
 8002d56:	480e      	ldr	r0, [pc, #56]	; (8002d90 <sensor_config__read_sens_raw_value+0x7c>)
 8002d58:	f000 fa8c 	bl	8003274 <HAL_ADC_PollForConversion>
	  return HAL_ADC_GetValue(&hadc2);
 8002d5c:	480c      	ldr	r0, [pc, #48]	; (8002d90 <sensor_config__read_sens_raw_value+0x7c>)
 8002d5e:	f000 fb0d 	bl	800337c <HAL_ADC_GetValue>
 8002d62:	4603      	mov	r3, r0
 8002d64:	e00e      	b.n	8002d84 <sensor_config__read_sens_raw_value+0x70>

  case RIGHT_SENSOR:
	  HAL_ADC_Start(&hadc3);
 8002d66:	480b      	ldr	r0, [pc, #44]	; (8002d94 <sensor_config__read_sens_raw_value+0x80>)
 8002d68:	f000 f9be 	bl	80030e8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8002d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d70:	4808      	ldr	r0, [pc, #32]	; (8002d94 <sensor_config__read_sens_raw_value+0x80>)
 8002d72:	f000 fa7f 	bl	8003274 <HAL_ADC_PollForConversion>
	  return HAL_ADC_GetValue(&hadc3);
 8002d76:	4807      	ldr	r0, [pc, #28]	; (8002d94 <sensor_config__read_sens_raw_value+0x80>)
 8002d78:	f000 fb00 	bl	800337c <HAL_ADC_GetValue>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	e001      	b.n	8002d84 <sensor_config__read_sens_raw_value+0x70>

//  case REAR_SENSOR:
//    return adc__get_adc_value(rear_sensor_adc_channel);

  default:
    return -1;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	2000870c 	.word	0x2000870c
 8002d90:	200085d4 	.word	0x200085d4
 8002d94:	20008754 	.word	0x20008754

08002d98 <compare>:

sens_val_buff sens_data_buff[MAX_SENSOR];
static const uint16_t buffer_size = 10;
static const uint16_t filter_sample_count = 7;

static int compare(const void *p1, const void *p2) { return (*(sensValType_t *)p1 - *(sensValType_t *)p2); }
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <calc_avg_of_median_samples_in_buffer>:

// NOTE: sample count should be odd number always
static sensValType_t calc_avg_of_median_samples_in_buffer(uint16_t *arr, size_t odd_sample_count) {
 8002dba:	b480      	push	{r7}
 8002dbc:	b087      	sub	sp, #28
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
  int median_index = buffer_size / 2 - 1;
 8002dc4:	230a      	movs	r3, #10
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
  int index_offset = odd_sample_count / 2;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
  sensValType_t result = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	82fb      	strh	r3, [r7, #22]
  for (int i = (median_index - index_offset); i <= (median_index + index_offset); i++) {
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	e00a      	b.n	8002df8 <calc_avg_of_median_samples_in_buffer+0x3e>
    result += arr[i];
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	881a      	ldrh	r2, [r3, #0]
 8002dec:	8afb      	ldrh	r3, [r7, #22]
 8002dee:	4413      	add	r3, r2
 8002df0:	82fb      	strh	r3, [r7, #22]
  for (int i = (median_index - index_offset); i <= (median_index + index_offset); i++) {
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	3301      	adds	r3, #1
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	ddee      	ble.n	8002de2 <calc_avg_of_median_samples_in_buffer+0x28>
  }
  return result / odd_sample_count;
 8002e04:	8afa      	ldrh	r2, [r7, #22]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	b29b      	uxth	r3, r3
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <sens_val_conv__buffer_init>:

void sens_val_conv__buffer_init(void) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
  for (int i = 0; i < MAX_SENSOR; i++) {
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	e013      	b.n	8002e50 <sens_val_conv__buffer_init+0x34>
    sens_data_buff[i].buff = calloc(buffer_size, sizeof(sensValType_t));
 8002e28:	230a      	movs	r3, #10
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f00b fe55 	bl	800eadc <calloc>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4619      	mov	r1, r3
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <sens_val_conv__buffer_init+0x44>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    sens_data_buff[i].current_pointer = 0;
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <sens_val_conv__buffer_init+0x44>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	2200      	movs	r2, #0
 8002e48:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < MAX_SENSOR; i++) {
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	dde8      	ble.n	8002e28 <sens_val_conv__buffer_init+0xc>
  }
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20008910 	.word	0x20008910

08002e64 <sens_val_conv__update_buffer>:

void sens_val_conv__update_buffer(sensor_index current_sen, const sensValType_t current_val) {
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	460a      	mov	r2, r1
 8002e6e:	71fb      	strb	r3, [r7, #7]
 8002e70:	4613      	mov	r3, r2
 8002e72:	80bb      	strh	r3, [r7, #4]
  sens_data_buff[current_sen].buff[sens_data_buff[current_sen].current_pointer] = current_val;
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <sens_val_conv__update_buffer+0x58>)
 8002e78:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	490f      	ldr	r1, [pc, #60]	; (8002ebc <sens_val_conv__update_buffer+0x58>)
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	440b      	add	r3, r1
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	88ba      	ldrh	r2, [r7, #4]
 8002e8c:	801a      	strh	r2, [r3, #0]

  sens_data_buff[current_sen].current_pointer = (sens_data_buff[current_sen].current_pointer + 1) % buffer_size;
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <sens_val_conv__update_buffer+0x58>)
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	220a      	movs	r2, #10
 8002e9c:	79f9      	ldrb	r1, [r7, #7]
 8002e9e:	fb93 f0f2 	sdiv	r0, r3, r2
 8002ea2:	fb02 f200 	mul.w	r2, r2, r0
 8002ea6:	1a9a      	subs	r2, r3, r2
 8002ea8:	4804      	ldr	r0, [pc, #16]	; (8002ebc <sens_val_conv__update_buffer+0x58>)
 8002eaa:	00cb      	lsls	r3, r1, #3
 8002eac:	4403      	add	r3, r0
 8002eae:	605a      	str	r2, [r3, #4]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	20008910 	.word	0x20008910

08002ec0 <sens_val_conv__get_filtered_val_in_cm>:

sensValType_t sens_val_conv__get_filtered_val_in_cm(sensor_index current_sens) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
  qsort(sens_data_buff[current_sens].buff, buffer_size, sizeof(sensValType_t), compare);
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <sens_val_conv__get_filtered_val_in_cm+0x3c>)
 8002ece:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002ed2:	230a      	movs	r3, #10
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <sens_val_conv__get_filtered_val_in_cm+0x40>)
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f00b ff4a 	bl	800ed72 <qsort>
  return calc_avg_of_median_samples_in_buffer(sens_data_buff[current_sens].buff, filter_sample_count);
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	4a06      	ldr	r2, [pc, #24]	; (8002efc <sens_val_conv__get_filtered_val_in_cm+0x3c>)
 8002ee2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff65 	bl	8002dba <calc_avg_of_median_samples_in_buffer>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20008910 	.word	0x20008910
 8002f00:	08002d99 	.word	0x08002d99
 8002f04:	00000000 	.word	0x00000000

08002f08 <sens_val_conv__get_sens_val_in_cm>:
 * This is MB1000-00 LV-EZ0 ultrasonic sensor. Max range is 254 inches. (645 cm).
 * Precision => (Vcc/512) = 1 inch = 25 mm.  Our ADC is 12 bit, so our precision is 8 times higher.
 * Each ADC value = 25 / 8 = 3 mm. or 0.38
 */

uint16_t sens_val_conv__get_sens_val_in_cm(sensor_index current_sens) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  uint16_t conv_val = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	81fb      	strh	r3, [r7, #14]
  uint32_t raw_val = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]

  raw_val = sensor_config__read_sens_raw_value(current_sens);
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fef9 	bl	8002d14 <sensor_config__read_sens_raw_value>
 8002f22:	60b8      	str	r0, [r7, #8]

  if (current_sens != REAR_SENSOR) {
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d019      	beq.n	8002f5e <sens_val_conv__get_sens_val_in_cm+0x56>
    // This calculation is for LV EZ sensors
    conv_val = (raw_val * 0.3182) - 0.3959;
 8002f2a:	68b8      	ldr	r0, [r7, #8]
 8002f2c:	f7fd fafa 	bl	8000524 <__aeabi_ui2d>
 8002f30:	a314      	add	r3, pc, #80	; (adr r3, 8002f84 <sens_val_conv__get_sens_val_in_cm+0x7c>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd fb6f 	bl	8000618 <__aeabi_dmul>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	a312      	add	r3, pc, #72	; (adr r3, 8002f8c <sens_val_conv__get_sens_val_in_cm+0x84>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd f9ae 	bl	80002a8 <__aeabi_dsub>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	f7fd fd72 	bl	8000a3c <__aeabi_d2uiz>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	81fb      	strh	r3, [r7, #14]
 8002f5c:	e00b      	b.n	8002f76 <sens_val_conv__get_sens_val_in_cm+0x6e>
  } else {
    // NOTE: HRLV0 EZ0 max range is 500 cm
    conv_val = (raw_val * 5) / 4;
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	81fb      	strh	r3, [r7, #14]
    conv_val /= 10;
 8002f6a:	89fb      	ldrh	r3, [r7, #14]
 8002f6c:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <sens_val_conv__get_sens_val_in_cm+0x78>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	08db      	lsrs	r3, r3, #3
 8002f74:	81fb      	strh	r3, [r7, #14]
  }

  return conv_val;
 8002f76:	89fb      	ldrh	r3, [r7, #14]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	cccccccd 	.word	0xcccccccd
 8002f84:	886594af 	.word	0x886594af
 8002f88:	3fd45d63 	.word	0x3fd45d63
 8002f8c:	f41f212d 	.word	0xf41f212d
 8002f90:	3fd9566c 	.word	0x3fd9566c

08002f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_Init+0x40>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <HAL_Init+0x40>)
 8002f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_Init+0x40>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <HAL_Init+0x40>)
 8002faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_Init+0x40>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <HAL_Init+0x40>)
 8002fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f000 fcc6 	bl	800394e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7ff f96e 	bl	80022a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc8:	f7fe fcec 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023c00 	.word	0x40023c00

08002fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_IncTick+0x20>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_IncTick+0x24>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <HAL_IncTick+0x24>)
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000004c 	.word	0x2000004c
 8002ffc:	20008930 	.word	0x20008930

08003000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return uwTick;
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_GetTick+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20008930 	.word	0x20008930

08003018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003020:	f7ff ffee 	bl	8003000 <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d005      	beq.n	800303e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_Delay+0x44>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800303e:	bf00      	nop
 8003040:	f7ff ffde 	bl	8003000 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	429a      	cmp	r2, r3
 800304e:	d8f7      	bhi.n	8003040 <HAL_Delay+0x28>
  {
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2000004c 	.word	0x2000004c

08003060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e033      	b.n	80030de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe fcbc 	bl	80019fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d118      	bne.n	80030d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030a6:	f023 0302 	bic.w	r3, r3, #2
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 faa2 	bl	80035fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
 80030ce:	e001      	b.n	80030d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_Start+0x1a>
 80030fe:	2302      	movs	r3, #2
 8003100:	e0a5      	b.n	800324e <HAL_ADC_Start+0x166>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d018      	beq.n	800314a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003128:	4b4c      	ldr	r3, [pc, #304]	; (800325c <HAL_ADC_Start+0x174>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a4c      	ldr	r2, [pc, #304]	; (8003260 <HAL_ADC_Start+0x178>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	0c9a      	lsrs	r2, r3, #18
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800313c:	e002      	b.n	8003144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3b01      	subs	r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f9      	bne.n	800313e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d179      	bne.n	800324c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	d106      	bne.n	80031a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	f023 0206 	bic.w	r2, r3, #6
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
 80031a4:	e002      	b.n	80031ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031b4:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <HAL_ADC_Start+0x17c>)
 80031b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d12a      	bne.n	8003224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a25      	ldr	r2, [pc, #148]	; (8003268 <HAL_ADC_Start+0x180>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d015      	beq.n	8003204 <HAL_ADC_Start+0x11c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a23      	ldr	r2, [pc, #140]	; (800326c <HAL_ADC_Start+0x184>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d105      	bne.n	80031ee <HAL_ADC_Start+0x106>
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_ADC_Start+0x17c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <HAL_ADC_Start+0x188>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d129      	bne.n	800324c <HAL_ADC_Start+0x164>
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <HAL_ADC_Start+0x17c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d123      	bne.n	800324c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11c      	bne.n	800324c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	e013      	b.n	800324c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <HAL_ADC_Start+0x180>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d10e      	bne.n	800324c <HAL_ADC_Start+0x164>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d107      	bne.n	800324c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800324a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000000 	.word	0x20000000
 8003260:	431bde83 	.word	0x431bde83
 8003264:	40012300 	.word	0x40012300
 8003268:	40012000 	.word	0x40012000
 800326c:	40012100 	.word	0x40012100
 8003270:	40012200 	.word	0x40012200

08003274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003290:	d113      	bne.n	80032ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800329c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a0:	d10b      	bne.n	80032ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f043 0220 	orr.w	r2, r3, #32
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e05c      	b.n	8003374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80032ba:	f7ff fea1 	bl	8003000 <HAL_GetTick>
 80032be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032c0:	e01a      	b.n	80032f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d016      	beq.n	80032f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <HAL_ADC_PollForConversion+0x6c>
 80032d0:	f7ff fe96 	bl	8003000 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d20b      	bcs.n	80032f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e03d      	b.n	8003374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d1dd      	bne.n	80032c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f06f 0212 	mvn.w	r2, #18
 800330e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d123      	bne.n	8003372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11f      	bne.n	8003372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800334a:	2b00      	cmp	r3, #0
 800334c:	d111      	bne.n	8003372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d105      	bne.n	8003372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x1c>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e113      	b.n	80035dc <HAL_ADC_ConfigChannel+0x244>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b09      	cmp	r3, #9
 80033c2:	d925      	bls.n	8003410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68d9      	ldr	r1, [r3, #12]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	3b1e      	subs	r3, #30
 80033da:	2207      	movs	r2, #7
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43da      	mvns	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	400a      	ands	r2, r1
 80033e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68d9      	ldr	r1, [r3, #12]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	4618      	mov	r0, r3
 80033fc:	4603      	mov	r3, r0
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4403      	add	r3, r0
 8003402:	3b1e      	subs	r3, #30
 8003404:	409a      	lsls	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	e022      	b.n	8003456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6919      	ldr	r1, [r3, #16]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	2207      	movs	r2, #7
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	400a      	ands	r2, r1
 8003432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6919      	ldr	r1, [r3, #16]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	4618      	mov	r0, r3
 8003446:	4603      	mov	r3, r0
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4403      	add	r3, r0
 800344c:	409a      	lsls	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b06      	cmp	r3, #6
 800345c:	d824      	bhi.n	80034a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	3b05      	subs	r3, #5
 8003470:	221f      	movs	r2, #31
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	400a      	ands	r2, r1
 800347e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	4618      	mov	r0, r3
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	3b05      	subs	r3, #5
 800349a:	fa00 f203 	lsl.w	r2, r0, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	635a      	str	r2, [r3, #52]	; 0x34
 80034a6:	e04c      	b.n	8003542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	d824      	bhi.n	80034fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	3b23      	subs	r3, #35	; 0x23
 80034c2:	221f      	movs	r2, #31
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43da      	mvns	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	400a      	ands	r2, r1
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	4618      	mov	r0, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	3b23      	subs	r3, #35	; 0x23
 80034ec:	fa00 f203 	lsl.w	r2, r0, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
 80034f8:	e023      	b.n	8003542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	3b41      	subs	r3, #65	; 0x41
 800350c:	221f      	movs	r2, #31
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43da      	mvns	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	400a      	ands	r2, r1
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	4618      	mov	r0, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	3b41      	subs	r3, #65	; 0x41
 8003536:	fa00 f203 	lsl.w	r2, r0, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_ADC_ConfigChannel+0x250>)
 8003544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a28      	ldr	r2, [pc, #160]	; (80035ec <HAL_ADC_ConfigChannel+0x254>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d10f      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x1d8>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b12      	cmp	r3, #18
 8003556:	d10b      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <HAL_ADC_ConfigChannel+0x254>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d12b      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x23a>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <HAL_ADC_ConfigChannel+0x258>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <HAL_ADC_ConfigChannel+0x1f4>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b11      	cmp	r3, #17
 800358a:	d122      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <HAL_ADC_ConfigChannel+0x258>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d111      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ae:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <HAL_ADC_ConfigChannel+0x25c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <HAL_ADC_ConfigChannel+0x260>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	0c9a      	lsrs	r2, r3, #18
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035c4:	e002      	b.n	80035cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f9      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	40012300 	.word	0x40012300
 80035ec:	40012000 	.word	0x40012000
 80035f0:	10000012 	.word	0x10000012
 80035f4:	20000000 	.word	0x20000000
 80035f8:	431bde83 	.word	0x431bde83

080035fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003604:	4b79      	ldr	r3, [pc, #484]	; (80037ec <ADC_Init+0x1f0>)
 8003606:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	431a      	orrs	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	021a      	lsls	r2, r3, #8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6899      	ldr	r1, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <ADC_Init+0x1f4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6899      	ldr	r1, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	e00f      	b.n	80036fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0202 	bic.w	r2, r2, #2
 8003708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6899      	ldr	r1, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7e1b      	ldrb	r3, [r3, #24]
 8003714:	005a      	lsls	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01b      	beq.n	8003760 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003736:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	3b01      	subs	r3, #1
 8003754:	035a      	lsls	r2, r3, #13
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	e007      	b.n	8003770 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800376e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	3b01      	subs	r3, #1
 800378c:	051a      	lsls	r2, r3, #20
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6899      	ldr	r1, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037b2:	025a      	lsls	r2, r3, #9
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	029a      	lsls	r2, r3, #10
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40012300 	.word	0x40012300
 80037f0:	0f000001 	.word	0x0f000001

080037f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800381c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <__NVIC_GetPriorityGrouping+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	db0b      	blt.n	8003882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4907      	ldr	r1, [pc, #28]	; (8003890 <__NVIC_EnableIRQ+0x38>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2001      	movs	r0, #1
 800387a:	fa00 f202 	lsl.w	r2, r0, r2
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e100 	.word	0xe000e100

08003894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	db0a      	blt.n	80038be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	490c      	ldr	r1, [pc, #48]	; (80038e0 <__NVIC_SetPriority+0x4c>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038bc:	e00a      	b.n	80038d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <__NVIC_SetPriority+0x50>)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	3b04      	subs	r3, #4
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	440b      	add	r3, r1
 80038d2:	761a      	strb	r2, [r3, #24]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000e100 	.word	0xe000e100
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f1c3 0307 	rsb	r3, r3, #7
 8003902:	2b04      	cmp	r3, #4
 8003904:	bf28      	it	cs
 8003906:	2304      	movcs	r3, #4
 8003908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3304      	adds	r3, #4
 800390e:	2b06      	cmp	r3, #6
 8003910:	d902      	bls.n	8003918 <NVIC_EncodePriority+0x30>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3b03      	subs	r3, #3
 8003916:	e000      	b.n	800391a <NVIC_EncodePriority+0x32>
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	401a      	ands	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003930:	f04f 31ff 	mov.w	r1, #4294967295
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	43d9      	mvns	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	4313      	orrs	r3, r2
         );
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	; 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ff4c 	bl	80037f4 <__NVIC_SetPriorityGrouping>
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003976:	f7ff ff61 	bl	800383c <__NVIC_GetPriorityGrouping>
 800397a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	6978      	ldr	r0, [r7, #20]
 8003982:	f7ff ffb1 	bl	80038e8 <NVIC_EncodePriority>
 8003986:	4602      	mov	r2, r0
 8003988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff80 	bl	8003894 <__NVIC_SetPriority>
}
 8003994:	bf00      	nop
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ff54 	bl	8003858 <__NVIC_EnableIRQ>
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00e      	b.n	80039e8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	795b      	ldrb	r3, [r3, #5]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe f8b6 	bl	8001b4c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e03b      	b.n	8003a7a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fe f8ba 	bl	8001b90 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	f023 0107 	bic.w	r1, r3, #7
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d1      	ldr	r1, [r2, #12]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	430b      	orrs	r3, r1
 8003a68:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d026      	beq.n	8003af2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d021      	beq.n	8003af2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003abc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d026      	beq.n	8003b4a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d021      	beq.n	8003b4a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b14:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d026      	beq.n	8003ba2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d021      	beq.n	8003ba2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b6c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2208      	movs	r2, #8
 8003b74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00e      	beq.n	8003bd4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f853 	bl	8003c7a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d024      	beq.n	8003c28 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01f      	beq.n	8003c28 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bf6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01f      	beq.n	8003c72 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01a      	beq.n	8003c72 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c4a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2210      	movs	r2, #16
 8003c52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f80e 	bl	8003c8e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_DMA2D_ConfigLayer+0x20>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e079      	b.n	8003db8 <HAL_DMA2D_ConfigLayer+0x114>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	3318      	adds	r3, #24
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003cee:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003cf0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b0a      	cmp	r3, #10
 8003cf8:	d003      	beq.n	8003d02 <HAL_DMA2D_ConfigLayer+0x5e>
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	d107      	bne.n	8003d12 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	e005      	b.n	8003d1e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	061b      	lsls	r3, r3, #24
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d120      	bne.n	8003d66 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	ea02 0103 	and.w	r1, r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b0a      	cmp	r3, #10
 8003d4c:	d003      	beq.n	8003d56 <HAL_DMA2D_ConfigLayer+0xb2>
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	d127      	bne.n	8003da6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
 8003d64:	e01f      	b.n	8003da6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	ea02 0103 	and.w	r1, r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b0a      	cmp	r3, #10
 8003d8e:	d003      	beq.n	8003d98 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d106      	bne.n	8003da6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003da4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	ff03000f 	.word	0xff03000f

08003dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e177      	b.n	80040d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003de4:	2201      	movs	r2, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	f040 8166 	bne.w	80040ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d00b      	beq.n	8003e22 <HAL_GPIO_Init+0x5a>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d007      	beq.n	8003e22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e16:	2b11      	cmp	r3, #17
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b12      	cmp	r3, #18
 8003e20:	d130      	bne.n	8003e84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e58:	2201      	movs	r2, #1
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 0201 	and.w	r2, r3, #1
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	2203      	movs	r2, #3
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0xfc>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b12      	cmp	r3, #18
 8003ec2:	d123      	bne.n	8003f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	08da      	lsrs	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	220f      	movs	r2, #15
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	08da      	lsrs	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3208      	adds	r2, #8
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0203 	and.w	r2, r3, #3
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80c0 	beq.w	80040ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	4b66      	ldr	r3, [pc, #408]	; (80040ec <HAL_GPIO_Init+0x324>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	4a65      	ldr	r2, [pc, #404]	; (80040ec <HAL_GPIO_Init+0x324>)
 8003f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5e:	4b63      	ldr	r3, [pc, #396]	; (80040ec <HAL_GPIO_Init+0x324>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f6a:	4a61      	ldr	r2, [pc, #388]	; (80040f0 <HAL_GPIO_Init+0x328>)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	3302      	adds	r3, #2
 8003f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	220f      	movs	r2, #15
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a58      	ldr	r2, [pc, #352]	; (80040f4 <HAL_GPIO_Init+0x32c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d037      	beq.n	8004006 <HAL_GPIO_Init+0x23e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a57      	ldr	r2, [pc, #348]	; (80040f8 <HAL_GPIO_Init+0x330>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d031      	beq.n	8004002 <HAL_GPIO_Init+0x23a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a56      	ldr	r2, [pc, #344]	; (80040fc <HAL_GPIO_Init+0x334>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d02b      	beq.n	8003ffe <HAL_GPIO_Init+0x236>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a55      	ldr	r2, [pc, #340]	; (8004100 <HAL_GPIO_Init+0x338>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d025      	beq.n	8003ffa <HAL_GPIO_Init+0x232>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a54      	ldr	r2, [pc, #336]	; (8004104 <HAL_GPIO_Init+0x33c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01f      	beq.n	8003ff6 <HAL_GPIO_Init+0x22e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a53      	ldr	r2, [pc, #332]	; (8004108 <HAL_GPIO_Init+0x340>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d019      	beq.n	8003ff2 <HAL_GPIO_Init+0x22a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_GPIO_Init+0x344>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_GPIO_Init+0x226>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a51      	ldr	r2, [pc, #324]	; (8004110 <HAL_GPIO_Init+0x348>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00d      	beq.n	8003fea <HAL_GPIO_Init+0x222>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a50      	ldr	r2, [pc, #320]	; (8004114 <HAL_GPIO_Init+0x34c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d007      	beq.n	8003fe6 <HAL_GPIO_Init+0x21e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4f      	ldr	r2, [pc, #316]	; (8004118 <HAL_GPIO_Init+0x350>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_GPIO_Init+0x21a>
 8003fde:	2309      	movs	r3, #9
 8003fe0:	e012      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	e010      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	e00e      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003fea:	2307      	movs	r3, #7
 8003fec:	e00c      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003fee:	2306      	movs	r3, #6
 8003ff0:	e00a      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003ff2:	2305      	movs	r3, #5
 8003ff4:	e008      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	e006      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e004      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e002      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_GPIO_Init+0x240>
 8004006:	2300      	movs	r3, #0
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	f002 0203 	and.w	r2, r2, #3
 800400e:	0092      	lsls	r2, r2, #2
 8004010:	4093      	lsls	r3, r2
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004018:	4935      	ldr	r1, [pc, #212]	; (80040f0 <HAL_GPIO_Init+0x328>)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	3302      	adds	r3, #2
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004026:	4b3d      	ldr	r3, [pc, #244]	; (800411c <HAL_GPIO_Init+0x354>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800404a:	4a34      	ldr	r2, [pc, #208]	; (800411c <HAL_GPIO_Init+0x354>)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004050:	4b32      	ldr	r3, [pc, #200]	; (800411c <HAL_GPIO_Init+0x354>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004074:	4a29      	ldr	r2, [pc, #164]	; (800411c <HAL_GPIO_Init+0x354>)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_GPIO_Init+0x354>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800409e:	4a1f      	ldr	r2, [pc, #124]	; (800411c <HAL_GPIO_Init+0x354>)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_GPIO_Init+0x354>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040c8:	4a14      	ldr	r2, [pc, #80]	; (800411c <HAL_GPIO_Init+0x354>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	f67f ae84 	bls.w	8003de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	3724      	adds	r7, #36	; 0x24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40013800 	.word	0x40013800
 80040f4:	40020000 	.word	0x40020000
 80040f8:	40020400 	.word	0x40020400
 80040fc:	40020800 	.word	0x40020800
 8004100:	40020c00 	.word	0x40020c00
 8004104:	40021000 	.word	0x40021000
 8004108:	40021400 	.word	0x40021400
 800410c:	40021800 	.word	0x40021800
 8004110:	40021c00 	.word	0x40021c00
 8004114:	40022000 	.word	0x40022000
 8004118:	40022400 	.word	0x40022400
 800411c:	40013c00 	.word	0x40013c00

08004120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
 800412c:	4613      	mov	r3, r2
 800412e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004130:	787b      	ldrb	r3, [r7, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800413c:	e003      	b.n	8004146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800413e:	887b      	ldrh	r3, [r7, #2]
 8004140:	041a      	lsls	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d006      	beq.n	8004178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800416a:	4a05      	ldr	r2, [pc, #20]	; (8004180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe f9a6 	bl	80024c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004186:	b08f      	sub	sp, #60	; 0x3c
 8004188:	af0a      	add	r7, sp, #40	; 0x28
 800418a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e054      	b.n	8004240 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f00a f9dd 	bl	800e570 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2203      	movs	r2, #3
 80041ba:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f004 fe4b 	bl	8008e70 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	687e      	ldr	r6, [r7, #4]
 80041e2:	466d      	mov	r5, sp
 80041e4:	f106 0410 	add.w	r4, r6, #16
 80041e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80041f8:	1d33      	adds	r3, r6, #4
 80041fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041fc:	6838      	ldr	r0, [r7, #0]
 80041fe:	f004 fdc5 	bl	8008d8c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2101      	movs	r1, #1
 8004208:	4618      	mov	r0, r3
 800420a:	f004 fe42 	bl	8008e92 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	687e      	ldr	r6, [r7, #4]
 8004216:	466d      	mov	r5, sp
 8004218:	f106 0410 	add.w	r4, r6, #16
 800421c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800421e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004224:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004228:	e885 0003 	stmia.w	r5, {r0, r1}
 800422c:	1d33      	adds	r3, r6, #4
 800422e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004230:	6838      	ldr	r0, [r7, #0]
 8004232:	f004 ff55 	bl	80090e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004248 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af04      	add	r7, sp, #16
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	461a      	mov	r2, r3
 8004256:	4603      	mov	r3, r0
 8004258:	70fb      	strb	r3, [r7, #3]
 800425a:	460b      	mov	r3, r1
 800425c:	70bb      	strb	r3, [r7, #2]
 800425e:	4613      	mov	r3, r2
 8004260:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_HCD_HC_Init+0x28>
 800426c:	2302      	movs	r3, #2
 800426e:	e07f      	b.n	8004370 <HAL_HCD_HC_Init+0x128>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	440b      	add	r3, r1
 8004286:	333d      	adds	r3, #61	; 0x3d
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	440b      	add	r3, r1
 800429a:	3338      	adds	r3, #56	; 0x38
 800429c:	787a      	ldrb	r2, [r7, #1]
 800429e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	440b      	add	r3, r1
 80042ae:	3340      	adds	r3, #64	; 0x40
 80042b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80042b2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	440b      	add	r3, r1
 80042c2:	3339      	adds	r3, #57	; 0x39
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	440b      	add	r3, r1
 80042d6:	333f      	adds	r3, #63	; 0x3f
 80042d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80042dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	78bb      	ldrb	r3, [r7, #2]
 80042e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e6:	b2d8      	uxtb	r0, r3
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	440b      	add	r3, r1
 80042f4:	333a      	adds	r3, #58	; 0x3a
 80042f6:	4602      	mov	r2, r0
 80042f8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80042fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	da0a      	bge.n	8004318 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	440b      	add	r3, r1
 8004310:	333b      	adds	r3, #59	; 0x3b
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e009      	b.n	800432c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	440b      	add	r3, r1
 8004326:	333b      	adds	r3, #59	; 0x3b
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	440b      	add	r3, r1
 800433a:	333c      	adds	r3, #60	; 0x3c
 800433c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004340:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	787c      	ldrb	r4, [r7, #1]
 8004348:	78ba      	ldrb	r2, [r7, #2]
 800434a:	78f9      	ldrb	r1, [r7, #3]
 800434c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800434e:	9302      	str	r3, [sp, #8]
 8004350:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	4623      	mov	r3, r4
 800435e:	f005 f841 	bl	80093e4 <USB_HC_Init>
 8004362:	4603      	mov	r3, r0
 8004364:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	bd90      	pop	{r4, r7, pc}

08004378 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_HCD_HC_Halt+0x1e>
 8004392:	2302      	movs	r3, #2
 8004394:	e00f      	b.n	80043b6 <HAL_HCD_HC_Halt+0x3e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f005 fa7b 	bl	80098a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	70fb      	strb	r3, [r7, #3]
 80043d2:	460b      	mov	r3, r1
 80043d4:	70bb      	strb	r3, [r7, #2]
 80043d6:	4613      	mov	r3, r2
 80043d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80043da:	78fa      	ldrb	r2, [r7, #3]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	440b      	add	r3, r1
 80043e8:	333b      	adds	r3, #59	; 0x3b
 80043ea:	78ba      	ldrb	r2, [r7, #2]
 80043ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	440b      	add	r3, r1
 80043fc:	333f      	adds	r3, #63	; 0x3f
 80043fe:	787a      	ldrb	r2, [r7, #1]
 8004400:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004402:	7c3b      	ldrb	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d114      	bne.n	8004432 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	440b      	add	r3, r1
 8004416:	3342      	adds	r3, #66	; 0x42
 8004418:	2203      	movs	r2, #3
 800441a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	440b      	add	r3, r1
 800442a:	333d      	adds	r3, #61	; 0x3d
 800442c:	7f3a      	ldrb	r2, [r7, #28]
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e009      	b.n	8004446 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	440b      	add	r3, r1
 8004440:	3342      	adds	r3, #66	; 0x42
 8004442:	2202      	movs	r2, #2
 8004444:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004446:	787b      	ldrb	r3, [r7, #1]
 8004448:	2b03      	cmp	r3, #3
 800444a:	f200 80d6 	bhi.w	80045fa <HAL_HCD_HC_SubmitRequest+0x23a>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004465 	.word	0x08004465
 8004458:	080045e5 	.word	0x080045e5
 800445c:	080044d1 	.word	0x080044d1
 8004460:	0800455b 	.word	0x0800455b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004464:	7c3b      	ldrb	r3, [r7, #16]
 8004466:	2b01      	cmp	r3, #1
 8004468:	f040 80c9 	bne.w	80045fe <HAL_HCD_HC_SubmitRequest+0x23e>
 800446c:	78bb      	ldrb	r3, [r7, #2]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 80c5 	bne.w	80045fe <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004474:	8b3b      	ldrh	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	440b      	add	r3, r1
 8004488:	3351      	adds	r3, #81	; 0x51
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	440b      	add	r3, r1
 800449c:	3351      	adds	r3, #81	; 0x51
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044a4:	78fa      	ldrb	r2, [r7, #3]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	440b      	add	r3, r1
 80044b2:	3342      	adds	r3, #66	; 0x42
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80044b8:	e0a1      	b.n	80045fe <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	440b      	add	r3, r1
 80044c8:	3342      	adds	r3, #66	; 0x42
 80044ca:	2202      	movs	r2, #2
 80044cc:	701a      	strb	r2, [r3, #0]
      break;
 80044ce:	e096      	b.n	80045fe <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80044d0:	78bb      	ldrb	r3, [r7, #2]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d120      	bne.n	8004518 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	440b      	add	r3, r1
 80044e4:	3351      	adds	r3, #81	; 0x51
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	3342      	adds	r3, #66	; 0x42
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004500:	e07e      	b.n	8004600 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004502:	78fa      	ldrb	r2, [r7, #3]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	440b      	add	r3, r1
 8004510:	3342      	adds	r3, #66	; 0x42
 8004512:	2202      	movs	r2, #2
 8004514:	701a      	strb	r2, [r3, #0]
      break;
 8004516:	e073      	b.n	8004600 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	440b      	add	r3, r1
 8004526:	3350      	adds	r3, #80	; 0x50
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	440b      	add	r3, r1
 800453c:	3342      	adds	r3, #66	; 0x42
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
      break;
 8004542:	e05d      	b.n	8004600 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	440b      	add	r3, r1
 8004552:	3342      	adds	r3, #66	; 0x42
 8004554:	2202      	movs	r2, #2
 8004556:	701a      	strb	r2, [r3, #0]
      break;
 8004558:	e052      	b.n	8004600 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800455a:	78bb      	ldrb	r3, [r7, #2]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d120      	bne.n	80045a2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	440b      	add	r3, r1
 800456e:	3351      	adds	r3, #81	; 0x51
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	440b      	add	r3, r1
 8004584:	3342      	adds	r3, #66	; 0x42
 8004586:	2200      	movs	r2, #0
 8004588:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800458a:	e039      	b.n	8004600 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	440b      	add	r3, r1
 800459a:	3342      	adds	r3, #66	; 0x42
 800459c:	2202      	movs	r2, #2
 800459e:	701a      	strb	r2, [r3, #0]
      break;
 80045a0:	e02e      	b.n	8004600 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	440b      	add	r3, r1
 80045b0:	3350      	adds	r3, #80	; 0x50
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	440b      	add	r3, r1
 80045c6:	3342      	adds	r3, #66	; 0x42
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
      break;
 80045cc:	e018      	b.n	8004600 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	440b      	add	r3, r1
 80045dc:	3342      	adds	r3, #66	; 0x42
 80045de:	2202      	movs	r2, #2
 80045e0:	701a      	strb	r2, [r3, #0]
      break;
 80045e2:	e00d      	b.n	8004600 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045e4:	78fa      	ldrb	r2, [r7, #3]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	440b      	add	r3, r1
 80045f2:	3342      	adds	r3, #66	; 0x42
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
      break;
 80045f8:	e002      	b.n	8004600 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80045fe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	3344      	adds	r3, #68	; 0x44
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	8b39      	ldrh	r1, [r7, #24]
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4403      	add	r3, r0
 8004624:	3348      	adds	r3, #72	; 0x48
 8004626:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	440b      	add	r3, r1
 8004636:	335c      	adds	r3, #92	; 0x5c
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	440b      	add	r3, r1
 800464a:	334c      	adds	r3, #76	; 0x4c
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	440b      	add	r3, r1
 800465e:	3339      	adds	r3, #57	; 0x39
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	440b      	add	r3, r1
 8004672:	335d      	adds	r3, #93	; 0x5d
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	78fa      	ldrb	r2, [r7, #3]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	3338      	adds	r3, #56	; 0x38
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	18d1      	adds	r1, r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	f004 ffb0 	bl	80095f8 <USB_HC_StartXfer>
 8004698:	4603      	mov	r3, r0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop

080046a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f004 fccd 	bl	800905a <USB_GetMode>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	f040 80ef 	bne.w	80048a6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f004 fcb1 	bl	8009034 <USB_ReadInterrupts>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80e5 	beq.w	80048a4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f004 fca8 	bl	8009034 <USB_ReadInterrupts>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046ee:	d104      	bne.n	80046fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80046f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f004 fc98 	bl	8009034 <USB_ReadInterrupts>
 8004704:	4603      	mov	r3, r0
 8004706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470e:	d104      	bne.n	800471a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004718:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f004 fc88 	bl	8009034 <USB_ReadInterrupts>
 8004724:	4603      	mov	r3, r0
 8004726:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800472a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800472e:	d104      	bne.n	800473a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004738:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f004 fc78 	bl	8009034 <USB_ReadInterrupts>
 8004744:	4603      	mov	r3, r0
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d103      	bne.n	8004756 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2202      	movs	r2, #2
 8004754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f004 fc6a 	bl	8009034 <USB_ReadInterrupts>
 8004760:	4603      	mov	r3, r0
 8004762:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800476a:	d115      	bne.n	8004798 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004774:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f009 ff6c 	bl	800e664 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	4618      	mov	r0, r3
 8004794:	f004 fd60 	bl	8009258 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f004 fc49 	bl	8009034 <USB_ReadInterrupts>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ac:	d102      	bne.n	80047b4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f001 f968 	bl	8005a84 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f004 fc3b 	bl	8009034 <USB_ReadInterrupts>
 80047be:	4603      	mov	r3, r0
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d106      	bne.n	80047d6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f009 ff2f 	bl	800e62c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2208      	movs	r2, #8
 80047d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f004 fc2a 	bl	8009034 <USB_ReadInterrupts>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ea:	d138      	bne.n	800485e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f005 f845 	bl	8009880 <USB_HC_ReadInterrupt>
 80047f6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e025      	b.n	800484a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	fa22 f303 	lsr.w	r3, r2, r3
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d018      	beq.n	8004844 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004828:	d106      	bne.n	8004838 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	4619      	mov	r1, r3
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8cf 	bl	80049d4 <HCD_HC_IN_IRQHandler>
 8004836:	e005      	b.n	8004844 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fcfd 	bl	800523e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3301      	adds	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	429a      	cmp	r2, r3
 8004852:	d3d4      	bcc.n	80047fe <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800485c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f004 fbe6 	bl	8009034 <USB_ReadInterrupts>
 8004868:	4603      	mov	r3, r0
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b10      	cmp	r3, #16
 8004870:	d101      	bne.n	8004876 <HAL_HCD_IRQHandler+0x1d2>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_HCD_IRQHandler+0x1d4>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d014      	beq.n	80048a6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0210 	bic.w	r2, r2, #16
 800488a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f001 f84b 	bl	8005928 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699a      	ldr	r2, [r3, #24]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0210 	orr.w	r2, r2, #16
 80048a0:	619a      	str	r2, [r3, #24]
 80048a2:	e000      	b.n	80048a6 <HAL_HCD_IRQHandler+0x202>
      return;
 80048a4:	bf00      	nop
    }
  }
}
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_HCD_Start+0x16>
 80048be:	2302      	movs	r3, #2
 80048c0:	e013      	b.n	80048ea <HAL_HCD_Start+0x3e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f004 fabd 	bl	8008e4e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2101      	movs	r1, #1
 80048da:	4618      	mov	r0, r3
 80048dc:	f004 fd20 	bl	8009320 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_HCD_Stop+0x16>
 8004904:	2302      	movs	r3, #2
 8004906:	e00d      	b.n	8004924 <HAL_HCD_Stop+0x32>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f005 f8ff 	bl	8009b18 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f004 fcc7 	bl	80092cc <USB_ResetPort>
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	440b      	add	r3, r1
 8004962:	335c      	adds	r3, #92	; 0x5c
 8004964:	781b      	ldrb	r3, [r3, #0]
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	440b      	add	r3, r1
 800498c:	334c      	adds	r3, #76	; 0x4c
 800498e:	681b      	ldr	r3, [r3, #0]
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f004 fd09 	bl	80093c0 <USB_GetCurrentFrame>
 80049ae:	4603      	mov	r3, r0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f004 fce4 	bl	8009392 <USB_GetHostSpeed>
 80049ca:	4603      	mov	r3, r0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d119      	bne.n	8004a38 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a10:	461a      	mov	r2, r3
 8004a12:	2304      	movs	r3, #4
 8004a14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a30:	f043 0302 	orr.w	r3, r3, #2
 8004a34:	60d3      	str	r3, [r2, #12]
 8004a36:	e0ce      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d12c      	bne.n	8004aaa <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	440b      	add	r3, r1
 8004a72:	335d      	adds	r3, #93	; 0x5d
 8004a74:	2207      	movs	r2, #7
 8004a76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	0151      	lsls	r1, r2, #5
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a92:	f043 0302 	orr.w	r3, r3, #2
 8004a96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f004 fefd 	bl	80098a2 <USB_HC_Halt>
 8004aa8:	e095      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d109      	bne.n	8004ad4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004acc:	461a      	mov	r2, r3
 8004ace:	2320      	movs	r3, #32
 8004ad0:	6093      	str	r3, [r2, #8]
 8004ad2:	e080      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d134      	bne.n	8004b54 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	440b      	add	r3, r1
 8004b18:	335d      	adds	r3, #93	; 0x5d
 8004b1a:	2205      	movs	r2, #5
 8004b1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2308      	movs	r3, #8
 8004b40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f004 fea8 	bl	80098a2 <USB_HC_Halt>
 8004b52:	e040      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6a:	d134      	bne.n	8004bd6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	0151      	lsls	r1, r2, #5
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	440a      	add	r2, r1
 8004b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b86:	f043 0302 	orr.w	r3, r3, #2
 8004b8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f004 fe83 	bl	80098a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2310      	movs	r3, #16
 8004bac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	440b      	add	r3, r1
 8004bbc:	335d      	adds	r3, #93	; 0x5d
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bec:	d122      	bne.n	8004c34 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c08:	f043 0302 	orr.w	r3, r3, #2
 8004c0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f004 fe42 	bl	80098a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c30:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004c32:	e300      	b.n	8005236 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	f040 80fd 	bne.w	8004e46 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	440b      	add	r3, r1
 8004c62:	3348      	adds	r3, #72	; 0x48
 8004c64:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	0159      	lsls	r1, r3, #5
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	440b      	add	r3, r1
 8004c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004c78:	1ad1      	subs	r1, r2, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4403      	add	r3, r0
 8004c88:	334c      	adds	r3, #76	; 0x4c
 8004c8a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	440b      	add	r3, r1
 8004c9a:	335d      	adds	r3, #93	; 0x5d
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	440b      	add	r3, r1
 8004cae:	3358      	adds	r3, #88	; 0x58
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	440b      	add	r3, r1
 8004cd4:	333f      	adds	r3, #63	; 0x3f
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	440b      	add	r3, r1
 8004cea:	333f      	adds	r3, #63	; 0x3f
 8004cec:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d121      	bne.n	8004d36 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d0c:	f043 0302 	orr.w	r3, r3, #2
 8004d10:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f004 fdc0 	bl	80098a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2310      	movs	r3, #16
 8004d32:	6093      	str	r3, [r2, #8]
 8004d34:	e070      	b.n	8004e18 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	440b      	add	r3, r1
 8004d44:	333f      	adds	r3, #63	; 0x3f
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d12a      	bne.n	8004da2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d6a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	440b      	add	r3, r1
 8004d7a:	335c      	adds	r3, #92	; 0x5c
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	b2d8      	uxtb	r0, r3
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	440b      	add	r3, r1
 8004d92:	335c      	adds	r3, #92	; 0x5c
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	4601      	mov	r1, r0
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f009 fc70 	bl	800e680 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004da0:	e03a      	b.n	8004e18 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	333f      	adds	r3, #63	; 0x3f
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d12f      	bne.n	8004e18 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	440b      	add	r3, r1
 8004dc6:	335c      	adds	r3, #92	; 0x5c
 8004dc8:	2201      	movs	r2, #1
 8004dca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	440b      	add	r3, r1
 8004dda:	3350      	adds	r3, #80	; 0x50
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	f083 0301 	eor.w	r3, r3, #1
 8004de2:	b2d8      	uxtb	r0, r3
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	440b      	add	r3, r1
 8004df2:	3350      	adds	r3, #80	; 0x50
 8004df4:	4602      	mov	r2, r0
 8004df6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	b2d8      	uxtb	r0, r3
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	440b      	add	r3, r1
 8004e0a:	335c      	adds	r3, #92	; 0x5c
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4601      	mov	r1, r0
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f009 fc34 	bl	800e680 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	440b      	add	r3, r1
 8004e26:	3350      	adds	r3, #80	; 0x50
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	f083 0301 	eor.w	r3, r3, #1
 8004e2e:	b2d8      	uxtb	r0, r3
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	440b      	add	r3, r1
 8004e3e:	3350      	adds	r3, #80	; 0x50
 8004e40:	4602      	mov	r2, r0
 8004e42:	701a      	strb	r2, [r3, #0]
}
 8004e44:	e1f7      	b.n	8005236 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	f040 811a 	bne.w	8005092 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e78:	f023 0302 	bic.w	r3, r3, #2
 8004e7c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	440b      	add	r3, r1
 8004e8c:	335d      	adds	r3, #93	; 0x5d
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10a      	bne.n	8004eaa <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	335c      	adds	r3, #92	; 0x5c
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	e0d9      	b.n	800505e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	335d      	adds	r3, #93	; 0x5d
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b05      	cmp	r3, #5
 8004ebe:	d10a      	bne.n	8004ed6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	335c      	adds	r3, #92	; 0x5c
 8004ed0:	2205      	movs	r2, #5
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	e0c3      	b.n	800505e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	335d      	adds	r3, #93	; 0x5d
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d00a      	beq.n	8004f02 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	440b      	add	r3, r1
 8004efa:	335d      	adds	r3, #93	; 0x5d
 8004efc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d156      	bne.n	8004fb0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	440b      	add	r3, r1
 8004f10:	3358      	adds	r3, #88	; 0x58
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	1c59      	adds	r1, r3, #1
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4403      	add	r3, r0
 8004f24:	3358      	adds	r3, #88	; 0x58
 8004f26:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	440b      	add	r3, r1
 8004f36:	3358      	adds	r3, #88	; 0x58
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d914      	bls.n	8004f68 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3358      	adds	r3, #88	; 0x58
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	440b      	add	r3, r1
 8004f60:	335c      	adds	r3, #92	; 0x5c
 8004f62:	2204      	movs	r2, #4
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	e009      	b.n	8004f7c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	440b      	add	r3, r1
 8004f76:	335c      	adds	r3, #92	; 0x5c
 8004f78:	2202      	movs	r2, #2
 8004f7a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f92:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f9a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e056      	b.n	800505e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	440b      	add	r3, r1
 8004fbe:	335d      	adds	r3, #93	; 0x5d
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d123      	bne.n	800500e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	440b      	add	r3, r1
 8004fd4:	335c      	adds	r3, #92	; 0x5c
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ff0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ff8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005006:	461a      	mov	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	e027      	b.n	800505e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	440b      	add	r3, r1
 800501c:	335d      	adds	r3, #93	; 0x5d
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b07      	cmp	r3, #7
 8005022:	d11c      	bne.n	800505e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	440b      	add	r3, r1
 8005032:	3358      	adds	r3, #88	; 0x58
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	1c59      	adds	r1, r3, #1
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4403      	add	r3, r0
 8005046:	3358      	adds	r3, #88	; 0x58
 8005048:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	440b      	add	r3, r1
 8005058:	335c      	adds	r3, #92	; 0x5c
 800505a:	2204      	movs	r2, #4
 800505c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	461a      	mov	r2, r3
 800506c:	2302      	movs	r3, #2
 800506e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	b2d8      	uxtb	r0, r3
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	440b      	add	r3, r1
 8005082:	335c      	adds	r3, #92	; 0x5c
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	4601      	mov	r1, r0
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f009 faf8 	bl	800e680 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005090:	e0d1      	b.n	8005236 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a4:	2b80      	cmp	r3, #128	; 0x80
 80050a6:	d13e      	bne.n	8005126 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050c2:	f043 0302 	orr.w	r3, r3, #2
 80050c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	440b      	add	r3, r1
 80050d6:	3358      	adds	r3, #88	; 0x58
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	1c59      	adds	r1, r3, #1
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4403      	add	r3, r0
 80050ea:	3358      	adds	r3, #88	; 0x58
 80050ec:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	440b      	add	r3, r1
 80050fc:	335d      	adds	r3, #93	; 0x5d
 80050fe:	2206      	movs	r2, #6
 8005100:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f004 fbc8 	bl	80098a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4413      	add	r3, r2
 800511a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511e:	461a      	mov	r2, r3
 8005120:	2380      	movs	r3, #128	; 0x80
 8005122:	6093      	str	r3, [r2, #8]
}
 8005124:	e087      	b.n	8005236 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b10      	cmp	r3, #16
 800513a:	d17c      	bne.n	8005236 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	440b      	add	r3, r1
 800514a:	333f      	adds	r3, #63	; 0x3f
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d122      	bne.n	8005198 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	440b      	add	r3, r1
 8005160:	3358      	adds	r3, #88	; 0x58
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	440a      	add	r2, r1
 800517c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	4611      	mov	r1, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f004 fb86 	bl	80098a2 <USB_HC_Halt>
 8005196:	e045      	b.n	8005224 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	440b      	add	r3, r1
 80051a6:	333f      	adds	r3, #63	; 0x3f
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	440b      	add	r3, r1
 80051bc:	333f      	adds	r3, #63	; 0x3f
 80051be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d12f      	bne.n	8005224 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	440b      	add	r3, r1
 80051d2:	3358      	adds	r3, #88	; 0x58
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d121      	bne.n	8005224 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	440b      	add	r3, r1
 80051ee:	335d      	adds	r3, #93	; 0x5d
 80051f0:	2203      	movs	r2, #3
 80051f2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	440a      	add	r2, r1
 800520a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520e:	f043 0302 	orr.w	r3, r3, #2
 8005212:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	4611      	mov	r1, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f004 fb3f 	bl	80098a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	461a      	mov	r2, r3
 8005232:	2310      	movs	r3, #16
 8005234:	6093      	str	r3, [r2, #8]
}
 8005236:	bf00      	nop
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b086      	sub	sp, #24
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4413      	add	r3, r2
 8005260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b04      	cmp	r3, #4
 800526c:	d119      	bne.n	80052a2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527a:	461a      	mov	r2, r3
 800527c:	2304      	movs	r3, #4
 800527e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	440a      	add	r2, r1
 8005296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529a:	f043 0302 	orr.w	r3, r3, #2
 800529e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80052a0:	e33e      	b.n	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d141      	bne.n	800533c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c4:	461a      	mov	r2, r3
 80052c6:	2320      	movs	r3, #32
 80052c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	440b      	add	r3, r1
 80052d8:	333d      	adds	r3, #61	; 0x3d
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	f040 831f 	bne.w	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	440b      	add	r3, r1
 80052f0:	333d      	adds	r3, #61	; 0x3d
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	440b      	add	r3, r1
 8005304:	335c      	adds	r3, #92	; 0x5c
 8005306:	2202      	movs	r2, #2
 8005308:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4413      	add	r3, r2
 8005312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	440a      	add	r2, r1
 8005320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005324:	f043 0302 	orr.w	r3, r3, #2
 8005328:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	4611      	mov	r1, r2
 8005334:	4618      	mov	r0, r3
 8005336:	f004 fab4 	bl	80098a2 <USB_HC_Halt>
}
 800533a:	e2f1      	b.n	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d13f      	bne.n	80053d2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	440b      	add	r3, r1
 8005360:	335d      	adds	r3, #93	; 0x5d
 8005362:	2204      	movs	r2, #4
 8005364:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	440b      	add	r3, r1
 8005374:	333d      	adds	r3, #61	; 0x3d
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	440b      	add	r3, r1
 8005388:	3358      	adds	r3, #88	; 0x58
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a8:	f043 0302 	orr.w	r3, r3, #2
 80053ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	4611      	mov	r1, r2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f004 fa72 	bl	80098a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ca:	461a      	mov	r2, r3
 80053cc:	2340      	movs	r3, #64	; 0x40
 80053ce:	6093      	str	r3, [r2, #8]
}
 80053d0:	e2a6      	b.n	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e8:	d122      	bne.n	8005430 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f004 fa44 	bl	80098a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	461a      	mov	r2, r3
 8005428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800542c:	6093      	str	r3, [r2, #8]
}
 800542e:	e277      	b.n	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b01      	cmp	r3, #1
 8005444:	d135      	bne.n	80054b2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	440b      	add	r3, r1
 8005454:	3358      	adds	r3, #88	; 0x58
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4413      	add	r3, r2
 8005462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	440a      	add	r2, r1
 8005470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	4611      	mov	r1, r2
 8005484:	4618      	mov	r0, r3
 8005486:	f004 fa0c 	bl	80098a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	4413      	add	r3, r2
 8005492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005496:	461a      	mov	r2, r3
 8005498:	2301      	movs	r3, #1
 800549a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	440b      	add	r3, r1
 80054aa:	335d      	adds	r3, #93	; 0x5d
 80054ac:	2201      	movs	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
}
 80054b0:	e236      	b.n	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d12b      	bne.n	8005520 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	461a      	mov	r2, r3
 80054d6:	2308      	movs	r3, #8
 80054d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054f4:	f043 0302 	orr.w	r3, r3, #2
 80054f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	4611      	mov	r1, r2
 8005504:	4618      	mov	r0, r3
 8005506:	f004 f9cc 	bl	80098a2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	440b      	add	r3, r1
 8005518:	335d      	adds	r3, #93	; 0x5d
 800551a:	2205      	movs	r2, #5
 800551c:	701a      	strb	r2, [r3, #0]
}
 800551e:	e1ff      	b.n	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4413      	add	r3, r2
 8005528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b10      	cmp	r3, #16
 8005534:	d155      	bne.n	80055e2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	440b      	add	r3, r1
 8005544:	3358      	adds	r3, #88	; 0x58
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	440b      	add	r3, r1
 8005558:	335d      	adds	r3, #93	; 0x5d
 800555a:	2203      	movs	r2, #3
 800555c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	440b      	add	r3, r1
 800556c:	333d      	adds	r3, #61	; 0x3d
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d114      	bne.n	800559e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	440b      	add	r3, r1
 8005582:	333c      	adds	r3, #60	; 0x3c
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	440b      	add	r3, r1
 8005598:	333d      	adds	r3, #61	; 0x3d
 800559a:	2201      	movs	r2, #1
 800559c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b8:	f043 0302 	orr.w	r3, r3, #2
 80055bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	4611      	mov	r1, r2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f004 f96a 	bl	80098a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055da:	461a      	mov	r2, r3
 80055dc:	2310      	movs	r3, #16
 80055de:	6093      	str	r3, [r2, #8]
}
 80055e0:	e19e      	b.n	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f4:	2b80      	cmp	r3, #128	; 0x80
 80055f6:	d12b      	bne.n	8005650 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	440a      	add	r2, r1
 800560e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005612:	f043 0302 	orr.w	r3, r3, #2
 8005616:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	4611      	mov	r1, r2
 8005622:	4618      	mov	r0, r3
 8005624:	f004 f93d 	bl	80098a2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	440b      	add	r3, r1
 8005636:	335d      	adds	r3, #93	; 0x5d
 8005638:	2206      	movs	r2, #6
 800563a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005648:	461a      	mov	r2, r3
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	6093      	str	r3, [r2, #8]
}
 800564e:	e167      	b.n	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d135      	bne.n	80056d4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	440a      	add	r2, r1
 800567e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005682:	f043 0302 	orr.w	r3, r3, #2
 8005686:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	4611      	mov	r1, r2
 8005692:	4618      	mov	r0, r3
 8005694:	f004 f905 	bl	80098a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a4:	461a      	mov	r2, r3
 80056a6:	2310      	movs	r3, #16
 80056a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b6:	461a      	mov	r2, r3
 80056b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	440b      	add	r3, r1
 80056cc:	335d      	adds	r3, #93	; 0x5d
 80056ce:	2208      	movs	r2, #8
 80056d0:	701a      	strb	r2, [r3, #0]
}
 80056d2:	e125      	b.n	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	f040 811a 	bne.w	8005920 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	440a      	add	r2, r1
 8005702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005706:	f023 0302 	bic.w	r3, r3, #2
 800570a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	440b      	add	r3, r1
 800571a:	335d      	adds	r3, #93	; 0x5d
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d137      	bne.n	8005792 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	440b      	add	r3, r1
 8005730:	335c      	adds	r3, #92	; 0x5c
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	333f      	adds	r3, #63	; 0x3f
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d00b      	beq.n	8005764 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	440b      	add	r3, r1
 800575a:	333f      	adds	r3, #63	; 0x3f
 800575c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800575e:	2b03      	cmp	r3, #3
 8005760:	f040 80c5 	bne.w	80058ee <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	3351      	adds	r3, #81	; 0x51
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f083 0301 	eor.w	r3, r3, #1
 800577a:	b2d8      	uxtb	r0, r3
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	440b      	add	r3, r1
 800578a:	3351      	adds	r3, #81	; 0x51
 800578c:	4602      	mov	r2, r0
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	e0ad      	b.n	80058ee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	440b      	add	r3, r1
 80057a0:	335d      	adds	r3, #93	; 0x5d
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d10a      	bne.n	80057be <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	440b      	add	r3, r1
 80057b6:	335c      	adds	r3, #92	; 0x5c
 80057b8:	2202      	movs	r2, #2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e097      	b.n	80058ee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	440b      	add	r3, r1
 80057cc:	335d      	adds	r3, #93	; 0x5d
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d10a      	bne.n	80057ea <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	440b      	add	r3, r1
 80057e2:	335c      	adds	r3, #92	; 0x5c
 80057e4:	2202      	movs	r2, #2
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e081      	b.n	80058ee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	440b      	add	r3, r1
 80057f8:	335d      	adds	r3, #93	; 0x5d
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b05      	cmp	r3, #5
 80057fe:	d10a      	bne.n	8005816 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	440b      	add	r3, r1
 800580e:	335c      	adds	r3, #92	; 0x5c
 8005810:	2205      	movs	r2, #5
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	e06b      	b.n	80058ee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	335d      	adds	r3, #93	; 0x5d
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b06      	cmp	r3, #6
 800582a:	d00a      	beq.n	8005842 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	440b      	add	r3, r1
 800583a:	335d      	adds	r3, #93	; 0x5d
 800583c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800583e:	2b08      	cmp	r3, #8
 8005840:	d155      	bne.n	80058ee <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	440b      	add	r3, r1
 8005850:	3358      	adds	r3, #88	; 0x58
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	1c59      	adds	r1, r3, #1
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4403      	add	r3, r0
 8005864:	3358      	adds	r3, #88	; 0x58
 8005866:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	440b      	add	r3, r1
 8005876:	3358      	adds	r3, #88	; 0x58
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d914      	bls.n	80058a8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	3358      	adds	r3, #88	; 0x58
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	440b      	add	r3, r1
 80058a0:	335c      	adds	r3, #92	; 0x5c
 80058a2:	2204      	movs	r2, #4
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	e009      	b.n	80058bc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	440b      	add	r3, r1
 80058b6:	335c      	adds	r3, #92	; 0x5c
 80058b8:	2202      	movs	r2, #2
 80058ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e8:	461a      	mov	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fa:	461a      	mov	r2, r3
 80058fc:	2302      	movs	r3, #2
 80058fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	b2d8      	uxtb	r0, r3
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	440b      	add	r3, r1
 8005912:	335c      	adds	r3, #92	; 0x5c
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	4601      	mov	r1, r0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f008 feb0 	bl	800e680 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005920:	bf00      	nop
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	0c5b      	lsrs	r3, r3, #17
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	091b      	lsrs	r3, r3, #4
 8005958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800595c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d004      	beq.n	800596e <HCD_RXQLVL_IRQHandler+0x46>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b05      	cmp	r3, #5
 8005968:	f000 8082 	beq.w	8005a70 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800596c:	e083      	b.n	8005a76 <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d07f      	beq.n	8005a74 <HCD_RXQLVL_IRQHandler+0x14c>
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	440b      	add	r3, r1
 8005982:	3344      	adds	r3, #68	; 0x44
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d074      	beq.n	8005a74 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	440b      	add	r3, r1
 800599c:	3344      	adds	r3, #68	; 0x44
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	b292      	uxth	r2, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	f003 fb1c 	bl	8008fe2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	440b      	add	r3, r1
 80059b8:	3344      	adds	r3, #68	; 0x44
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	18d1      	adds	r1, r2, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4403      	add	r3, r0
 80059ce:	3344      	adds	r3, #68	; 0x44
 80059d0:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	440b      	add	r3, r1
 80059e0:	334c      	adds	r3, #76	; 0x4c
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	18d1      	adds	r1, r2, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4403      	add	r3, r0
 80059f6:	334c      	adds	r3, #76	; 0x4c
 80059f8:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <HCD_RXQLVL_IRQHandler+0x158>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d031      	beq.n	8005a74 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a26:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a2e:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	440b      	add	r3, r1
 8005a50:	3350      	adds	r3, #80	; 0x50
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f083 0301 	eor.w	r3, r3, #1
 8005a58:	b2d8      	uxtb	r0, r3
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	440b      	add	r3, r1
 8005a68:	3350      	adds	r3, #80	; 0x50
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	701a      	strb	r2, [r3, #0]
      break;
 8005a6e:	e001      	b.n	8005a74 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005a70:	bf00      	nop
 8005a72:	e000      	b.n	8005a76 <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8005a74:	bf00      	nop
  }
}
 8005a76:	bf00      	nop
 8005a78:	3728      	adds	r7, #40	; 0x28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	1ff80000 	.word	0x1ff80000

08005a84 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ab0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d10b      	bne.n	8005ad4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d102      	bne.n	8005acc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f008 fdbe 	bl	800e648 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f043 0302 	orr.w	r3, r3, #2
 8005ad2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d132      	bne.n	8005b44 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f043 0308 	orr.w	r3, r3, #8
 8005ae4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d126      	bne.n	8005b3e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d113      	bne.n	8005b20 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005afe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b02:	d106      	bne.n	8005b12 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2102      	movs	r1, #2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f003 fba4 	bl	8009258 <USB_InitFSLSPClkSel>
 8005b10:	e011      	b.n	8005b36 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2101      	movs	r1, #1
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f003 fb9d 	bl	8009258 <USB_InitFSLSPClkSel>
 8005b1e:	e00a      	b.n	8005b36 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d106      	bne.n	8005b36 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005b34:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f008 fdb4 	bl	800e6a4 <HAL_HCD_PortEnabled_Callback>
 8005b3c:	e002      	b.n	8005b44 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f008 fdbe 	bl	800e6c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d103      	bne.n	8005b56 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f043 0320 	orr.w	r3, r3, #32
 8005b54:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	6013      	str	r3, [r2, #0]
}
 8005b62:	bf00      	nop
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e12b      	b.n	8005dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fc f824 	bl	8001be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2224      	movs	r2, #36	; 0x24
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0201 	bic.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bd0:	f001 f938 	bl	8006e44 <HAL_RCC_GetPCLK1Freq>
 8005bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4a81      	ldr	r2, [pc, #516]	; (8005de0 <HAL_I2C_Init+0x274>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d807      	bhi.n	8005bf0 <HAL_I2C_Init+0x84>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4a80      	ldr	r2, [pc, #512]	; (8005de4 <HAL_I2C_Init+0x278>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	bf94      	ite	ls
 8005be8:	2301      	movls	r3, #1
 8005bea:	2300      	movhi	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	e006      	b.n	8005bfe <HAL_I2C_Init+0x92>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4a7d      	ldr	r2, [pc, #500]	; (8005de8 <HAL_I2C_Init+0x27c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	bf94      	ite	ls
 8005bf8:	2301      	movls	r3, #1
 8005bfa:	2300      	movhi	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e0e7      	b.n	8005dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4a78      	ldr	r2, [pc, #480]	; (8005dec <HAL_I2C_Init+0x280>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	0c9b      	lsrs	r3, r3, #18
 8005c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	4a6a      	ldr	r2, [pc, #424]	; (8005de0 <HAL_I2C_Init+0x274>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d802      	bhi.n	8005c40 <HAL_I2C_Init+0xd4>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	e009      	b.n	8005c54 <HAL_I2C_Init+0xe8>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	4a69      	ldr	r2, [pc, #420]	; (8005df0 <HAL_I2C_Init+0x284>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	3301      	adds	r3, #1
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	495c      	ldr	r1, [pc, #368]	; (8005de0 <HAL_I2C_Init+0x274>)
 8005c70:	428b      	cmp	r3, r1
 8005c72:	d819      	bhi.n	8005ca8 <HAL_I2C_Init+0x13c>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1e59      	subs	r1, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c88:	400b      	ands	r3, r1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <HAL_I2C_Init+0x138>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1e59      	subs	r1, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca2:	e051      	b.n	8005d48 <HAL_I2C_Init+0x1dc>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	e04f      	b.n	8005d48 <HAL_I2C_Init+0x1dc>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d111      	bne.n	8005cd4 <HAL_I2C_Init+0x168>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1e58      	subs	r0, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6859      	ldr	r1, [r3, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	440b      	add	r3, r1
 8005cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bf0c      	ite	eq
 8005ccc:	2301      	moveq	r3, #1
 8005cce:	2300      	movne	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	e012      	b.n	8005cfa <HAL_I2C_Init+0x18e>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	1e58      	subs	r0, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6859      	ldr	r1, [r3, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	0099      	lsls	r1, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cea:	3301      	adds	r3, #1
 8005cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bf0c      	ite	eq
 8005cf4:	2301      	moveq	r3, #1
 8005cf6:	2300      	movne	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_I2C_Init+0x196>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e022      	b.n	8005d48 <HAL_I2C_Init+0x1dc>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10e      	bne.n	8005d28 <HAL_I2C_Init+0x1bc>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1e58      	subs	r0, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6859      	ldr	r1, [r3, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	440b      	add	r3, r1
 8005d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	e00f      	b.n	8005d48 <HAL_I2C_Init+0x1dc>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	1e58      	subs	r0, r3, #1
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6859      	ldr	r1, [r3, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	0099      	lsls	r1, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	6809      	ldr	r1, [r1, #0]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6911      	ldr	r1, [r2, #16]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68d2      	ldr	r2, [r2, #12]
 8005d82:	4311      	orrs	r1, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695a      	ldr	r2, [r3, #20]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	000186a0 	.word	0x000186a0
 8005de4:	001e847f 	.word	0x001e847f
 8005de8:	003d08ff 	.word	0x003d08ff
 8005dec:	431bde83 	.word	0x431bde83
 8005df0:	10624dd3 	.word	0x10624dd3

08005df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d129      	bne.n	8005e5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2224      	movs	r2, #36	; 0x24
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0210 	bic.w	r2, r2, #16
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	d12a      	bne.n	8005edc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2224      	movs	r2, #36	; 0x24
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005ea6:	89fb      	ldrh	r3, [r7, #14]
 8005ea8:	f023 030f 	bic.w	r3, r3, #15
 8005eac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	89fb      	ldrh	r3, [r7, #14]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	89fa      	ldrh	r2, [r7, #14]
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e0bf      	b.n	800607e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fb fece 	bl	8001cb4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f2e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6999      	ldr	r1, [r3, #24]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f44:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6899      	ldr	r1, [r3, #8]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	4b4a      	ldr	r3, [pc, #296]	; (8006088 <HAL_LTDC_Init+0x19c>)
 8005f60:	400b      	ands	r3, r1
 8005f62:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	041b      	lsls	r3, r3, #16
 8005f6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6899      	ldr	r1, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68d9      	ldr	r1, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4b3e      	ldr	r3, [pc, #248]	; (8006088 <HAL_LTDC_Init+0x19c>)
 8005f8e:	400b      	ands	r3, r1
 8005f90:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68d9      	ldr	r1, [r3, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a1a      	ldr	r2, [r3, #32]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6919      	ldr	r1, [r3, #16]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	4b33      	ldr	r3, [pc, #204]	; (8006088 <HAL_LTDC_Init+0x19c>)
 8005fbc:	400b      	ands	r3, r1
 8005fbe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6919      	ldr	r1, [r3, #16]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6959      	ldr	r1, [r3, #20]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b27      	ldr	r3, [pc, #156]	; (8006088 <HAL_LTDC_Init+0x19c>)
 8005fea:	400b      	ands	r3, r1
 8005fec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	041b      	lsls	r3, r3, #16
 8005ff4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6959      	ldr	r1, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0206 	orr.w	r2, r2, #6
 800605a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	f000f800 	.word	0xf000f800

0800608c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d023      	beq.n	80060f6 <HAL_LTDC_IRQHandler+0x6a>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01e      	beq.n	80060f6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0204 	bic.w	r2, r2, #4
 80060c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2204      	movs	r2, #4
 80060ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060d6:	f043 0201 	orr.w	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2204      	movs	r2, #4
 80060e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f86f 	bl	80061d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d023      	beq.n	8006148 <HAL_LTDC_IRQHandler+0xbc>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01e      	beq.n	8006148 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0202 	bic.w	r2, r2, #2
 8006118:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2202      	movs	r2, #2
 8006120:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006128:	f043 0202 	orr.w	r2, r3, #2
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2204      	movs	r2, #4
 8006136:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f846 	bl	80061d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d01b      	beq.n	800618a <HAL_LTDC_IRQHandler+0xfe>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d016      	beq.n	800618a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0201 	bic.w	r2, r2, #1
 800616a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2201      	movs	r2, #1
 8006172:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f82f 	bl	80061e8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01b      	beq.n	80061cc <HAL_LTDC_IRQHandler+0x140>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d016      	beq.n	80061cc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0208 	bic.w	r2, r2, #8
 80061ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2208      	movs	r2, #8
 80061b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f818 	bl	80061fc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006210:	b5b0      	push	{r4, r5, r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_LTDC_ConfigLayer+0x1a>
 8006226:	2302      	movs	r3, #2
 8006228:	e02c      	b.n	8006284 <HAL_LTDC_ConfigLayer+0x74>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2134      	movs	r1, #52	; 0x34
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	4413      	add	r3, r2
 8006246:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	4614      	mov	r4, r2
 800624e:	461d      	mov	r5, r3
 8006250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800625a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	68b9      	ldr	r1, [r7, #8]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f811 	bl	800628c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2201      	movs	r2, #1
 8006270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bdb0      	pop	{r4, r5, r7, pc}

0800628c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800628c:	b480      	push	{r7}
 800628e:	b089      	sub	sp, #36	; 0x24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	0c1b      	lsrs	r3, r3, #16
 80062a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a8:	4413      	add	r3, r2
 80062aa:	041b      	lsls	r3, r3, #16
 80062ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	01db      	lsls	r3, r3, #7
 80062b8:	4413      	add	r3, r2
 80062ba:	3384      	adds	r3, #132	; 0x84
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	4611      	mov	r1, r2
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	01d2      	lsls	r2, r2, #7
 80062c8:	440a      	add	r2, r1
 80062ca:	3284      	adds	r2, #132	; 0x84
 80062cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80062d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	0c1b      	lsrs	r3, r3, #16
 80062de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e2:	4413      	add	r3, r2
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4619      	mov	r1, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	01db      	lsls	r3, r3, #7
 80062f0:	440b      	add	r3, r1
 80062f2:	3384      	adds	r3, #132	; 0x84
 80062f4:	4619      	mov	r1, r3
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800630a:	4413      	add	r3, r2
 800630c:	041b      	lsls	r3, r3, #16
 800630e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	01db      	lsls	r3, r3, #7
 800631a:	4413      	add	r3, r2
 800631c:	3384      	adds	r3, #132	; 0x84
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	6812      	ldr	r2, [r2, #0]
 8006324:	4611      	mov	r1, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	01d2      	lsls	r2, r2, #7
 800632a:	440a      	add	r2, r1
 800632c:	3284      	adds	r2, #132	; 0x84
 800632e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006332:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006342:	4413      	add	r3, r2
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4619      	mov	r1, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	01db      	lsls	r3, r3, #7
 8006350:	440b      	add	r3, r1
 8006352:	3384      	adds	r3, #132	; 0x84
 8006354:	4619      	mov	r1, r3
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4313      	orrs	r3, r2
 800635a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	01db      	lsls	r3, r3, #7
 8006366:	4413      	add	r3, r2
 8006368:	3384      	adds	r3, #132	; 0x84
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	6812      	ldr	r2, [r2, #0]
 8006370:	4611      	mov	r1, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	01d2      	lsls	r2, r2, #7
 8006376:	440a      	add	r2, r1
 8006378:	3284      	adds	r2, #132	; 0x84
 800637a:	f023 0307 	bic.w	r3, r3, #7
 800637e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	01db      	lsls	r3, r3, #7
 800638a:	4413      	add	r3, r2
 800638c:	3384      	adds	r3, #132	; 0x84
 800638e:	461a      	mov	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063a6:	041b      	lsls	r3, r3, #16
 80063a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	061b      	lsls	r3, r3, #24
 80063b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	01db      	lsls	r3, r3, #7
 80063bc:	4413      	add	r3, r2
 80063be:	3384      	adds	r3, #132	; 0x84
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	01db      	lsls	r3, r3, #7
 80063cc:	4413      	add	r3, r2
 80063ce:	3384      	adds	r3, #132	; 0x84
 80063d0:	461a      	mov	r2, r3
 80063d2:	2300      	movs	r3, #0
 80063d4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063dc:	461a      	mov	r2, r3
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4619      	mov	r1, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	01db      	lsls	r3, r3, #7
 80063f0:	440b      	add	r3, r1
 80063f2:	3384      	adds	r3, #132	; 0x84
 80063f4:	4619      	mov	r1, r3
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	01db      	lsls	r3, r3, #7
 8006406:	4413      	add	r3, r2
 8006408:	3384      	adds	r3, #132	; 0x84
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	4611      	mov	r1, r2
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	01d2      	lsls	r2, r2, #7
 8006416:	440a      	add	r2, r1
 8006418:	3284      	adds	r2, #132	; 0x84
 800641a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800641e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	01db      	lsls	r3, r3, #7
 800642a:	4413      	add	r3, r2
 800642c:	3384      	adds	r3, #132	; 0x84
 800642e:	461a      	mov	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	01db      	lsls	r3, r3, #7
 8006440:	4413      	add	r3, r2
 8006442:	3384      	adds	r3, #132	; 0x84
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	4611      	mov	r1, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	01d2      	lsls	r2, r2, #7
 8006450:	440a      	add	r2, r1
 8006452:	3284      	adds	r2, #132	; 0x84
 8006454:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006458:	f023 0307 	bic.w	r3, r3, #7
 800645c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	69da      	ldr	r2, [r3, #28]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	6809      	ldr	r1, [r1, #0]
 800646a:	4608      	mov	r0, r1
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	01c9      	lsls	r1, r1, #7
 8006470:	4401      	add	r1, r0
 8006472:	3184      	adds	r1, #132	; 0x84
 8006474:	4313      	orrs	r3, r2
 8006476:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	01db      	lsls	r3, r3, #7
 8006482:	4413      	add	r3, r2
 8006484:	3384      	adds	r3, #132	; 0x84
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	01db      	lsls	r3, r3, #7
 8006492:	4413      	add	r3, r2
 8006494:	3384      	adds	r3, #132	; 0x84
 8006496:	461a      	mov	r2, r3
 8006498:	2300      	movs	r3, #0
 800649a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	461a      	mov	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	01db      	lsls	r3, r3, #7
 80064a6:	4413      	add	r3, r2
 80064a8:	3384      	adds	r3, #132	; 0x84
 80064aa:	461a      	mov	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80064ba:	2304      	movs	r3, #4
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	e01b      	b.n	80064f8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d102      	bne.n	80064ce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80064c8:	2303      	movs	r3, #3
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	e014      	b.n	80064f8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d00b      	beq.n	80064ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d007      	beq.n	80064ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d003      	beq.n	80064ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064ea:	2b07      	cmp	r3, #7
 80064ec:	d102      	bne.n	80064f4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80064ee:	2302      	movs	r3, #2
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	e001      	b.n	80064f8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80064f4:	2301      	movs	r3, #1
 80064f6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	01db      	lsls	r3, r3, #7
 8006502:	4413      	add	r3, r2
 8006504:	3384      	adds	r3, #132	; 0x84
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	4611      	mov	r1, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	01d2      	lsls	r2, r2, #7
 8006512:	440a      	add	r2, r1
 8006514:	3284      	adds	r2, #132	; 0x84
 8006516:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800651a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	fb02 f303 	mul.w	r3, r2, r3
 8006526:	041a      	lsls	r2, r3, #16
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6859      	ldr	r1, [r3, #4]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	1acb      	subs	r3, r1, r3
 8006532:	69f9      	ldr	r1, [r7, #28]
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	3303      	adds	r3, #3
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	6809      	ldr	r1, [r1, #0]
 800653e:	4608      	mov	r0, r1
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	01c9      	lsls	r1, r1, #7
 8006544:	4401      	add	r1, r0
 8006546:	3184      	adds	r1, #132	; 0x84
 8006548:	4313      	orrs	r3, r2
 800654a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	01db      	lsls	r3, r3, #7
 8006556:	4413      	add	r3, r2
 8006558:	3384      	adds	r3, #132	; 0x84
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	4611      	mov	r1, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	01d2      	lsls	r2, r2, #7
 8006566:	440a      	add	r2, r1
 8006568:	3284      	adds	r2, #132	; 0x84
 800656a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800656e:	f023 0307 	bic.w	r3, r3, #7
 8006572:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	01db      	lsls	r3, r3, #7
 800657e:	4413      	add	r3, r2
 8006580:	3384      	adds	r3, #132	; 0x84
 8006582:	461a      	mov	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	01db      	lsls	r3, r3, #7
 8006594:	4413      	add	r3, r2
 8006596:	3384      	adds	r3, #132	; 0x84
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	4611      	mov	r1, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	01d2      	lsls	r2, r2, #7
 80065a4:	440a      	add	r2, r1
 80065a6:	3284      	adds	r2, #132	; 0x84
 80065a8:	f043 0301 	orr.w	r3, r3, #1
 80065ac:	6013      	str	r3, [r2, #0]
}
 80065ae:	bf00      	nop
 80065b0:	3724      	adds	r7, #36	; 0x24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e25b      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d075      	beq.n	80066c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065da:	4ba3      	ldr	r3, [pc, #652]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 030c 	and.w	r3, r3, #12
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d00c      	beq.n	8006600 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065e6:	4ba0      	ldr	r3, [pc, #640]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d112      	bne.n	8006618 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065f2:	4b9d      	ldr	r3, [pc, #628]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065fe:	d10b      	bne.n	8006618 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006600:	4b99      	ldr	r3, [pc, #612]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d05b      	beq.n	80066c4 <HAL_RCC_OscConfig+0x108>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d157      	bne.n	80066c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e236      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006620:	d106      	bne.n	8006630 <HAL_RCC_OscConfig+0x74>
 8006622:	4b91      	ldr	r3, [pc, #580]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a90      	ldr	r2, [pc, #576]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e01d      	b.n	800666c <HAL_RCC_OscConfig+0xb0>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006638:	d10c      	bne.n	8006654 <HAL_RCC_OscConfig+0x98>
 800663a:	4b8b      	ldr	r3, [pc, #556]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a8a      	ldr	r2, [pc, #552]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	4b88      	ldr	r3, [pc, #544]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a87      	ldr	r2, [pc, #540]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 800664c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	e00b      	b.n	800666c <HAL_RCC_OscConfig+0xb0>
 8006654:	4b84      	ldr	r3, [pc, #528]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a83      	ldr	r2, [pc, #524]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 800665a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	4b81      	ldr	r3, [pc, #516]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a80      	ldr	r2, [pc, #512]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800666a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d013      	beq.n	800669c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006674:	f7fc fcc4 	bl	8003000 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800667c:	f7fc fcc0 	bl	8003000 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b64      	cmp	r3, #100	; 0x64
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e1fb      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800668e:	4b76      	ldr	r3, [pc, #472]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0f0      	beq.n	800667c <HAL_RCC_OscConfig+0xc0>
 800669a:	e014      	b.n	80066c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669c:	f7fc fcb0 	bl	8003000 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066a4:	f7fc fcac 	bl	8003000 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b64      	cmp	r3, #100	; 0x64
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e1e7      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066b6:	4b6c      	ldr	r3, [pc, #432]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f0      	bne.n	80066a4 <HAL_RCC_OscConfig+0xe8>
 80066c2:	e000      	b.n	80066c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d063      	beq.n	800679a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066d2:	4b65      	ldr	r3, [pc, #404]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00b      	beq.n	80066f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066de:	4b62      	ldr	r3, [pc, #392]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d11c      	bne.n	8006724 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ea:	4b5f      	ldr	r3, [pc, #380]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d116      	bne.n	8006724 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066f6:	4b5c      	ldr	r3, [pc, #368]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <HAL_RCC_OscConfig+0x152>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d001      	beq.n	800670e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e1bb      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800670e:	4b56      	ldr	r3, [pc, #344]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	4952      	ldr	r1, [pc, #328]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 800671e:	4313      	orrs	r3, r2
 8006720:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006722:	e03a      	b.n	800679a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d020      	beq.n	800676e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800672c:	4b4f      	ldr	r3, [pc, #316]	; (800686c <HAL_RCC_OscConfig+0x2b0>)
 800672e:	2201      	movs	r2, #1
 8006730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006732:	f7fc fc65 	bl	8003000 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800673a:	f7fc fc61 	bl	8003000 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e19c      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800674c:	4b46      	ldr	r3, [pc, #280]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0f0      	beq.n	800673a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006758:	4b43      	ldr	r3, [pc, #268]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4940      	ldr	r1, [pc, #256]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006768:	4313      	orrs	r3, r2
 800676a:	600b      	str	r3, [r1, #0]
 800676c:	e015      	b.n	800679a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800676e:	4b3f      	ldr	r3, [pc, #252]	; (800686c <HAL_RCC_OscConfig+0x2b0>)
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006774:	f7fc fc44 	bl	8003000 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800677c:	f7fc fc40 	bl	8003000 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e17b      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800678e:	4b36      	ldr	r3, [pc, #216]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d030      	beq.n	8006808 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d016      	beq.n	80067dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067ae:	4b30      	ldr	r3, [pc, #192]	; (8006870 <HAL_RCC_OscConfig+0x2b4>)
 80067b0:	2201      	movs	r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b4:	f7fc fc24 	bl	8003000 <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067bc:	f7fc fc20 	bl	8003000 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e15b      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ce:	4b26      	ldr	r3, [pc, #152]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 80067d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0f0      	beq.n	80067bc <HAL_RCC_OscConfig+0x200>
 80067da:	e015      	b.n	8006808 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <HAL_RCC_OscConfig+0x2b4>)
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e2:	f7fc fc0d 	bl	8003000 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067ea:	f7fc fc09 	bl	8003000 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e144      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067fc:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 80067fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1f0      	bne.n	80067ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80a0 	beq.w	8006956 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006816:	2300      	movs	r3, #0
 8006818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
 800682a:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	4a0e      	ldr	r2, [pc, #56]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006834:	6413      	str	r3, [r2, #64]	; 0x40
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <HAL_RCC_OscConfig+0x2ac>)
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800683e:	60bb      	str	r3, [r7, #8]
 8006840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006842:	2301      	movs	r3, #1
 8006844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <HAL_RCC_OscConfig+0x2b8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684e:	2b00      	cmp	r3, #0
 8006850:	d121      	bne.n	8006896 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006852:	4b08      	ldr	r3, [pc, #32]	; (8006874 <HAL_RCC_OscConfig+0x2b8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a07      	ldr	r2, [pc, #28]	; (8006874 <HAL_RCC_OscConfig+0x2b8>)
 8006858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800685e:	f7fc fbcf 	bl	8003000 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006864:	e011      	b.n	800688a <HAL_RCC_OscConfig+0x2ce>
 8006866:	bf00      	nop
 8006868:	40023800 	.word	0x40023800
 800686c:	42470000 	.word	0x42470000
 8006870:	42470e80 	.word	0x42470e80
 8006874:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006878:	f7fc fbc2 	bl	8003000 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e0fd      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800688a:	4b81      	ldr	r3, [pc, #516]	; (8006a90 <HAL_RCC_OscConfig+0x4d4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f0      	beq.n	8006878 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d106      	bne.n	80068ac <HAL_RCC_OscConfig+0x2f0>
 800689e:	4b7d      	ldr	r3, [pc, #500]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	4a7c      	ldr	r2, [pc, #496]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80068a4:	f043 0301 	orr.w	r3, r3, #1
 80068a8:	6713      	str	r3, [r2, #112]	; 0x70
 80068aa:	e01c      	b.n	80068e6 <HAL_RCC_OscConfig+0x32a>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b05      	cmp	r3, #5
 80068b2:	d10c      	bne.n	80068ce <HAL_RCC_OscConfig+0x312>
 80068b4:	4b77      	ldr	r3, [pc, #476]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b8:	4a76      	ldr	r2, [pc, #472]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80068ba:	f043 0304 	orr.w	r3, r3, #4
 80068be:	6713      	str	r3, [r2, #112]	; 0x70
 80068c0:	4b74      	ldr	r3, [pc, #464]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c4:	4a73      	ldr	r2, [pc, #460]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	6713      	str	r3, [r2, #112]	; 0x70
 80068cc:	e00b      	b.n	80068e6 <HAL_RCC_OscConfig+0x32a>
 80068ce:	4b71      	ldr	r3, [pc, #452]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	4a70      	ldr	r2, [pc, #448]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	6713      	str	r3, [r2, #112]	; 0x70
 80068da:	4b6e      	ldr	r3, [pc, #440]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80068dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068de:	4a6d      	ldr	r2, [pc, #436]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80068e0:	f023 0304 	bic.w	r3, r3, #4
 80068e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d015      	beq.n	800691a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ee:	f7fc fb87 	bl	8003000 <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f4:	e00a      	b.n	800690c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068f6:	f7fc fb83 	bl	8003000 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f241 3288 	movw	r2, #5000	; 0x1388
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e0bc      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690c:	4b61      	ldr	r3, [pc, #388]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0ee      	beq.n	80068f6 <HAL_RCC_OscConfig+0x33a>
 8006918:	e014      	b.n	8006944 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800691a:	f7fc fb71 	bl	8003000 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006920:	e00a      	b.n	8006938 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006922:	f7fc fb6d 	bl	8003000 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006930:	4293      	cmp	r3, r2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e0a6      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006938:	4b56      	ldr	r3, [pc, #344]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1ee      	bne.n	8006922 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d105      	bne.n	8006956 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800694a:	4b52      	ldr	r3, [pc, #328]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	4a51      	ldr	r2, [pc, #324]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 8006950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006954:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8092 	beq.w	8006a84 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006960:	4b4c      	ldr	r3, [pc, #304]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 030c 	and.w	r3, r3, #12
 8006968:	2b08      	cmp	r3, #8
 800696a:	d05c      	beq.n	8006a26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d141      	bne.n	80069f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006974:	4b48      	ldr	r3, [pc, #288]	; (8006a98 <HAL_RCC_OscConfig+0x4dc>)
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800697a:	f7fc fb41 	bl	8003000 <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006982:	f7fc fb3d 	bl	8003000 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e078      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006994:	4b3f      	ldr	r3, [pc, #252]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f0      	bne.n	8006982 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69da      	ldr	r2, [r3, #28]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	019b      	lsls	r3, r3, #6
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	3b01      	subs	r3, #1
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	061b      	lsls	r3, r3, #24
 80069c4:	4933      	ldr	r1, [pc, #204]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ca:	4b33      	ldr	r3, [pc, #204]	; (8006a98 <HAL_RCC_OscConfig+0x4dc>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d0:	f7fc fb16 	bl	8003000 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069d8:	f7fc fb12 	bl	8003000 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e04d      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ea:	4b2a      	ldr	r3, [pc, #168]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0f0      	beq.n	80069d8 <HAL_RCC_OscConfig+0x41c>
 80069f6:	e045      	b.n	8006a84 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069f8:	4b27      	ldr	r3, [pc, #156]	; (8006a98 <HAL_RCC_OscConfig+0x4dc>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069fe:	f7fc faff 	bl	8003000 <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a06:	f7fc fafb 	bl	8003000 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e036      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a18:	4b1e      	ldr	r3, [pc, #120]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1f0      	bne.n	8006a06 <HAL_RCC_OscConfig+0x44a>
 8006a24:	e02e      	b.n	8006a84 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e029      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a32:	4b18      	ldr	r3, [pc, #96]	; (8006a94 <HAL_RCC_OscConfig+0x4d8>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d11c      	bne.n	8006a80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d115      	bne.n	8006a80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d10d      	bne.n	8006a80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d106      	bne.n	8006a80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	40007000 	.word	0x40007000
 8006a94:	40023800 	.word	0x40023800
 8006a98:	42470060 	.word	0x42470060

08006a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0cc      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab0:	4b68      	ldr	r3, [pc, #416]	; (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d90c      	bls.n	8006ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006abe:	4b65      	ldr	r3, [pc, #404]	; (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac6:	4b63      	ldr	r3, [pc, #396]	; (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0b8      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d020      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af0:	4b59      	ldr	r3, [pc, #356]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4a58      	ldr	r2, [pc, #352]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b08:	4b53      	ldr	r3, [pc, #332]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4a52      	ldr	r2, [pc, #328]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b14:	4b50      	ldr	r3, [pc, #320]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	494d      	ldr	r1, [pc, #308]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d044      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	4b47      	ldr	r3, [pc, #284]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d119      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e07f      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d003      	beq.n	8006b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d107      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b5a:	4b3f      	ldr	r3, [pc, #252]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e06f      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6a:	4b3b      	ldr	r3, [pc, #236]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e067      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b7a:	4b37      	ldr	r3, [pc, #220]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f023 0203 	bic.w	r2, r3, #3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4934      	ldr	r1, [pc, #208]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b8c:	f7fc fa38 	bl	8003000 <HAL_GetTick>
 8006b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b92:	e00a      	b.n	8006baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b94:	f7fc fa34 	bl	8003000 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e04f      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006baa:	4b2b      	ldr	r3, [pc, #172]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 020c 	and.w	r2, r3, #12
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d1eb      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bbc:	4b25      	ldr	r3, [pc, #148]	; (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d20c      	bcs.n	8006be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bca:	4b22      	ldr	r3, [pc, #136]	; (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd2:	4b20      	ldr	r3, [pc, #128]	; (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e032      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf0:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4916      	ldr	r1, [pc, #88]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c0e:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	490e      	ldr	r1, [pc, #56]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c22:	f000 f821 	bl	8006c68 <HAL_RCC_GetSysClockFreq>
 8006c26:	4602      	mov	r2, r0
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	490a      	ldr	r1, [pc, #40]	; (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006c34:	5ccb      	ldrb	r3, [r1, r3]
 8006c36:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3a:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c3e:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <HAL_RCC_ClockConfig+0x1c8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fb fb2e 	bl	80022a4 <HAL_InitTick>

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40023c00 	.word	0x40023c00
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	0800f7e8 	.word	0x0800f7e8
 8006c60:	20000000 	.word	0x20000000
 8006c64:	20000048 	.word	0x20000048

08006c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	2300      	movs	r3, #0
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c80:	4b67      	ldr	r3, [pc, #412]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 030c 	and.w	r3, r3, #12
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d00d      	beq.n	8006ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	f200 80bd 	bhi.w	8006e0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_RCC_GetSysClockFreq+0x34>
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d003      	beq.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c9a:	e0b7      	b.n	8006e0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c9c:	4b61      	ldr	r3, [pc, #388]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006c9e:	60bb      	str	r3, [r7, #8]
       break;
 8006ca0:	e0b7      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ca2:	4b61      	ldr	r3, [pc, #388]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006ca4:	60bb      	str	r3, [r7, #8]
      break;
 8006ca6:	e0b4      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ca8:	4b5d      	ldr	r3, [pc, #372]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cb2:	4b5b      	ldr	r3, [pc, #364]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d04d      	beq.n	8006d5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cbe:	4b58      	ldr	r3, [pc, #352]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	099b      	lsrs	r3, r3, #6
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006cce:	f04f 0100 	mov.w	r1, #0
 8006cd2:	ea02 0800 	and.w	r8, r2, r0
 8006cd6:	ea03 0901 	and.w	r9, r3, r1
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4649      	mov	r1, r9
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	014b      	lsls	r3, r1, #5
 8006ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006cec:	0142      	lsls	r2, r0, #5
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	ebb0 0008 	subs.w	r0, r0, r8
 8006cf6:	eb61 0109 	sbc.w	r1, r1, r9
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	018b      	lsls	r3, r1, #6
 8006d04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d08:	0182      	lsls	r2, r0, #6
 8006d0a:	1a12      	subs	r2, r2, r0
 8006d0c:	eb63 0301 	sbc.w	r3, r3, r1
 8006d10:	f04f 0000 	mov.w	r0, #0
 8006d14:	f04f 0100 	mov.w	r1, #0
 8006d18:	00d9      	lsls	r1, r3, #3
 8006d1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d1e:	00d0      	lsls	r0, r2, #3
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	eb12 0208 	adds.w	r2, r2, r8
 8006d28:	eb43 0309 	adc.w	r3, r3, r9
 8006d2c:	f04f 0000 	mov.w	r0, #0
 8006d30:	f04f 0100 	mov.w	r1, #0
 8006d34:	0259      	lsls	r1, r3, #9
 8006d36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006d3a:	0250      	lsls	r0, r2, #9
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4610      	mov	r0, r2
 8006d42:	4619      	mov	r1, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	461a      	mov	r2, r3
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	f7f9 fe96 	bl	8000a7c <__aeabi_uldivmod>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4613      	mov	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e04a      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d5a:	4b31      	ldr	r3, [pc, #196]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	099b      	lsrs	r3, r3, #6
 8006d60:	461a      	mov	r2, r3
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d6a:	f04f 0100 	mov.w	r1, #0
 8006d6e:	ea02 0400 	and.w	r4, r2, r0
 8006d72:	ea03 0501 	and.w	r5, r3, r1
 8006d76:	4620      	mov	r0, r4
 8006d78:	4629      	mov	r1, r5
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	014b      	lsls	r3, r1, #5
 8006d84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d88:	0142      	lsls	r2, r0, #5
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	1b00      	subs	r0, r0, r4
 8006d90:	eb61 0105 	sbc.w	r1, r1, r5
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	018b      	lsls	r3, r1, #6
 8006d9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006da2:	0182      	lsls	r2, r0, #6
 8006da4:	1a12      	subs	r2, r2, r0
 8006da6:	eb63 0301 	sbc.w	r3, r3, r1
 8006daa:	f04f 0000 	mov.w	r0, #0
 8006dae:	f04f 0100 	mov.w	r1, #0
 8006db2:	00d9      	lsls	r1, r3, #3
 8006db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006db8:	00d0      	lsls	r0, r2, #3
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	1912      	adds	r2, r2, r4
 8006dc0:	eb45 0303 	adc.w	r3, r5, r3
 8006dc4:	f04f 0000 	mov.w	r0, #0
 8006dc8:	f04f 0100 	mov.w	r1, #0
 8006dcc:	0299      	lsls	r1, r3, #10
 8006dce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006dd2:	0290      	lsls	r0, r2, #10
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4619      	mov	r1, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	461a      	mov	r2, r3
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	f7f9 fe4a 	bl	8000a7c <__aeabi_uldivmod>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4613      	mov	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e08:	60bb      	str	r3, [r7, #8]
      break;
 8006e0a:	e002      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e0e:	60bb      	str	r3, [r7, #8]
      break;
 8006e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e12:	68bb      	ldr	r3, [r7, #8]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e1e:	bf00      	nop
 8006e20:	40023800 	.word	0x40023800
 8006e24:	00f42400 	.word	0x00f42400
 8006e28:	007a1200 	.word	0x007a1200

08006e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e30:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e32:	681b      	ldr	r3, [r3, #0]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20000000 	.word	0x20000000

08006e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e48:	f7ff fff0 	bl	8006e2c <HAL_RCC_GetHCLKFreq>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	0a9b      	lsrs	r3, r3, #10
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	4903      	ldr	r1, [pc, #12]	; (8006e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e5a:	5ccb      	ldrb	r3, [r1, r3]
 8006e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40023800 	.word	0x40023800
 8006e68:	0800f7f8 	.word	0x0800f7f8

08006e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e70:	f7ff ffdc 	bl	8006e2c <HAL_RCC_GetHCLKFreq>
 8006e74:	4602      	mov	r2, r0
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	0b5b      	lsrs	r3, r3, #13
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	4903      	ldr	r1, [pc, #12]	; (8006e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e82:	5ccb      	ldrb	r3, [r1, r3]
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40023800 	.word	0x40023800
 8006e90:	0800f7f8 	.word	0x0800f7f8

08006e94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	220f      	movs	r2, #15
 8006ea2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ea4:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 0203 	and.w	r2, r3, #3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006eb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ebc:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ec8:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	08db      	lsrs	r3, r3, #3
 8006ece:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ed6:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <HAL_RCC_GetClockConfig+0x60>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 020f 	and.w	r2, r3, #15
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	601a      	str	r2, [r3, #0]
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	40023c00 	.word	0x40023c00

08006ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d105      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d075      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f2c:	4bad      	ldr	r3, [pc, #692]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f32:	f7fc f865 	bl	8003000 <HAL_GetTick>
 8006f36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f38:	e008      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f3a:	f7fc f861 	bl	8003000 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e18b      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f4c:	4ba6      	ldr	r3, [pc, #664]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1f0      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d009      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	019a      	lsls	r2, r3, #6
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	071b      	lsls	r3, r3, #28
 8006f70:	499d      	ldr	r1, [pc, #628]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01f      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f84:	4b98      	ldr	r3, [pc, #608]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8a:	0f1b      	lsrs	r3, r3, #28
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	019a      	lsls	r2, r3, #6
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	061b      	lsls	r3, r3, #24
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	071b      	lsls	r3, r3, #28
 8006fa4:	4990      	ldr	r1, [pc, #576]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006fac:	4b8e      	ldr	r3, [pc, #568]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb2:	f023 021f 	bic.w	r2, r3, #31
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	498a      	ldr	r1, [pc, #552]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00d      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	019a      	lsls	r2, r3, #6
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	061b      	lsls	r3, r3, #24
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	071b      	lsls	r3, r3, #28
 8006fe4:	4980      	ldr	r1, [pc, #512]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fec:	4b7d      	ldr	r3, [pc, #500]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ff2:	f7fc f805 	bl	8003000 <HAL_GetTick>
 8006ff6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ff8:	e008      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ffa:	f7fc f801 	bl	8003000 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d901      	bls.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e12b      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800700c:	4b76      	ldr	r3, [pc, #472]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0f0      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800702c:	2b00      	cmp	r3, #0
 800702e:	d079      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007030:	4b6e      	ldr	r3, [pc, #440]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007036:	f7fb ffe3 	bl	8003000 <HAL_GetTick>
 800703a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800703c:	e008      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800703e:	f7fb ffdf 	bl	8003000 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e109      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007050:	4b65      	ldr	r3, [pc, #404]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705c:	d0ef      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	d020      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800706a:	4b5f      	ldr	r3, [pc, #380]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800706c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007070:	0f1b      	lsrs	r3, r3, #28
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	019a      	lsls	r2, r3, #6
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	061b      	lsls	r3, r3, #24
 8007084:	431a      	orrs	r2, r3
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	071b      	lsls	r3, r3, #28
 800708a:	4957      	ldr	r1, [pc, #348]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800708c:	4313      	orrs	r3, r2
 800708e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007092:	4b55      	ldr	r3, [pc, #340]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007098:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	021b      	lsls	r3, r3, #8
 80070a4:	4950      	ldr	r1, [pc, #320]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01e      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070b8:	4b4b      	ldr	r3, [pc, #300]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	0e1b      	lsrs	r3, r3, #24
 80070c0:	f003 030f 	and.w	r3, r3, #15
 80070c4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	019a      	lsls	r2, r3, #6
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	061b      	lsls	r3, r3, #24
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	071b      	lsls	r3, r3, #28
 80070d8:	4943      	ldr	r1, [pc, #268]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80070e0:	4b41      	ldr	r3, [pc, #260]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	493e      	ldr	r1, [pc, #248]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80070f6:	4b3d      	ldr	r3, [pc, #244]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070fc:	f7fb ff80 	bl	8003000 <HAL_GetTick>
 8007100:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007102:	e008      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007104:	f7fb ff7c 	bl	8003000 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e0a6      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007116:	4b34      	ldr	r3, [pc, #208]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800711e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007122:	d1ef      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 808d 	beq.w	800724c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	4b2c      	ldr	r3, [pc, #176]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	4a2b      	ldr	r2, [pc, #172]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800713c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007140:	6413      	str	r3, [r2, #64]	; 0x40
 8007142:	4b29      	ldr	r3, [pc, #164]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800714e:	4b28      	ldr	r3, [pc, #160]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a27      	ldr	r2, [pc, #156]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007158:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800715a:	f7fb ff51 	bl	8003000 <HAL_GetTick>
 800715e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007160:	e008      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007162:	f7fb ff4d 	bl	8003000 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e077      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007174:	4b1e      	ldr	r3, [pc, #120]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0f0      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007180:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007188:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d039      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	429a      	cmp	r2, r3
 800719c:	d032      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800719e:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071a8:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071ae:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80071b4:	4a0c      	ldr	r2, [pc, #48]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d11e      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80071c6:	f7fb ff1b 	bl	8003000 <HAL_GetTick>
 80071ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071cc:	e014      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071ce:	f7fb ff17 	bl	8003000 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071dc:	4293      	cmp	r3, r2
 80071de:	d90b      	bls.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e03f      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80071e4:	42470068 	.word	0x42470068
 80071e8:	40023800 	.word	0x40023800
 80071ec:	42470070 	.word	0x42470070
 80071f0:	40007000 	.word	0x40007000
 80071f4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f8:	4b1c      	ldr	r3, [pc, #112]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0e4      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007210:	d10d      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007226:	4911      	ldr	r1, [pc, #68]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007228:	4313      	orrs	r3, r2
 800722a:	608b      	str	r3, [r1, #8]
 800722c:	e005      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800722e:	4b0f      	ldr	r3, [pc, #60]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	4a0e      	ldr	r2, [pc, #56]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007234:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007238:	6093      	str	r3, [r2, #8]
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800723c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007246:	4909      	ldr	r1, [pc, #36]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007248:	4313      	orrs	r3, r2
 800724a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800725e:	4b04      	ldr	r3, [pc, #16]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007260:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40023800 	.word	0x40023800
 8007270:	424711e0 	.word	0x424711e0

08007274 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e025      	b.n	80072d4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d106      	bne.n	80072a2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7fa fff7 	bl	8002290 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2202      	movs	r2, #2
 80072a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3304      	adds	r3, #4
 80072b2:	4619      	mov	r1, r3
 80072b4:	4610      	mov	r0, r2
 80072b6:	f001 fc77 	bl	8008ba8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	f001 fce2 	bl	8008c8e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e056      	b.n	800739c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d106      	bne.n	800730e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7fa fde9 	bl	8001ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2202      	movs	r2, #2
 8007312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007324:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	ea42 0103 	orr.w	r1, r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	f003 0104 	and.w	r1, r3, #4
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69da      	ldr	r2, [r3, #28]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800738a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e01d      	b.n	80073f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d106      	bne.n	80073d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fa fdd0 	bl	8001f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3304      	adds	r3, #4
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f000 fb74 	bl	8007ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b06      	cmp	r3, #6
 800741a:	d007      	beq.n	800742c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0201 	orr.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007442:	b480      	push	{r7}
 8007444:	b085      	sub	sp, #20
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0201 	orr.w	r2, r2, #1
 8007458:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b06      	cmp	r3, #6
 800746a:	d007      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e01d      	b.n	80074d8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fa fd7f 	bl	8001fb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3304      	adds	r3, #4
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f000 fb01 	bl	8007ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2201      	movs	r2, #1
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fdd6 	bl	80080a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a15      	ldr	r2, [pc, #84]	; (8007554 <HAL_TIM_PWM_Start+0x74>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d004      	beq.n	800750c <HAL_TIM_PWM_Start+0x2c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a14      	ldr	r2, [pc, #80]	; (8007558 <HAL_TIM_PWM_Start+0x78>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d101      	bne.n	8007510 <HAL_TIM_PWM_Start+0x30>
 800750c:	2301      	movs	r3, #1
 800750e:	e000      	b.n	8007512 <HAL_TIM_PWM_Start+0x32>
 8007510:	2300      	movs	r3, #0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d007      	beq.n	8007526 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007524:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b06      	cmp	r3, #6
 8007536:	d007      	beq.n	8007548 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	40010000 	.word	0x40010000
 8007558:	40010400 	.word	0x40010400

0800755c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b02      	cmp	r3, #2
 8007570:	d122      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b02      	cmp	r3, #2
 800757e:	d11b      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0202 	mvn.w	r2, #2
 8007588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f003 0303 	and.w	r3, r3, #3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa78 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 80075a4:	e005      	b.n	80075b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa6a 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fa7b 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d122      	bne.n	800760c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d11b      	bne.n	800760c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0204 	mvn.w	r2, #4
 80075dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2202      	movs	r2, #2
 80075e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa4e 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 80075f8:	e005      	b.n	8007606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fa40 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fa51 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	2b08      	cmp	r3, #8
 8007618:	d122      	bne.n	8007660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b08      	cmp	r3, #8
 8007626:	d11b      	bne.n	8007660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f06f 0208 	mvn.w	r2, #8
 8007630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2204      	movs	r2, #4
 8007636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa24 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 800764c:	e005      	b.n	800765a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa16 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fa27 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	2b10      	cmp	r3, #16
 800766c:	d122      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b10      	cmp	r3, #16
 800767a:	d11b      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0210 	mvn.w	r2, #16
 8007684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2208      	movs	r2, #8
 800768a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f9fa 	bl	8007a94 <HAL_TIM_IC_CaptureCallback>
 80076a0:	e005      	b.n	80076ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f9ec 	bl	8007a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f9fd 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d10e      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d107      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f06f 0201 	mvn.w	r2, #1
 80076d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fa f948 	bl	8001970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ea:	2b80      	cmp	r3, #128	; 0x80
 80076ec:	d10e      	bne.n	800770c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f8:	2b80      	cmp	r3, #128	; 0x80
 80076fa:	d107      	bne.n	800770c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fd78 	bl	80081fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007716:	2b40      	cmp	r3, #64	; 0x40
 8007718:	d10e      	bne.n	8007738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b40      	cmp	r3, #64	; 0x40
 8007726:	d107      	bne.n	8007738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9c2 	bl	8007abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b20      	cmp	r3, #32
 8007744:	d10e      	bne.n	8007764 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b20      	cmp	r3, #32
 8007752:	d107      	bne.n	8007764 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f06f 0220 	mvn.w	r2, #32
 800775c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fd42 	bl	80081e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007782:	2302      	movs	r3, #2
 8007784:	e0b4      	b.n	80078f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2202      	movs	r2, #2
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b0c      	cmp	r3, #12
 800779a:	f200 809f 	bhi.w	80078dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077d9 	.word	0x080077d9
 80077a8:	080078dd 	.word	0x080078dd
 80077ac:	080078dd 	.word	0x080078dd
 80077b0:	080078dd 	.word	0x080078dd
 80077b4:	08007819 	.word	0x08007819
 80077b8:	080078dd 	.word	0x080078dd
 80077bc:	080078dd 	.word	0x080078dd
 80077c0:	080078dd 	.word	0x080078dd
 80077c4:	0800785b 	.word	0x0800785b
 80077c8:	080078dd 	.word	0x080078dd
 80077cc:	080078dd 	.word	0x080078dd
 80077d0:	080078dd 	.word	0x080078dd
 80077d4:	0800789b 	.word	0x0800789b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fa16 	bl	8007c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699a      	ldr	r2, [r3, #24]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0208 	orr.w	r2, r2, #8
 80077f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0204 	bic.w	r2, r2, #4
 8007802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6999      	ldr	r1, [r3, #24]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	691a      	ldr	r2, [r3, #16]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	619a      	str	r2, [r3, #24]
      break;
 8007816:	e062      	b.n	80078de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fa66 	bl	8007cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6999      	ldr	r1, [r3, #24]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	021a      	lsls	r2, r3, #8
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	619a      	str	r2, [r3, #24]
      break;
 8007858:	e041      	b.n	80078de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 fabb 	bl	8007ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69da      	ldr	r2, [r3, #28]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0208 	orr.w	r2, r2, #8
 8007874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69da      	ldr	r2, [r3, #28]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0204 	bic.w	r2, r2, #4
 8007884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69d9      	ldr	r1, [r3, #28]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	61da      	str	r2, [r3, #28]
      break;
 8007898:	e021      	b.n	80078de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fb0f 	bl	8007ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69da      	ldr	r2, [r3, #28]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69da      	ldr	r2, [r3, #28]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69d9      	ldr	r1, [r3, #28]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	021a      	lsls	r2, r3, #8
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	61da      	str	r2, [r3, #28]
      break;
 80078da:	e000      	b.n	80078de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80078dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_TIM_ConfigClockSource+0x18>
 800790c:	2302      	movs	r3, #2
 800790e:	e0b3      	b.n	8007a78 <HAL_TIM_ConfigClockSource+0x180>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800792e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007936:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007948:	d03e      	beq.n	80079c8 <HAL_TIM_ConfigClockSource+0xd0>
 800794a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800794e:	f200 8087 	bhi.w	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007956:	f000 8085 	beq.w	8007a64 <HAL_TIM_ConfigClockSource+0x16c>
 800795a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795e:	d87f      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007960:	2b70      	cmp	r3, #112	; 0x70
 8007962:	d01a      	beq.n	800799a <HAL_TIM_ConfigClockSource+0xa2>
 8007964:	2b70      	cmp	r3, #112	; 0x70
 8007966:	d87b      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007968:	2b60      	cmp	r3, #96	; 0x60
 800796a:	d050      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x116>
 800796c:	2b60      	cmp	r3, #96	; 0x60
 800796e:	d877      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007970:	2b50      	cmp	r3, #80	; 0x50
 8007972:	d03c      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0xf6>
 8007974:	2b50      	cmp	r3, #80	; 0x50
 8007976:	d873      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d058      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0x136>
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d86f      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007980:	2b30      	cmp	r3, #48	; 0x30
 8007982:	d064      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x156>
 8007984:	2b30      	cmp	r3, #48	; 0x30
 8007986:	d86b      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007988:	2b20      	cmp	r3, #32
 800798a:	d060      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x156>
 800798c:	2b20      	cmp	r3, #32
 800798e:	d867      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d05c      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x156>
 8007994:	2b10      	cmp	r3, #16
 8007996:	d05a      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007998:	e062      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	6899      	ldr	r1, [r3, #8]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f000 fb5b 	bl	8008064 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	609a      	str	r2, [r3, #8]
      break;
 80079c6:	e04e      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	6899      	ldr	r1, [r3, #8]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f000 fb44 	bl	8008064 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079ea:	609a      	str	r2, [r3, #8]
      break;
 80079ec:	e03b      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6859      	ldr	r1, [r3, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f000 fab8 	bl	8007f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2150      	movs	r1, #80	; 0x50
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fb11 	bl	800802e <TIM_ITRx_SetConfig>
      break;
 8007a0c:	e02b      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6859      	ldr	r1, [r3, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f000 fad7 	bl	8007fce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2160      	movs	r1, #96	; 0x60
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 fb01 	bl	800802e <TIM_ITRx_SetConfig>
      break;
 8007a2c:	e01b      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6859      	ldr	r1, [r3, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f000 fa98 	bl	8007f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2140      	movs	r1, #64	; 0x40
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 faf1 	bl	800802e <TIM_ITRx_SetConfig>
      break;
 8007a4c:	e00b      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f000 fae8 	bl	800802e <TIM_ITRx_SetConfig>
      break;
 8007a5e:	e002      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007a60:	bf00      	nop
 8007a62:	e000      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007a64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a40      	ldr	r2, [pc, #256]	; (8007be4 <TIM_Base_SetConfig+0x114>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d013      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aee:	d00f      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a3d      	ldr	r2, [pc, #244]	; (8007be8 <TIM_Base_SetConfig+0x118>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a3c      	ldr	r2, [pc, #240]	; (8007bec <TIM_Base_SetConfig+0x11c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d007      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a3b      	ldr	r2, [pc, #236]	; (8007bf0 <TIM_Base_SetConfig+0x120>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a3a      	ldr	r2, [pc, #232]	; (8007bf4 <TIM_Base_SetConfig+0x124>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d108      	bne.n	8007b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a2f      	ldr	r2, [pc, #188]	; (8007be4 <TIM_Base_SetConfig+0x114>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d02b      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b30:	d027      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a2c      	ldr	r2, [pc, #176]	; (8007be8 <TIM_Base_SetConfig+0x118>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d023      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a2b      	ldr	r2, [pc, #172]	; (8007bec <TIM_Base_SetConfig+0x11c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d01f      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a2a      	ldr	r2, [pc, #168]	; (8007bf0 <TIM_Base_SetConfig+0x120>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d01b      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a29      	ldr	r2, [pc, #164]	; (8007bf4 <TIM_Base_SetConfig+0x124>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d017      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a28      	ldr	r2, [pc, #160]	; (8007bf8 <TIM_Base_SetConfig+0x128>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d013      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a27      	ldr	r2, [pc, #156]	; (8007bfc <TIM_Base_SetConfig+0x12c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00f      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a26      	ldr	r2, [pc, #152]	; (8007c00 <TIM_Base_SetConfig+0x130>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00b      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a25      	ldr	r2, [pc, #148]	; (8007c04 <TIM_Base_SetConfig+0x134>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d007      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a24      	ldr	r2, [pc, #144]	; (8007c08 <TIM_Base_SetConfig+0x138>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d003      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a23      	ldr	r2, [pc, #140]	; (8007c0c <TIM_Base_SetConfig+0x13c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d108      	bne.n	8007b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a0a      	ldr	r2, [pc, #40]	; (8007be4 <TIM_Base_SetConfig+0x114>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <TIM_Base_SetConfig+0xf8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a0c      	ldr	r2, [pc, #48]	; (8007bf4 <TIM_Base_SetConfig+0x124>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d103      	bne.n	8007bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	615a      	str	r2, [r3, #20]
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40010000 	.word	0x40010000
 8007be8:	40000400 	.word	0x40000400
 8007bec:	40000800 	.word	0x40000800
 8007bf0:	40000c00 	.word	0x40000c00
 8007bf4:	40010400 	.word	0x40010400
 8007bf8:	40014000 	.word	0x40014000
 8007bfc:	40014400 	.word	0x40014400
 8007c00:	40014800 	.word	0x40014800
 8007c04:	40001800 	.word	0x40001800
 8007c08:	40001c00 	.word	0x40001c00
 8007c0c:	40002000 	.word	0x40002000

08007c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f023 0201 	bic.w	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0303 	bic.w	r3, r3, #3
 8007c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f023 0302 	bic.w	r3, r3, #2
 8007c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a20      	ldr	r2, [pc, #128]	; (8007ce8 <TIM_OC1_SetConfig+0xd8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d003      	beq.n	8007c74 <TIM_OC1_SetConfig+0x64>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a1f      	ldr	r2, [pc, #124]	; (8007cec <TIM_OC1_SetConfig+0xdc>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d10c      	bne.n	8007c8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f023 0308 	bic.w	r3, r3, #8
 8007c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f023 0304 	bic.w	r3, r3, #4
 8007c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a15      	ldr	r2, [pc, #84]	; (8007ce8 <TIM_OC1_SetConfig+0xd8>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d003      	beq.n	8007c9e <TIM_OC1_SetConfig+0x8e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a14      	ldr	r2, [pc, #80]	; (8007cec <TIM_OC1_SetConfig+0xdc>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d111      	bne.n	8007cc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	621a      	str	r2, [r3, #32]
}
 8007cdc:	bf00      	nop
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40010400 	.word	0x40010400

08007cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0210 	bic.w	r2, r3, #16
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f023 0320 	bic.w	r3, r3, #32
 8007d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	011b      	lsls	r3, r3, #4
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a22      	ldr	r2, [pc, #136]	; (8007dd4 <TIM_OC2_SetConfig+0xe4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_OC2_SetConfig+0x68>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a21      	ldr	r2, [pc, #132]	; (8007dd8 <TIM_OC2_SetConfig+0xe8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d10d      	bne.n	8007d74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a17      	ldr	r2, [pc, #92]	; (8007dd4 <TIM_OC2_SetConfig+0xe4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d003      	beq.n	8007d84 <TIM_OC2_SetConfig+0x94>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <TIM_OC2_SetConfig+0xe8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d113      	bne.n	8007dac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40010400 	.word	0x40010400

08007ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f023 0303 	bic.w	r3, r3, #3
 8007e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a21      	ldr	r2, [pc, #132]	; (8007ebc <TIM_OC3_SetConfig+0xe0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d003      	beq.n	8007e42 <TIM_OC3_SetConfig+0x66>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a20      	ldr	r2, [pc, #128]	; (8007ec0 <TIM_OC3_SetConfig+0xe4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d10d      	bne.n	8007e5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a16      	ldr	r2, [pc, #88]	; (8007ebc <TIM_OC3_SetConfig+0xe0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d003      	beq.n	8007e6e <TIM_OC3_SetConfig+0x92>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <TIM_OC3_SetConfig+0xe4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d113      	bne.n	8007e96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	621a      	str	r2, [r3, #32]
}
 8007eb0:	bf00      	nop
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	40010000 	.word	0x40010000
 8007ec0:	40010400 	.word	0x40010400

08007ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	031b      	lsls	r3, r3, #12
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a12      	ldr	r2, [pc, #72]	; (8007f68 <TIM_OC4_SetConfig+0xa4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_OC4_SetConfig+0x68>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a11      	ldr	r2, [pc, #68]	; (8007f6c <TIM_OC4_SetConfig+0xa8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d109      	bne.n	8007f40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	019b      	lsls	r3, r3, #6
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	621a      	str	r2, [r3, #32]
}
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	40010000 	.word	0x40010000
 8007f6c:	40010400 	.word	0x40010400

08007f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f023 0201 	bic.w	r2, r3, #1
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f023 030a 	bic.w	r3, r3, #10
 8007fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	621a      	str	r2, [r3, #32]
}
 8007fc2:	bf00      	nop
 8007fc4:	371c      	adds	r7, #28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b087      	sub	sp, #28
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f023 0210 	bic.w	r2, r3, #16
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	031b      	lsls	r3, r3, #12
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800800a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	621a      	str	r2, [r3, #32]
}
 8008022:	bf00      	nop
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800802e:	b480      	push	{r7}
 8008030:	b085      	sub	sp, #20
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	f043 0307 	orr.w	r3, r3, #7
 8008050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	609a      	str	r2, [r3, #8]
}
 8008058:	bf00      	nop
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800807e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	021a      	lsls	r2, r3, #8
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	431a      	orrs	r2, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4313      	orrs	r3, r2
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	4313      	orrs	r3, r2
 8008090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	609a      	str	r2, [r3, #8]
}
 8008098:	bf00      	nop
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	2201      	movs	r2, #1
 80080b8:	fa02 f303 	lsl.w	r3, r2, r3
 80080bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1a      	ldr	r2, [r3, #32]
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	43db      	mvns	r3, r3
 80080c6:	401a      	ands	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a1a      	ldr	r2, [r3, #32]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f003 031f 	and.w	r3, r3, #31
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	fa01 f303 	lsl.w	r3, r1, r3
 80080dc:	431a      	orrs	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008104:	2302      	movs	r3, #2
 8008106:	e05a      	b.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a21      	ldr	r2, [pc, #132]	; (80081cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d022      	beq.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008154:	d01d      	beq.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a1d      	ldr	r2, [pc, #116]	; (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d018      	beq.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a1b      	ldr	r2, [pc, #108]	; (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d013      	beq.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a1a      	ldr	r2, [pc, #104]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d00e      	beq.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a18      	ldr	r2, [pc, #96]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d009      	beq.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a17      	ldr	r2, [pc, #92]	; (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d004      	beq.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a15      	ldr	r2, [pc, #84]	; (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d10c      	bne.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	40010000 	.word	0x40010000
 80081d0:	40000400 	.word	0x40000400
 80081d4:	40000800 	.word	0x40000800
 80081d8:	40000c00 	.word	0x40000c00
 80081dc:	40010400 	.word	0x40010400
 80081e0:	40014000 	.word	0x40014000
 80081e4:	40001800 	.word	0x40001800

080081e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e03f      	b.n	80082a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7f9 ff50 	bl	80020dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2224      	movs	r2, #36	; 0x24
 8008240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f90b 	bl	8008470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	691a      	ldr	r2, [r3, #16]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695a      	ldr	r2, [r3, #20]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2220      	movs	r2, #32
 8008294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b088      	sub	sp, #32
 80082ae:	af02      	add	r7, sp, #8
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	603b      	str	r3, [r7, #0]
 80082b6:	4613      	mov	r3, r2
 80082b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	f040 8083 	bne.w	80083d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <HAL_UART_Transmit+0x2e>
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e07b      	b.n	80083d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_UART_Transmit+0x40>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e074      	b.n	80083d4 <HAL_UART_Transmit+0x12a>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2221      	movs	r2, #33	; 0x21
 80082fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008300:	f7fa fe7e 	bl	8003000 <HAL_GetTick>
 8008304:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	88fa      	ldrh	r2, [r7, #6]
 800830a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	88fa      	ldrh	r2, [r7, #6]
 8008310:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800831a:	e042      	b.n	80083a2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008320:	b29b      	uxth	r3, r3
 8008322:	3b01      	subs	r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008332:	d122      	bne.n	800837a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2200      	movs	r2, #0
 800833c:	2180      	movs	r1, #128	; 0x80
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 f84c 	bl	80083dc <UART_WaitOnFlagUntilTimeout>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e042      	b.n	80083d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008360:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d103      	bne.n	8008372 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	3302      	adds	r3, #2
 800836e:	60bb      	str	r3, [r7, #8]
 8008370:	e017      	b.n	80083a2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	3301      	adds	r3, #1
 8008376:	60bb      	str	r3, [r7, #8]
 8008378:	e013      	b.n	80083a2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2200      	movs	r2, #0
 8008382:	2180      	movs	r1, #128	; 0x80
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f829 	bl	80083dc <UART_WaitOnFlagUntilTimeout>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e01f      	b.n	80083d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	60ba      	str	r2, [r7, #8]
 800839a:	781a      	ldrb	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1b7      	bne.n	800831c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2200      	movs	r2, #0
 80083b4:	2140      	movs	r1, #64	; 0x40
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f810 	bl	80083dc <UART_WaitOnFlagUntilTimeout>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e006      	b.n	80083d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	e000      	b.n	80083d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80083d2:	2302      	movs	r3, #2
  }
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	603b      	str	r3, [r7, #0]
 80083e8:	4613      	mov	r3, r2
 80083ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ec:	e02c      	b.n	8008448 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f4:	d028      	beq.n	8008448 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d007      	beq.n	800840c <UART_WaitOnFlagUntilTimeout+0x30>
 80083fc:	f7fa fe00 	bl	8003000 <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	429a      	cmp	r2, r3
 800840a:	d21d      	bcs.n	8008448 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800841a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695a      	ldr	r2, [r3, #20]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 0201 	bic.w	r2, r2, #1
 800842a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e00f      	b.n	8008468 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	4013      	ands	r3, r2
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	429a      	cmp	r2, r3
 8008456:	bf0c      	ite	eq
 8008458:	2301      	moveq	r3, #1
 800845a:	2300      	movne	r3, #0
 800845c:	b2db      	uxtb	r3, r3
 800845e:	461a      	mov	r2, r3
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	429a      	cmp	r2, r3
 8008464:	d0c3      	beq.n	80083ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	b0bd      	sub	sp, #244	; 0xf4
 8008476:	af00      	add	r7, sp, #0
 8008478:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800847c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800848c:	68d9      	ldr	r1, [r3, #12]
 800848e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	ea40 0301 	orr.w	r3, r0, r1
 8008498:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800849a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80084bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084c8:	f021 010c 	bic.w	r1, r1, #12
 80084cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084d6:	430b      	orrs	r3, r1
 80084d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ea:	6999      	ldr	r1, [r3, #24]
 80084ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	ea40 0301 	orr.w	r3, r0, r1
 80084f6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008502:	f040 81a5 	bne.w	8008850 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	4bcd      	ldr	r3, [pc, #820]	; (8008844 <UART_SetConfig+0x3d4>)
 800850e:	429a      	cmp	r2, r3
 8008510:	d006      	beq.n	8008520 <UART_SetConfig+0xb0>
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	4bcb      	ldr	r3, [pc, #812]	; (8008848 <UART_SetConfig+0x3d8>)
 800851a:	429a      	cmp	r2, r3
 800851c:	f040 80cb 	bne.w	80086b6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008520:	f7fe fca4 	bl	8006e6c <HAL_RCC_GetPCLK2Freq>
 8008524:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800852c:	461c      	mov	r4, r3
 800852e:	f04f 0500 	mov.w	r5, #0
 8008532:	4622      	mov	r2, r4
 8008534:	462b      	mov	r3, r5
 8008536:	1891      	adds	r1, r2, r2
 8008538:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800853c:	415b      	adcs	r3, r3
 800853e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008542:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008546:	1912      	adds	r2, r2, r4
 8008548:	eb45 0303 	adc.w	r3, r5, r3
 800854c:	f04f 0000 	mov.w	r0, #0
 8008550:	f04f 0100 	mov.w	r1, #0
 8008554:	00d9      	lsls	r1, r3, #3
 8008556:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800855a:	00d0      	lsls	r0, r2, #3
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	1911      	adds	r1, r2, r4
 8008562:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008566:	416b      	adcs	r3, r5
 8008568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800856c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	461a      	mov	r2, r3
 8008574:	f04f 0300 	mov.w	r3, #0
 8008578:	1891      	adds	r1, r2, r2
 800857a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800857e:	415b      	adcs	r3, r3
 8008580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008584:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008588:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800858c:	f7f8 fa76 	bl	8000a7c <__aeabi_uldivmod>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4bad      	ldr	r3, [pc, #692]	; (800884c <UART_SetConfig+0x3dc>)
 8008596:	fba3 2302 	umull	r2, r3, r3, r2
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	011e      	lsls	r6, r3, #4
 800859e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085a2:	461c      	mov	r4, r3
 80085a4:	f04f 0500 	mov.w	r5, #0
 80085a8:	4622      	mov	r2, r4
 80085aa:	462b      	mov	r3, r5
 80085ac:	1891      	adds	r1, r2, r2
 80085ae:	67b9      	str	r1, [r7, #120]	; 0x78
 80085b0:	415b      	adcs	r3, r3
 80085b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085b4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80085b8:	1912      	adds	r2, r2, r4
 80085ba:	eb45 0303 	adc.w	r3, r5, r3
 80085be:	f04f 0000 	mov.w	r0, #0
 80085c2:	f04f 0100 	mov.w	r1, #0
 80085c6:	00d9      	lsls	r1, r3, #3
 80085c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085cc:	00d0      	lsls	r0, r2, #3
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	1911      	adds	r1, r2, r4
 80085d4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80085d8:	416b      	adcs	r3, r5
 80085da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	461a      	mov	r2, r3
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	1891      	adds	r1, r2, r2
 80085ec:	6739      	str	r1, [r7, #112]	; 0x70
 80085ee:	415b      	adcs	r3, r3
 80085f0:	677b      	str	r3, [r7, #116]	; 0x74
 80085f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80085f6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80085fa:	f7f8 fa3f 	bl	8000a7c <__aeabi_uldivmod>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	4b92      	ldr	r3, [pc, #584]	; (800884c <UART_SetConfig+0x3dc>)
 8008604:	fba3 1302 	umull	r1, r3, r3, r2
 8008608:	095b      	lsrs	r3, r3, #5
 800860a:	2164      	movs	r1, #100	; 0x64
 800860c:	fb01 f303 	mul.w	r3, r1, r3
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	3332      	adds	r3, #50	; 0x32
 8008616:	4a8d      	ldr	r2, [pc, #564]	; (800884c <UART_SetConfig+0x3dc>)
 8008618:	fba2 2303 	umull	r2, r3, r2, r3
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008624:	441e      	add	r6, r3
 8008626:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800862a:	4618      	mov	r0, r3
 800862c:	f04f 0100 	mov.w	r1, #0
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	1894      	adds	r4, r2, r2
 8008636:	66bc      	str	r4, [r7, #104]	; 0x68
 8008638:	415b      	adcs	r3, r3
 800863a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800863c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008640:	1812      	adds	r2, r2, r0
 8008642:	eb41 0303 	adc.w	r3, r1, r3
 8008646:	f04f 0400 	mov.w	r4, #0
 800864a:	f04f 0500 	mov.w	r5, #0
 800864e:	00dd      	lsls	r5, r3, #3
 8008650:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008654:	00d4      	lsls	r4, r2, #3
 8008656:	4622      	mov	r2, r4
 8008658:	462b      	mov	r3, r5
 800865a:	1814      	adds	r4, r2, r0
 800865c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008660:	414b      	adcs	r3, r1
 8008662:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	461a      	mov	r2, r3
 800866e:	f04f 0300 	mov.w	r3, #0
 8008672:	1891      	adds	r1, r2, r2
 8008674:	6639      	str	r1, [r7, #96]	; 0x60
 8008676:	415b      	adcs	r3, r3
 8008678:	667b      	str	r3, [r7, #100]	; 0x64
 800867a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800867e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008682:	f7f8 f9fb 	bl	8000a7c <__aeabi_uldivmod>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4b70      	ldr	r3, [pc, #448]	; (800884c <UART_SetConfig+0x3dc>)
 800868c:	fba3 1302 	umull	r1, r3, r3, r2
 8008690:	095b      	lsrs	r3, r3, #5
 8008692:	2164      	movs	r1, #100	; 0x64
 8008694:	fb01 f303 	mul.w	r3, r1, r3
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	3332      	adds	r3, #50	; 0x32
 800869e:	4a6b      	ldr	r2, [pc, #428]	; (800884c <UART_SetConfig+0x3dc>)
 80086a0:	fba2 2303 	umull	r2, r3, r2, r3
 80086a4:	095b      	lsrs	r3, r3, #5
 80086a6:	f003 0207 	and.w	r2, r3, #7
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4432      	add	r2, r6
 80086b2:	609a      	str	r2, [r3, #8]
 80086b4:	e26d      	b.n	8008b92 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086b6:	f7fe fbc5 	bl	8006e44 <HAL_RCC_GetPCLK1Freq>
 80086ba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086c2:	461c      	mov	r4, r3
 80086c4:	f04f 0500 	mov.w	r5, #0
 80086c8:	4622      	mov	r2, r4
 80086ca:	462b      	mov	r3, r5
 80086cc:	1891      	adds	r1, r2, r2
 80086ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80086d0:	415b      	adcs	r3, r3
 80086d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80086d8:	1912      	adds	r2, r2, r4
 80086da:	eb45 0303 	adc.w	r3, r5, r3
 80086de:	f04f 0000 	mov.w	r0, #0
 80086e2:	f04f 0100 	mov.w	r1, #0
 80086e6:	00d9      	lsls	r1, r3, #3
 80086e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086ec:	00d0      	lsls	r0, r2, #3
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	1911      	adds	r1, r2, r4
 80086f4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80086f8:	416b      	adcs	r3, r5
 80086fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	461a      	mov	r2, r3
 8008706:	f04f 0300 	mov.w	r3, #0
 800870a:	1891      	adds	r1, r2, r2
 800870c:	6539      	str	r1, [r7, #80]	; 0x50
 800870e:	415b      	adcs	r3, r3
 8008710:	657b      	str	r3, [r7, #84]	; 0x54
 8008712:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008716:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800871a:	f7f8 f9af 	bl	8000a7c <__aeabi_uldivmod>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4b4a      	ldr	r3, [pc, #296]	; (800884c <UART_SetConfig+0x3dc>)
 8008724:	fba3 2302 	umull	r2, r3, r3, r2
 8008728:	095b      	lsrs	r3, r3, #5
 800872a:	011e      	lsls	r6, r3, #4
 800872c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008730:	461c      	mov	r4, r3
 8008732:	f04f 0500 	mov.w	r5, #0
 8008736:	4622      	mov	r2, r4
 8008738:	462b      	mov	r3, r5
 800873a:	1891      	adds	r1, r2, r2
 800873c:	64b9      	str	r1, [r7, #72]	; 0x48
 800873e:	415b      	adcs	r3, r3
 8008740:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008742:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008746:	1912      	adds	r2, r2, r4
 8008748:	eb45 0303 	adc.w	r3, r5, r3
 800874c:	f04f 0000 	mov.w	r0, #0
 8008750:	f04f 0100 	mov.w	r1, #0
 8008754:	00d9      	lsls	r1, r3, #3
 8008756:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800875a:	00d0      	lsls	r0, r2, #3
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	1911      	adds	r1, r2, r4
 8008762:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008766:	416b      	adcs	r3, r5
 8008768:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800876c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	461a      	mov	r2, r3
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	1891      	adds	r1, r2, r2
 800877a:	6439      	str	r1, [r7, #64]	; 0x40
 800877c:	415b      	adcs	r3, r3
 800877e:	647b      	str	r3, [r7, #68]	; 0x44
 8008780:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008784:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008788:	f7f8 f978 	bl	8000a7c <__aeabi_uldivmod>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4b2e      	ldr	r3, [pc, #184]	; (800884c <UART_SetConfig+0x3dc>)
 8008792:	fba3 1302 	umull	r1, r3, r3, r2
 8008796:	095b      	lsrs	r3, r3, #5
 8008798:	2164      	movs	r1, #100	; 0x64
 800879a:	fb01 f303 	mul.w	r3, r1, r3
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	3332      	adds	r3, #50	; 0x32
 80087a4:	4a29      	ldr	r2, [pc, #164]	; (800884c <UART_SetConfig+0x3dc>)
 80087a6:	fba2 2303 	umull	r2, r3, r2, r3
 80087aa:	095b      	lsrs	r3, r3, #5
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087b2:	441e      	add	r6, r3
 80087b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087b8:	4618      	mov	r0, r3
 80087ba:	f04f 0100 	mov.w	r1, #0
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	1894      	adds	r4, r2, r2
 80087c4:	63bc      	str	r4, [r7, #56]	; 0x38
 80087c6:	415b      	adcs	r3, r3
 80087c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087ce:	1812      	adds	r2, r2, r0
 80087d0:	eb41 0303 	adc.w	r3, r1, r3
 80087d4:	f04f 0400 	mov.w	r4, #0
 80087d8:	f04f 0500 	mov.w	r5, #0
 80087dc:	00dd      	lsls	r5, r3, #3
 80087de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80087e2:	00d4      	lsls	r4, r2, #3
 80087e4:	4622      	mov	r2, r4
 80087e6:	462b      	mov	r3, r5
 80087e8:	1814      	adds	r4, r2, r0
 80087ea:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80087ee:	414b      	adcs	r3, r1
 80087f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f04f 0300 	mov.w	r3, #0
 8008800:	1891      	adds	r1, r2, r2
 8008802:	6339      	str	r1, [r7, #48]	; 0x30
 8008804:	415b      	adcs	r3, r3
 8008806:	637b      	str	r3, [r7, #52]	; 0x34
 8008808:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800880c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008810:	f7f8 f934 	bl	8000a7c <__aeabi_uldivmod>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4b0c      	ldr	r3, [pc, #48]	; (800884c <UART_SetConfig+0x3dc>)
 800881a:	fba3 1302 	umull	r1, r3, r3, r2
 800881e:	095b      	lsrs	r3, r3, #5
 8008820:	2164      	movs	r1, #100	; 0x64
 8008822:	fb01 f303 	mul.w	r3, r1, r3
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	3332      	adds	r3, #50	; 0x32
 800882c:	4a07      	ldr	r2, [pc, #28]	; (800884c <UART_SetConfig+0x3dc>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	f003 0207 	and.w	r2, r3, #7
 8008838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4432      	add	r2, r6
 8008840:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008842:	e1a6      	b.n	8008b92 <UART_SetConfig+0x722>
 8008844:	40011000 	.word	0x40011000
 8008848:	40011400 	.word	0x40011400
 800884c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	4bd1      	ldr	r3, [pc, #836]	; (8008b9c <UART_SetConfig+0x72c>)
 8008858:	429a      	cmp	r2, r3
 800885a:	d006      	beq.n	800886a <UART_SetConfig+0x3fa>
 800885c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	4bcf      	ldr	r3, [pc, #828]	; (8008ba0 <UART_SetConfig+0x730>)
 8008864:	429a      	cmp	r2, r3
 8008866:	f040 80ca 	bne.w	80089fe <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800886a:	f7fe faff 	bl	8006e6c <HAL_RCC_GetPCLK2Freq>
 800886e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008872:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008876:	461c      	mov	r4, r3
 8008878:	f04f 0500 	mov.w	r5, #0
 800887c:	4622      	mov	r2, r4
 800887e:	462b      	mov	r3, r5
 8008880:	1891      	adds	r1, r2, r2
 8008882:	62b9      	str	r1, [r7, #40]	; 0x28
 8008884:	415b      	adcs	r3, r3
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800888c:	1912      	adds	r2, r2, r4
 800888e:	eb45 0303 	adc.w	r3, r5, r3
 8008892:	f04f 0000 	mov.w	r0, #0
 8008896:	f04f 0100 	mov.w	r1, #0
 800889a:	00d9      	lsls	r1, r3, #3
 800889c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088a0:	00d0      	lsls	r0, r2, #3
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	eb12 0a04 	adds.w	sl, r2, r4
 80088aa:	eb43 0b05 	adc.w	fp, r3, r5
 80088ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f04f 0100 	mov.w	r1, #0
 80088ba:	f04f 0200 	mov.w	r2, #0
 80088be:	f04f 0300 	mov.w	r3, #0
 80088c2:	008b      	lsls	r3, r1, #2
 80088c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80088c8:	0082      	lsls	r2, r0, #2
 80088ca:	4650      	mov	r0, sl
 80088cc:	4659      	mov	r1, fp
 80088ce:	f7f8 f8d5 	bl	8000a7c <__aeabi_uldivmod>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4bb3      	ldr	r3, [pc, #716]	; (8008ba4 <UART_SetConfig+0x734>)
 80088d8:	fba3 2302 	umull	r2, r3, r3, r2
 80088dc:	095b      	lsrs	r3, r3, #5
 80088de:	011e      	lsls	r6, r3, #4
 80088e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088e4:	4618      	mov	r0, r3
 80088e6:	f04f 0100 	mov.w	r1, #0
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	1894      	adds	r4, r2, r2
 80088f0:	623c      	str	r4, [r7, #32]
 80088f2:	415b      	adcs	r3, r3
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
 80088f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088fa:	1812      	adds	r2, r2, r0
 80088fc:	eb41 0303 	adc.w	r3, r1, r3
 8008900:	f04f 0400 	mov.w	r4, #0
 8008904:	f04f 0500 	mov.w	r5, #0
 8008908:	00dd      	lsls	r5, r3, #3
 800890a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800890e:	00d4      	lsls	r4, r2, #3
 8008910:	4622      	mov	r2, r4
 8008912:	462b      	mov	r3, r5
 8008914:	1814      	adds	r4, r2, r0
 8008916:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800891a:	414b      	adcs	r3, r1
 800891c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	4618      	mov	r0, r3
 8008928:	f04f 0100 	mov.w	r1, #0
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	f04f 0300 	mov.w	r3, #0
 8008934:	008b      	lsls	r3, r1, #2
 8008936:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800893a:	0082      	lsls	r2, r0, #2
 800893c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008940:	f7f8 f89c 	bl	8000a7c <__aeabi_uldivmod>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4b96      	ldr	r3, [pc, #600]	; (8008ba4 <UART_SetConfig+0x734>)
 800894a:	fba3 1302 	umull	r1, r3, r3, r2
 800894e:	095b      	lsrs	r3, r3, #5
 8008950:	2164      	movs	r1, #100	; 0x64
 8008952:	fb01 f303 	mul.w	r3, r1, r3
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	3332      	adds	r3, #50	; 0x32
 800895c:	4a91      	ldr	r2, [pc, #580]	; (8008ba4 <UART_SetConfig+0x734>)
 800895e:	fba2 2303 	umull	r2, r3, r2, r3
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008968:	441e      	add	r6, r3
 800896a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800896e:	4618      	mov	r0, r3
 8008970:	f04f 0100 	mov.w	r1, #0
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	1894      	adds	r4, r2, r2
 800897a:	61bc      	str	r4, [r7, #24]
 800897c:	415b      	adcs	r3, r3
 800897e:	61fb      	str	r3, [r7, #28]
 8008980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008984:	1812      	adds	r2, r2, r0
 8008986:	eb41 0303 	adc.w	r3, r1, r3
 800898a:	f04f 0400 	mov.w	r4, #0
 800898e:	f04f 0500 	mov.w	r5, #0
 8008992:	00dd      	lsls	r5, r3, #3
 8008994:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008998:	00d4      	lsls	r4, r2, #3
 800899a:	4622      	mov	r2, r4
 800899c:	462b      	mov	r3, r5
 800899e:	1814      	adds	r4, r2, r0
 80089a0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80089a4:	414b      	adcs	r3, r1
 80089a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f04f 0100 	mov.w	r1, #0
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	f04f 0300 	mov.w	r3, #0
 80089be:	008b      	lsls	r3, r1, #2
 80089c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089c4:	0082      	lsls	r2, r0, #2
 80089c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80089ca:	f7f8 f857 	bl	8000a7c <__aeabi_uldivmod>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4b74      	ldr	r3, [pc, #464]	; (8008ba4 <UART_SetConfig+0x734>)
 80089d4:	fba3 1302 	umull	r1, r3, r3, r2
 80089d8:	095b      	lsrs	r3, r3, #5
 80089da:	2164      	movs	r1, #100	; 0x64
 80089dc:	fb01 f303 	mul.w	r3, r1, r3
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	3332      	adds	r3, #50	; 0x32
 80089e6:	4a6f      	ldr	r2, [pc, #444]	; (8008ba4 <UART_SetConfig+0x734>)
 80089e8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ec:	095b      	lsrs	r3, r3, #5
 80089ee:	f003 020f 	and.w	r2, r3, #15
 80089f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4432      	add	r2, r6
 80089fa:	609a      	str	r2, [r3, #8]
 80089fc:	e0c9      	b.n	8008b92 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80089fe:	f7fe fa21 	bl	8006e44 <HAL_RCC_GetPCLK1Freq>
 8008a02:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a0a:	461c      	mov	r4, r3
 8008a0c:	f04f 0500 	mov.w	r5, #0
 8008a10:	4622      	mov	r2, r4
 8008a12:	462b      	mov	r3, r5
 8008a14:	1891      	adds	r1, r2, r2
 8008a16:	6139      	str	r1, [r7, #16]
 8008a18:	415b      	adcs	r3, r3
 8008a1a:	617b      	str	r3, [r7, #20]
 8008a1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a20:	1912      	adds	r2, r2, r4
 8008a22:	eb45 0303 	adc.w	r3, r5, r3
 8008a26:	f04f 0000 	mov.w	r0, #0
 8008a2a:	f04f 0100 	mov.w	r1, #0
 8008a2e:	00d9      	lsls	r1, r3, #3
 8008a30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a34:	00d0      	lsls	r0, r2, #3
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	eb12 0804 	adds.w	r8, r2, r4
 8008a3e:	eb43 0905 	adc.w	r9, r3, r5
 8008a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f04f 0100 	mov.w	r1, #0
 8008a4e:	f04f 0200 	mov.w	r2, #0
 8008a52:	f04f 0300 	mov.w	r3, #0
 8008a56:	008b      	lsls	r3, r1, #2
 8008a58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a5c:	0082      	lsls	r2, r0, #2
 8008a5e:	4640      	mov	r0, r8
 8008a60:	4649      	mov	r1, r9
 8008a62:	f7f8 f80b 	bl	8000a7c <__aeabi_uldivmod>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4b4e      	ldr	r3, [pc, #312]	; (8008ba4 <UART_SetConfig+0x734>)
 8008a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8008a70:	095b      	lsrs	r3, r3, #5
 8008a72:	011e      	lsls	r6, r3, #4
 8008a74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f04f 0100 	mov.w	r1, #0
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	1894      	adds	r4, r2, r2
 8008a84:	60bc      	str	r4, [r7, #8]
 8008a86:	415b      	adcs	r3, r3
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a8e:	1812      	adds	r2, r2, r0
 8008a90:	eb41 0303 	adc.w	r3, r1, r3
 8008a94:	f04f 0400 	mov.w	r4, #0
 8008a98:	f04f 0500 	mov.w	r5, #0
 8008a9c:	00dd      	lsls	r5, r3, #3
 8008a9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008aa2:	00d4      	lsls	r4, r2, #3
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	462b      	mov	r3, r5
 8008aa8:	1814      	adds	r4, r2, r0
 8008aaa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008aae:	414b      	adcs	r3, r1
 8008ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f04f 0100 	mov.w	r1, #0
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	008b      	lsls	r3, r1, #2
 8008aca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ace:	0082      	lsls	r2, r0, #2
 8008ad0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ad4:	f7f7 ffd2 	bl	8000a7c <__aeabi_uldivmod>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4b31      	ldr	r3, [pc, #196]	; (8008ba4 <UART_SetConfig+0x734>)
 8008ade:	fba3 1302 	umull	r1, r3, r3, r2
 8008ae2:	095b      	lsrs	r3, r3, #5
 8008ae4:	2164      	movs	r1, #100	; 0x64
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	3332      	adds	r3, #50	; 0x32
 8008af0:	4a2c      	ldr	r2, [pc, #176]	; (8008ba4 <UART_SetConfig+0x734>)
 8008af2:	fba2 2303 	umull	r2, r3, r2, r3
 8008af6:	095b      	lsrs	r3, r3, #5
 8008af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008afc:	441e      	add	r6, r3
 8008afe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b02:	4618      	mov	r0, r3
 8008b04:	f04f 0100 	mov.w	r1, #0
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	1894      	adds	r4, r2, r2
 8008b0e:	603c      	str	r4, [r7, #0]
 8008b10:	415b      	adcs	r3, r3
 8008b12:	607b      	str	r3, [r7, #4]
 8008b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b18:	1812      	adds	r2, r2, r0
 8008b1a:	eb41 0303 	adc.w	r3, r1, r3
 8008b1e:	f04f 0400 	mov.w	r4, #0
 8008b22:	f04f 0500 	mov.w	r5, #0
 8008b26:	00dd      	lsls	r5, r3, #3
 8008b28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b2c:	00d4      	lsls	r4, r2, #3
 8008b2e:	4622      	mov	r2, r4
 8008b30:	462b      	mov	r3, r5
 8008b32:	1814      	adds	r4, r2, r0
 8008b34:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008b38:	414b      	adcs	r3, r1
 8008b3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f04f 0100 	mov.w	r1, #0
 8008b4a:	f04f 0200 	mov.w	r2, #0
 8008b4e:	f04f 0300 	mov.w	r3, #0
 8008b52:	008b      	lsls	r3, r1, #2
 8008b54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b58:	0082      	lsls	r2, r0, #2
 8008b5a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008b5e:	f7f7 ff8d 	bl	8000a7c <__aeabi_uldivmod>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <UART_SetConfig+0x734>)
 8008b68:	fba3 1302 	umull	r1, r3, r3, r2
 8008b6c:	095b      	lsrs	r3, r3, #5
 8008b6e:	2164      	movs	r1, #100	; 0x64
 8008b70:	fb01 f303 	mul.w	r3, r1, r3
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	011b      	lsls	r3, r3, #4
 8008b78:	3332      	adds	r3, #50	; 0x32
 8008b7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ba4 <UART_SetConfig+0x734>)
 8008b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b80:	095b      	lsrs	r3, r3, #5
 8008b82:	f003 020f 	and.w	r2, r3, #15
 8008b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4432      	add	r2, r6
 8008b8e:	609a      	str	r2, [r3, #8]
}
 8008b90:	e7ff      	b.n	8008b92 <UART_SetConfig+0x722>
 8008b92:	bf00      	nop
 8008b94:	37f4      	adds	r7, #244	; 0xf4
 8008b96:	46bd      	mov	sp, r7
 8008b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9c:	40011000 	.word	0x40011000
 8008ba0:	40011400 	.word	0x40011400
 8008ba4:	51eb851f 	.word	0x51eb851f

08008ba8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d029      	beq.n	8008c16 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008bce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bd2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bdc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008be2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008be8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008bee:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008bf4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008bfa:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008c00:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008c06:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	e034      	b.n	8008c80 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c22:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008c2c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008c32:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008c46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c4a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c54:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008c5a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008c60:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008c66:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008c6c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b087      	sub	sp, #28
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d02e      	beq.n	8008d06 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008cb4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008cc4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008cce:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008cd8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ce2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008cec:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	609a      	str	r2, [r3, #8]
 8008d04:	e03b      	b.n	8008d7e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d16:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008d3c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008d4c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	3b01      	subs	r3, #1
 8008d54:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008d56:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008d60:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	371c      	adds	r7, #28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b084      	sub	sp, #16
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	f107 001c 	add.w	r0, r7, #28
 8008d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d122      	bne.n	8008dea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d105      	bne.n	8008dde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f94a 	bl	8009078 <USB_CoreReset>
 8008de4:	4603      	mov	r3, r0
 8008de6:	73fb      	strb	r3, [r7, #15]
 8008de8:	e01a      	b.n	8008e20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f93e 	bl	8009078 <USB_CoreReset>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d106      	bne.n	8008e14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
 8008e12:	e005      	b.n	8008e20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d10b      	bne.n	8008e3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f043 0206 	orr.w	r2, r3, #6
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f043 0220 	orr.w	r2, r3, #32
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e4a:	b004      	add	sp, #16
 8008e4c:	4770      	bx	lr

08008e4e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f043 0201 	orr.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f023 0201 	bic.w	r2, r3, #1
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d106      	bne.n	8008ebe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	60da      	str	r2, [r3, #12]
 8008ebc:	e00b      	b.n	8008ed6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d106      	bne.n	8008ed2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	60da      	str	r2, [r3, #12]
 8008ed0:	e001      	b.n	8008ed6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e003      	b.n	8008ede <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008ed6:	2032      	movs	r0, #50	; 0x32
 8008ed8:	f7fa f89e 	bl	8003018 <HAL_Delay>

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	019b      	lsls	r3, r3, #6
 8008efa:	f043 0220 	orr.w	r2, r3, #32
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3301      	adds	r3, #1
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4a09      	ldr	r2, [pc, #36]	; (8008f30 <USB_FlushTxFifo+0x48>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d901      	bls.n	8008f14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e006      	b.n	8008f22 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	d0f0      	beq.n	8008f02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	00030d40 	.word	0x00030d40

08008f34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2210      	movs	r2, #16
 8008f44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4a09      	ldr	r2, [pc, #36]	; (8008f74 <USB_FlushRxFifo+0x40>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d901      	bls.n	8008f58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e006      	b.n	8008f66 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	f003 0310 	and.w	r3, r3, #16
 8008f60:	2b10      	cmp	r3, #16
 8008f62:	d0f0      	beq.n	8008f46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	00030d40 	.word	0x00030d40

08008f78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b089      	sub	sp, #36	; 0x24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	4611      	mov	r1, r2
 8008f84:	461a      	mov	r2, r3
 8008f86:	460b      	mov	r3, r1
 8008f88:	71fb      	strb	r3, [r7, #7]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d11a      	bne.n	8008fd4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008f9e:	88bb      	ldrh	r3, [r7, #4]
 8008fa0:	3303      	adds	r3, #3
 8008fa2:	089b      	lsrs	r3, r3, #2
 8008fa4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	61bb      	str	r3, [r7, #24]
 8008faa:	e00f      	b.n	8008fcc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	031a      	lsls	r2, r3, #12
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fb8:	461a      	mov	r2, r3
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	61bb      	str	r3, [r7, #24]
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d3eb      	bcc.n	8008fac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3724      	adds	r7, #36	; 0x24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b089      	sub	sp, #36	; 0x24
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	4613      	mov	r3, r2
 8008fee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008ff8:	88fb      	ldrh	r3, [r7, #6]
 8008ffa:	3303      	adds	r3, #3
 8008ffc:	089b      	lsrs	r3, r3, #2
 8008ffe:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009000:	2300      	movs	r3, #0
 8009002:	61bb      	str	r3, [r7, #24]
 8009004:	e00b      	b.n	800901e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	601a      	str	r2, [r3, #0]
    pDest++;
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	3304      	adds	r3, #4
 8009016:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	3301      	adds	r3, #1
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	429a      	cmp	r2, r3
 8009024:	d3ef      	bcc.n	8009006 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009026:	69fb      	ldr	r3, [r7, #28]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3724      	adds	r7, #36	; 0x24
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	4013      	ands	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800904c:	68fb      	ldr	r3, [r7, #12]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800905a:	b480      	push	{r7}
 800905c:	b083      	sub	sp, #12
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	f003 0301 	and.w	r3, r3, #1
}
 800906a:	4618      	mov	r0, r3
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
	...

08009078 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3301      	adds	r3, #1
 8009088:	60fb      	str	r3, [r7, #12]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4a13      	ldr	r2, [pc, #76]	; (80090dc <USB_CoreReset+0x64>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d901      	bls.n	8009096 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e01b      	b.n	80090ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	daf2      	bge.n	8009084 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	f043 0201 	orr.w	r2, r3, #1
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3301      	adds	r3, #1
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4a09      	ldr	r2, [pc, #36]	; (80090dc <USB_CoreReset+0x64>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d901      	bls.n	80090c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e006      	b.n	80090ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d0f0      	beq.n	80090ae <USB_CoreReset+0x36>

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	00030d40 	.word	0x00030d40

080090e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090e0:	b084      	sub	sp, #16
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	f107 001c 	add.w	r0, r7, #28
 80090ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090fc:	461a      	mov	r2, r3
 80090fe:	2300      	movs	r3, #0
 8009100:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800912a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912e:	2b00      	cmp	r3, #0
 8009130:	d018      	beq.n	8009164 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	2b01      	cmp	r3, #1
 8009136:	d10a      	bne.n	800914e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009146:	f043 0304 	orr.w	r3, r3, #4
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	e014      	b.n	8009178 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800915c:	f023 0304 	bic.w	r3, r3, #4
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	e009      	b.n	8009178 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009172:	f023 0304 	bic.w	r3, r3, #4
 8009176:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009178:	2110      	movs	r1, #16
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff feb4 	bl	8008ee8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7ff fed7 	bl	8008f34 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	e015      	b.n	80091b8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4413      	add	r3, r2
 8009194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009198:	461a      	mov	r2, r3
 800919a:	f04f 33ff 	mov.w	r3, #4294967295
 800919e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ac:	461a      	mov	r2, r3
 80091ae:	2300      	movs	r3, #0
 80091b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3301      	adds	r3, #1
 80091b6:	60fb      	str	r3, [r7, #12]
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d3e5      	bcc.n	800918c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80091c0:	2101      	movs	r1, #1
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f8ac 	bl	8009320 <USB_DriveVbus>

  HAL_Delay(200U);
 80091c8:	20c8      	movs	r0, #200	; 0xc8
 80091ca:	f7f9 ff25 	bl	8003018 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f04f 32ff 	mov.w	r2, #4294967295
 80091da:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a14      	ldr	r2, [pc, #80]	; (8009244 <USB_HostInit+0x164>)
 80091f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a13      	ldr	r2, [pc, #76]	; (8009248 <USB_HostInit+0x168>)
 80091fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80091fe:	e009      	b.n	8009214 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2280      	movs	r2, #128	; 0x80
 8009204:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a10      	ldr	r2, [pc, #64]	; (800924c <USB_HostInit+0x16c>)
 800920a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a10      	ldr	r2, [pc, #64]	; (8009250 <USB_HostInit+0x170>)
 8009210:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d105      	bne.n	8009226 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	f043 0210 	orr.w	r2, r3, #16
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	4b0a      	ldr	r3, [pc, #40]	; (8009254 <USB_HostInit+0x174>)
 800922c:	4313      	orrs	r3, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800923e:	b004      	add	sp, #16
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	01000200 	.word	0x01000200
 8009248:	00e00300 	.word	0x00e00300
 800924c:	00600080 	.word	0x00600080
 8009250:	004000e0 	.word	0x004000e0
 8009254:	a3200008 	.word	0xa3200008

08009258 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009276:	f023 0303 	bic.w	r3, r3, #3
 800927a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	f003 0303 	and.w	r3, r3, #3
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009290:	4313      	orrs	r3, r2
 8009292:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d107      	bne.n	80092aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092a0:	461a      	mov	r2, r3
 80092a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80092a6:	6053      	str	r3, [r2, #4]
 80092a8:	e009      	b.n	80092be <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80092aa:	78fb      	ldrb	r3, [r7, #3]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d106      	bne.n	80092be <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092b6:	461a      	mov	r2, r3
 80092b8:	f241 7370 	movw	r3, #6000	; 0x1770
 80092bc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80092ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80092f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80092fc:	2064      	movs	r0, #100	; 0x64
 80092fe:	f7f9 fe8b 	bl	8003018 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800930a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800930e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009310:	200a      	movs	r0, #10
 8009312:	f7f9 fe81 	bl	8003018 <HAL_Delay>

  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009344:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d109      	bne.n	8009364 <USB_DriveVbus+0x44>
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d106      	bne.n	8009364 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800935e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009362:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800936a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800936e:	d109      	bne.n	8009384 <USB_DriveVbus+0x64>
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d106      	bne.n	8009384 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800937e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009382:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009392:	b480      	push	{r7}
 8009394:	b085      	sub	sp, #20
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	0c5b      	lsrs	r3, r3, #17
 80093b0:	f003 0303 	and.w	r3, r3, #3
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	b29b      	uxth	r3, r3
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
	...

080093e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	4608      	mov	r0, r1
 80093ee:	4611      	mov	r1, r2
 80093f0:	461a      	mov	r2, r3
 80093f2:	4603      	mov	r3, r0
 80093f4:	70fb      	strb	r3, [r7, #3]
 80093f6:	460b      	mov	r3, r1
 80093f8:	70bb      	strb	r3, [r7, #2]
 80093fa:	4613      	mov	r3, r2
 80093fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009406:	78fb      	ldrb	r3, [r7, #3]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	4413      	add	r3, r2
 800940e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009412:	461a      	mov	r2, r3
 8009414:	f04f 33ff 	mov.w	r3, #4294967295
 8009418:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800941a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800941e:	2b03      	cmp	r3, #3
 8009420:	d87e      	bhi.n	8009520 <USB_HC_Init+0x13c>
 8009422:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <USB_HC_Init+0x44>)
 8009424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009428:	08009439 	.word	0x08009439
 800942c:	080094e3 	.word	0x080094e3
 8009430:	08009439 	.word	0x08009439
 8009434:	080094a5 	.word	0x080094a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	4413      	add	r3, r2
 8009440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009444:	461a      	mov	r2, r3
 8009446:	f240 439d 	movw	r3, #1181	; 0x49d
 800944a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800944c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009450:	2b00      	cmp	r3, #0
 8009452:	da10      	bge.n	8009476 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	4413      	add	r3, r2
 800945c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	440a      	add	r2, r1
 800946a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800946e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009472:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009474:	e057      	b.n	8009526 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800947e:	2b00      	cmp	r3, #0
 8009480:	d051      	beq.n	8009526 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	4413      	add	r3, r2
 800948a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	78fa      	ldrb	r2, [r7, #3]
 8009492:	0151      	lsls	r1, r2, #5
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	440a      	add	r2, r1
 8009498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800949c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80094a0:	60d3      	str	r3, [r2, #12]
      break;
 80094a2:	e040      	b.n	8009526 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b0:	461a      	mov	r2, r3
 80094b2:	f240 639d 	movw	r3, #1693	; 0x69d
 80094b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80094b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	da34      	bge.n	800952a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	78fa      	ldrb	r2, [r7, #3]
 80094d0:	0151      	lsls	r1, r2, #5
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	440a      	add	r2, r1
 80094d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094de:	60d3      	str	r3, [r2, #12]
      }

      break;
 80094e0:	e023      	b.n	800952a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ee:	461a      	mov	r2, r3
 80094f0:	f240 2325 	movw	r3, #549	; 0x225
 80094f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80094f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	da17      	bge.n	800952e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	4413      	add	r3, r2
 8009506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	0151      	lsls	r1, r2, #5
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	440a      	add	r2, r1
 8009514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009518:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800951c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800951e:	e006      	b.n	800952e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	75fb      	strb	r3, [r7, #23]
      break;
 8009524:	e004      	b.n	8009530 <USB_HC_Init+0x14c>
      break;
 8009526:	bf00      	nop
 8009528:	e002      	b.n	8009530 <USB_HC_Init+0x14c>
      break;
 800952a:	bf00      	nop
 800952c:	e000      	b.n	8009530 <USB_HC_Init+0x14c>
      break;
 800952e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	f003 030f 	and.w	r3, r3, #15
 800953e:	2101      	movs	r1, #1
 8009540:	fa01 f303 	lsl.w	r3, r1, r3
 8009544:	68b9      	ldr	r1, [r7, #8]
 8009546:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800954a:	4313      	orrs	r3, r2
 800954c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800955a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800955e:	2b00      	cmp	r3, #0
 8009560:	da03      	bge.n	800956a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009566:	613b      	str	r3, [r7, #16]
 8009568:	e001      	b.n	800956e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800956e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009572:	2b02      	cmp	r3, #2
 8009574:	d103      	bne.n	800957e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	e001      	b.n	8009582 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009582:	787b      	ldrb	r3, [r7, #1]
 8009584:	059b      	lsls	r3, r3, #22
 8009586:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800958a:	78bb      	ldrb	r3, [r7, #2]
 800958c:	02db      	lsls	r3, r3, #11
 800958e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009592:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009594:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009598:	049b      	lsls	r3, r3, #18
 800959a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800959e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80095a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80095a6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	0159      	lsls	r1, r3, #5
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	440b      	add	r3, r1
 80095b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80095be:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80095c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	d10f      	bne.n	80095e8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80095c8:	78fb      	ldrb	r3, [r7, #3]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	78fa      	ldrb	r2, [r7, #3]
 80095d8:	0151      	lsls	r1, r2, #5
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	440a      	add	r2, r1
 80095de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095e6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop

080095f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08c      	sub	sp, #48	; 0x30
 80095fc:	af02      	add	r7, sp, #8
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	785b      	ldrb	r3, [r3, #1]
 800960e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009614:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800961e:	2b00      	cmp	r3, #0
 8009620:	d028      	beq.n	8009674 <USB_HC_StartXfer+0x7c>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	791b      	ldrb	r3, [r3, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d124      	bne.n	8009674 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10b      	bne.n	8009648 <USB_HC_StartXfer+0x50>
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	795b      	ldrb	r3, [r3, #5]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d107      	bne.n	8009648 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	785b      	ldrb	r3, [r3, #1]
 800963c:	4619      	mov	r1, r3
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 fa2e 	bl	8009aa0 <USB_DoPing>
      return HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	e113      	b.n	8009870 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d112      	bne.n	8009674 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	4413      	add	r3, r2
 8009656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	0151      	lsls	r1, r2, #5
 8009660:	6a3a      	ldr	r2, [r7, #32]
 8009662:	440a      	add	r2, r1
 8009664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009668:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800966c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2200      	movs	r2, #0
 8009672:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d018      	beq.n	80096ae <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	8912      	ldrh	r2, [r2, #8]
 8009684:	4413      	add	r3, r2
 8009686:	3b01      	subs	r3, #1
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	8912      	ldrh	r2, [r2, #8]
 800968c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009690:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009692:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009694:	8b7b      	ldrh	r3, [r7, #26]
 8009696:	429a      	cmp	r2, r3
 8009698:	d90b      	bls.n	80096b2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800969a:	8b7b      	ldrh	r3, [r7, #26]
 800969c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800969e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	8912      	ldrh	r2, [r2, #8]
 80096a4:	fb02 f203 	mul.w	r2, r2, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	611a      	str	r2, [r3, #16]
 80096ac:	e001      	b.n	80096b2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80096ae:	2301      	movs	r3, #1
 80096b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	78db      	ldrb	r3, [r3, #3]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d006      	beq.n	80096c8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80096ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	8912      	ldrh	r2, [r2, #8]
 80096c0:	fb02 f203 	mul.w	r2, r2, r3
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80096d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096d2:	04d9      	lsls	r1, r3, #19
 80096d4:	4b68      	ldr	r3, [pc, #416]	; (8009878 <USB_HC_StartXfer+0x280>)
 80096d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80096d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	7a9b      	ldrb	r3, [r3, #10]
 80096de:	075b      	lsls	r3, r3, #29
 80096e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80096e4:	69f9      	ldr	r1, [r7, #28]
 80096e6:	0148      	lsls	r0, r1, #5
 80096e8:	6a39      	ldr	r1, [r7, #32]
 80096ea:	4401      	add	r1, r0
 80096ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80096f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80096f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80096f4:	79fb      	ldrb	r3, [r7, #7]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d009      	beq.n	800970e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	68d9      	ldr	r1, [r3, #12]
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	4413      	add	r3, r2
 8009706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800970a:	460a      	mov	r2, r1
 800970c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	bf0c      	ite	eq
 800971e:	2301      	moveq	r3, #1
 8009720:	2300      	movne	r3, #0
 8009722:	b2db      	uxtb	r3, r3
 8009724:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	4413      	add	r3, r2
 800972e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69fa      	ldr	r2, [r7, #28]
 8009736:	0151      	lsls	r1, r2, #5
 8009738:	6a3a      	ldr	r2, [r7, #32]
 800973a:	440a      	add	r2, r1
 800973c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009740:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009744:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	4413      	add	r3, r2
 800974e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	7e7b      	ldrb	r3, [r7, #25]
 8009756:	075b      	lsls	r3, r3, #29
 8009758:	69f9      	ldr	r1, [r7, #28]
 800975a:	0148      	lsls	r0, r1, #5
 800975c:	6a39      	ldr	r1, [r7, #32]
 800975e:	4401      	add	r1, r0
 8009760:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009764:	4313      	orrs	r3, r2
 8009766:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	4413      	add	r3, r2
 8009770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a41      	ldr	r2, [pc, #260]	; (800987c <USB_HC_StartXfer+0x284>)
 8009778:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800977a:	4b40      	ldr	r3, [pc, #256]	; (800987c <USB_HC_StartXfer+0x284>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009782:	4a3e      	ldr	r2, [pc, #248]	; (800987c <USB_HC_StartXfer+0x284>)
 8009784:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	78db      	ldrb	r3, [r3, #3]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d006      	beq.n	800979c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800978e:	4b3b      	ldr	r3, [pc, #236]	; (800987c <USB_HC_StartXfer+0x284>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009796:	4a39      	ldr	r2, [pc, #228]	; (800987c <USB_HC_StartXfer+0x284>)
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	e005      	b.n	80097a8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800979c:	4b37      	ldr	r3, [pc, #220]	; (800987c <USB_HC_StartXfer+0x284>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097a4:	4a35      	ldr	r2, [pc, #212]	; (800987c <USB_HC_StartXfer+0x284>)
 80097a6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80097a8:	4b34      	ldr	r3, [pc, #208]	; (800987c <USB_HC_StartXfer+0x284>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097b0:	4a32      	ldr	r2, [pc, #200]	; (800987c <USB_HC_StartXfer+0x284>)
 80097b2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097c0:	461a      	mov	r2, r3
 80097c2:	4b2e      	ldr	r3, [pc, #184]	; (800987c <USB_HC_StartXfer+0x284>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	e04e      	b.n	8009870 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	78db      	ldrb	r3, [r3, #3]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d149      	bne.n	800986e <USB_HC_StartXfer+0x276>
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d045      	beq.n	800986e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	79db      	ldrb	r3, [r3, #7]
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d830      	bhi.n	800984c <USB_HC_StartXfer+0x254>
 80097ea:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <USB_HC_StartXfer+0x1f8>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009801 	.word	0x08009801
 80097f4:	08009825 	.word	0x08009825
 80097f8:	08009801 	.word	0x08009801
 80097fc:	08009825 	.word	0x08009825
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	3303      	adds	r3, #3
 8009806:	089b      	lsrs	r3, r3, #2
 8009808:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800980a:	8afa      	ldrh	r2, [r7, #22]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009810:	b29b      	uxth	r3, r3
 8009812:	429a      	cmp	r2, r3
 8009814:	d91c      	bls.n	8009850 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	f043 0220 	orr.w	r2, r3, #32
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	619a      	str	r2, [r3, #24]
        }
        break;
 8009822:	e015      	b.n	8009850 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	3303      	adds	r3, #3
 800982a:	089b      	lsrs	r3, r3, #2
 800982c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800982e:	8afa      	ldrh	r2, [r7, #22]
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	b29b      	uxth	r3, r3
 800983a:	429a      	cmp	r2, r3
 800983c:	d90a      	bls.n	8009854 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	619a      	str	r2, [r3, #24]
        }
        break;
 800984a:	e003      	b.n	8009854 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800984c:	bf00      	nop
 800984e:	e002      	b.n	8009856 <USB_HC_StartXfer+0x25e>
        break;
 8009850:	bf00      	nop
 8009852:	e000      	b.n	8009856 <USB_HC_StartXfer+0x25e>
        break;
 8009854:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	68d9      	ldr	r1, [r3, #12]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	785a      	ldrb	r2, [r3, #1]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	b29b      	uxth	r3, r3
 8009864:	2000      	movs	r0, #0
 8009866:	9000      	str	r0, [sp, #0]
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f7ff fb85 	bl	8008f78 <USB_WritePacket>
  }

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3728      	adds	r7, #40	; 0x28
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	1ff80000 	.word	0x1ff80000
 800987c:	200003c8 	.word	0x200003c8

08009880 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	b29b      	uxth	r3, r3
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b087      	sub	sp, #28
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	460b      	mov	r3, r1
 80098ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	0c9b      	lsrs	r3, r3, #18
 80098ca:	f003 0303 	and.w	r3, r3, #3
 80098ce:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <USB_HC_Halt+0x3a>
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d16c      	bne.n	80099b6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	0151      	lsls	r1, r2, #5
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	440a      	add	r2, r1
 80098f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098fa:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d143      	bne.n	8009990 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	4413      	add	r3, r2
 8009910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	0151      	lsls	r1, r2, #5
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	440a      	add	r2, r1
 800991e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009926:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	4413      	add	r3, r2
 8009930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	0151      	lsls	r1, r2, #5
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	440a      	add	r2, r1
 800993e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009946:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	4413      	add	r3, r2
 8009950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	0151      	lsls	r1, r2, #5
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	440a      	add	r2, r1
 800995e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009962:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009966:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	3301      	adds	r3, #1
 800996c:	617b      	str	r3, [r7, #20]
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009974:	d81d      	bhi.n	80099b2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	4413      	add	r3, r2
 800997e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800998c:	d0ec      	beq.n	8009968 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800998e:	e080      	b.n	8009a92 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	4413      	add	r3, r2
 8009998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	0151      	lsls	r1, r2, #5
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	440a      	add	r2, r1
 80099a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099ae:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80099b0:	e06f      	b.n	8009a92 <USB_HC_Halt+0x1f0>
          break;
 80099b2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80099b4:	e06d      	b.n	8009a92 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	0151      	lsls	r1, r2, #5
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	440a      	add	r2, r1
 80099cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099d4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d143      	bne.n	8009a6e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	0151      	lsls	r1, r2, #5
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	440a      	add	r2, r1
 80099fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a04:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	0151      	lsls	r1, r2, #5
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	440a      	add	r2, r1
 8009a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a24:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	0151      	lsls	r1, r2, #5
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	440a      	add	r2, r1
 8009a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a44:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	617b      	str	r3, [r7, #20]
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a52:	d81d      	bhi.n	8009a90 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a6a:	d0ec      	beq.n	8009a46 <USB_HC_Halt+0x1a4>
 8009a6c:	e011      	b.n	8009a92 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	0151      	lsls	r1, r2, #5
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	440a      	add	r2, r1
 8009a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	e000      	b.n	8009a92 <USB_HC_Halt+0x1f0>
          break;
 8009a90:	bf00      	nop
    }
  }

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	371c      	adds	r7, #28
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	04da      	lsls	r2, r3, #19
 8009abc:	4b15      	ldr	r3, [pc, #84]	; (8009b14 <USB_DoPing+0x74>)
 8009abe:	4013      	ands	r3, r2
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	0151      	lsls	r1, r2, #5
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	440a      	add	r2, r1
 8009ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ad0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ae8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009af0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009afe:	461a      	mov	r2, r3
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	371c      	adds	r7, #28
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	1ff80000 	.word	0x1ff80000

08009b18 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff f9a1 	bl	8008e70 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009b2e:	2110      	movs	r1, #16
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7ff f9d9 	bl	8008ee8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff f9fc 	bl	8008f34 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	e01f      	b.n	8009b82 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	015a      	lsls	r2, r3, #5
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	4413      	add	r3, r2
 8009b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b58:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b68:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b76:	461a      	mov	r2, r3
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	613b      	str	r3, [r7, #16]
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2b0f      	cmp	r3, #15
 8009b86:	d9dc      	bls.n	8009b42 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009b88:	2300      	movs	r3, #0
 8009b8a:	613b      	str	r3, [r7, #16]
 8009b8c:	e034      	b.n	8009bf8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ba4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bb4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	617b      	str	r3, [r7, #20]
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bd4:	d80c      	bhi.n	8009bf0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bec:	d0ec      	beq.n	8009bc8 <USB_StopHost+0xb0>
 8009bee:	e000      	b.n	8009bf2 <USB_StopHost+0xda>
        break;
 8009bf0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	613b      	str	r3, [r7, #16]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	2b0f      	cmp	r3, #15
 8009bfc:	d9c7      	bls.n	8009b8e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c04:	461a      	mov	r2, r3
 8009c06:	f04f 33ff 	mov.w	r3, #4294967295
 8009c0a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c12:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff f91a 	bl	8008e4e <USB_EnableGlobalInt>

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b089      	sub	sp, #36	; 0x24
 8009c28:	af04      	add	r7, sp, #16
 8009c2a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	2202      	movs	r2, #2
 8009c30:	2102      	movs	r1, #2
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fcb8 	bl	800a5a8 <USBH_FindInterface>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009c3c:	7bfb      	ldrb	r3, [r7, #15]
 8009c3e:	2bff      	cmp	r3, #255	; 0xff
 8009c40:	d002      	beq.n	8009c48 <USBH_CDC_InterfaceInit+0x24>
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d901      	bls.n	8009c4c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e13d      	b.n	8009ec8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fc8d 	bl	800a570 <USBH_SelectInterface>
 8009c56:	4603      	mov	r3, r0
 8009c58:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009c60:	2302      	movs	r3, #2
 8009c62:	e131      	b.n	8009ec8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009c6a:	2050      	movs	r0, #80	; 0x50
 8009c6c:	f004 ff68 	bl	800eb40 <malloc>
 8009c70:	4603      	mov	r3, r0
 8009c72:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c7a:	69db      	ldr	r3, [r3, #28]
 8009c7c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009c84:	2302      	movs	r3, #2
 8009c86:	e11f      	b.n	8009ec8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009c88:	2250      	movs	r2, #80	; 0x50
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	68b8      	ldr	r0, [r7, #8]
 8009c8e:	f004 ff75 	bl	800eb7c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	211a      	movs	r1, #26
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	b25b      	sxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	da15      	bge.n	8009cd6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	211a      	movs	r1, #26
 8009cb0:	fb01 f303 	mul.w	r3, r1, r3
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009cba:	781a      	ldrb	r2, [r3, #0]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	211a      	movs	r1, #26
 8009cc6:	fb01 f303 	mul.w	r3, r1, r3
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009cd0:	881a      	ldrh	r2, [r3, #0]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	785b      	ldrb	r3, [r3, #1]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f002 f890 	bl	800be02 <USBH_AllocPipe>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	7819      	ldrb	r1, [r3, #0]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	7858      	ldrb	r0, [r3, #1]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	8952      	ldrh	r2, [r2, #10]
 8009d02:	9202      	str	r2, [sp, #8]
 8009d04:	2203      	movs	r2, #3
 8009d06:	9201      	str	r2, [sp, #4]
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	4623      	mov	r3, r4
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f002 f848 	bl	800bda4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f004 fe57 	bl	800e9d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009d22:	2300      	movs	r3, #0
 8009d24:	2200      	movs	r2, #0
 8009d26:	210a      	movs	r1, #10
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fc3d 	bl	800a5a8 <USBH_FindInterface>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	2bff      	cmp	r3, #255	; 0xff
 8009d36:	d002      	beq.n	8009d3e <USBH_CDC_InterfaceInit+0x11a>
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d901      	bls.n	8009d42 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009d3e:	2302      	movs	r3, #2
 8009d40:	e0c2      	b.n	8009ec8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	211a      	movs	r1, #26
 8009d48:	fb01 f303 	mul.w	r3, r1, r3
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	b25b      	sxtb	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	da16      	bge.n	8009d88 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	211a      	movs	r1, #26
 8009d60:	fb01 f303 	mul.w	r3, r1, r3
 8009d64:	4413      	add	r3, r2
 8009d66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d6a:	781a      	ldrb	r2, [r3, #0]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	211a      	movs	r1, #26
 8009d76:	fb01 f303 	mul.w	r3, r1, r3
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009d80:	881a      	ldrh	r2, [r3, #0]
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	835a      	strh	r2, [r3, #26]
 8009d86:	e015      	b.n	8009db4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	211a      	movs	r1, #26
 8009d8e:	fb01 f303 	mul.w	r3, r1, r3
 8009d92:	4413      	add	r3, r2
 8009d94:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d98:	781a      	ldrb	r2, [r3, #0]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	211a      	movs	r1, #26
 8009da4:	fb01 f303 	mul.w	r3, r1, r3
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009dae:	881a      	ldrh	r2, [r3, #0]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	211a      	movs	r1, #26
 8009dba:	fb01 f303 	mul.w	r3, r1, r3
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	b25b      	sxtb	r3, r3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	da16      	bge.n	8009dfa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	211a      	movs	r1, #26
 8009dd2:	fb01 f303 	mul.w	r3, r1, r3
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ddc:	781a      	ldrb	r2, [r3, #0]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	211a      	movs	r1, #26
 8009de8:	fb01 f303 	mul.w	r3, r1, r3
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009df2:	881a      	ldrh	r2, [r3, #0]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	835a      	strh	r2, [r3, #26]
 8009df8:	e015      	b.n	8009e26 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	211a      	movs	r1, #26
 8009e00:	fb01 f303 	mul.w	r3, r1, r3
 8009e04:	4413      	add	r3, r2
 8009e06:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009e0a:	781a      	ldrb	r2, [r3, #0]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	211a      	movs	r1, #26
 8009e16:	fb01 f303 	mul.w	r3, r1, r3
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009e20:	881a      	ldrh	r2, [r3, #0]
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	7b9b      	ldrb	r3, [r3, #14]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 ffe8 	bl	800be02 <USBH_AllocPipe>
 8009e32:	4603      	mov	r3, r0
 8009e34:	461a      	mov	r2, r3
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	7bdb      	ldrb	r3, [r3, #15]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 ffde 	bl	800be02 <USBH_AllocPipe>
 8009e46:	4603      	mov	r3, r0
 8009e48:	461a      	mov	r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	7b59      	ldrb	r1, [r3, #13]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	7b98      	ldrb	r0, [r3, #14]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	8b12      	ldrh	r2, [r2, #24]
 8009e66:	9202      	str	r2, [sp, #8]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	9201      	str	r2, [sp, #4]
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	4623      	mov	r3, r4
 8009e70:	4602      	mov	r2, r0
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 ff96 	bl	800bda4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	7b19      	ldrb	r1, [r3, #12]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	7bd8      	ldrb	r0, [r3, #15]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	8b52      	ldrh	r2, [r2, #26]
 8009e90:	9202      	str	r2, [sp, #8]
 8009e92:	2202      	movs	r2, #2
 8009e94:	9201      	str	r2, [sp, #4]
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	4623      	mov	r3, r4
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f001 ff81 	bl	800bda4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	7b5b      	ldrb	r3, [r3, #13]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f004 fd8c 	bl	800e9d0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	7b1b      	ldrb	r3, [r3, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f004 fd85 	bl	800e9d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd90      	pop	{r4, r7, pc}

08009ed0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00e      	beq.n	8009f08 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 ff76 	bl	800bde2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f001 ffa1 	bl	800be44 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	7b1b      	ldrb	r3, [r3, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00e      	beq.n	8009f2e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	7b1b      	ldrb	r3, [r3, #12]
 8009f14:	4619      	mov	r1, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f001 ff63 	bl	800bde2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	7b1b      	ldrb	r3, [r3, #12]
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f001 ff8e 	bl	800be44 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	7b5b      	ldrb	r3, [r3, #13]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00e      	beq.n	8009f54 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	7b5b      	ldrb	r3, [r3, #13]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 ff50 	bl	800bde2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	7b5b      	ldrb	r3, [r3, #13]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 ff7b 	bl	800be44 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00b      	beq.n	8009f78 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f004 fdf1 	bl	800eb50 <free>
    phost->pActiveClass->pData = 0U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f74:	2200      	movs	r2, #0
 8009f76:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b084      	sub	sp, #16
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	3340      	adds	r3, #64	; 0x40
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f8b1 	bl	800a102 <GetLineCoding>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009fa4:	7afb      	ldrb	r3, [r7, #11]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009fb0:	2102      	movs	r1, #2
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d877      	bhi.n	800a0d4 <USBH_CDC_Process+0x114>
 8009fe4:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <USBH_CDC_Process+0x2c>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	0800a001 	.word	0x0800a001
 8009ff0:	0800a007 	.word	0x0800a007
 8009ff4:	0800a037 	.word	0x0800a037
 8009ff8:	0800a0ab 	.word	0x0800a0ab
 8009ffc:	0800a0b9 	.word	0x0800a0b9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]
      break;
 800a004:	e06d      	b.n	800a0e2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f897 	bl	800a140 <SetLineCoding>
 800a012:	4603      	mov	r3, r0
 800a014:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a016:	7bbb      	ldrb	r3, [r7, #14]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d104      	bne.n	800a026 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2202      	movs	r2, #2
 800a020:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a024:	e058      	b.n	800a0d8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d055      	beq.n	800a0d8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2204      	movs	r2, #4
 800a030:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a034:	e050      	b.n	800a0d8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	3340      	adds	r3, #64	; 0x40
 800a03a:	4619      	mov	r1, r3
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f860 	bl	800a102 <GetLineCoding>
 800a042:	4603      	mov	r3, r0
 800a044:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d126      	bne.n	800a09a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a05e:	791b      	ldrb	r3, [r3, #4]
 800a060:	429a      	cmp	r2, r3
 800a062:	d13b      	bne.n	800a0dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a06e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a070:	429a      	cmp	r2, r3
 800a072:	d133      	bne.n	800a0dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a07e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a080:	429a      	cmp	r2, r3
 800a082:	d12b      	bne.n	800a0dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a08c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a08e:	429a      	cmp	r2, r3
 800a090:	d124      	bne.n	800a0dc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f982 	bl	800a39c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a098:	e020      	b.n	800a0dc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a09a:	7bbb      	ldrb	r3, [r7, #14]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d01d      	beq.n	800a0dc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2204      	movs	r2, #4
 800a0a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a0a8:	e018      	b.n	800a0dc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f867 	bl	800a17e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f8f6 	bl	800a2a2 <CDC_ProcessReception>
      break;
 800a0b6:	e014      	b.n	800a0e2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f001 f951 	bl	800b362 <USBH_ClrFeature>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a0d2:	e005      	b.n	800a0e0 <USBH_CDC_Process+0x120>

    default:
      break;
 800a0d4:	bf00      	nop
 800a0d6:	e004      	b.n	800a0e2 <USBH_CDC_Process+0x122>
      break;
 800a0d8:	bf00      	nop
 800a0da:	e002      	b.n	800a0e2 <USBH_CDC_Process+0x122>
      break;
 800a0dc:	bf00      	nop
 800a0de:	e000      	b.n	800a0e2 <USBH_CDC_Process+0x122>
      break;
 800a0e0:	bf00      	nop

  }

  return status;
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b082      	sub	sp, #8
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	22a1      	movs	r2, #161	; 0xa1
 800a110:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2221      	movs	r2, #33	; 0x21
 800a116:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2207      	movs	r2, #7
 800a128:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2207      	movs	r2, #7
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 faf6 	bl	800b722 <USBH_CtlReq>
 800a136:	4603      	mov	r3, r0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2221      	movs	r2, #33	; 0x21
 800a14e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2207      	movs	r2, #7
 800a166:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2207      	movs	r2, #7
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f001 fad7 	bl	800b722 <USBH_CtlReq>
 800a174:	4603      	mov	r3, r0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b086      	sub	sp, #24
 800a182:	af02      	add	r7, sp, #8
 800a184:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a190:	2300      	movs	r3, #0
 800a192:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d002      	beq.n	800a1a4 <CDC_ProcessTransmission+0x26>
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d023      	beq.n	800a1ea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a1a2:	e07a      	b.n	800a29a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	8b12      	ldrh	r2, [r2, #24]
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d90b      	bls.n	800a1c8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	69d9      	ldr	r1, [r3, #28]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8b1a      	ldrh	r2, [r3, #24]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	7b5b      	ldrb	r3, [r3, #13]
 800a1bc:	2001      	movs	r0, #1
 800a1be:	9000      	str	r0, [sp, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f001 fdac 	bl	800bd1e <USBH_BulkSendData>
 800a1c6:	e00b      	b.n	800a1e0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	7b5b      	ldrb	r3, [r3, #13]
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	9000      	str	r0, [sp, #0]
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f001 fd9f 	bl	800bd1e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a1e8:	e057      	b.n	800a29a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	7b5b      	ldrb	r3, [r3, #13]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f004 fbc3 	bl	800e97c <USBH_LL_GetURBState>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a1fa:	7afb      	ldrb	r3, [r7, #11]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d136      	bne.n	800a26e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	8b12      	ldrh	r2, [r2, #24]
 800a208:	4293      	cmp	r3, r2
 800a20a:	d90e      	bls.n	800a22a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	8b12      	ldrh	r2, [r2, #24]
 800a214:	1a9a      	subs	r2, r3, r2
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	69db      	ldr	r3, [r3, #28]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	8b12      	ldrh	r2, [r2, #24]
 800a222:	441a      	add	r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	61da      	str	r2, [r3, #28]
 800a228:	e002      	b.n	800a230 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	2b00      	cmp	r3, #0
 800a236:	d004      	beq.n	800a242 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a240:	e006      	b.n	800a250 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f892 	bl	800a374 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2204      	movs	r2, #4
 800a254:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a264:	2200      	movs	r2, #0
 800a266:	4619      	mov	r1, r3
 800a268:	f001 fed4 	bl	800c014 <osMessagePut>
      break;
 800a26c:	e014      	b.n	800a298 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a26e:	7afb      	ldrb	r3, [r7, #11]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d111      	bne.n	800a298 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2204      	movs	r2, #4
 800a280:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a290:	2200      	movs	r2, #0
 800a292:	4619      	mov	r1, r3
 800a294:	f001 febe 	bl	800c014 <osMessagePut>
      break;
 800a298:	bf00      	nop
  }
}
 800a29a:	bf00      	nop
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b086      	sub	sp, #24
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d002      	beq.n	800a2c8 <CDC_ProcessReception+0x26>
 800a2c2:	2b04      	cmp	r3, #4
 800a2c4:	d00e      	beq.n	800a2e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a2c6:	e051      	b.n	800a36c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	6a19      	ldr	r1, [r3, #32]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	8b5a      	ldrh	r2, [r3, #26]
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	7b1b      	ldrb	r3, [r3, #12]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 fd47 	bl	800bd68 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2204      	movs	r2, #4
 800a2de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a2e2:	e043      	b.n	800a36c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	7b1b      	ldrb	r3, [r3, #12]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f004 fb46 	bl	800e97c <USBH_LL_GetURBState>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a2f4:	7cfb      	ldrb	r3, [r7, #19]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d137      	bne.n	800a36a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	7b1b      	ldrb	r3, [r3, #12]
 800a2fe:	4619      	mov	r1, r3
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f004 faa9 	bl	800e858 <USBH_LL_GetLastXferSize>
 800a306:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d016      	beq.n	800a340 <CDC_ProcessReception+0x9e>
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	8b5b      	ldrh	r3, [r3, #26]
 800a316:	461a      	mov	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d910      	bls.n	800a340 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	1ad2      	subs	r2, r2, r3
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	6a1a      	ldr	r2, [r3, #32]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	441a      	add	r2, r3
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2203      	movs	r2, #3
 800a33a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a33e:	e006      	b.n	800a34e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f81d 	bl	800a388 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2204      	movs	r2, #4
 800a352:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a362:	2200      	movs	r2, #0
 800a364:	4619      	mov	r1, r3
 800a366:	f001 fe55 	bl	800c014 <osMessagePut>
      break;
 800a36a:	bf00      	nop
  }
}
 800a36c:	bf00      	nop
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a3b0:	b5b0      	push	{r4, r5, r7, lr}
 800a3b2:	b090      	sub	sp, #64	; 0x40
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	e04d      	b.n	800a464 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	79fa      	ldrb	r2, [r7, #7]
 800a3cc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f000 f847 	bl	800a474 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800a414:	4b15      	ldr	r3, [pc, #84]	; (800a46c <USBH_Init+0xbc>)
 800a416:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a41a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a41c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800a420:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a424:	2100      	movs	r1, #0
 800a426:	4618      	mov	r0, r3
 800a428:	f001 fdcb 	bl	800bfc2 <osMessageCreate>
 800a42c:	4602      	mov	r2, r0
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800a434:	4b0e      	ldr	r3, [pc, #56]	; (800a470 <USBH_Init+0xc0>)
 800a436:	f107 0414 	add.w	r4, r7, #20
 800a43a:	461d      	mov	r5, r3
 800a43c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a43e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a440:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a444:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800a448:	f107 0314 	add.w	r3, r7, #20
 800a44c:	68f9      	ldr	r1, [r7, #12]
 800a44e:	4618      	mov	r0, r3
 800a450:	f001 fd6b 	bl	800bf2a <osThreadCreate>
 800a454:	4602      	mov	r2, r0
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f004 f93d 	bl	800e6dc <USBH_LL_Init>

  return USBH_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3740      	adds	r7, #64	; 0x40
 800a468:	46bd      	mov	sp, r7
 800a46a:	bdb0      	pop	{r4, r5, r7, pc}
 800a46c:	0800f7b4 	.word	0x0800f7b4
 800a470:	0800f7c4 	.word	0x0800f7c4

0800a474 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e009      	b.n	800a49a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	33e0      	adds	r3, #224	; 0xe0
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	2200      	movs	r2, #0
 800a492:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3301      	adds	r3, #1
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b0e      	cmp	r3, #14
 800a49e:	d9f2      	bls.n	800a486 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	e009      	b.n	800a4ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	60fb      	str	r3, [r7, #12]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4c0:	d3f1      	bcc.n	800a4a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2240      	movs	r2, #64	; 0x40
 800a4e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d016      	beq.n	800a55e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10e      	bne.n	800a558 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a540:	1c59      	adds	r1, r3, #1
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	33de      	adds	r3, #222	; 0xde
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	73fb      	strb	r3, [r7, #15]
 800a556:	e004      	b.n	800a562 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a558:	2302      	movs	r3, #2
 800a55a:	73fb      	strb	r3, [r7, #15]
 800a55c:	e001      	b.n	800a562 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a55e:	2302      	movs	r3, #2
 800a560:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a562:	7bfb      	ldrb	r3, [r7, #15]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	460b      	mov	r3, r1
 800a57a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d204      	bcs.n	800a596 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	78fa      	ldrb	r2, [r7, #3]
 800a590:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a594:	e001      	b.n	800a59a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a596:	2302      	movs	r3, #2
 800a598:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b087      	sub	sp, #28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	70fb      	strb	r3, [r7, #3]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70bb      	strb	r3, [r7, #2]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a5d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a5d2:	e025      	b.n	800a620 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
 800a5d6:	221a      	movs	r2, #26
 800a5d8:	fb02 f303 	mul.w	r3, r2, r3
 800a5dc:	3308      	adds	r3, #8
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	3302      	adds	r3, #2
 800a5e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	795b      	ldrb	r3, [r3, #5]
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d002      	beq.n	800a5f6 <USBH_FindInterface+0x4e>
 800a5f0:	78fb      	ldrb	r3, [r7, #3]
 800a5f2:	2bff      	cmp	r3, #255	; 0xff
 800a5f4:	d111      	bne.n	800a61a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a5fa:	78ba      	ldrb	r2, [r7, #2]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d002      	beq.n	800a606 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a600:	78bb      	ldrb	r3, [r7, #2]
 800a602:	2bff      	cmp	r3, #255	; 0xff
 800a604:	d109      	bne.n	800a61a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a60a:	787a      	ldrb	r2, [r7, #1]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d002      	beq.n	800a616 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a610:	787b      	ldrb	r3, [r7, #1]
 800a612:	2bff      	cmp	r3, #255	; 0xff
 800a614:	d101      	bne.n	800a61a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	e006      	b.n	800a628 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	3301      	adds	r3, #1
 800a61e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a620:	7dfb      	ldrb	r3, [r7, #23]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d9d6      	bls.n	800a5d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a626:	23ff      	movs	r3, #255	; 0xff
}
 800a628:	4618      	mov	r0, r3
 800a62a:	371c      	adds	r7, #28
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f004 f893 	bl	800e768 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a642:	2101      	movs	r1, #1
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f004 f9ac 	bl	800e9a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b088      	sub	sp, #32
 800a658:	af04      	add	r7, sp, #16
 800a65a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a65c:	2302      	movs	r3, #2
 800a65e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d102      	bne.n	800a676 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2203      	movs	r2, #3
 800a674:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b0b      	cmp	r3, #11
 800a67e:	f200 823c 	bhi.w	800aafa <USBH_Process+0x4a6>
 800a682:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <USBH_Process+0x34>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a6b9 	.word	0x0800a6b9
 800a68c:	0800a707 	.word	0x0800a707
 800a690:	0800a78b 	.word	0x0800a78b
 800a694:	0800aa79 	.word	0x0800aa79
 800a698:	0800aafb 	.word	0x0800aafb
 800a69c:	0800a84b 	.word	0x0800a84b
 800a6a0:	0800aa03 	.word	0x0800aa03
 800a6a4:	0800a89d 	.word	0x0800a89d
 800a6a8:	0800a8d9 	.word	0x0800a8d9
 800a6ac:	0800a913 	.word	0x0800a913
 800a6b0:	0800a95b 	.word	0x0800a95b
 800a6b4:	0800aa61 	.word	0x0800aa61
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f000 821c 	beq.w	800aafe <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a6cc:	20c8      	movs	r0, #200	; 0xc8
 800a6ce:	f004 f9b2 	bl	800ea36 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f004 f8a5 	bl	800e822 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	4619      	mov	r1, r3
 800a700:	f001 fc88 	bl	800c014 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a704:	e1fb      	b.n	800aafe <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d107      	bne.n	800a720 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	e025      	b.n	800a76c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a72a:	d914      	bls.n	800a756 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a732:	3301      	adds	r3, #1
 800a734:	b2da      	uxtb	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a742:	2b03      	cmp	r3, #3
 800a744:	d903      	bls.n	800a74e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	220d      	movs	r2, #13
 800a74a:	701a      	strb	r2, [r3, #0]
 800a74c:	e00e      	b.n	800a76c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	701a      	strb	r2, [r3, #0]
 800a754:	e00a      	b.n	800a76c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a75c:	f103 020a 	add.w	r2, r3, #10
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a766:	200a      	movs	r0, #10
 800a768:	f004 f965 	bl	800ea36 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a780:	2200      	movs	r2, #0
 800a782:	4619      	mov	r1, r3
 800a784:	f001 fc46 	bl	800c014 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a788:	e1c0      	b.n	800ab0c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d005      	beq.n	800a7a0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a79a:	2104      	movs	r1, #4
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a7a0:	2064      	movs	r0, #100	; 0x64
 800a7a2:	f004 f948 	bl	800ea36 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f004 f814 	bl	800e7d4 <USBH_LL_GetSpeed>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2205      	movs	r2, #5
 800a7ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a7bc:	2100      	movs	r1, #0
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f001 fb1f 	bl	800be02 <USBH_AllocPipe>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a7cc:	2180      	movs	r1, #128	; 0x80
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f001 fb17 	bl	800be02 <USBH_AllocPipe>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	7919      	ldrb	r1, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	9202      	str	r2, [sp, #8]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	9201      	str	r2, [sp, #4]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2280      	movs	r2, #128	; 0x80
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 fad0 	bl	800bda4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7959      	ldrb	r1, [r3, #5]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a818:	b292      	uxth	r2, r2
 800a81a:	9202      	str	r2, [sp, #8]
 800a81c:	2200      	movs	r2, #0
 800a81e:	9201      	str	r2, [sp, #4]
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	4603      	mov	r3, r0
 800a824:	2200      	movs	r2, #0
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f001 fabc 	bl	800bda4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a840:	2200      	movs	r2, #0
 800a842:	4619      	mov	r1, r3
 800a844:	f001 fbe6 	bl	800c014 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a848:	e160      	b.n	800ab0c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f964 	bl	800ab18 <USBH_HandleEnum>
 800a850:	4603      	mov	r3, r0
 800a852:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a854:	7bbb      	ldrb	r3, [r7, #14]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f040 8152 	bne.w	800ab02 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d103      	bne.n	800a878 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2208      	movs	r2, #8
 800a874:	701a      	strb	r2, [r3, #0]
 800a876:	e002      	b.n	800a87e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2207      	movs	r2, #7
 800a87c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2205      	movs	r2, #5
 800a882:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a892:	2200      	movs	r2, #0
 800a894:	4619      	mov	r1, r3
 800a896:	f001 fbbd 	bl	800c014 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a89a:	e132      	b.n	800ab02 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 812f 	beq.w	800ab06 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2208      	movs	r2, #8
 800a8b8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2205      	movs	r2, #5
 800a8be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f001 fb9f 	bl	800c014 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a8d6:	e116      	b.n	800ab06 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fcf6 	bl	800b2d4 <USBH_SetCfg>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d102      	bne.n	800a8f4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2209      	movs	r2, #9
 800a8f2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a908:	2200      	movs	r2, #0
 800a90a:	4619      	mov	r1, r3
 800a90c:	f001 fb82 	bl	800c014 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a910:	e0fc      	b.n	800ab0c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a918:	f003 0320 	and.w	r3, r3, #32
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00a      	beq.n	800a936 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a920:	2101      	movs	r1, #1
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fcf9 	bl	800b31a <USBH_SetFeature>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	220a      	movs	r2, #10
 800a932:	701a      	strb	r2, [r3, #0]
 800a934:	e002      	b.n	800a93c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	220a      	movs	r2, #10
 800a93a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a950:	2200      	movs	r2, #0
 800a952:	4619      	mov	r1, r3
 800a954:	f001 fb5e 	bl	800c014 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a958:	e0d8      	b.n	800ab0c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a960:	2b00      	cmp	r3, #0
 800a962:	d03f      	beq.n	800a9e4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a96c:	2300      	movs	r3, #0
 800a96e:	73fb      	strb	r3, [r7, #15]
 800a970:	e016      	b.n	800a9a0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a972:	7bfa      	ldrb	r2, [r7, #15]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	32de      	adds	r2, #222	; 0xde
 800a978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a97c:	791a      	ldrb	r2, [r3, #4]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a984:	429a      	cmp	r2, r3
 800a986:	d108      	bne.n	800a99a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a988:	7bfa      	ldrb	r2, [r7, #15]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	32de      	adds	r2, #222	; 0xde
 800a98e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a998:	e005      	b.n	800a9a6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	3301      	adds	r3, #1
 800a99e:	73fb      	strb	r3, [r7, #15]
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d0e5      	beq.n	800a972 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d016      	beq.n	800a9de <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	4798      	blx	r3
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d109      	bne.n	800a9d6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2206      	movs	r2, #6
 800a9c6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9ce:	2103      	movs	r1, #3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	4798      	blx	r3
 800a9d4:	e006      	b.n	800a9e4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	220d      	movs	r2, #13
 800a9da:	701a      	strb	r2, [r3, #0]
 800a9dc:	e002      	b.n	800a9e4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	220d      	movs	r2, #13
 800a9e2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2205      	movs	r2, #5
 800a9e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f001 fb0a 	bl	800c014 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa00:	e084      	b.n	800ab0c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d017      	beq.n	800aa3c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	4798      	blx	r3
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d103      	bne.n	800aa2c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	220b      	movs	r2, #11
 800aa28:	701a      	strb	r2, [r3, #0]
 800aa2a:	e00a      	b.n	800aa42 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d106      	bne.n	800aa42 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	220d      	movs	r2, #13
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	e002      	b.n	800aa42 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	220d      	movs	r2, #13
 800aa40:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2205      	movs	r2, #5
 800aa46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa56:	2200      	movs	r2, #0
 800aa58:	4619      	mov	r1, r3
 800aa5a:	f001 fadb 	bl	800c014 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa5e:	e055      	b.n	800ab0c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d04f      	beq.n	800ab0a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	4798      	blx	r3
      }
      break;
 800aa76:	e048      	b.n	800ab0a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff fcf7 	bl	800a474 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d009      	beq.n	800aaa4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d005      	beq.n	800aaba <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aab4:	2105      	movs	r1, #5
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d107      	bne.n	800aad6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff fdb0 	bl	800a634 <USBH_Start>
 800aad4:	e002      	b.n	800aadc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f003 fe46 	bl	800e768 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	f001 fa8e 	bl	800c014 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aaf8:	e008      	b.n	800ab0c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800aafa:	bf00      	nop
 800aafc:	e006      	b.n	800ab0c <USBH_Process+0x4b8>
      break;
 800aafe:	bf00      	nop
 800ab00:	e004      	b.n	800ab0c <USBH_Process+0x4b8>
      break;
 800ab02:	bf00      	nop
 800ab04:	e002      	b.n	800ab0c <USBH_Process+0x4b8>
    break;
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <USBH_Process+0x4b8>
      break;
 800ab0a:	bf00      	nop
  }
  return USBH_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop

0800ab18 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b088      	sub	sp, #32
 800ab1c:	af04      	add	r7, sp, #16
 800ab1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ab20:	2301      	movs	r3, #1
 800ab22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ab24:	2301      	movs	r3, #1
 800ab26:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	785b      	ldrb	r3, [r3, #1]
 800ab2c:	2b07      	cmp	r3, #7
 800ab2e:	f200 8208 	bhi.w	800af42 <USBH_HandleEnum+0x42a>
 800ab32:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <USBH_HandleEnum+0x20>)
 800ab34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab38:	0800ab59 	.word	0x0800ab59
 800ab3c:	0800ac17 	.word	0x0800ac17
 800ab40:	0800ac81 	.word	0x0800ac81
 800ab44:	0800ad0f 	.word	0x0800ad0f
 800ab48:	0800ad79 	.word	0x0800ad79
 800ab4c:	0800ade9 	.word	0x0800ade9
 800ab50:	0800ae85 	.word	0x0800ae85
 800ab54:	0800af03 	.word	0x0800af03
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ab58:	2108      	movs	r1, #8
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 faea 	bl	800b134 <USBH_Get_DevDesc>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab64:	7bbb      	ldrb	r3, [r7, #14]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d130      	bne.n	800abcc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	7919      	ldrb	r1, [r3, #4]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ab8e:	b292      	uxth	r2, r2
 800ab90:	9202      	str	r2, [sp, #8]
 800ab92:	2200      	movs	r2, #0
 800ab94:	9201      	str	r2, [sp, #4]
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2280      	movs	r2, #128	; 0x80
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f001 f901 	bl	800bda4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	7959      	ldrb	r1, [r3, #5]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800abb6:	b292      	uxth	r2, r2
 800abb8:	9202      	str	r2, [sp, #8]
 800abba:	2200      	movs	r2, #0
 800abbc:	9201      	str	r2, [sp, #4]
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	4603      	mov	r3, r0
 800abc2:	2200      	movs	r2, #0
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f001 f8ed 	bl	800bda4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800abca:	e1bc      	b.n	800af46 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	2b03      	cmp	r3, #3
 800abd0:	f040 81b9 	bne.w	800af46 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abda:	3301      	adds	r3, #1
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abea:	2b03      	cmp	r3, #3
 800abec:	d903      	bls.n	800abf6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	220d      	movs	r2, #13
 800abf2:	701a      	strb	r2, [r3, #0]
      break;
 800abf4:	e1a7      	b.n	800af46 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	795b      	ldrb	r3, [r3, #5]
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f001 f921 	bl	800be44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	791b      	ldrb	r3, [r3, #4]
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f001 f91b 	bl	800be44 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	701a      	strb	r2, [r3, #0]
      break;
 800ac14:	e197      	b.n	800af46 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ac16:	2112      	movs	r1, #18
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fa8b 	bl	800b134 <USBH_Get_DevDesc>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d103      	bne.n	800ac30 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac2e:	e18c      	b.n	800af4a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	2b03      	cmp	r3, #3
 800ac34:	f040 8189 	bne.w	800af4a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac3e:	3301      	adds	r3, #1
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d903      	bls.n	800ac5a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	220d      	movs	r2, #13
 800ac56:	701a      	strb	r2, [r3, #0]
      break;
 800ac58:	e177      	b.n	800af4a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	795b      	ldrb	r3, [r3, #5]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f001 f8ef 	bl	800be44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	791b      	ldrb	r3, [r3, #4]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f001 f8e9 	bl	800be44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	701a      	strb	r2, [r3, #0]
      break;
 800ac7e:	e164      	b.n	800af4a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ac80:	2101      	movs	r1, #1
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fb02 	bl	800b28c <USBH_SetAddress>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d132      	bne.n	800acf8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ac92:	2002      	movs	r0, #2
 800ac94:	f003 fecf 	bl	800ea36 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2203      	movs	r2, #3
 800aca4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	7919      	ldrb	r1, [r3, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800acba:	b292      	uxth	r2, r2
 800acbc:	9202      	str	r2, [sp, #8]
 800acbe:	2200      	movs	r2, #0
 800acc0:	9201      	str	r2, [sp, #4]
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	4603      	mov	r3, r0
 800acc6:	2280      	movs	r2, #128	; 0x80
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f001 f86b 	bl	800bda4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	7959      	ldrb	r1, [r3, #5]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ace2:	b292      	uxth	r2, r2
 800ace4:	9202      	str	r2, [sp, #8]
 800ace6:	2200      	movs	r2, #0
 800ace8:	9201      	str	r2, [sp, #4]
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	4603      	mov	r3, r0
 800acee:	2200      	movs	r2, #0
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f001 f857 	bl	800bda4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800acf6:	e12a      	b.n	800af4e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acf8:	7bbb      	ldrb	r3, [r7, #14]
 800acfa:	2b03      	cmp	r3, #3
 800acfc:	f040 8127 	bne.w	800af4e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	220d      	movs	r2, #13
 800ad04:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	705a      	strb	r2, [r3, #1]
      break;
 800ad0c:	e11f      	b.n	800af4e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ad0e:	2109      	movs	r1, #9
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fa37 	bl	800b184 <USBH_Get_CfgDesc>
 800ad16:	4603      	mov	r3, r0
 800ad18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d103      	bne.n	800ad28 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2204      	movs	r2, #4
 800ad24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad26:	e114      	b.n	800af52 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	2b03      	cmp	r3, #3
 800ad2c:	f040 8111 	bne.w	800af52 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad36:	3301      	adds	r3, #1
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d903      	bls.n	800ad52 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	220d      	movs	r2, #13
 800ad4e:	701a      	strb	r2, [r3, #0]
      break;
 800ad50:	e0ff      	b.n	800af52 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	795b      	ldrb	r3, [r3, #5]
 800ad56:	4619      	mov	r1, r3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f001 f873 	bl	800be44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	791b      	ldrb	r3, [r3, #4]
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f001 f86d 	bl	800be44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	701a      	strb	r2, [r3, #0]
      break;
 800ad76:	e0ec      	b.n	800af52 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f9ff 	bl	800b184 <USBH_Get_CfgDesc>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad8a:	7bbb      	ldrb	r3, [r7, #14]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d103      	bne.n	800ad98 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2205      	movs	r2, #5
 800ad94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad96:	e0de      	b.n	800af56 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	f040 80db 	bne.w	800af56 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ada6:	3301      	adds	r3, #1
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d903      	bls.n	800adc2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	220d      	movs	r2, #13
 800adbe:	701a      	strb	r2, [r3, #0]
      break;
 800adc0:	e0c9      	b.n	800af56 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	795b      	ldrb	r3, [r3, #5]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 f83b 	bl	800be44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	791b      	ldrb	r3, [r3, #4]
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 f835 	bl	800be44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	701a      	strb	r2, [r3, #0]
      break;
 800ade6:	e0b6      	b.n	800af56 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d036      	beq.n	800ae60 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800adfe:	23ff      	movs	r3, #255	; 0xff
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f9e3 	bl	800b1cc <USBH_Get_StringDesc>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae0a:	7bbb      	ldrb	r3, [r7, #14]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d111      	bne.n	800ae34 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2206      	movs	r2, #6
 800ae14:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2205      	movs	r2, #5
 800ae1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	f001 f8f1 	bl	800c014 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae32:	e092      	b.n	800af5a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae34:	7bbb      	ldrb	r3, [r7, #14]
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	f040 808f 	bne.w	800af5a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2206      	movs	r2, #6
 800ae40:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2205      	movs	r2, #5
 800ae46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae56:	2200      	movs	r2, #0
 800ae58:	4619      	mov	r1, r3
 800ae5a:	f001 f8db 	bl	800c014 <osMessagePut>
      break;
 800ae5e:	e07c      	b.n	800af5a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2206      	movs	r2, #6
 800ae64:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2205      	movs	r2, #5
 800ae6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f001 f8c9 	bl	800c014 <osMessagePut>
      break;
 800ae82:	e06a      	b.n	800af5a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d027      	beq.n	800aede <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ae9a:	23ff      	movs	r3, #255	; 0xff
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f995 	bl	800b1cc <USBH_Get_StringDesc>
 800aea2:	4603      	mov	r3, r0
 800aea4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aea6:	7bbb      	ldrb	r3, [r7, #14]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d103      	bne.n	800aeb4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2207      	movs	r2, #7
 800aeb0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aeb2:	e054      	b.n	800af5e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aeb4:	7bbb      	ldrb	r3, [r7, #14]
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d151      	bne.n	800af5e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2207      	movs	r2, #7
 800aebe:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2205      	movs	r2, #5
 800aec4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aed4:	2200      	movs	r2, #0
 800aed6:	4619      	mov	r1, r3
 800aed8:	f001 f89c 	bl	800c014 <osMessagePut>
      break;
 800aedc:	e03f      	b.n	800af5e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2207      	movs	r2, #7
 800aee2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2205      	movs	r2, #5
 800aee8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aef8:	2200      	movs	r2, #0
 800aefa:	4619      	mov	r1, r3
 800aefc:	f001 f88a 	bl	800c014 <osMessagePut>
      break;
 800af00:	e02d      	b.n	800af5e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d017      	beq.n	800af3c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af18:	23ff      	movs	r3, #255	; 0xff
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f956 	bl	800b1cc <USBH_Get_StringDesc>
 800af20:	4603      	mov	r3, r0
 800af22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d102      	bne.n	800af30 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800af2e:	e018      	b.n	800af62 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	2b03      	cmp	r3, #3
 800af34:	d115      	bne.n	800af62 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]
      break;
 800af3a:	e012      	b.n	800af62 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	73fb      	strb	r3, [r7, #15]
      break;
 800af40:	e00f      	b.n	800af62 <USBH_HandleEnum+0x44a>

    default:
      break;
 800af42:	bf00      	nop
 800af44:	e00e      	b.n	800af64 <USBH_HandleEnum+0x44c>
      break;
 800af46:	bf00      	nop
 800af48:	e00c      	b.n	800af64 <USBH_HandleEnum+0x44c>
      break;
 800af4a:	bf00      	nop
 800af4c:	e00a      	b.n	800af64 <USBH_HandleEnum+0x44c>
      break;
 800af4e:	bf00      	nop
 800af50:	e008      	b.n	800af64 <USBH_HandleEnum+0x44c>
      break;
 800af52:	bf00      	nop
 800af54:	e006      	b.n	800af64 <USBH_HandleEnum+0x44c>
      break;
 800af56:	bf00      	nop
 800af58:	e004      	b.n	800af64 <USBH_HandleEnum+0x44c>
      break;
 800af5a:	bf00      	nop
 800af5c:	e002      	b.n	800af64 <USBH_HandleEnum+0x44c>
      break;
 800af5e:	bf00      	nop
 800af60:	e000      	b.n	800af64 <USBH_HandleEnum+0x44c>
      break;
 800af62:	bf00      	nop
  }
  return Status;
 800af64:	7bfb      	ldrb	r3, [r7, #15]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop

0800af70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800af82:	bf00      	nop
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b082      	sub	sp, #8
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af9c:	1c5a      	adds	r2, r3, #1
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f804 	bl	800afb2 <USBH_HandleSof>
}
 800afaa:	bf00      	nop
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b0b      	cmp	r3, #11
 800afc2:	d10a      	bne.n	800afda <USBH_HandleSof+0x28>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d005      	beq.n	800afda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	4798      	blx	r3
  }
}
 800afda:	bf00      	nop
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b082      	sub	sp, #8
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2201      	movs	r2, #1
 800afee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b006:	2200      	movs	r2, #0
 800b008:	4619      	mov	r1, r3
 800b00a:	f001 f803 	bl	800c014 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b00e:	bf00      	nop
}
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b016:	b480      	push	{r7}
 800b018:	b083      	sub	sp, #12
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b026:	bf00      	nop
}
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b066:	2200      	movs	r2, #0
 800b068:	4619      	mov	r1, r3
 800b06a:	f000 ffd3 	bl	800c014 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f003 fb80 	bl	800e79e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	791b      	ldrb	r3, [r3, #4]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fecd 	bl	800be44 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	795b      	ldrb	r3, [r3, #5]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fec7 	bl	800be44 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	f000 ffa1 	bl	800c014 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800b0ea:	f107 030c 	add.w	r3, r7, #12
 800b0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 ffce 	bl	800c094 <osMessageGet>
    if (event.status == osEventMessage)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b10      	cmp	r3, #16
 800b0fc:	d1f2      	bne.n	800b0e4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7ff faa8 	bl	800a654 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b104:	e7ee      	b.n	800b0e4 <USBH_Process_OS+0x8>

0800b106 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b082      	sub	sp, #8
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b122:	2200      	movs	r2, #0
 800b124:	4619      	mov	r1, r3
 800b126:	f000 ff75 	bl	800c014 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af02      	add	r7, sp, #8
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	460b      	mov	r3, r1
 800b13e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b146:	78fb      	ldrb	r3, [r7, #3]
 800b148:	b29b      	uxth	r3, r3
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	4613      	mov	r3, r2
 800b14e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b152:	2100      	movs	r1, #0
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f864 	bl	800b222 <USBH_GetDescriptor>
 800b15a:	4603      	mov	r3, r0
 800b15c:	73fb      	strb	r3, [r7, #15]
 800b15e:	7bfb      	ldrb	r3, [r7, #15]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10a      	bne.n	800b17a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b170:	78fa      	ldrb	r2, [r7, #3]
 800b172:	b292      	uxth	r2, r2
 800b174:	4619      	mov	r1, r3
 800b176:	f000 f918 	bl	800b3aa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af02      	add	r7, sp, #8
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	331c      	adds	r3, #28
 800b194:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b196:	887b      	ldrh	r3, [r7, #2]
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f83d 	bl	800b222 <USBH_GetDescriptor>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	72fb      	strb	r3, [r7, #11]
 800b1ac:	7afb      	ldrb	r3, [r7, #11]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d107      	bne.n	800b1c2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b1b8:	887a      	ldrh	r2, [r7, #2]
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 f964 	bl	800b48a <USBH_ParseCfgDesc>
  }

  return status;
 800b1c2:	7afb      	ldrb	r3, [r7, #11]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af02      	add	r7, sp, #8
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	607a      	str	r2, [r7, #4]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	460b      	mov	r3, r1
 800b1da:	72fb      	strb	r3, [r7, #11]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b1e8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b1f0:	893b      	ldrh	r3, [r7, #8]
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 f812 	bl	800b222 <USBH_GetDescriptor>
 800b1fe:	4603      	mov	r3, r0
 800b200:	75fb      	strb	r3, [r7, #23]
 800b202:	7dfb      	ldrb	r3, [r7, #23]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d107      	bne.n	800b218 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b20e:	893a      	ldrh	r2, [r7, #8]
 800b210:	6879      	ldr	r1, [r7, #4]
 800b212:	4618      	mov	r0, r3
 800b214:	f000 fa37 	bl	800b686 <USBH_ParseStringDesc>
  }

  return status;
 800b218:	7dfb      	ldrb	r3, [r7, #23]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3718      	adds	r7, #24
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	607b      	str	r3, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	72fb      	strb	r3, [r7, #11]
 800b230:	4613      	mov	r3, r2
 800b232:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	789b      	ldrb	r3, [r3, #2]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d11c      	bne.n	800b276 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b23c:	7afb      	ldrb	r3, [r7, #11]
 800b23e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b242:	b2da      	uxtb	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2206      	movs	r2, #6
 800b24c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	893a      	ldrh	r2, [r7, #8]
 800b252:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b254:	893b      	ldrh	r3, [r7, #8]
 800b256:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b25a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b25e:	d104      	bne.n	800b26a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f240 4209 	movw	r2, #1033	; 0x409
 800b266:	829a      	strh	r2, [r3, #20]
 800b268:	e002      	b.n	800b270 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	8b3a      	ldrh	r2, [r7, #24]
 800b274:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b276:	8b3b      	ldrh	r3, [r7, #24]
 800b278:	461a      	mov	r2, r3
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 fa50 	bl	800b722 <USBH_CtlReq>
 800b282:	4603      	mov	r3, r0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	789b      	ldrb	r3, [r3, #2]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d10f      	bne.n	800b2c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2205      	movs	r2, #5
 800b2aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b2ac:	78fb      	ldrb	r3, [r7, #3]
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fa2c 	bl	800b722 <USBH_CtlReq>
 800b2ca:	4603      	mov	r3, r0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	789b      	ldrb	r3, [r3, #2]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d10e      	bne.n	800b306 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2209      	movs	r2, #9
 800b2f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	887a      	ldrh	r2, [r7, #2]
 800b2f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b306:	2200      	movs	r2, #0
 800b308:	2100      	movs	r1, #0
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fa09 	bl	800b722 <USBH_CtlReq>
 800b310:	4603      	mov	r3, r0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b082      	sub	sp, #8
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	460b      	mov	r3, r1
 800b324:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	789b      	ldrb	r3, [r3, #2]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d10f      	bne.n	800b34e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2203      	movs	r2, #3
 800b338:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b33a:	78fb      	ldrb	r3, [r7, #3]
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b34e:	2200      	movs	r2, #0
 800b350:	2100      	movs	r1, #0
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f9e5 	bl	800b722 <USBH_CtlReq>
 800b358:	4603      	mov	r3, r0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b082      	sub	sp, #8
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	460b      	mov	r3, r1
 800b36c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	789b      	ldrb	r3, [r3, #2]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d10f      	bne.n	800b396 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2202      	movs	r2, #2
 800b37a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b388:	78fb      	ldrb	r3, [r7, #3]
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b396:	2200      	movs	r2, #0
 800b398:	2100      	movs	r1, #0
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f9c1 	bl	800b722 <USBH_CtlReq>
 800b3a0:	4603      	mov	r3, r0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b085      	sub	sp, #20
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	60f8      	str	r0, [r7, #12]
 800b3b2:	60b9      	str	r1, [r7, #8]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	781a      	ldrb	r2, [r3, #0]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	785a      	ldrb	r2, [r3, #1]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	3302      	adds	r3, #2
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	3303      	adds	r3, #3
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	021b      	lsls	r3, r3, #8
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	791a      	ldrb	r2, [r3, #4]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	795a      	ldrb	r2, [r3, #5]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	799a      	ldrb	r2, [r3, #6]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	79da      	ldrb	r2, [r3, #7]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b404:	88fb      	ldrh	r3, [r7, #6]
 800b406:	2b08      	cmp	r3, #8
 800b408:	d939      	bls.n	800b47e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	3308      	adds	r3, #8
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	b29a      	uxth	r2, r3
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	3309      	adds	r3, #9
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	b29b      	uxth	r3, r3
 800b41a:	021b      	lsls	r3, r3, #8
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	4313      	orrs	r3, r2
 800b420:	b29a      	uxth	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	330a      	adds	r3, #10
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	330b      	adds	r3, #11
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	b29b      	uxth	r3, r3
 800b436:	021b      	lsls	r3, r3, #8
 800b438:	b29b      	uxth	r3, r3
 800b43a:	4313      	orrs	r3, r2
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	330c      	adds	r3, #12
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	b29a      	uxth	r2, r3
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	330d      	adds	r3, #13
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	b29b      	uxth	r3, r3
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	b29b      	uxth	r3, r3
 800b456:	4313      	orrs	r3, r2
 800b458:	b29a      	uxth	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	7b9a      	ldrb	r2, [r3, #14]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	7bda      	ldrb	r2, [r3, #15]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	7c1a      	ldrb	r2, [r3, #16]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	7c5a      	ldrb	r2, [r3, #17]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	745a      	strb	r2, [r3, #17]
  }
}
 800b47e:	bf00      	nop
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b08a      	sub	sp, #40	; 0x28
 800b48e:	af00      	add	r7, sp, #0
 800b490:	60f8      	str	r0, [r7, #12]
 800b492:	60b9      	str	r1, [r7, #8]
 800b494:	4613      	mov	r3, r2
 800b496:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b49c:	2300      	movs	r3, #0
 800b49e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	781a      	ldrb	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	785a      	ldrb	r2, [r3, #1]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	3302      	adds	r3, #2
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	3303      	adds	r3, #3
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	021b      	lsls	r3, r3, #8
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	791a      	ldrb	r2, [r3, #4]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	795a      	ldrb	r2, [r3, #5]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	799a      	ldrb	r2, [r3, #6]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	79da      	ldrb	r2, [r3, #7]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	7a1a      	ldrb	r2, [r3, #8]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b500:	88fb      	ldrh	r3, [r7, #6]
 800b502:	2b09      	cmp	r3, #9
 800b504:	d95f      	bls.n	800b5c6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b506:	2309      	movs	r3, #9
 800b508:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b50a:	2300      	movs	r3, #0
 800b50c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b50e:	e051      	b.n	800b5b4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b510:	f107 0316 	add.w	r3, r7, #22
 800b514:	4619      	mov	r1, r3
 800b516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b518:	f000 f8e8 	bl	800b6ec <USBH_GetNextDesc>
 800b51c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	785b      	ldrb	r3, [r3, #1]
 800b522:	2b04      	cmp	r3, #4
 800b524:	d146      	bne.n	800b5b4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b52a:	221a      	movs	r2, #26
 800b52c:	fb02 f303 	mul.w	r3, r2, r3
 800b530:	3308      	adds	r3, #8
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	4413      	add	r3, r2
 800b536:	3302      	adds	r3, #2
 800b538:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b53a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b53c:	69f8      	ldr	r0, [r7, #28]
 800b53e:	f000 f846 	bl	800b5ce <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b542:	2300      	movs	r3, #0
 800b544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b548:	2300      	movs	r3, #0
 800b54a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b54c:	e022      	b.n	800b594 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b54e:	f107 0316 	add.w	r3, r7, #22
 800b552:	4619      	mov	r1, r3
 800b554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b556:	f000 f8c9 	bl	800b6ec <USBH_GetNextDesc>
 800b55a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55e:	785b      	ldrb	r3, [r3, #1]
 800b560:	2b05      	cmp	r3, #5
 800b562:	d117      	bne.n	800b594 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b568:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b56c:	3201      	adds	r2, #1
 800b56e:	00d2      	lsls	r2, r2, #3
 800b570:	211a      	movs	r1, #26
 800b572:	fb01 f303 	mul.w	r3, r1, r3
 800b576:	4413      	add	r3, r2
 800b578:	3308      	adds	r3, #8
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	4413      	add	r3, r2
 800b57e:	3304      	adds	r3, #4
 800b580:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b584:	69b8      	ldr	r0, [r7, #24]
 800b586:	f000 f851 	bl	800b62c <USBH_ParseEPDesc>
            ep_ix++;
 800b58a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b58e:	3301      	adds	r3, #1
 800b590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	791b      	ldrb	r3, [r3, #4]
 800b598:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d204      	bcs.n	800b5aa <USBH_ParseCfgDesc+0x120>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	885a      	ldrh	r2, [r3, #2]
 800b5a4:	8afb      	ldrh	r3, [r7, #22]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d8d1      	bhi.n	800b54e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b5aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b5b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d804      	bhi.n	800b5c6 <USBH_ParseCfgDesc+0x13c>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	885a      	ldrh	r2, [r3, #2]
 800b5c0:	8afb      	ldrh	r3, [r7, #22]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d8a4      	bhi.n	800b510 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b5c6:	bf00      	nop
 800b5c8:	3728      	adds	r7, #40	; 0x28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b083      	sub	sp, #12
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	781a      	ldrb	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	785a      	ldrb	r2, [r3, #1]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	789a      	ldrb	r2, [r3, #2]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	78da      	ldrb	r2, [r3, #3]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	791a      	ldrb	r2, [r3, #4]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	795a      	ldrb	r2, [r3, #5]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	799a      	ldrb	r2, [r3, #6]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	79da      	ldrb	r2, [r3, #7]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	7a1a      	ldrb	r2, [r3, #8]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	721a      	strb	r2, [r3, #8]
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	781a      	ldrb	r2, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	785a      	ldrb	r2, [r3, #1]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	789a      	ldrb	r2, [r3, #2]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	78da      	ldrb	r2, [r3, #3]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	3304      	adds	r3, #4
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	3305      	adds	r3, #5
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	b29b      	uxth	r3, r3
 800b666:	021b      	lsls	r3, r3, #8
 800b668:	b29b      	uxth	r3, r3
 800b66a:	4313      	orrs	r3, r2
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	799a      	ldrb	r2, [r3, #6]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	719a      	strb	r2, [r3, #6]
}
 800b67a:	bf00      	nop
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b686:	b480      	push	{r7}
 800b688:	b087      	sub	sp, #28
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	60f8      	str	r0, [r7, #12]
 800b68e:	60b9      	str	r1, [r7, #8]
 800b690:	4613      	mov	r3, r2
 800b692:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3301      	adds	r3, #1
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	d120      	bne.n	800b6e0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	1e9a      	subs	r2, r3, #2
 800b6a4:	88fb      	ldrh	r3, [r7, #6]
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	bf28      	it	cs
 800b6aa:	4613      	movcs	r3, r2
 800b6ac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3302      	adds	r3, #2
 800b6b2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	82fb      	strh	r3, [r7, #22]
 800b6b8:	e00b      	b.n	800b6d2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b6ba:	8afb      	ldrh	r3, [r7, #22]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	4413      	add	r3, r2
 800b6c0:	781a      	ldrb	r2, [r3, #0]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b6cc:	8afb      	ldrh	r3, [r7, #22]
 800b6ce:	3302      	adds	r3, #2
 800b6d0:	82fb      	strh	r3, [r7, #22]
 800b6d2:	8afa      	ldrh	r2, [r7, #22]
 800b6d4:	8abb      	ldrh	r3, [r7, #20]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d3ef      	bcc.n	800b6ba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	701a      	strb	r2, [r3, #0]
  }
}
 800b6e0:	bf00      	nop
 800b6e2:	371c      	adds	r7, #28
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	881a      	ldrh	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	4413      	add	r3, r2
 800b702:	b29a      	uxth	r2, r3
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4413      	add	r3, r2
 800b712:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b714:	68fb      	ldr	r3, [r7, #12]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b086      	sub	sp, #24
 800b726:	af00      	add	r7, sp, #0
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	4613      	mov	r3, r2
 800b72e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b730:	2301      	movs	r3, #1
 800b732:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	789b      	ldrb	r3, [r3, #2]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d002      	beq.n	800b742 <USBH_CtlReq+0x20>
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d01d      	beq.n	800b77c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b740:	e043      	b.n	800b7ca <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	88fa      	ldrh	r2, [r7, #6]
 800b74c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2201      	movs	r2, #1
 800b752:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2202      	movs	r2, #2
 800b758:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b75a:	2301      	movs	r3, #1
 800b75c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2203      	movs	r2, #3
 800b762:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b772:	2200      	movs	r2, #0
 800b774:	4619      	mov	r1, r3
 800b776:	f000 fc4d 	bl	800c014 <osMessagePut>
      break;
 800b77a:	e026      	b.n	800b7ca <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f000 f829 	bl	800b7d4 <USBH_HandleControl>
 800b782:	4603      	mov	r3, r0
 800b784:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d002      	beq.n	800b792 <USBH_CtlReq+0x70>
 800b78c:	7dfb      	ldrb	r3, [r7, #23]
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d106      	bne.n	800b7a0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2201      	movs	r2, #1
 800b796:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	761a      	strb	r2, [r3, #24]
 800b79e:	e005      	b.n	800b7ac <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b7a0:	7dfb      	ldrb	r3, [r7, #23]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d102      	bne.n	800b7ac <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2203      	movs	r2, #3
 800b7b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	f000 fc26 	bl	800c014 <osMessagePut>
      break;
 800b7c8:	bf00      	nop
  }
  return status;
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af02      	add	r7, sp, #8
 800b7da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	7e1b      	ldrb	r3, [r3, #24]
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	2b0a      	cmp	r3, #10
 800b7ec:	f200 8229 	bhi.w	800bc42 <USBH_HandleControl+0x46e>
 800b7f0:	a201      	add	r2, pc, #4	; (adr r2, 800b7f8 <USBH_HandleControl+0x24>)
 800b7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f6:	bf00      	nop
 800b7f8:	0800b825 	.word	0x0800b825
 800b7fc:	0800b83f 	.word	0x0800b83f
 800b800:	0800b8e1 	.word	0x0800b8e1
 800b804:	0800b907 	.word	0x0800b907
 800b808:	0800b993 	.word	0x0800b993
 800b80c:	0800b9bd 	.word	0x0800b9bd
 800b810:	0800ba7f 	.word	0x0800ba7f
 800b814:	0800baa1 	.word	0x0800baa1
 800b818:	0800bb33 	.word	0x0800bb33
 800b81c:	0800bb59 	.word	0x0800bb59
 800b820:	0800bbeb 	.word	0x0800bbeb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f103 0110 	add.w	r1, r3, #16
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	795b      	ldrb	r3, [r3, #5]
 800b82e:	461a      	mov	r2, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fa17 	bl	800bc64 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2202      	movs	r2, #2
 800b83a:	761a      	strb	r2, [r3, #24]
      break;
 800b83c:	e20c      	b.n	800bc58 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	795b      	ldrb	r3, [r3, #5]
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f003 f899 	bl	800e97c <USBH_LL_GetURBState>
 800b84a:	4603      	mov	r3, r0
 800b84c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b84e:	7bbb      	ldrb	r3, [r7, #14]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d12c      	bne.n	800b8ae <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	7c1b      	ldrb	r3, [r3, #16]
 800b858:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b85c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	8adb      	ldrh	r3, [r3, #22]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00a      	beq.n	800b87c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b866:	7b7b      	ldrb	r3, [r7, #13]
 800b868:	2b80      	cmp	r3, #128	; 0x80
 800b86a:	d103      	bne.n	800b874 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2203      	movs	r2, #3
 800b870:	761a      	strb	r2, [r3, #24]
 800b872:	e00d      	b.n	800b890 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2205      	movs	r2, #5
 800b878:	761a      	strb	r2, [r3, #24]
 800b87a:	e009      	b.n	800b890 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b87c:	7b7b      	ldrb	r3, [r7, #13]
 800b87e:	2b80      	cmp	r3, #128	; 0x80
 800b880:	d103      	bne.n	800b88a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2209      	movs	r2, #9
 800b886:	761a      	strb	r2, [r3, #24]
 800b888:	e002      	b.n	800b890 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2207      	movs	r2, #7
 800b88e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2203      	movs	r2, #3
 800b894:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	f000 fbb4 	bl	800c014 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8ac:	e1cb      	b.n	800bc46 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	2b04      	cmp	r3, #4
 800b8b2:	d003      	beq.n	800b8bc <USBH_HandleControl+0xe8>
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	f040 81c5 	bne.w	800bc46 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	220b      	movs	r2, #11
 800b8c0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2203      	movs	r2, #3
 800b8c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	4619      	mov	r1, r3
 800b8da:	f000 fb9b 	bl	800c014 <osMessagePut>
      break;
 800b8de:	e1b2      	b.n	800bc46 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6899      	ldr	r1, [r3, #8]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	899a      	ldrh	r2, [r3, #12]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	791b      	ldrb	r3, [r3, #4]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f9f2 	bl	800bce2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2204      	movs	r2, #4
 800b902:	761a      	strb	r2, [r3, #24]
      break;
 800b904:	e1a8      	b.n	800bc58 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	791b      	ldrb	r3, [r3, #4]
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f003 f835 	bl	800e97c <USBH_LL_GetURBState>
 800b912:	4603      	mov	r3, r0
 800b914:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b916:	7bbb      	ldrb	r3, [r7, #14]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d110      	bne.n	800b93e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2209      	movs	r2, #9
 800b920:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2203      	movs	r2, #3
 800b926:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b936:	2200      	movs	r2, #0
 800b938:	4619      	mov	r1, r3
 800b93a:	f000 fb6b 	bl	800c014 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b93e:	7bbb      	ldrb	r3, [r7, #14]
 800b940:	2b05      	cmp	r3, #5
 800b942:	d110      	bne.n	800b966 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b944:	2303      	movs	r3, #3
 800b946:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2203      	movs	r2, #3
 800b94c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b95c:	2200      	movs	r2, #0
 800b95e:	4619      	mov	r1, r3
 800b960:	f000 fb58 	bl	800c014 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b964:	e171      	b.n	800bc4a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b966:	7bbb      	ldrb	r3, [r7, #14]
 800b968:	2b04      	cmp	r3, #4
 800b96a:	f040 816e 	bne.w	800bc4a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	220b      	movs	r2, #11
 800b972:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2203      	movs	r2, #3
 800b978:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b988:	2200      	movs	r2, #0
 800b98a:	4619      	mov	r1, r3
 800b98c:	f000 fb42 	bl	800c014 <osMessagePut>
      break;
 800b990:	e15b      	b.n	800bc4a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6899      	ldr	r1, [r3, #8]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	899a      	ldrh	r2, [r3, #12]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	795b      	ldrb	r3, [r3, #5]
 800b99e:	2001      	movs	r0, #1
 800b9a0:	9000      	str	r0, [sp, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f978 	bl	800bc98 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2206      	movs	r2, #6
 800b9b8:	761a      	strb	r2, [r3, #24]
      break;
 800b9ba:	e14d      	b.n	800bc58 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	795b      	ldrb	r3, [r3, #5]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f002 ffda 	bl	800e97c <USBH_LL_GetURBState>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d111      	bne.n	800b9f6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2207      	movs	r2, #7
 800b9d6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2203      	movs	r2, #3
 800b9dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	f000 fb10 	bl	800c014 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9f4:	e12b      	b.n	800bc4e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	2b05      	cmp	r3, #5
 800b9fa:	d113      	bne.n	800ba24 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	220c      	movs	r2, #12
 800ba00:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ba02:	2303      	movs	r3, #3
 800ba04:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2203      	movs	r2, #3
 800ba0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	f000 faf9 	bl	800c014 <osMessagePut>
      break;
 800ba22:	e114      	b.n	800bc4e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d111      	bne.n	800ba4e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2205      	movs	r2, #5
 800ba2e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2203      	movs	r2, #3
 800ba34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba44:	2200      	movs	r2, #0
 800ba46:	4619      	mov	r1, r3
 800ba48:	f000 fae4 	bl	800c014 <osMessagePut>
      break;
 800ba4c:	e0ff      	b.n	800bc4e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	f040 80fc 	bne.w	800bc4e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	220b      	movs	r2, #11
 800ba5a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2203      	movs	r2, #3
 800ba64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba74:	2200      	movs	r2, #0
 800ba76:	4619      	mov	r1, r3
 800ba78:	f000 facc 	bl	800c014 <osMessagePut>
      break;
 800ba7c:	e0e7      	b.n	800bc4e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	791b      	ldrb	r3, [r3, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	2100      	movs	r1, #0
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f92b 	bl	800bce2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2208      	movs	r2, #8
 800ba9c:	761a      	strb	r2, [r3, #24]

      break;
 800ba9e:	e0db      	b.n	800bc58 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	791b      	ldrb	r3, [r3, #4]
 800baa4:	4619      	mov	r1, r3
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f002 ff68 	bl	800e97c <USBH_LL_GetURBState>
 800baac:	4603      	mov	r3, r0
 800baae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bab0:	7bbb      	ldrb	r3, [r7, #14]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d113      	bne.n	800bade <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	220d      	movs	r2, #13
 800baba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800babc:	2300      	movs	r3, #0
 800babe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2203      	movs	r2, #3
 800bac4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bad4:	2200      	movs	r2, #0
 800bad6:	4619      	mov	r1, r3
 800bad8:	f000 fa9c 	bl	800c014 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800badc:	e0b9      	b.n	800bc52 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	2b04      	cmp	r3, #4
 800bae2:	d111      	bne.n	800bb08 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	220b      	movs	r2, #11
 800bae8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2203      	movs	r2, #3
 800baee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bafe:	2200      	movs	r2, #0
 800bb00:	4619      	mov	r1, r3
 800bb02:	f000 fa87 	bl	800c014 <osMessagePut>
      break;
 800bb06:	e0a4      	b.n	800bc52 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800bb08:	7bbb      	ldrb	r3, [r7, #14]
 800bb0a:	2b05      	cmp	r3, #5
 800bb0c:	f040 80a1 	bne.w	800bc52 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800bb10:	2303      	movs	r3, #3
 800bb12:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2203      	movs	r2, #3
 800bb18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb28:	2200      	movs	r2, #0
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	f000 fa72 	bl	800c014 <osMessagePut>
      break;
 800bb30:	e08f      	b.n	800bc52 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	795b      	ldrb	r3, [r3, #5]
 800bb36:	2201      	movs	r2, #1
 800bb38:	9200      	str	r2, [sp, #0]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f8aa 	bl	800bc98 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	220a      	movs	r2, #10
 800bb54:	761a      	strb	r2, [r3, #24]
      break;
 800bb56:	e07f      	b.n	800bc58 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	795b      	ldrb	r3, [r3, #5]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f002 ff0c 	bl	800e97c <USBH_LL_GetURBState>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d113      	bne.n	800bb96 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	220d      	movs	r2, #13
 800bb76:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	4619      	mov	r1, r3
 800bb90:	f000 fa40 	bl	800c014 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb94:	e05f      	b.n	800bc56 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb96:	7bbb      	ldrb	r3, [r7, #14]
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d111      	bne.n	800bbc0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2209      	movs	r2, #9
 800bba0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2203      	movs	r2, #3
 800bba6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4619      	mov	r1, r3
 800bbba:	f000 fa2b 	bl	800c014 <osMessagePut>
      break;
 800bbbe:	e04a      	b.n	800bc56 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800bbc0:	7bbb      	ldrb	r3, [r7, #14]
 800bbc2:	2b04      	cmp	r3, #4
 800bbc4:	d147      	bne.n	800bc56 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	220b      	movs	r2, #11
 800bbca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2203      	movs	r2, #3
 800bbd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	f000 fa16 	bl	800c014 <osMessagePut>
      break;
 800bbe8:	e035      	b.n	800bc56 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	7e5b      	ldrb	r3, [r3, #25]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	765a      	strb	r2, [r3, #25]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	7e5b      	ldrb	r3, [r3, #25]
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d806      	bhi.n	800bc0c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2201      	movs	r2, #1
 800bc02:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bc0a:	e025      	b.n	800bc58 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc12:	2106      	movs	r1, #6
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	795b      	ldrb	r3, [r3, #5]
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f90d 	bl	800be44 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	791b      	ldrb	r3, [r3, #4]
 800bc2e:	4619      	mov	r1, r3
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f907 	bl	800be44 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc40:	e00a      	b.n	800bc58 <USBH_HandleControl+0x484>

    default:
      break;
 800bc42:	bf00      	nop
 800bc44:	e008      	b.n	800bc58 <USBH_HandleControl+0x484>
      break;
 800bc46:	bf00      	nop
 800bc48:	e006      	b.n	800bc58 <USBH_HandleControl+0x484>
      break;
 800bc4a:	bf00      	nop
 800bc4c:	e004      	b.n	800bc58 <USBH_HandleControl+0x484>
      break;
 800bc4e:	bf00      	nop
 800bc50:	e002      	b.n	800bc58 <USBH_HandleControl+0x484>
      break;
 800bc52:	bf00      	nop
 800bc54:	e000      	b.n	800bc58 <USBH_HandleControl+0x484>
      break;
 800bc56:	bf00      	nop
  }

  return status;
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop

0800bc64 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af04      	add	r7, sp, #16
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc72:	79f9      	ldrb	r1, [r7, #7]
 800bc74:	2300      	movs	r3, #0
 800bc76:	9303      	str	r3, [sp, #12]
 800bc78:	2308      	movs	r3, #8
 800bc7a:	9302      	str	r3, [sp, #8]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	2300      	movs	r3, #0
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	2300      	movs	r3, #0
 800bc86:	2200      	movs	r2, #0
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f002 fe46 	bl	800e91a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af04      	add	r7, sp, #16
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	4611      	mov	r1, r2
 800bca4:	461a      	mov	r2, r3
 800bca6:	460b      	mov	r3, r1
 800bca8:	80fb      	strh	r3, [r7, #6]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d001      	beq.n	800bcbc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcbc:	7979      	ldrb	r1, [r7, #5]
 800bcbe:	7e3b      	ldrb	r3, [r7, #24]
 800bcc0:	9303      	str	r3, [sp, #12]
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	9302      	str	r3, [sp, #8]
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	2301      	movs	r3, #1
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	68f8      	ldr	r0, [r7, #12]
 800bcd4:	f002 fe21 	bl	800e91a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b088      	sub	sp, #32
 800bce6:	af04      	add	r7, sp, #16
 800bce8:	60f8      	str	r0, [r7, #12]
 800bcea:	60b9      	str	r1, [r7, #8]
 800bcec:	4611      	mov	r1, r2
 800bcee:	461a      	mov	r2, r3
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	80fb      	strh	r3, [r7, #6]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcf8:	7979      	ldrb	r1, [r7, #5]
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	9303      	str	r3, [sp, #12]
 800bcfe:	88fb      	ldrh	r3, [r7, #6]
 800bd00:	9302      	str	r3, [sp, #8]
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	9301      	str	r3, [sp, #4]
 800bd06:	2301      	movs	r3, #1
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	f002 fe03 	bl	800e91a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bd14:	2300      	movs	r3, #0

}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b088      	sub	sp, #32
 800bd22:	af04      	add	r7, sp, #16
 800bd24:	60f8      	str	r0, [r7, #12]
 800bd26:	60b9      	str	r1, [r7, #8]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	80fb      	strh	r3, [r7, #6]
 800bd30:	4613      	mov	r3, r2
 800bd32:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d001      	beq.n	800bd42 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd42:	7979      	ldrb	r1, [r7, #5]
 800bd44:	7e3b      	ldrb	r3, [r7, #24]
 800bd46:	9303      	str	r3, [sp, #12]
 800bd48:	88fb      	ldrh	r3, [r7, #6]
 800bd4a:	9302      	str	r3, [sp, #8]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	2301      	movs	r3, #1
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	2302      	movs	r3, #2
 800bd56:	2200      	movs	r2, #0
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f002 fdde 	bl	800e91a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af04      	add	r7, sp, #16
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	4611      	mov	r1, r2
 800bd74:	461a      	mov	r2, r3
 800bd76:	460b      	mov	r3, r1
 800bd78:	80fb      	strh	r3, [r7, #6]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd7e:	7979      	ldrb	r1, [r7, #5]
 800bd80:	2300      	movs	r3, #0
 800bd82:	9303      	str	r3, [sp, #12]
 800bd84:	88fb      	ldrh	r3, [r7, #6]
 800bd86:	9302      	str	r3, [sp, #8]
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	9301      	str	r3, [sp, #4]
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	2302      	movs	r3, #2
 800bd92:	2201      	movs	r2, #1
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f002 fdc0 	bl	800e91a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af04      	add	r7, sp, #16
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	4608      	mov	r0, r1
 800bdae:	4611      	mov	r1, r2
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	70fb      	strb	r3, [r7, #3]
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	70bb      	strb	r3, [r7, #2]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bdbe:	7878      	ldrb	r0, [r7, #1]
 800bdc0:	78ba      	ldrb	r2, [r7, #2]
 800bdc2:	78f9      	ldrb	r1, [r7, #3]
 800bdc4:	8b3b      	ldrh	r3, [r7, #24]
 800bdc6:	9302      	str	r3, [sp, #8]
 800bdc8:	7d3b      	ldrb	r3, [r7, #20]
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	7c3b      	ldrb	r3, [r7, #16]
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f002 fd53 	bl	800e87e <USBH_LL_OpenPipe>

  return USBH_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}

0800bde2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b082      	sub	sp, #8
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
 800bdea:	460b      	mov	r3, r1
 800bdec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bdee:	78fb      	ldrb	r3, [r7, #3]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f002 fd72 	bl	800e8dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	460b      	mov	r3, r1
 800be0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f836 	bl	800be80 <USBH_GetFreePipe>
 800be14:	4603      	mov	r3, r0
 800be16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800be18:	89fb      	ldrh	r3, [r7, #14]
 800be1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be1e:	4293      	cmp	r3, r2
 800be20:	d00a      	beq.n	800be38 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800be22:	78fa      	ldrb	r2, [r7, #3]
 800be24:	89fb      	ldrh	r3, [r7, #14]
 800be26:	f003 030f 	and.w	r3, r3, #15
 800be2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be2e:	6879      	ldr	r1, [r7, #4]
 800be30:	33e0      	adds	r3, #224	; 0xe0
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	440b      	add	r3, r1
 800be36:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800be38:	89fb      	ldrh	r3, [r7, #14]
 800be3a:	b2db      	uxtb	r3, r3
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	460b      	mov	r3, r1
 800be4e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800be50:	78fb      	ldrb	r3, [r7, #3]
 800be52:	2b0a      	cmp	r3, #10
 800be54:	d80d      	bhi.n	800be72 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800be56:	78fb      	ldrb	r3, [r7, #3]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	33e0      	adds	r3, #224	; 0xe0
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4413      	add	r3, r2
 800be60:	685a      	ldr	r2, [r3, #4]
 800be62:	78fb      	ldrb	r3, [r7, #3]
 800be64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800be68:	6879      	ldr	r1, [r7, #4]
 800be6a:	33e0      	adds	r3, #224	; 0xe0
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	440b      	add	r3, r1
 800be70:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800be88:	2300      	movs	r3, #0
 800be8a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800be8c:	2300      	movs	r3, #0
 800be8e:	73fb      	strb	r3, [r7, #15]
 800be90:	e00f      	b.n	800beb2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800be92:	7bfb      	ldrb	r3, [r7, #15]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	33e0      	adds	r3, #224	; 0xe0
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4413      	add	r3, r2
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	e007      	b.n	800bebc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	3301      	adds	r3, #1
 800beb0:	73fb      	strb	r3, [r7, #15]
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
 800beb4:	2b0a      	cmp	r3, #10
 800beb6:	d9ec      	bls.n	800be92 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800beb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bed2:	2300      	movs	r3, #0
 800bed4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beda:	2b84      	cmp	r3, #132	; 0x84
 800bedc:	d005      	beq.n	800beea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bede:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	4413      	add	r3, r2
 800bee6:	3303      	adds	r3, #3
 800bee8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800beea:	68fb      	ldr	r3, [r7, #12]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800befe:	f3ef 8305 	mrs	r3, IPSR
 800bf02:	607b      	str	r3, [r7, #4]
  return(result);
 800bf04:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	bf14      	ite	ne
 800bf0a:	2301      	movne	r3, #1
 800bf0c:	2300      	moveq	r3, #0
 800bf0e:	b2db      	uxtb	r3, r3
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bf20:	f001 f976 	bl	800d210 <vTaskStartScheduler>
  
  return osOK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bf2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf2c:	b089      	sub	sp, #36	; 0x24
 800bf2e:	af04      	add	r7, sp, #16
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d020      	beq.n	800bf7e <osThreadCreate+0x54>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d01c      	beq.n	800bf7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685c      	ldr	r4, [r3, #4]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681d      	ldr	r5, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	691e      	ldr	r6, [r3, #16]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7ff ffb6 	bl	800bec8 <makeFreeRtosPriority>
 800bf5c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	695b      	ldr	r3, [r3, #20]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf66:	9202      	str	r2, [sp, #8]
 800bf68:	9301      	str	r3, [sp, #4]
 800bf6a:	9100      	str	r1, [sp, #0]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	4632      	mov	r2, r6
 800bf70:	4629      	mov	r1, r5
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 fefc 	bl	800cd70 <xTaskCreateStatic>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e01c      	b.n	800bfb8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685c      	ldr	r4, [r3, #4]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf8a:	b29e      	uxth	r6, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7ff ff98 	bl	800bec8 <makeFreeRtosPriority>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	f107 030c 	add.w	r3, r7, #12
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	9200      	str	r2, [sp, #0]
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	4632      	mov	r2, r6
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f000 ff3e 	bl	800ce2a <xTaskCreate>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d001      	beq.n	800bfb8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	e000      	b.n	800bfba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfc2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bfc2:	b590      	push	{r4, r7, lr}
 800bfc4:	b085      	sub	sp, #20
 800bfc6:	af02      	add	r7, sp, #8
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d011      	beq.n	800bff8 <osMessageCreate+0x36>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00d      	beq.n	800bff8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6818      	ldr	r0, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6859      	ldr	r1, [r3, #4]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	689a      	ldr	r2, [r3, #8]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	2400      	movs	r4, #0
 800bfee:	9400      	str	r4, [sp, #0]
 800bff0:	f000 f9e0 	bl	800c3b4 <xQueueGenericCreateStatic>
 800bff4:	4603      	mov	r3, r0
 800bff6:	e008      	b.n	800c00a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6818      	ldr	r0, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	4619      	mov	r1, r3
 800c004:	f000 fa4e 	bl	800c4a4 <xQueueGenericCreate>
 800c008:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	370c      	adds	r7, #12
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd90      	pop	{r4, r7, pc}
	...

0800c014 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c020:	2300      	movs	r3, #0
 800c022:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d101      	bne.n	800c032 <osMessagePut+0x1e>
    ticks = 1;
 800c02e:	2301      	movs	r3, #1
 800c030:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c032:	f7ff ff61 	bl	800bef8 <inHandlerMode>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d018      	beq.n	800c06e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c03c:	f107 0210 	add.w	r2, r7, #16
 800c040:	f107 0108 	add.w	r1, r7, #8
 800c044:	2300      	movs	r3, #0
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f000 fb8a 	bl	800c760 <xQueueGenericSendFromISR>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d001      	beq.n	800c056 <osMessagePut+0x42>
      return osErrorOS;
 800c052:	23ff      	movs	r3, #255	; 0xff
 800c054:	e018      	b.n	800c088 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d014      	beq.n	800c086 <osMessagePut+0x72>
 800c05c:	4b0c      	ldr	r3, [pc, #48]	; (800c090 <osMessagePut+0x7c>)
 800c05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c062:	601a      	str	r2, [r3, #0]
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	e00b      	b.n	800c086 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c06e:	f107 0108 	add.w	r1, r7, #8
 800c072:	2300      	movs	r3, #0
 800c074:	697a      	ldr	r2, [r7, #20]
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f000 fa74 	bl	800c564 <xQueueGenericSend>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d001      	beq.n	800c086 <osMessagePut+0x72>
      return osErrorOS;
 800c082:	23ff      	movs	r3, #255	; 0xff
 800c084:	e000      	b.n	800c088 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c086:	2300      	movs	r3, #0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	e000ed04 	.word	0xe000ed04

0800c094 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c094:	b590      	push	{r4, r7, lr}
 800c096:	b08b      	sub	sp, #44	; 0x2c
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10a      	bne.n	800c0c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c0ae:	2380      	movs	r3, #128	; 0x80
 800c0b0:	617b      	str	r3, [r7, #20]
    return event;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	461c      	mov	r4, r3
 800c0b6:	f107 0314 	add.w	r3, r7, #20
 800c0ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c0c2:	e054      	b.n	800c16e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d2:	d103      	bne.n	800c0dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24
 800c0da:	e009      	b.n	800c0f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d006      	beq.n	800c0f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <osMessageGet+0x5c>
      ticks = 1;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c0f0:	f7ff ff02 	bl	800bef8 <inHandlerMode>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d01c      	beq.n	800c134 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c0fa:	f107 0220 	add.w	r2, r7, #32
 800c0fe:	f107 0314 	add.w	r3, r7, #20
 800c102:	3304      	adds	r3, #4
 800c104:	4619      	mov	r1, r3
 800c106:	68b8      	ldr	r0, [r7, #8]
 800c108:	f000 fca2 	bl	800ca50 <xQueueReceiveFromISR>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d102      	bne.n	800c118 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c112:	2310      	movs	r3, #16
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	e001      	b.n	800c11c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c118:	2300      	movs	r3, #0
 800c11a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d01d      	beq.n	800c15e <osMessageGet+0xca>
 800c122:	4b15      	ldr	r3, [pc, #84]	; (800c178 <osMessageGet+0xe4>)
 800c124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	e014      	b.n	800c15e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c134:	f107 0314 	add.w	r3, r7, #20
 800c138:	3304      	adds	r3, #4
 800c13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13c:	4619      	mov	r1, r3
 800c13e:	68b8      	ldr	r0, [r7, #8]
 800c140:	f000 fba6 	bl	800c890 <xQueueReceive>
 800c144:	4603      	mov	r3, r0
 800c146:	2b01      	cmp	r3, #1
 800c148:	d102      	bne.n	800c150 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c14a:	2310      	movs	r3, #16
 800c14c:	617b      	str	r3, [r7, #20]
 800c14e:	e006      	b.n	800c15e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <osMessageGet+0xc6>
 800c156:	2300      	movs	r3, #0
 800c158:	e000      	b.n	800c15c <osMessageGet+0xc8>
 800c15a:	2340      	movs	r3, #64	; 0x40
 800c15c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	461c      	mov	r4, r3
 800c162:	f107 0314 	add.w	r3, r7, #20
 800c166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c16a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	372c      	adds	r7, #44	; 0x2c
 800c172:	46bd      	mov	sp, r7
 800c174:	bd90      	pop	{r4, r7, pc}
 800c176:	bf00      	nop
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f103 0208 	add.w	r2, r3, #8
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f04f 32ff 	mov.w	r2, #4294967295
 800c194:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f103 0208 	add.w	r2, r3, #8
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f103 0208 	add.w	r2, r3, #8
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1ca:	bf00      	nop
 800c1cc:	370c      	adds	r7, #12
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr

0800c1d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b085      	sub	sp, #20
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
 800c1de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	689a      	ldr	r2, [r3, #8]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	683a      	ldr	r2, [r7, #0]
 800c1fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	1c5a      	adds	r2, r3, #1
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	601a      	str	r2, [r3, #0]
}
 800c212:	bf00      	nop
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c21e:	b480      	push	{r7}
 800c220:	b085      	sub	sp, #20
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c234:	d103      	bne.n	800c23e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	60fb      	str	r3, [r7, #12]
 800c23c:	e00c      	b.n	800c258 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3308      	adds	r3, #8
 800c242:	60fb      	str	r3, [r7, #12]
 800c244:	e002      	b.n	800c24c <vListInsert+0x2e>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	429a      	cmp	r2, r3
 800c256:	d2f6      	bcs.n	800c246 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	683a      	ldr	r2, [r7, #0]
 800c266:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	1c5a      	adds	r2, r3, #1
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	601a      	str	r2, [r3, #0]
}
 800c284:	bf00      	nop
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	6892      	ldr	r2, [r2, #8]
 800c2a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	6852      	ldr	r2, [r2, #4]
 800c2b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d103      	bne.n	800c2c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	689a      	ldr	r2, [r3, #8]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	1e5a      	subs	r2, r3, #1
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d10a      	bne.n	800c30e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fc:	f383 8811 	msr	BASEPRI, r3
 800c300:	f3bf 8f6f 	isb	sy
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c30a:	bf00      	nop
 800c30c:	e7fe      	b.n	800c30c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c30e:	f001 fdd9 	bl	800dec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c31a:	68f9      	ldr	r1, [r7, #12]
 800c31c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c31e:	fb01 f303 	mul.w	r3, r1, r3
 800c322:	441a      	add	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c33e:	3b01      	subs	r3, #1
 800c340:	68f9      	ldr	r1, [r7, #12]
 800c342:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c344:	fb01 f303 	mul.w	r3, r1, r3
 800c348:	441a      	add	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	22ff      	movs	r2, #255	; 0xff
 800c352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	22ff      	movs	r2, #255	; 0xff
 800c35a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d114      	bne.n	800c38e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d01a      	beq.n	800c3a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3310      	adds	r3, #16
 800c370:	4618      	mov	r0, r3
 800c372:	f001 f9b3 	bl	800d6dc <xTaskRemoveFromEventList>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d012      	beq.n	800c3a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c37c:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <xQueueGenericReset+0xcc>)
 800c37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	e009      	b.n	800c3a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3310      	adds	r3, #16
 800c392:	4618      	mov	r0, r3
 800c394:	f7ff fef2 	bl	800c17c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3324      	adds	r3, #36	; 0x24
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7ff feed 	bl	800c17c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c3a2:	f001 fdbf 	bl	800df24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c3a6:	2301      	movs	r3, #1
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	e000ed04 	.word	0xe000ed04

0800c3b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08e      	sub	sp, #56	; 0x38
 800c3b8:	af02      	add	r7, sp, #8
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10a      	bne.n	800c3de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3da:	bf00      	nop
 800c3dc:	e7fe      	b.n	800c3dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10a      	bne.n	800c3fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3f6:	bf00      	nop
 800c3f8:	e7fe      	b.n	800c3f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <xQueueGenericCreateStatic+0x52>
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <xQueueGenericCreateStatic+0x56>
 800c406:	2301      	movs	r3, #1
 800c408:	e000      	b.n	800c40c <xQueueGenericCreateStatic+0x58>
 800c40a:	2300      	movs	r3, #0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10a      	bne.n	800c426 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	623b      	str	r3, [r7, #32]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d102      	bne.n	800c432 <xQueueGenericCreateStatic+0x7e>
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d101      	bne.n	800c436 <xQueueGenericCreateStatic+0x82>
 800c432:	2301      	movs	r3, #1
 800c434:	e000      	b.n	800c438 <xQueueGenericCreateStatic+0x84>
 800c436:	2300      	movs	r3, #0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10a      	bne.n	800c452 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	61fb      	str	r3, [r7, #28]
}
 800c44e:	bf00      	nop
 800c450:	e7fe      	b.n	800c450 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c452:	2348      	movs	r3, #72	; 0x48
 800c454:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b48      	cmp	r3, #72	; 0x48
 800c45a:	d00a      	beq.n	800c472 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	61bb      	str	r3, [r7, #24]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c472:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00d      	beq.n	800c49a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c480:	2201      	movs	r2, #1
 800c482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c486:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	4613      	mov	r3, r2
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	68b9      	ldr	r1, [r7, #8]
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 f845 	bl	800c524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3730      	adds	r7, #48	; 0x30
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b08a      	sub	sp, #40	; 0x28
 800c4a8:	af02      	add	r7, sp, #8
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10a      	bne.n	800c4ce <xQueueGenericCreate+0x2a>
	__asm volatile
 800c4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4bc:	f383 8811 	msr	BASEPRI, r3
 800c4c0:	f3bf 8f6f 	isb	sy
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	613b      	str	r3, [r7, #16]
}
 800c4ca:	bf00      	nop
 800c4cc:	e7fe      	b.n	800c4cc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d102      	bne.n	800c4da <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	61fb      	str	r3, [r7, #28]
 800c4d8:	e004      	b.n	800c4e4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	fb02 f303 	mul.w	r3, r2, r3
 800c4e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	3348      	adds	r3, #72	; 0x48
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f001 fe0d 	bl	800e108 <pvPortMalloc>
 800c4ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d011      	beq.n	800c51a <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	3348      	adds	r3, #72	; 0x48
 800c4fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	2200      	movs	r2, #0
 800c504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c508:	79fa      	ldrb	r2, [r7, #7]
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	4613      	mov	r3, r2
 800c510:	697a      	ldr	r2, [r7, #20]
 800c512:	68b9      	ldr	r1, [r7, #8]
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f000 f805 	bl	800c524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c51a:	69bb      	ldr	r3, [r7, #24]
	}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3720      	adds	r7, #32
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
 800c530:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d103      	bne.n	800c540 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	69ba      	ldr	r2, [r7, #24]
 800c53c:	601a      	str	r2, [r3, #0]
 800c53e:	e002      	b.n	800c546 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c552:	2101      	movs	r1, #1
 800c554:	69b8      	ldr	r0, [r7, #24]
 800c556:	f7ff fec5 	bl	800c2e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c55a:	bf00      	nop
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
	...

0800c564 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b08e      	sub	sp, #56	; 0x38
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
 800c570:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c572:	2300      	movs	r3, #0
 800c574:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10a      	bne.n	800c596 <xQueueGenericSend+0x32>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d103      	bne.n	800c5a4 <xQueueGenericSend+0x40>
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <xQueueGenericSend+0x44>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e000      	b.n	800c5aa <xQueueGenericSend+0x46>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10a      	bne.n	800c5c4 <xQueueGenericSend+0x60>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d103      	bne.n	800c5d2 <xQueueGenericSend+0x6e>
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d101      	bne.n	800c5d6 <xQueueGenericSend+0x72>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e000      	b.n	800c5d8 <xQueueGenericSend+0x74>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10a      	bne.n	800c5f2 <xQueueGenericSend+0x8e>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	623b      	str	r3, [r7, #32]
}
 800c5ee:	bf00      	nop
 800c5f0:	e7fe      	b.n	800c5f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5f2:	f001 fa31 	bl	800da58 <xTaskGetSchedulerState>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d102      	bne.n	800c602 <xQueueGenericSend+0x9e>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d101      	bne.n	800c606 <xQueueGenericSend+0xa2>
 800c602:	2301      	movs	r3, #1
 800c604:	e000      	b.n	800c608 <xQueueGenericSend+0xa4>
 800c606:	2300      	movs	r3, #0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10a      	bne.n	800c622 <xQueueGenericSend+0xbe>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	61fb      	str	r3, [r7, #28]
}
 800c61e:	bf00      	nop
 800c620:	e7fe      	b.n	800c620 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c622:	f001 fc4f 	bl	800dec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c62e:	429a      	cmp	r2, r3
 800c630:	d302      	bcc.n	800c638 <xQueueGenericSend+0xd4>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b02      	cmp	r3, #2
 800c636:	d129      	bne.n	800c68c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	68b9      	ldr	r1, [r7, #8]
 800c63c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c63e:	f000 fa87 	bl	800cb50 <prvCopyDataToQueue>
 800c642:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d010      	beq.n	800c66e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	3324      	adds	r3, #36	; 0x24
 800c650:	4618      	mov	r0, r3
 800c652:	f001 f843 	bl	800d6dc <xTaskRemoveFromEventList>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d013      	beq.n	800c684 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c65c:	4b3f      	ldr	r3, [pc, #252]	; (800c75c <xQueueGenericSend+0x1f8>)
 800c65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	f3bf 8f4f 	dsb	sy
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	e00a      	b.n	800c684 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	2b00      	cmp	r3, #0
 800c672:	d007      	beq.n	800c684 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c674:	4b39      	ldr	r3, [pc, #228]	; (800c75c <xQueueGenericSend+0x1f8>)
 800c676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c684:	f001 fc4e 	bl	800df24 <vPortExitCritical>
				return pdPASS;
 800c688:	2301      	movs	r3, #1
 800c68a:	e063      	b.n	800c754 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d103      	bne.n	800c69a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c692:	f001 fc47 	bl	800df24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c696:	2300      	movs	r3, #0
 800c698:	e05c      	b.n	800c754 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d106      	bne.n	800c6ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6a0:	f107 0314 	add.w	r3, r7, #20
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f001 f87b 	bl	800d7a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6ae:	f001 fc39 	bl	800df24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6b2:	f000 fe0d 	bl	800d2d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6b6:	f001 fc05 	bl	800dec4 <vPortEnterCritical>
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6c0:	b25b      	sxtb	r3, r3
 800c6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c6:	d103      	bne.n	800c6d0 <xQueueGenericSend+0x16c>
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6d6:	b25b      	sxtb	r3, r3
 800c6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6dc:	d103      	bne.n	800c6e6 <xQueueGenericSend+0x182>
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6e6:	f001 fc1d 	bl	800df24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6ea:	1d3a      	adds	r2, r7, #4
 800c6ec:	f107 0314 	add.w	r3, r7, #20
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f001 f86a 	bl	800d7cc <xTaskCheckForTimeOut>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d124      	bne.n	800c748 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c700:	f000 fb1e 	bl	800cd40 <prvIsQueueFull>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d018      	beq.n	800c73c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70c:	3310      	adds	r3, #16
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	4611      	mov	r1, r2
 800c712:	4618      	mov	r0, r3
 800c714:	f000 ffbe 	bl	800d694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c71a:	f000 faa9 	bl	800cc70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c71e:	f000 fde5 	bl	800d2ec <xTaskResumeAll>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	f47f af7c 	bne.w	800c622 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c72a:	4b0c      	ldr	r3, [pc, #48]	; (800c75c <xQueueGenericSend+0x1f8>)
 800c72c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c730:	601a      	str	r2, [r3, #0]
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	e772      	b.n	800c622 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c73c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c73e:	f000 fa97 	bl	800cc70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c742:	f000 fdd3 	bl	800d2ec <xTaskResumeAll>
 800c746:	e76c      	b.n	800c622 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c74a:	f000 fa91 	bl	800cc70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c74e:	f000 fdcd 	bl	800d2ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c752:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c754:	4618      	mov	r0, r3
 800c756:	3738      	adds	r7, #56	; 0x38
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	e000ed04 	.word	0xe000ed04

0800c760 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b08e      	sub	sp, #56	; 0x38
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10a      	bne.n	800c78e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c78a:	bf00      	nop
 800c78c:	e7fe      	b.n	800c78c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d103      	bne.n	800c79c <xQueueGenericSendFromISR+0x3c>
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d101      	bne.n	800c7a0 <xQueueGenericSendFromISR+0x40>
 800c79c:	2301      	movs	r3, #1
 800c79e:	e000      	b.n	800c7a2 <xQueueGenericSendFromISR+0x42>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10a      	bne.n	800c7bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	623b      	str	r3, [r7, #32]
}
 800c7b8:	bf00      	nop
 800c7ba:	e7fe      	b.n	800c7ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d103      	bne.n	800c7ca <xQueueGenericSendFromISR+0x6a>
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d101      	bne.n	800c7ce <xQueueGenericSendFromISR+0x6e>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e000      	b.n	800c7d0 <xQueueGenericSendFromISR+0x70>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10a      	bne.n	800c7ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	61fb      	str	r3, [r7, #28]
}
 800c7e6:	bf00      	nop
 800c7e8:	e7fe      	b.n	800c7e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7ea:	f001 fc4d 	bl	800e088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c7ee:	f3ef 8211 	mrs	r2, BASEPRI
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	61ba      	str	r2, [r7, #24]
 800c804:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c806:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c808:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c812:	429a      	cmp	r2, r3
 800c814:	d302      	bcc.n	800c81c <xQueueGenericSendFromISR+0xbc>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d12c      	bne.n	800c876 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	68b9      	ldr	r1, [r7, #8]
 800c82a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c82c:	f000 f990 	bl	800cb50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c830:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c838:	d112      	bne.n	800c860 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d016      	beq.n	800c870 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	3324      	adds	r3, #36	; 0x24
 800c846:	4618      	mov	r0, r3
 800c848:	f000 ff48 	bl	800d6dc <xTaskRemoveFromEventList>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00e      	beq.n	800c870 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00b      	beq.n	800c870 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	e007      	b.n	800c870 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c860:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c864:	3301      	adds	r3, #1
 800c866:	b2db      	uxtb	r3, r3
 800c868:	b25a      	sxtb	r2, r3
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c870:	2301      	movs	r3, #1
 800c872:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c874:	e001      	b.n	800c87a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c876:	2300      	movs	r3, #0
 800c878:	637b      	str	r3, [r7, #52]	; 0x34
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c884:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3738      	adds	r7, #56	; 0x38
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b08c      	sub	sp, #48	; 0x30
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c89c:	2300      	movs	r3, #0
 800c89e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10a      	bne.n	800c8c0 <xQueueReceive+0x30>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	623b      	str	r3, [r7, #32]
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d103      	bne.n	800c8ce <xQueueReceive+0x3e>
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <xQueueReceive+0x42>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e000      	b.n	800c8d4 <xQueueReceive+0x44>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10a      	bne.n	800c8ee <xQueueReceive+0x5e>
	__asm volatile
 800c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	61fb      	str	r3, [r7, #28]
}
 800c8ea:	bf00      	nop
 800c8ec:	e7fe      	b.n	800c8ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8ee:	f001 f8b3 	bl	800da58 <xTaskGetSchedulerState>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d102      	bne.n	800c8fe <xQueueReceive+0x6e>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <xQueueReceive+0x72>
 800c8fe:	2301      	movs	r3, #1
 800c900:	e000      	b.n	800c904 <xQueueReceive+0x74>
 800c902:	2300      	movs	r3, #0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10a      	bne.n	800c91e <xQueueReceive+0x8e>
	__asm volatile
 800c908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	61bb      	str	r3, [r7, #24]
}
 800c91a:	bf00      	nop
 800c91c:	e7fe      	b.n	800c91c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c91e:	f001 fad1 	bl	800dec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c926:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d01f      	beq.n	800c96e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c92e:	68b9      	ldr	r1, [r7, #8]
 800c930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c932:	f000 f977 	bl	800cc24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	1e5a      	subs	r2, r3, #1
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00f      	beq.n	800c966 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c948:	3310      	adds	r3, #16
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 fec6 	bl	800d6dc <xTaskRemoveFromEventList>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d007      	beq.n	800c966 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c956:	4b3d      	ldr	r3, [pc, #244]	; (800ca4c <xQueueReceive+0x1bc>)
 800c958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c95c:	601a      	str	r2, [r3, #0]
 800c95e:	f3bf 8f4f 	dsb	sy
 800c962:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c966:	f001 fadd 	bl	800df24 <vPortExitCritical>
				return pdPASS;
 800c96a:	2301      	movs	r3, #1
 800c96c:	e069      	b.n	800ca42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d103      	bne.n	800c97c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c974:	f001 fad6 	bl	800df24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c978:	2300      	movs	r3, #0
 800c97a:	e062      	b.n	800ca42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d106      	bne.n	800c990 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c982:	f107 0310 	add.w	r3, r7, #16
 800c986:	4618      	mov	r0, r3
 800c988:	f000 ff0a 	bl	800d7a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c98c:	2301      	movs	r3, #1
 800c98e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c990:	f001 fac8 	bl	800df24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c994:	f000 fc9c 	bl	800d2d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c998:	f001 fa94 	bl	800dec4 <vPortEnterCritical>
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9a2:	b25b      	sxtb	r3, r3
 800c9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a8:	d103      	bne.n	800c9b2 <xQueueReceive+0x122>
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9b8:	b25b      	sxtb	r3, r3
 800c9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9be:	d103      	bne.n	800c9c8 <xQueueReceive+0x138>
 800c9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9c8:	f001 faac 	bl	800df24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9cc:	1d3a      	adds	r2, r7, #4
 800c9ce:	f107 0310 	add.w	r3, r7, #16
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 fef9 	bl	800d7cc <xTaskCheckForTimeOut>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d123      	bne.n	800ca28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9e2:	f000 f997 	bl	800cd14 <prvIsQueueEmpty>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d017      	beq.n	800ca1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ee:	3324      	adds	r3, #36	; 0x24
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	4611      	mov	r1, r2
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 fe4d 	bl	800d694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9fc:	f000 f938 	bl	800cc70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca00:	f000 fc74 	bl	800d2ec <xTaskResumeAll>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d189      	bne.n	800c91e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ca0a:	4b10      	ldr	r3, [pc, #64]	; (800ca4c <xQueueReceive+0x1bc>)
 800ca0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca10:	601a      	str	r2, [r3, #0]
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	e780      	b.n	800c91e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca1e:	f000 f927 	bl	800cc70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca22:	f000 fc63 	bl	800d2ec <xTaskResumeAll>
 800ca26:	e77a      	b.n	800c91e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ca28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca2a:	f000 f921 	bl	800cc70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca2e:	f000 fc5d 	bl	800d2ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca34:	f000 f96e 	bl	800cd14 <prvIsQueueEmpty>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f43f af6f 	beq.w	800c91e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3730      	adds	r7, #48	; 0x30
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	e000ed04 	.word	0xe000ed04

0800ca50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08e      	sub	sp, #56	; 0x38
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10a      	bne.n	800ca7c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	623b      	str	r3, [r7, #32]
}
 800ca78:	bf00      	nop
 800ca7a:	e7fe      	b.n	800ca7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d103      	bne.n	800ca8a <xQueueReceiveFromISR+0x3a>
 800ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <xQueueReceiveFromISR+0x3e>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <xQueueReceiveFromISR+0x40>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10a      	bne.n	800caaa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	61fb      	str	r3, [r7, #28]
}
 800caa6:	bf00      	nop
 800caa8:	e7fe      	b.n	800caa8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800caaa:	f001 faed 	bl	800e088 <vPortValidateInterruptPriority>
	__asm volatile
 800caae:	f3ef 8211 	mrs	r2, BASEPRI
 800cab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	61ba      	str	r2, [r7, #24]
 800cac4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cac6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800caca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cace:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d02f      	beq.n	800cb36 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cadc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cae0:	68b9      	ldr	r1, [r7, #8]
 800cae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cae4:	f000 f89e 	bl	800cc24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	1e5a      	subs	r2, r3, #1
 800caec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800caf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800caf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf8:	d112      	bne.n	800cb20 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d016      	beq.n	800cb30 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb04:	3310      	adds	r3, #16
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 fde8 	bl	800d6dc <xTaskRemoveFromEventList>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00e      	beq.n	800cb30 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00b      	beq.n	800cb30 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	e007      	b.n	800cb30 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cb20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb24:	3301      	adds	r3, #1
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	b25a      	sxtb	r2, r3
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cb30:	2301      	movs	r3, #1
 800cb32:	637b      	str	r3, [r7, #52]	; 0x34
 800cb34:	e001      	b.n	800cb3a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cb36:	2300      	movs	r3, #0
 800cb38:	637b      	str	r3, [r7, #52]	; 0x34
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	f383 8811 	msr	BASEPRI, r3
}
 800cb44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3738      	adds	r7, #56	; 0x38
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b086      	sub	sp, #24
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10d      	bne.n	800cb8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d14d      	bne.n	800cc12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f000 ff8a 	bl	800da94 <xTaskPriorityDisinherit>
 800cb80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	609a      	str	r2, [r3, #8]
 800cb88:	e043      	b.n	800cc12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d119      	bne.n	800cbc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6858      	ldr	r0, [r3, #4]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb98:	461a      	mov	r2, r3
 800cb9a:	68b9      	ldr	r1, [r7, #8]
 800cb9c:	f001 ffe0 	bl	800eb60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba8:	441a      	add	r2, r3
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d32b      	bcc.n	800cc12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	605a      	str	r2, [r3, #4]
 800cbc2:	e026      	b.n	800cc12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	68d8      	ldr	r0, [r3, #12]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbcc:	461a      	mov	r2, r3
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	f001 ffc6 	bl	800eb60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	68da      	ldr	r2, [r3, #12]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbdc:	425b      	negs	r3, r3
 800cbde:	441a      	add	r2, r3
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	68da      	ldr	r2, [r3, #12]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d207      	bcs.n	800cc00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	689a      	ldr	r2, [r3, #8]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf8:	425b      	negs	r3, r3
 800cbfa:	441a      	add	r2, r3
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	d105      	bne.n	800cc12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	1c5a      	adds	r2, r3, #1
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cc1a:	697b      	ldr	r3, [r7, #20]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3718      	adds	r7, #24
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d018      	beq.n	800cc68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	68da      	ldr	r2, [r3, #12]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc3e:	441a      	add	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	68da      	ldr	r2, [r3, #12]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d303      	bcc.n	800cc58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	68d9      	ldr	r1, [r3, #12]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc60:	461a      	mov	r2, r3
 800cc62:	6838      	ldr	r0, [r7, #0]
 800cc64:	f001 ff7c 	bl	800eb60 <memcpy>
	}
}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc78:	f001 f924 	bl	800dec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc84:	e011      	b.n	800ccaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d012      	beq.n	800ccb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3324      	adds	r3, #36	; 0x24
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fd22 	bl	800d6dc <xTaskRemoveFromEventList>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc9e:	f000 fdf7 	bl	800d890 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
 800cca4:	3b01      	subs	r3, #1
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	dce9      	bgt.n	800cc86 <prvUnlockQueue+0x16>
 800ccb2:	e000      	b.n	800ccb6 <prvUnlockQueue+0x46>
					break;
 800ccb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	22ff      	movs	r2, #255	; 0xff
 800ccba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ccbe:	f001 f931 	bl	800df24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ccc2:	f001 f8ff 	bl	800dec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cccc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccce:	e011      	b.n	800ccf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	691b      	ldr	r3, [r3, #16]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d012      	beq.n	800ccfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	3310      	adds	r3, #16
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 fcfd 	bl	800d6dc <xTaskRemoveFromEventList>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cce8:	f000 fdd2 	bl	800d890 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	dce9      	bgt.n	800ccd0 <prvUnlockQueue+0x60>
 800ccfc:	e000      	b.n	800cd00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ccfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	22ff      	movs	r2, #255	; 0xff
 800cd04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cd08:	f001 f90c 	bl	800df24 <vPortExitCritical>
}
 800cd0c:	bf00      	nop
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd1c:	f001 f8d2 	bl	800dec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d102      	bne.n	800cd2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	60fb      	str	r3, [r7, #12]
 800cd2c:	e001      	b.n	800cd32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd32:	f001 f8f7 	bl	800df24 <vPortExitCritical>

	return xReturn;
 800cd36:	68fb      	ldr	r3, [r7, #12]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd48:	f001 f8bc 	bl	800dec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d102      	bne.n	800cd5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	60fb      	str	r3, [r7, #12]
 800cd5c:	e001      	b.n	800cd62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd62:	f001 f8df 	bl	800df24 <vPortExitCritical>

	return xReturn;
 800cd66:	68fb      	ldr	r3, [r7, #12]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b08e      	sub	sp, #56	; 0x38
 800cd74:	af04      	add	r7, sp, #16
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d10a      	bne.n	800cd9a <xTaskCreateStatic+0x2a>
	__asm volatile
 800cd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd88:	f383 8811 	msr	BASEPRI, r3
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	623b      	str	r3, [r7, #32]
}
 800cd96:	bf00      	nop
 800cd98:	e7fe      	b.n	800cd98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10a      	bne.n	800cdb6 <xTaskCreateStatic+0x46>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	61fb      	str	r3, [r7, #28]
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cdb6:	2358      	movs	r3, #88	; 0x58
 800cdb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	2b58      	cmp	r3, #88	; 0x58
 800cdbe:	d00a      	beq.n	800cdd6 <xTaskCreateStatic+0x66>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	61bb      	str	r3, [r7, #24]
}
 800cdd2:	bf00      	nop
 800cdd4:	e7fe      	b.n	800cdd4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cdd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d01e      	beq.n	800ce1c <xTaskCreateStatic+0xac>
 800cdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d01b      	beq.n	800ce1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9303      	str	r3, [sp, #12]
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfc:	9302      	str	r3, [sp, #8]
 800cdfe:	f107 0314 	add.w	r3, r7, #20
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	68b9      	ldr	r1, [r7, #8]
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f000 f850 	bl	800ceb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce16:	f000 f8df 	bl	800cfd8 <prvAddNewTaskToReadyList>
 800ce1a:	e001      	b.n	800ce20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ce20:	697b      	ldr	r3, [r7, #20]
	}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3728      	adds	r7, #40	; 0x28
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b08c      	sub	sp, #48	; 0x30
 800ce2e:	af04      	add	r7, sp, #16
 800ce30:	60f8      	str	r0, [r7, #12]
 800ce32:	60b9      	str	r1, [r7, #8]
 800ce34:	603b      	str	r3, [r7, #0]
 800ce36:	4613      	mov	r3, r2
 800ce38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce3a:	88fb      	ldrh	r3, [r7, #6]
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f001 f962 	bl	800e108 <pvPortMalloc>
 800ce44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00e      	beq.n	800ce6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce4c:	2058      	movs	r0, #88	; 0x58
 800ce4e:	f001 f95b 	bl	800e108 <pvPortMalloc>
 800ce52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	697a      	ldr	r2, [r7, #20]
 800ce5e:	631a      	str	r2, [r3, #48]	; 0x30
 800ce60:	e005      	b.n	800ce6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce62:	6978      	ldr	r0, [r7, #20]
 800ce64:	f001 fa1a 	bl	800e29c <vPortFree>
 800ce68:	e001      	b.n	800ce6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d017      	beq.n	800cea4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce7c:	88fa      	ldrh	r2, [r7, #6]
 800ce7e:	2300      	movs	r3, #0
 800ce80:	9303      	str	r3, [sp, #12]
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	9302      	str	r3, [sp, #8]
 800ce86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce88:	9301      	str	r3, [sp, #4]
 800ce8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	68b9      	ldr	r1, [r7, #8]
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f000 f80e 	bl	800ceb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce98:	69f8      	ldr	r0, [r7, #28]
 800ce9a:	f000 f89d 	bl	800cfd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	61bb      	str	r3, [r7, #24]
 800cea2:	e002      	b.n	800ceaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cea4:	f04f 33ff 	mov.w	r3, #4294967295
 800cea8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ceaa:	69bb      	ldr	r3, [r7, #24]
	}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3720      	adds	r7, #32
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b088      	sub	sp, #32
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	461a      	mov	r2, r3
 800cecc:	21a5      	movs	r1, #165	; 0xa5
 800cece:	f001 fe55 	bl	800eb7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ced2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cedc:	3b01      	subs	r3, #1
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	f023 0307 	bic.w	r3, r3, #7
 800ceea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	f003 0307 	and.w	r3, r3, #7
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00a      	beq.n	800cf0c <prvInitialiseNewTask+0x58>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	617b      	str	r3, [r7, #20]
}
 800cf08:	bf00      	nop
 800cf0a:	e7fe      	b.n	800cf0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d01f      	beq.n	800cf52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf12:	2300      	movs	r3, #0
 800cf14:	61fb      	str	r3, [r7, #28]
 800cf16:	e012      	b.n	800cf3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	7819      	ldrb	r1, [r3, #0]
 800cf20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	4413      	add	r3, r2
 800cf26:	3334      	adds	r3, #52	; 0x34
 800cf28:	460a      	mov	r2, r1
 800cf2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	4413      	add	r3, r2
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d006      	beq.n	800cf46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	61fb      	str	r3, [r7, #28]
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	2b0f      	cmp	r3, #15
 800cf42:	d9e9      	bls.n	800cf18 <prvInitialiseNewTask+0x64>
 800cf44:	e000      	b.n	800cf48 <prvInitialiseNewTask+0x94>
			{
				break;
 800cf46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf50:	e003      	b.n	800cf5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5c:	2b06      	cmp	r3, #6
 800cf5e:	d901      	bls.n	800cf64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf60:	2306      	movs	r3, #6
 800cf62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf72:	2200      	movs	r2, #0
 800cf74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf78:	3304      	adds	r3, #4
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7ff f91e 	bl	800c1bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf82:	3318      	adds	r3, #24
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7ff f919 	bl	800c1bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf92:	f1c3 0207 	rsb	r2, r3, #7
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cfb4:	683a      	ldr	r2, [r7, #0]
 800cfb6:	68f9      	ldr	r1, [r7, #12]
 800cfb8:	69b8      	ldr	r0, [r7, #24]
 800cfba:	f000 fe57 	bl	800dc6c <pxPortInitialiseStack>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d002      	beq.n	800cfd0 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfd0:	bf00      	nop
 800cfd2:	3720      	adds	r7, #32
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cfe0:	f000 ff70 	bl	800dec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cfe4:	4b2a      	ldr	r3, [pc, #168]	; (800d090 <prvAddNewTaskToReadyList+0xb8>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	4a29      	ldr	r2, [pc, #164]	; (800d090 <prvAddNewTaskToReadyList+0xb8>)
 800cfec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cfee:	4b29      	ldr	r3, [pc, #164]	; (800d094 <prvAddNewTaskToReadyList+0xbc>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d109      	bne.n	800d00a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cff6:	4a27      	ldr	r2, [pc, #156]	; (800d094 <prvAddNewTaskToReadyList+0xbc>)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cffc:	4b24      	ldr	r3, [pc, #144]	; (800d090 <prvAddNewTaskToReadyList+0xb8>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d110      	bne.n	800d026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d004:	f000 fc6a 	bl	800d8dc <prvInitialiseTaskLists>
 800d008:	e00d      	b.n	800d026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d00a:	4b23      	ldr	r3, [pc, #140]	; (800d098 <prvAddNewTaskToReadyList+0xc0>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d109      	bne.n	800d026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d012:	4b20      	ldr	r3, [pc, #128]	; (800d094 <prvAddNewTaskToReadyList+0xbc>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d802      	bhi.n	800d026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d020:	4a1c      	ldr	r2, [pc, #112]	; (800d094 <prvAddNewTaskToReadyList+0xbc>)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d026:	4b1d      	ldr	r3, [pc, #116]	; (800d09c <prvAddNewTaskToReadyList+0xc4>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	3301      	adds	r3, #1
 800d02c:	4a1b      	ldr	r2, [pc, #108]	; (800d09c <prvAddNewTaskToReadyList+0xc4>)
 800d02e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d034:	2201      	movs	r2, #1
 800d036:	409a      	lsls	r2, r3
 800d038:	4b19      	ldr	r3, [pc, #100]	; (800d0a0 <prvAddNewTaskToReadyList+0xc8>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	4a18      	ldr	r2, [pc, #96]	; (800d0a0 <prvAddNewTaskToReadyList+0xc8>)
 800d040:	6013      	str	r3, [r2, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d046:	4613      	mov	r3, r2
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4a15      	ldr	r2, [pc, #84]	; (800d0a4 <prvAddNewTaskToReadyList+0xcc>)
 800d050:	441a      	add	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	3304      	adds	r3, #4
 800d056:	4619      	mov	r1, r3
 800d058:	4610      	mov	r0, r2
 800d05a:	f7ff f8bc 	bl	800c1d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d05e:	f000 ff61 	bl	800df24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d062:	4b0d      	ldr	r3, [pc, #52]	; (800d098 <prvAddNewTaskToReadyList+0xc0>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00e      	beq.n	800d088 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d06a:	4b0a      	ldr	r3, [pc, #40]	; (800d094 <prvAddNewTaskToReadyList+0xbc>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d074:	429a      	cmp	r2, r3
 800d076:	d207      	bcs.n	800d088 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d078:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <prvAddNewTaskToReadyList+0xd0>)
 800d07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d088:	bf00      	nop
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	200004cc 	.word	0x200004cc
 800d094:	200003cc 	.word	0x200003cc
 800d098:	200004d8 	.word	0x200004d8
 800d09c:	200004e8 	.word	0x200004e8
 800d0a0:	200004d4 	.word	0x200004d4
 800d0a4:	200003d0 	.word	0x200003d0
 800d0a8:	e000ed04 	.word	0xe000ed04

0800d0ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08a      	sub	sp, #40	; 0x28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	617b      	str	r3, [r7, #20]
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10a      	bne.n	800d0f2 <vTaskDelayUntil+0x46>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	613b      	str	r3, [r7, #16]
}
 800d0ee:	bf00      	nop
 800d0f0:	e7fe      	b.n	800d0f0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800d0f2:	4b2a      	ldr	r3, [pc, #168]	; (800d19c <vTaskDelayUntil+0xf0>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00a      	beq.n	800d110 <vTaskDelayUntil+0x64>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	60fb      	str	r3, [r7, #12]
}
 800d10c:	bf00      	nop
 800d10e:	e7fe      	b.n	800d10e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800d110:	f000 f8de 	bl	800d2d0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d114:	4b22      	ldr	r3, [pc, #136]	; (800d1a0 <vTaskDelayUntil+0xf4>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	4413      	add	r3, r2
 800d122:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	6a3a      	ldr	r2, [r7, #32]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d20b      	bcs.n	800d146 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	69fa      	ldr	r2, [r7, #28]
 800d134:	429a      	cmp	r2, r3
 800d136:	d211      	bcs.n	800d15c <vTaskDelayUntil+0xb0>
 800d138:	69fa      	ldr	r2, [r7, #28]
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d90d      	bls.n	800d15c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d140:	2301      	movs	r3, #1
 800d142:	627b      	str	r3, [r7, #36]	; 0x24
 800d144:	e00a      	b.n	800d15c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	69fa      	ldr	r2, [r7, #28]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d303      	bcc.n	800d158 <vTaskDelayUntil+0xac>
 800d150:	69fa      	ldr	r2, [r7, #28]
 800d152:	6a3b      	ldr	r3, [r7, #32]
 800d154:	429a      	cmp	r2, r3
 800d156:	d901      	bls.n	800d15c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d158:	2301      	movs	r3, #1
 800d15a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	69fa      	ldr	r2, [r7, #28]
 800d160:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d164:	2b00      	cmp	r3, #0
 800d166:	d006      	beq.n	800d176 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d168:	69fa      	ldr	r2, [r7, #28]
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	2100      	movs	r1, #0
 800d170:	4618      	mov	r0, r3
 800d172:	f000 fd15 	bl	800dba0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d176:	f000 f8b9 	bl	800d2ec <xTaskResumeAll>
 800d17a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d107      	bne.n	800d192 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800d182:	4b08      	ldr	r3, [pc, #32]	; (800d1a4 <vTaskDelayUntil+0xf8>)
 800d184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d192:	bf00      	nop
 800d194:	3728      	adds	r7, #40	; 0x28
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	200004f4 	.word	0x200004f4
 800d1a0:	200004d0 	.word	0x200004d0
 800d1a4:	e000ed04 	.word	0xe000ed04

0800d1a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d017      	beq.n	800d1ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d1ba:	4b13      	ldr	r3, [pc, #76]	; (800d208 <vTaskDelay+0x60>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00a      	beq.n	800d1d8 <vTaskDelay+0x30>
	__asm volatile
 800d1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	60bb      	str	r3, [r7, #8]
}
 800d1d4:	bf00      	nop
 800d1d6:	e7fe      	b.n	800d1d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d1d8:	f000 f87a 	bl	800d2d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d1dc:	2100      	movs	r1, #0
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 fcde 	bl	800dba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d1e4:	f000 f882 	bl	800d2ec <xTaskResumeAll>
 800d1e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d107      	bne.n	800d200 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d1f0:	4b06      	ldr	r3, [pc, #24]	; (800d20c <vTaskDelay+0x64>)
 800d1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f6:	601a      	str	r2, [r3, #0]
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d200:	bf00      	nop
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	200004f4 	.word	0x200004f4
 800d20c:	e000ed04 	.word	0xe000ed04

0800d210 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b08a      	sub	sp, #40	; 0x28
 800d214:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d216:	2300      	movs	r3, #0
 800d218:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d21a:	2300      	movs	r3, #0
 800d21c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d21e:	463a      	mov	r2, r7
 800d220:	1d39      	adds	r1, r7, #4
 800d222:	f107 0308 	add.w	r3, r7, #8
 800d226:	4618      	mov	r0, r3
 800d228:	f7f3 fdbe 	bl	8000da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	9202      	str	r2, [sp, #8]
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	2300      	movs	r3, #0
 800d238:	9300      	str	r3, [sp, #0]
 800d23a:	2300      	movs	r3, #0
 800d23c:	460a      	mov	r2, r1
 800d23e:	491e      	ldr	r1, [pc, #120]	; (800d2b8 <vTaskStartScheduler+0xa8>)
 800d240:	481e      	ldr	r0, [pc, #120]	; (800d2bc <vTaskStartScheduler+0xac>)
 800d242:	f7ff fd95 	bl	800cd70 <xTaskCreateStatic>
 800d246:	4603      	mov	r3, r0
 800d248:	4a1d      	ldr	r2, [pc, #116]	; (800d2c0 <vTaskStartScheduler+0xb0>)
 800d24a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d24c:	4b1c      	ldr	r3, [pc, #112]	; (800d2c0 <vTaskStartScheduler+0xb0>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d002      	beq.n	800d25a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d254:	2301      	movs	r3, #1
 800d256:	617b      	str	r3, [r7, #20]
 800d258:	e001      	b.n	800d25e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d25a:	2300      	movs	r3, #0
 800d25c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d116      	bne.n	800d292 <vTaskStartScheduler+0x82>
	__asm volatile
 800d264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	613b      	str	r3, [r7, #16]
}
 800d276:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d278:	4b12      	ldr	r3, [pc, #72]	; (800d2c4 <vTaskStartScheduler+0xb4>)
 800d27a:	f04f 32ff 	mov.w	r2, #4294967295
 800d27e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d280:	4b11      	ldr	r3, [pc, #68]	; (800d2c8 <vTaskStartScheduler+0xb8>)
 800d282:	2201      	movs	r2, #1
 800d284:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d286:	4b11      	ldr	r3, [pc, #68]	; (800d2cc <vTaskStartScheduler+0xbc>)
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d28c:	f000 fd78 	bl	800dd80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d290:	e00e      	b.n	800d2b0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d298:	d10a      	bne.n	800d2b0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	60fb      	str	r3, [r7, #12]
}
 800d2ac:	bf00      	nop
 800d2ae:	e7fe      	b.n	800d2ae <vTaskStartScheduler+0x9e>
}
 800d2b0:	bf00      	nop
 800d2b2:	3718      	adds	r7, #24
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	0800f7e0 	.word	0x0800f7e0
 800d2bc:	0800d8a9 	.word	0x0800d8a9
 800d2c0:	200004f0 	.word	0x200004f0
 800d2c4:	200004ec 	.word	0x200004ec
 800d2c8:	200004d8 	.word	0x200004d8
 800d2cc:	200004d0 	.word	0x200004d0

0800d2d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d2d4:	4b04      	ldr	r3, [pc, #16]	; (800d2e8 <vTaskSuspendAll+0x18>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	4a03      	ldr	r2, [pc, #12]	; (800d2e8 <vTaskSuspendAll+0x18>)
 800d2dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d2de:	bf00      	nop
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr
 800d2e8:	200004f4 	.word	0x200004f4

0800d2ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d2fa:	4b41      	ldr	r3, [pc, #260]	; (800d400 <xTaskResumeAll+0x114>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10a      	bne.n	800d318 <xTaskResumeAll+0x2c>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	603b      	str	r3, [r7, #0]
}
 800d314:	bf00      	nop
 800d316:	e7fe      	b.n	800d316 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d318:	f000 fdd4 	bl	800dec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d31c:	4b38      	ldr	r3, [pc, #224]	; (800d400 <xTaskResumeAll+0x114>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	3b01      	subs	r3, #1
 800d322:	4a37      	ldr	r2, [pc, #220]	; (800d400 <xTaskResumeAll+0x114>)
 800d324:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d326:	4b36      	ldr	r3, [pc, #216]	; (800d400 <xTaskResumeAll+0x114>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d161      	bne.n	800d3f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d32e:	4b35      	ldr	r3, [pc, #212]	; (800d404 <xTaskResumeAll+0x118>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d05d      	beq.n	800d3f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d336:	e02e      	b.n	800d396 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d338:	4b33      	ldr	r3, [pc, #204]	; (800d408 <xTaskResumeAll+0x11c>)
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	3318      	adds	r3, #24
 800d344:	4618      	mov	r0, r3
 800d346:	f7fe ffa3 	bl	800c290 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	3304      	adds	r3, #4
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fe ff9e 	bl	800c290 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d358:	2201      	movs	r2, #1
 800d35a:	409a      	lsls	r2, r3
 800d35c:	4b2b      	ldr	r3, [pc, #172]	; (800d40c <xTaskResumeAll+0x120>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4313      	orrs	r3, r2
 800d362:	4a2a      	ldr	r2, [pc, #168]	; (800d40c <xTaskResumeAll+0x120>)
 800d364:	6013      	str	r3, [r2, #0]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36a:	4613      	mov	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	4a27      	ldr	r2, [pc, #156]	; (800d410 <xTaskResumeAll+0x124>)
 800d374:	441a      	add	r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	3304      	adds	r3, #4
 800d37a:	4619      	mov	r1, r3
 800d37c:	4610      	mov	r0, r2
 800d37e:	f7fe ff2a 	bl	800c1d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d386:	4b23      	ldr	r3, [pc, #140]	; (800d414 <xTaskResumeAll+0x128>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d302      	bcc.n	800d396 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d390:	4b21      	ldr	r3, [pc, #132]	; (800d418 <xTaskResumeAll+0x12c>)
 800d392:	2201      	movs	r2, #1
 800d394:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d396:	4b1c      	ldr	r3, [pc, #112]	; (800d408 <xTaskResumeAll+0x11c>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1cc      	bne.n	800d338 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d001      	beq.n	800d3a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d3a4:	f000 fb38 	bl	800da18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d3a8:	4b1c      	ldr	r3, [pc, #112]	; (800d41c <xTaskResumeAll+0x130>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d010      	beq.n	800d3d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d3b4:	f000 f836 	bl	800d424 <xTaskIncrementTick>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d002      	beq.n	800d3c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d3be:	4b16      	ldr	r3, [pc, #88]	; (800d418 <xTaskResumeAll+0x12c>)
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3b01      	subs	r3, #1
 800d3c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1f1      	bne.n	800d3b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d3d0:	4b12      	ldr	r3, [pc, #72]	; (800d41c <xTaskResumeAll+0x130>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d3d6:	4b10      	ldr	r3, [pc, #64]	; (800d418 <xTaskResumeAll+0x12c>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d009      	beq.n	800d3f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d3e2:	4b0f      	ldr	r3, [pc, #60]	; (800d420 <xTaskResumeAll+0x134>)
 800d3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3f2:	f000 fd97 	bl	800df24 <vPortExitCritical>

	return xAlreadyYielded;
 800d3f6:	68bb      	ldr	r3, [r7, #8]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	200004f4 	.word	0x200004f4
 800d404:	200004cc 	.word	0x200004cc
 800d408:	2000048c 	.word	0x2000048c
 800d40c:	200004d4 	.word	0x200004d4
 800d410:	200003d0 	.word	0x200003d0
 800d414:	200003cc 	.word	0x200003cc
 800d418:	200004e0 	.word	0x200004e0
 800d41c:	200004dc 	.word	0x200004dc
 800d420:	e000ed04 	.word	0xe000ed04

0800d424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d42a:	2300      	movs	r3, #0
 800d42c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d42e:	4b4e      	ldr	r3, [pc, #312]	; (800d568 <xTaskIncrementTick+0x144>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	f040 8088 	bne.w	800d548 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d438:	4b4c      	ldr	r3, [pc, #304]	; (800d56c <xTaskIncrementTick+0x148>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3301      	adds	r3, #1
 800d43e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d440:	4a4a      	ldr	r2, [pc, #296]	; (800d56c <xTaskIncrementTick+0x148>)
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d120      	bne.n	800d48e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d44c:	4b48      	ldr	r3, [pc, #288]	; (800d570 <xTaskIncrementTick+0x14c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00a      	beq.n	800d46c <xTaskIncrementTick+0x48>
	__asm volatile
 800d456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45a:	f383 8811 	msr	BASEPRI, r3
 800d45e:	f3bf 8f6f 	isb	sy
 800d462:	f3bf 8f4f 	dsb	sy
 800d466:	603b      	str	r3, [r7, #0]
}
 800d468:	bf00      	nop
 800d46a:	e7fe      	b.n	800d46a <xTaskIncrementTick+0x46>
 800d46c:	4b40      	ldr	r3, [pc, #256]	; (800d570 <xTaskIncrementTick+0x14c>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	60fb      	str	r3, [r7, #12]
 800d472:	4b40      	ldr	r3, [pc, #256]	; (800d574 <xTaskIncrementTick+0x150>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a3e      	ldr	r2, [pc, #248]	; (800d570 <xTaskIncrementTick+0x14c>)
 800d478:	6013      	str	r3, [r2, #0]
 800d47a:	4a3e      	ldr	r2, [pc, #248]	; (800d574 <xTaskIncrementTick+0x150>)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	6013      	str	r3, [r2, #0]
 800d480:	4b3d      	ldr	r3, [pc, #244]	; (800d578 <xTaskIncrementTick+0x154>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3301      	adds	r3, #1
 800d486:	4a3c      	ldr	r2, [pc, #240]	; (800d578 <xTaskIncrementTick+0x154>)
 800d488:	6013      	str	r3, [r2, #0]
 800d48a:	f000 fac5 	bl	800da18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d48e:	4b3b      	ldr	r3, [pc, #236]	; (800d57c <xTaskIncrementTick+0x158>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	429a      	cmp	r2, r3
 800d496:	d348      	bcc.n	800d52a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d498:	4b35      	ldr	r3, [pc, #212]	; (800d570 <xTaskIncrementTick+0x14c>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d104      	bne.n	800d4ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4a2:	4b36      	ldr	r3, [pc, #216]	; (800d57c <xTaskIncrementTick+0x158>)
 800d4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a8:	601a      	str	r2, [r3, #0]
					break;
 800d4aa:	e03e      	b.n	800d52a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4ac:	4b30      	ldr	r3, [pc, #192]	; (800d570 <xTaskIncrementTick+0x14c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d4bc:	693a      	ldr	r2, [r7, #16]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d203      	bcs.n	800d4cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d4c4:	4a2d      	ldr	r2, [pc, #180]	; (800d57c <xTaskIncrementTick+0x158>)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d4ca:	e02e      	b.n	800d52a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	3304      	adds	r3, #4
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fe fedd 	bl	800c290 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d004      	beq.n	800d4e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	3318      	adds	r3, #24
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fe fed4 	bl	800c290 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	409a      	lsls	r2, r3
 800d4f0:	4b23      	ldr	r3, [pc, #140]	; (800d580 <xTaskIncrementTick+0x15c>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	4a22      	ldr	r2, [pc, #136]	; (800d580 <xTaskIncrementTick+0x15c>)
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4fe:	4613      	mov	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	4a1f      	ldr	r2, [pc, #124]	; (800d584 <xTaskIncrementTick+0x160>)
 800d508:	441a      	add	r2, r3
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	3304      	adds	r3, #4
 800d50e:	4619      	mov	r1, r3
 800d510:	4610      	mov	r0, r2
 800d512:	f7fe fe60 	bl	800c1d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d51a:	4b1b      	ldr	r3, [pc, #108]	; (800d588 <xTaskIncrementTick+0x164>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d520:	429a      	cmp	r2, r3
 800d522:	d3b9      	bcc.n	800d498 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d524:	2301      	movs	r3, #1
 800d526:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d528:	e7b6      	b.n	800d498 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d52a:	4b17      	ldr	r3, [pc, #92]	; (800d588 <xTaskIncrementTick+0x164>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d530:	4914      	ldr	r1, [pc, #80]	; (800d584 <xTaskIncrementTick+0x160>)
 800d532:	4613      	mov	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	4413      	add	r3, r2
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	440b      	add	r3, r1
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d907      	bls.n	800d552 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d542:	2301      	movs	r3, #1
 800d544:	617b      	str	r3, [r7, #20]
 800d546:	e004      	b.n	800d552 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d548:	4b10      	ldr	r3, [pc, #64]	; (800d58c <xTaskIncrementTick+0x168>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	3301      	adds	r3, #1
 800d54e:	4a0f      	ldr	r2, [pc, #60]	; (800d58c <xTaskIncrementTick+0x168>)
 800d550:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d552:	4b0f      	ldr	r3, [pc, #60]	; (800d590 <xTaskIncrementTick+0x16c>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d001      	beq.n	800d55e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d55a:	2301      	movs	r3, #1
 800d55c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d55e:	697b      	ldr	r3, [r7, #20]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3718      	adds	r7, #24
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	200004f4 	.word	0x200004f4
 800d56c:	200004d0 	.word	0x200004d0
 800d570:	20000484 	.word	0x20000484
 800d574:	20000488 	.word	0x20000488
 800d578:	200004e4 	.word	0x200004e4
 800d57c:	200004ec 	.word	0x200004ec
 800d580:	200004d4 	.word	0x200004d4
 800d584:	200003d0 	.word	0x200003d0
 800d588:	200003cc 	.word	0x200003cc
 800d58c:	200004dc 	.word	0x200004dc
 800d590:	200004e0 	.word	0x200004e0

0800d594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b088      	sub	sp, #32
 800d598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d59a:	4b39      	ldr	r3, [pc, #228]	; (800d680 <vTaskSwitchContext+0xec>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d003      	beq.n	800d5aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d5a2:	4b38      	ldr	r3, [pc, #224]	; (800d684 <vTaskSwitchContext+0xf0>)
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d5a8:	e066      	b.n	800d678 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800d5aa:	4b36      	ldr	r3, [pc, #216]	; (800d684 <vTaskSwitchContext+0xf0>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d5b0:	4b35      	ldr	r3, [pc, #212]	; (800d688 <vTaskSwitchContext+0xf4>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d5bc:	61bb      	str	r3, [r7, #24]
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	69ba      	ldr	r2, [r7, #24]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d111      	bne.n	800d5ec <vTaskSwitchContext+0x58>
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	3304      	adds	r3, #4
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	69ba      	ldr	r2, [r7, #24]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d10b      	bne.n	800d5ec <vTaskSwitchContext+0x58>
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	3308      	adds	r3, #8
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	69ba      	ldr	r2, [r7, #24]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d105      	bne.n	800d5ec <vTaskSwitchContext+0x58>
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	330c      	adds	r3, #12
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	69ba      	ldr	r2, [r7, #24]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d008      	beq.n	800d5fe <vTaskSwitchContext+0x6a>
 800d5ec:	4b26      	ldr	r3, [pc, #152]	; (800d688 <vTaskSwitchContext+0xf4>)
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	4b25      	ldr	r3, [pc, #148]	; (800d688 <vTaskSwitchContext+0xf4>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	3334      	adds	r3, #52	; 0x34
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	f7f3 fbc2 	bl	8000d82 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5fe:	4b23      	ldr	r3, [pc, #140]	; (800d68c <vTaskSwitchContext+0xf8>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	fab3 f383 	clz	r3, r3
 800d60a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d60c:	7afb      	ldrb	r3, [r7, #11]
 800d60e:	f1c3 031f 	rsb	r3, r3, #31
 800d612:	617b      	str	r3, [r7, #20]
 800d614:	491e      	ldr	r1, [pc, #120]	; (800d690 <vTaskSwitchContext+0xfc>)
 800d616:	697a      	ldr	r2, [r7, #20]
 800d618:	4613      	mov	r3, r2
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	4413      	add	r3, r2
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	440b      	add	r3, r1
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10a      	bne.n	800d63e <vTaskSwitchContext+0xaa>
	__asm volatile
 800d628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62c:	f383 8811 	msr	BASEPRI, r3
 800d630:	f3bf 8f6f 	isb	sy
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	607b      	str	r3, [r7, #4]
}
 800d63a:	bf00      	nop
 800d63c:	e7fe      	b.n	800d63c <vTaskSwitchContext+0xa8>
 800d63e:	697a      	ldr	r2, [r7, #20]
 800d640:	4613      	mov	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	4413      	add	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4a11      	ldr	r2, [pc, #68]	; (800d690 <vTaskSwitchContext+0xfc>)
 800d64a:	4413      	add	r3, r2
 800d64c:	613b      	str	r3, [r7, #16]
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	605a      	str	r2, [r3, #4]
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	3308      	adds	r3, #8
 800d660:	429a      	cmp	r2, r3
 800d662:	d104      	bne.n	800d66e <vTaskSwitchContext+0xda>
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	605a      	str	r2, [r3, #4]
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	4a04      	ldr	r2, [pc, #16]	; (800d688 <vTaskSwitchContext+0xf4>)
 800d676:	6013      	str	r3, [r2, #0]
}
 800d678:	bf00      	nop
 800d67a:	3720      	adds	r7, #32
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	200004f4 	.word	0x200004f4
 800d684:	200004e0 	.word	0x200004e0
 800d688:	200003cc 	.word	0x200003cc
 800d68c:	200004d4 	.word	0x200004d4
 800d690:	200003d0 	.word	0x200003d0

0800d694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10a      	bne.n	800d6ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	60fb      	str	r3, [r7, #12]
}
 800d6b6:	bf00      	nop
 800d6b8:	e7fe      	b.n	800d6b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6ba:	4b07      	ldr	r3, [pc, #28]	; (800d6d8 <vTaskPlaceOnEventList+0x44>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	3318      	adds	r3, #24
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7fe fdab 	bl	800c21e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d6c8:	2101      	movs	r1, #1
 800d6ca:	6838      	ldr	r0, [r7, #0]
 800d6cc:	f000 fa68 	bl	800dba0 <prvAddCurrentTaskToDelayedList>
}
 800d6d0:	bf00      	nop
 800d6d2:	3710      	adds	r7, #16
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	200003cc 	.word	0x200003cc

0800d6dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10a      	bne.n	800d708 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	60fb      	str	r3, [r7, #12]
}
 800d704:	bf00      	nop
 800d706:	e7fe      	b.n	800d706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	3318      	adds	r3, #24
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fe fdbf 	bl	800c290 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d712:	4b1d      	ldr	r3, [pc, #116]	; (800d788 <xTaskRemoveFromEventList+0xac>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d11c      	bne.n	800d754 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	3304      	adds	r3, #4
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe fdb6 	bl	800c290 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d728:	2201      	movs	r2, #1
 800d72a:	409a      	lsls	r2, r3
 800d72c:	4b17      	ldr	r3, [pc, #92]	; (800d78c <xTaskRemoveFromEventList+0xb0>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4313      	orrs	r3, r2
 800d732:	4a16      	ldr	r2, [pc, #88]	; (800d78c <xTaskRemoveFromEventList+0xb0>)
 800d734:	6013      	str	r3, [r2, #0]
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73a:	4613      	mov	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	4413      	add	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	4a13      	ldr	r2, [pc, #76]	; (800d790 <xTaskRemoveFromEventList+0xb4>)
 800d744:	441a      	add	r2, r3
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	3304      	adds	r3, #4
 800d74a:	4619      	mov	r1, r3
 800d74c:	4610      	mov	r0, r2
 800d74e:	f7fe fd42 	bl	800c1d6 <vListInsertEnd>
 800d752:	e005      	b.n	800d760 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	3318      	adds	r3, #24
 800d758:	4619      	mov	r1, r3
 800d75a:	480e      	ldr	r0, [pc, #56]	; (800d794 <xTaskRemoveFromEventList+0xb8>)
 800d75c:	f7fe fd3b 	bl	800c1d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d764:	4b0c      	ldr	r3, [pc, #48]	; (800d798 <xTaskRemoveFromEventList+0xbc>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d905      	bls.n	800d77a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d76e:	2301      	movs	r3, #1
 800d770:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d772:	4b0a      	ldr	r3, [pc, #40]	; (800d79c <xTaskRemoveFromEventList+0xc0>)
 800d774:	2201      	movs	r2, #1
 800d776:	601a      	str	r2, [r3, #0]
 800d778:	e001      	b.n	800d77e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d77a:	2300      	movs	r3, #0
 800d77c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d77e:	697b      	ldr	r3, [r7, #20]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3718      	adds	r7, #24
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	200004f4 	.word	0x200004f4
 800d78c:	200004d4 	.word	0x200004d4
 800d790:	200003d0 	.word	0x200003d0
 800d794:	2000048c 	.word	0x2000048c
 800d798:	200003cc 	.word	0x200003cc
 800d79c:	200004e0 	.word	0x200004e0

0800d7a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d7a8:	4b06      	ldr	r3, [pc, #24]	; (800d7c4 <vTaskInternalSetTimeOutState+0x24>)
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7b0:	4b05      	ldr	r3, [pc, #20]	; (800d7c8 <vTaskInternalSetTimeOutState+0x28>)
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	605a      	str	r2, [r3, #4]
}
 800d7b8:	bf00      	nop
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr
 800d7c4:	200004e4 	.word	0x200004e4
 800d7c8:	200004d0 	.word	0x200004d0

0800d7cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b088      	sub	sp, #32
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d10a      	bne.n	800d7f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e0:	f383 8811 	msr	BASEPRI, r3
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	613b      	str	r3, [r7, #16]
}
 800d7ee:	bf00      	nop
 800d7f0:	e7fe      	b.n	800d7f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10a      	bne.n	800d80e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	60fb      	str	r3, [r7, #12]
}
 800d80a:	bf00      	nop
 800d80c:	e7fe      	b.n	800d80c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d80e:	f000 fb59 	bl	800dec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d812:	4b1d      	ldr	r3, [pc, #116]	; (800d888 <xTaskCheckForTimeOut+0xbc>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	69ba      	ldr	r2, [r7, #24]
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d82a:	d102      	bne.n	800d832 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d82c:	2300      	movs	r3, #0
 800d82e:	61fb      	str	r3, [r7, #28]
 800d830:	e023      	b.n	800d87a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	4b15      	ldr	r3, [pc, #84]	; (800d88c <xTaskCheckForTimeOut+0xc0>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d007      	beq.n	800d84e <xTaskCheckForTimeOut+0x82>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	69ba      	ldr	r2, [r7, #24]
 800d844:	429a      	cmp	r2, r3
 800d846:	d302      	bcc.n	800d84e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d848:	2301      	movs	r3, #1
 800d84a:	61fb      	str	r3, [r7, #28]
 800d84c:	e015      	b.n	800d87a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	697a      	ldr	r2, [r7, #20]
 800d854:	429a      	cmp	r2, r3
 800d856:	d20b      	bcs.n	800d870 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	1ad2      	subs	r2, r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff ff9b 	bl	800d7a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d86a:	2300      	movs	r3, #0
 800d86c:	61fb      	str	r3, [r7, #28]
 800d86e:	e004      	b.n	800d87a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	2200      	movs	r2, #0
 800d874:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d876:	2301      	movs	r3, #1
 800d878:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d87a:	f000 fb53 	bl	800df24 <vPortExitCritical>

	return xReturn;
 800d87e:	69fb      	ldr	r3, [r7, #28]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3720      	adds	r7, #32
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	200004d0 	.word	0x200004d0
 800d88c:	200004e4 	.word	0x200004e4

0800d890 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d890:	b480      	push	{r7}
 800d892:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d894:	4b03      	ldr	r3, [pc, #12]	; (800d8a4 <vTaskMissedYield+0x14>)
 800d896:	2201      	movs	r2, #1
 800d898:	601a      	str	r2, [r3, #0]
}
 800d89a:	bf00      	nop
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	200004e0 	.word	0x200004e0

0800d8a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8b0:	f000 f854 	bl	800d95c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8b4:	4b07      	ldr	r3, [pc, #28]	; (800d8d4 <prvIdleTask+0x2c>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d907      	bls.n	800d8cc <prvIdleTask+0x24>
			{
				taskYIELD();
 800d8bc:	4b06      	ldr	r3, [pc, #24]	; (800d8d8 <prvIdleTask+0x30>)
 800d8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	f3bf 8f4f 	dsb	sy
 800d8c8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d8cc:	f7f3 fa52 	bl	8000d74 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d8d0:	e7ee      	b.n	800d8b0 <prvIdleTask+0x8>
 800d8d2:	bf00      	nop
 800d8d4:	200003d0 	.word	0x200003d0
 800d8d8:	e000ed04 	.word	0xe000ed04

0800d8dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	607b      	str	r3, [r7, #4]
 800d8e6:	e00c      	b.n	800d902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4413      	add	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4a12      	ldr	r2, [pc, #72]	; (800d93c <prvInitialiseTaskLists+0x60>)
 800d8f4:	4413      	add	r3, r2
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fe fc40 	bl	800c17c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	3301      	adds	r3, #1
 800d900:	607b      	str	r3, [r7, #4]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2b06      	cmp	r3, #6
 800d906:	d9ef      	bls.n	800d8e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d908:	480d      	ldr	r0, [pc, #52]	; (800d940 <prvInitialiseTaskLists+0x64>)
 800d90a:	f7fe fc37 	bl	800c17c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d90e:	480d      	ldr	r0, [pc, #52]	; (800d944 <prvInitialiseTaskLists+0x68>)
 800d910:	f7fe fc34 	bl	800c17c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d914:	480c      	ldr	r0, [pc, #48]	; (800d948 <prvInitialiseTaskLists+0x6c>)
 800d916:	f7fe fc31 	bl	800c17c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d91a:	480c      	ldr	r0, [pc, #48]	; (800d94c <prvInitialiseTaskLists+0x70>)
 800d91c:	f7fe fc2e 	bl	800c17c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d920:	480b      	ldr	r0, [pc, #44]	; (800d950 <prvInitialiseTaskLists+0x74>)
 800d922:	f7fe fc2b 	bl	800c17c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d926:	4b0b      	ldr	r3, [pc, #44]	; (800d954 <prvInitialiseTaskLists+0x78>)
 800d928:	4a05      	ldr	r2, [pc, #20]	; (800d940 <prvInitialiseTaskLists+0x64>)
 800d92a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d92c:	4b0a      	ldr	r3, [pc, #40]	; (800d958 <prvInitialiseTaskLists+0x7c>)
 800d92e:	4a05      	ldr	r2, [pc, #20]	; (800d944 <prvInitialiseTaskLists+0x68>)
 800d930:	601a      	str	r2, [r3, #0]
}
 800d932:	bf00      	nop
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	200003d0 	.word	0x200003d0
 800d940:	2000045c 	.word	0x2000045c
 800d944:	20000470 	.word	0x20000470
 800d948:	2000048c 	.word	0x2000048c
 800d94c:	200004a0 	.word	0x200004a0
 800d950:	200004b8 	.word	0x200004b8
 800d954:	20000484 	.word	0x20000484
 800d958:	20000488 	.word	0x20000488

0800d95c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d962:	e019      	b.n	800d998 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d964:	f000 faae 	bl	800dec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d968:	4b10      	ldr	r3, [pc, #64]	; (800d9ac <prvCheckTasksWaitingTermination+0x50>)
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	3304      	adds	r3, #4
 800d974:	4618      	mov	r0, r3
 800d976:	f7fe fc8b 	bl	800c290 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d97a:	4b0d      	ldr	r3, [pc, #52]	; (800d9b0 <prvCheckTasksWaitingTermination+0x54>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	3b01      	subs	r3, #1
 800d980:	4a0b      	ldr	r2, [pc, #44]	; (800d9b0 <prvCheckTasksWaitingTermination+0x54>)
 800d982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d984:	4b0b      	ldr	r3, [pc, #44]	; (800d9b4 <prvCheckTasksWaitingTermination+0x58>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	3b01      	subs	r3, #1
 800d98a:	4a0a      	ldr	r2, [pc, #40]	; (800d9b4 <prvCheckTasksWaitingTermination+0x58>)
 800d98c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d98e:	f000 fac9 	bl	800df24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 f810 	bl	800d9b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d998:	4b06      	ldr	r3, [pc, #24]	; (800d9b4 <prvCheckTasksWaitingTermination+0x58>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1e1      	bne.n	800d964 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d9a0:	bf00      	nop
 800d9a2:	bf00      	nop
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	200004a0 	.word	0x200004a0
 800d9b0:	200004cc 	.word	0x200004cc
 800d9b4:	200004b4 	.word	0x200004b4

0800d9b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d108      	bne.n	800d9dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 fc64 	bl	800e29c <vPortFree>
				vPortFree( pxTCB );
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fc61 	bl	800e29c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9da:	e018      	b.n	800da0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d103      	bne.n	800d9ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fc58 	bl	800e29c <vPortFree>
	}
 800d9ec:	e00f      	b.n	800da0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d00a      	beq.n	800da0e <prvDeleteTCB+0x56>
	__asm volatile
 800d9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	60fb      	str	r3, [r7, #12]
}
 800da0a:	bf00      	nop
 800da0c:	e7fe      	b.n	800da0c <prvDeleteTCB+0x54>
	}
 800da0e:	bf00      	nop
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
	...

0800da18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da1e:	4b0c      	ldr	r3, [pc, #48]	; (800da50 <prvResetNextTaskUnblockTime+0x38>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d104      	bne.n	800da32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da28:	4b0a      	ldr	r3, [pc, #40]	; (800da54 <prvResetNextTaskUnblockTime+0x3c>)
 800da2a:	f04f 32ff 	mov.w	r2, #4294967295
 800da2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da30:	e008      	b.n	800da44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da32:	4b07      	ldr	r3, [pc, #28]	; (800da50 <prvResetNextTaskUnblockTime+0x38>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	4a04      	ldr	r2, [pc, #16]	; (800da54 <prvResetNextTaskUnblockTime+0x3c>)
 800da42:	6013      	str	r3, [r2, #0]
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	20000484 	.word	0x20000484
 800da54:	200004ec 	.word	0x200004ec

0800da58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da5e:	4b0b      	ldr	r3, [pc, #44]	; (800da8c <xTaskGetSchedulerState+0x34>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d102      	bne.n	800da6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da66:	2301      	movs	r3, #1
 800da68:	607b      	str	r3, [r7, #4]
 800da6a:	e008      	b.n	800da7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da6c:	4b08      	ldr	r3, [pc, #32]	; (800da90 <xTaskGetSchedulerState+0x38>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800da74:	2302      	movs	r3, #2
 800da76:	607b      	str	r3, [r7, #4]
 800da78:	e001      	b.n	800da7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800da7a:	2300      	movs	r3, #0
 800da7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800da7e:	687b      	ldr	r3, [r7, #4]
	}
 800da80:	4618      	mov	r0, r3
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	200004d8 	.word	0x200004d8
 800da90:	200004f4 	.word	0x200004f4

0800da94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800daa0:	2300      	movs	r3, #0
 800daa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d06e      	beq.n	800db88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800daaa:	4b3a      	ldr	r3, [pc, #232]	; (800db94 <xTaskPriorityDisinherit+0x100>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d00a      	beq.n	800daca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	60fb      	str	r3, [r7, #12]
}
 800dac6:	bf00      	nop
 800dac8:	e7fe      	b.n	800dac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d10a      	bne.n	800dae8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad6:	f383 8811 	msr	BASEPRI, r3
 800dada:	f3bf 8f6f 	isb	sy
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	60bb      	str	r3, [r7, #8]
}
 800dae4:	bf00      	nop
 800dae6:	e7fe      	b.n	800dae6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800daec:	1e5a      	subs	r2, r3, #1
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d044      	beq.n	800db88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db02:	2b00      	cmp	r3, #0
 800db04:	d140      	bne.n	800db88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	3304      	adds	r3, #4
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe fbc0 	bl	800c290 <uxListRemove>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d115      	bne.n	800db42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db1a:	491f      	ldr	r1, [pc, #124]	; (800db98 <xTaskPriorityDisinherit+0x104>)
 800db1c:	4613      	mov	r3, r2
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	4413      	add	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	440b      	add	r3, r1
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10a      	bne.n	800db42 <xTaskPriorityDisinherit+0xae>
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db30:	2201      	movs	r2, #1
 800db32:	fa02 f303 	lsl.w	r3, r2, r3
 800db36:	43da      	mvns	r2, r3
 800db38:	4b18      	ldr	r3, [pc, #96]	; (800db9c <xTaskPriorityDisinherit+0x108>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4013      	ands	r3, r2
 800db3e:	4a17      	ldr	r2, [pc, #92]	; (800db9c <xTaskPriorityDisinherit+0x108>)
 800db40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4e:	f1c3 0207 	rsb	r2, r3, #7
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5a:	2201      	movs	r2, #1
 800db5c:	409a      	lsls	r2, r3
 800db5e:	4b0f      	ldr	r3, [pc, #60]	; (800db9c <xTaskPriorityDisinherit+0x108>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4313      	orrs	r3, r2
 800db64:	4a0d      	ldr	r2, [pc, #52]	; (800db9c <xTaskPriorityDisinherit+0x108>)
 800db66:	6013      	str	r3, [r2, #0]
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db6c:	4613      	mov	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	4413      	add	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4a08      	ldr	r2, [pc, #32]	; (800db98 <xTaskPriorityDisinherit+0x104>)
 800db76:	441a      	add	r2, r3
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	3304      	adds	r3, #4
 800db7c:	4619      	mov	r1, r3
 800db7e:	4610      	mov	r0, r2
 800db80:	f7fe fb29 	bl	800c1d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800db84:	2301      	movs	r3, #1
 800db86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db88:	697b      	ldr	r3, [r7, #20]
	}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3718      	adds	r7, #24
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	200003cc 	.word	0x200003cc
 800db98:	200003d0 	.word	0x200003d0
 800db9c:	200004d4 	.word	0x200004d4

0800dba0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbaa:	4b29      	ldr	r3, [pc, #164]	; (800dc50 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbb0:	4b28      	ldr	r3, [pc, #160]	; (800dc54 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fe fb6a 	bl	800c290 <uxListRemove>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10b      	bne.n	800dbda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dbc2:	4b24      	ldr	r3, [pc, #144]	; (800dc54 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc8:	2201      	movs	r2, #1
 800dbca:	fa02 f303 	lsl.w	r3, r2, r3
 800dbce:	43da      	mvns	r2, r3
 800dbd0:	4b21      	ldr	r3, [pc, #132]	; (800dc58 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	4a20      	ldr	r2, [pc, #128]	; (800dc58 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbd8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe0:	d10a      	bne.n	800dbf8 <prvAddCurrentTaskToDelayedList+0x58>
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d007      	beq.n	800dbf8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbe8:	4b1a      	ldr	r3, [pc, #104]	; (800dc54 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3304      	adds	r3, #4
 800dbee:	4619      	mov	r1, r3
 800dbf0:	481a      	ldr	r0, [pc, #104]	; (800dc5c <prvAddCurrentTaskToDelayedList+0xbc>)
 800dbf2:	f7fe faf0 	bl	800c1d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dbf6:	e026      	b.n	800dc46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc00:	4b14      	ldr	r3, [pc, #80]	; (800dc54 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	68ba      	ldr	r2, [r7, #8]
 800dc06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d209      	bcs.n	800dc24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc10:	4b13      	ldr	r3, [pc, #76]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	4b0f      	ldr	r3, [pc, #60]	; (800dc54 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	3304      	adds	r3, #4
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	f7fe fafe 	bl	800c21e <vListInsert>
}
 800dc22:	e010      	b.n	800dc46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc24:	4b0f      	ldr	r3, [pc, #60]	; (800dc64 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	4b0a      	ldr	r3, [pc, #40]	; (800dc54 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	4619      	mov	r1, r3
 800dc30:	4610      	mov	r0, r2
 800dc32:	f7fe faf4 	bl	800c21e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc36:	4b0c      	ldr	r3, [pc, #48]	; (800dc68 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	68ba      	ldr	r2, [r7, #8]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d202      	bcs.n	800dc46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dc40:	4a09      	ldr	r2, [pc, #36]	; (800dc68 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	6013      	str	r3, [r2, #0]
}
 800dc46:	bf00      	nop
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	200004d0 	.word	0x200004d0
 800dc54:	200003cc 	.word	0x200003cc
 800dc58:	200004d4 	.word	0x200004d4
 800dc5c:	200004b8 	.word	0x200004b8
 800dc60:	20000488 	.word	0x20000488
 800dc64:	20000484 	.word	0x20000484
 800dc68:	200004ec 	.word	0x200004ec

0800dc6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b085      	sub	sp, #20
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	3b04      	subs	r3, #4
 800dc7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	3b04      	subs	r3, #4
 800dc8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	f023 0201 	bic.w	r2, r3, #1
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	3b04      	subs	r3, #4
 800dc9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc9c:	4a0c      	ldr	r2, [pc, #48]	; (800dcd0 <pxPortInitialiseStack+0x64>)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	3b14      	subs	r3, #20
 800dca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3b04      	subs	r3, #4
 800dcb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f06f 0202 	mvn.w	r2, #2
 800dcba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	3b20      	subs	r3, #32
 800dcc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3714      	adds	r7, #20
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr
 800dcd0:	0800dcd5 	.word	0x0800dcd5

0800dcd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcde:	4b12      	ldr	r3, [pc, #72]	; (800dd28 <prvTaskExitError+0x54>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce6:	d00a      	beq.n	800dcfe <prvTaskExitError+0x2a>
	__asm volatile
 800dce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	60fb      	str	r3, [r7, #12]
}
 800dcfa:	bf00      	nop
 800dcfc:	e7fe      	b.n	800dcfc <prvTaskExitError+0x28>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	60bb      	str	r3, [r7, #8]
}
 800dd10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd12:	bf00      	nop
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d0fc      	beq.n	800dd14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd1a:	bf00      	nop
 800dd1c:	bf00      	nop
 800dd1e:	3714      	adds	r7, #20
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr
 800dd28:	20000070 	.word	0x20000070
 800dd2c:	00000000 	.word	0x00000000

0800dd30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd30:	4b07      	ldr	r3, [pc, #28]	; (800dd50 <pxCurrentTCBConst2>)
 800dd32:	6819      	ldr	r1, [r3, #0]
 800dd34:	6808      	ldr	r0, [r1, #0]
 800dd36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd3a:	f380 8809 	msr	PSP, r0
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	f04f 0000 	mov.w	r0, #0
 800dd46:	f380 8811 	msr	BASEPRI, r0
 800dd4a:	4770      	bx	lr
 800dd4c:	f3af 8000 	nop.w

0800dd50 <pxCurrentTCBConst2>:
 800dd50:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd54:	bf00      	nop
 800dd56:	bf00      	nop

0800dd58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd58:	4808      	ldr	r0, [pc, #32]	; (800dd7c <prvPortStartFirstTask+0x24>)
 800dd5a:	6800      	ldr	r0, [r0, #0]
 800dd5c:	6800      	ldr	r0, [r0, #0]
 800dd5e:	f380 8808 	msr	MSP, r0
 800dd62:	f04f 0000 	mov.w	r0, #0
 800dd66:	f380 8814 	msr	CONTROL, r0
 800dd6a:	b662      	cpsie	i
 800dd6c:	b661      	cpsie	f
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	df00      	svc	0
 800dd78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd7a:	bf00      	nop
 800dd7c:	e000ed08 	.word	0xe000ed08

0800dd80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dd86:	4b46      	ldr	r3, [pc, #280]	; (800dea0 <xPortStartScheduler+0x120>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a46      	ldr	r2, [pc, #280]	; (800dea4 <xPortStartScheduler+0x124>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d10a      	bne.n	800dda6 <xPortStartScheduler+0x26>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	613b      	str	r3, [r7, #16]
}
 800dda2:	bf00      	nop
 800dda4:	e7fe      	b.n	800dda4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dda6:	4b3e      	ldr	r3, [pc, #248]	; (800dea0 <xPortStartScheduler+0x120>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a3f      	ldr	r2, [pc, #252]	; (800dea8 <xPortStartScheduler+0x128>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d10a      	bne.n	800ddc6 <xPortStartScheduler+0x46>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	60fb      	str	r3, [r7, #12]
}
 800ddc2:	bf00      	nop
 800ddc4:	e7fe      	b.n	800ddc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ddc6:	4b39      	ldr	r3, [pc, #228]	; (800deac <xPortStartScheduler+0x12c>)
 800ddc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	22ff      	movs	r2, #255	; 0xff
 800ddd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dde0:	78fb      	ldrb	r3, [r7, #3]
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	4b31      	ldr	r3, [pc, #196]	; (800deb0 <xPortStartScheduler+0x130>)
 800ddec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ddee:	4b31      	ldr	r3, [pc, #196]	; (800deb4 <xPortStartScheduler+0x134>)
 800ddf0:	2207      	movs	r2, #7
 800ddf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddf4:	e009      	b.n	800de0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ddf6:	4b2f      	ldr	r3, [pc, #188]	; (800deb4 <xPortStartScheduler+0x134>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	4a2d      	ldr	r2, [pc, #180]	; (800deb4 <xPortStartScheduler+0x134>)
 800ddfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	b2db      	uxtb	r3, r3
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	b2db      	uxtb	r3, r3
 800de08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de0a:	78fb      	ldrb	r3, [r7, #3]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de12:	2b80      	cmp	r3, #128	; 0x80
 800de14:	d0ef      	beq.n	800ddf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de16:	4b27      	ldr	r3, [pc, #156]	; (800deb4 <xPortStartScheduler+0x134>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f1c3 0307 	rsb	r3, r3, #7
 800de1e:	2b04      	cmp	r3, #4
 800de20:	d00a      	beq.n	800de38 <xPortStartScheduler+0xb8>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	60bb      	str	r3, [r7, #8]
}
 800de34:	bf00      	nop
 800de36:	e7fe      	b.n	800de36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de38:	4b1e      	ldr	r3, [pc, #120]	; (800deb4 <xPortStartScheduler+0x134>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	021b      	lsls	r3, r3, #8
 800de3e:	4a1d      	ldr	r2, [pc, #116]	; (800deb4 <xPortStartScheduler+0x134>)
 800de40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de42:	4b1c      	ldr	r3, [pc, #112]	; (800deb4 <xPortStartScheduler+0x134>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de4a:	4a1a      	ldr	r2, [pc, #104]	; (800deb4 <xPortStartScheduler+0x134>)
 800de4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	b2da      	uxtb	r2, r3
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de56:	4b18      	ldr	r3, [pc, #96]	; (800deb8 <xPortStartScheduler+0x138>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4a17      	ldr	r2, [pc, #92]	; (800deb8 <xPortStartScheduler+0x138>)
 800de5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de62:	4b15      	ldr	r3, [pc, #84]	; (800deb8 <xPortStartScheduler+0x138>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4a14      	ldr	r2, [pc, #80]	; (800deb8 <xPortStartScheduler+0x138>)
 800de68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de6e:	f000 f8dd 	bl	800e02c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de72:	4b12      	ldr	r3, [pc, #72]	; (800debc <xPortStartScheduler+0x13c>)
 800de74:	2200      	movs	r2, #0
 800de76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de78:	f000 f8fc 	bl	800e074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de7c:	4b10      	ldr	r3, [pc, #64]	; (800dec0 <xPortStartScheduler+0x140>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a0f      	ldr	r2, [pc, #60]	; (800dec0 <xPortStartScheduler+0x140>)
 800de82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800de86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de88:	f7ff ff66 	bl	800dd58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de8c:	f7ff fb82 	bl	800d594 <vTaskSwitchContext>
	prvTaskExitError();
 800de90:	f7ff ff20 	bl	800dcd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3718      	adds	r7, #24
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	e000ed00 	.word	0xe000ed00
 800dea4:	410fc271 	.word	0x410fc271
 800dea8:	410fc270 	.word	0x410fc270
 800deac:	e000e400 	.word	0xe000e400
 800deb0:	200004f8 	.word	0x200004f8
 800deb4:	200004fc 	.word	0x200004fc
 800deb8:	e000ed20 	.word	0xe000ed20
 800debc:	20000070 	.word	0x20000070
 800dec0:	e000ef34 	.word	0xe000ef34

0800dec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
	__asm volatile
 800deca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	607b      	str	r3, [r7, #4]
}
 800dedc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dede:	4b0f      	ldr	r3, [pc, #60]	; (800df1c <vPortEnterCritical+0x58>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	3301      	adds	r3, #1
 800dee4:	4a0d      	ldr	r2, [pc, #52]	; (800df1c <vPortEnterCritical+0x58>)
 800dee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dee8:	4b0c      	ldr	r3, [pc, #48]	; (800df1c <vPortEnterCritical+0x58>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b01      	cmp	r3, #1
 800deee:	d10f      	bne.n	800df10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800def0:	4b0b      	ldr	r3, [pc, #44]	; (800df20 <vPortEnterCritical+0x5c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00a      	beq.n	800df10 <vPortEnterCritical+0x4c>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	603b      	str	r3, [r7, #0]
}
 800df0c:	bf00      	nop
 800df0e:	e7fe      	b.n	800df0e <vPortEnterCritical+0x4a>
	}
}
 800df10:	bf00      	nop
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr
 800df1c:	20000070 	.word	0x20000070
 800df20:	e000ed04 	.word	0xe000ed04

0800df24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df2a:	4b12      	ldr	r3, [pc, #72]	; (800df74 <vPortExitCritical+0x50>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d10a      	bne.n	800df48 <vPortExitCritical+0x24>
	__asm volatile
 800df32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df36:	f383 8811 	msr	BASEPRI, r3
 800df3a:	f3bf 8f6f 	isb	sy
 800df3e:	f3bf 8f4f 	dsb	sy
 800df42:	607b      	str	r3, [r7, #4]
}
 800df44:	bf00      	nop
 800df46:	e7fe      	b.n	800df46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df48:	4b0a      	ldr	r3, [pc, #40]	; (800df74 <vPortExitCritical+0x50>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	3b01      	subs	r3, #1
 800df4e:	4a09      	ldr	r2, [pc, #36]	; (800df74 <vPortExitCritical+0x50>)
 800df50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df52:	4b08      	ldr	r3, [pc, #32]	; (800df74 <vPortExitCritical+0x50>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d105      	bne.n	800df66 <vPortExitCritical+0x42>
 800df5a:	2300      	movs	r3, #0
 800df5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	f383 8811 	msr	BASEPRI, r3
}
 800df64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df66:	bf00      	nop
 800df68:	370c      	adds	r7, #12
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	20000070 	.word	0x20000070
	...

0800df80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df80:	f3ef 8009 	mrs	r0, PSP
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	4b15      	ldr	r3, [pc, #84]	; (800dfe0 <pxCurrentTCBConst>)
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	f01e 0f10 	tst.w	lr, #16
 800df90:	bf08      	it	eq
 800df92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df9a:	6010      	str	r0, [r2, #0]
 800df9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dfa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dfa4:	f380 8811 	msr	BASEPRI, r0
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	f3bf 8f6f 	isb	sy
 800dfb0:	f7ff faf0 	bl	800d594 <vTaskSwitchContext>
 800dfb4:	f04f 0000 	mov.w	r0, #0
 800dfb8:	f380 8811 	msr	BASEPRI, r0
 800dfbc:	bc09      	pop	{r0, r3}
 800dfbe:	6819      	ldr	r1, [r3, #0]
 800dfc0:	6808      	ldr	r0, [r1, #0]
 800dfc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc6:	f01e 0f10 	tst.w	lr, #16
 800dfca:	bf08      	it	eq
 800dfcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dfd0:	f380 8809 	msr	PSP, r0
 800dfd4:	f3bf 8f6f 	isb	sy
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	f3af 8000 	nop.w

0800dfe0 <pxCurrentTCBConst>:
 800dfe0:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dfe4:	bf00      	nop
 800dfe6:	bf00      	nop

0800dfe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	607b      	str	r3, [r7, #4]
}
 800e000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e002:	f7ff fa0f 	bl	800d424 <xTaskIncrementTick>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d003      	beq.n	800e014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e00c:	4b06      	ldr	r3, [pc, #24]	; (800e028 <SysTick_Handler+0x40>)
 800e00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e012:	601a      	str	r2, [r3, #0]
 800e014:	2300      	movs	r3, #0
 800e016:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	f383 8811 	msr	BASEPRI, r3
}
 800e01e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e020:	bf00      	nop
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	e000ed04 	.word	0xe000ed04

0800e02c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e02c:	b480      	push	{r7}
 800e02e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e030:	4b0b      	ldr	r3, [pc, #44]	; (800e060 <vPortSetupTimerInterrupt+0x34>)
 800e032:	2200      	movs	r2, #0
 800e034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e036:	4b0b      	ldr	r3, [pc, #44]	; (800e064 <vPortSetupTimerInterrupt+0x38>)
 800e038:	2200      	movs	r2, #0
 800e03a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e03c:	4b0a      	ldr	r3, [pc, #40]	; (800e068 <vPortSetupTimerInterrupt+0x3c>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a0a      	ldr	r2, [pc, #40]	; (800e06c <vPortSetupTimerInterrupt+0x40>)
 800e042:	fba2 2303 	umull	r2, r3, r2, r3
 800e046:	099b      	lsrs	r3, r3, #6
 800e048:	4a09      	ldr	r2, [pc, #36]	; (800e070 <vPortSetupTimerInterrupt+0x44>)
 800e04a:	3b01      	subs	r3, #1
 800e04c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e04e:	4b04      	ldr	r3, [pc, #16]	; (800e060 <vPortSetupTimerInterrupt+0x34>)
 800e050:	2207      	movs	r2, #7
 800e052:	601a      	str	r2, [r3, #0]
}
 800e054:	bf00      	nop
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr
 800e05e:	bf00      	nop
 800e060:	e000e010 	.word	0xe000e010
 800e064:	e000e018 	.word	0xe000e018
 800e068:	20000000 	.word	0x20000000
 800e06c:	10624dd3 	.word	0x10624dd3
 800e070:	e000e014 	.word	0xe000e014

0800e074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e084 <vPortEnableVFP+0x10>
 800e078:	6801      	ldr	r1, [r0, #0]
 800e07a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e07e:	6001      	str	r1, [r0, #0]
 800e080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e082:	bf00      	nop
 800e084:	e000ed88 	.word	0xe000ed88

0800e088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e08e:	f3ef 8305 	mrs	r3, IPSR
 800e092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2b0f      	cmp	r3, #15
 800e098:	d914      	bls.n	800e0c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e09a:	4a17      	ldr	r2, [pc, #92]	; (800e0f8 <vPortValidateInterruptPriority+0x70>)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	4413      	add	r3, r2
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e0a4:	4b15      	ldr	r3, [pc, #84]	; (800e0fc <vPortValidateInterruptPriority+0x74>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	7afa      	ldrb	r2, [r7, #11]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d20a      	bcs.n	800e0c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	607b      	str	r3, [r7, #4]
}
 800e0c0:	bf00      	nop
 800e0c2:	e7fe      	b.n	800e0c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0c4:	4b0e      	ldr	r3, [pc, #56]	; (800e100 <vPortValidateInterruptPriority+0x78>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0cc:	4b0d      	ldr	r3, [pc, #52]	; (800e104 <vPortValidateInterruptPriority+0x7c>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d90a      	bls.n	800e0ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d8:	f383 8811 	msr	BASEPRI, r3
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	f3bf 8f4f 	dsb	sy
 800e0e4:	603b      	str	r3, [r7, #0]
}
 800e0e6:	bf00      	nop
 800e0e8:	e7fe      	b.n	800e0e8 <vPortValidateInterruptPriority+0x60>
	}
 800e0ea:	bf00      	nop
 800e0ec:	3714      	adds	r7, #20
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	e000e3f0 	.word	0xe000e3f0
 800e0fc:	200004f8 	.word	0x200004f8
 800e100:	e000ed0c 	.word	0xe000ed0c
 800e104:	200004fc 	.word	0x200004fc

0800e108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08a      	sub	sp, #40	; 0x28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e110:	2300      	movs	r3, #0
 800e112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e114:	f7ff f8dc 	bl	800d2d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e118:	4b5b      	ldr	r3, [pc, #364]	; (800e288 <pvPortMalloc+0x180>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d101      	bne.n	800e124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e120:	f000 f916 	bl	800e350 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e124:	4b59      	ldr	r3, [pc, #356]	; (800e28c <pvPortMalloc+0x184>)
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4013      	ands	r3, r2
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	f040 808e 	bne.w	800e24e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d01d      	beq.n	800e174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e138:	2208      	movs	r2, #8
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	4413      	add	r3, r2
 800e13e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f003 0307 	and.w	r3, r3, #7
 800e146:	2b00      	cmp	r3, #0
 800e148:	d014      	beq.n	800e174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f023 0307 	bic.w	r3, r3, #7
 800e150:	3308      	adds	r3, #8
 800e152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f003 0307 	and.w	r3, r3, #7
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00a      	beq.n	800e174 <pvPortMalloc+0x6c>
	__asm volatile
 800e15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e162:	f383 8811 	msr	BASEPRI, r3
 800e166:	f3bf 8f6f 	isb	sy
 800e16a:	f3bf 8f4f 	dsb	sy
 800e16e:	617b      	str	r3, [r7, #20]
}
 800e170:	bf00      	nop
 800e172:	e7fe      	b.n	800e172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d069      	beq.n	800e24e <pvPortMalloc+0x146>
 800e17a:	4b45      	ldr	r3, [pc, #276]	; (800e290 <pvPortMalloc+0x188>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	429a      	cmp	r2, r3
 800e182:	d864      	bhi.n	800e24e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e184:	4b43      	ldr	r3, [pc, #268]	; (800e294 <pvPortMalloc+0x18c>)
 800e186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e188:	4b42      	ldr	r3, [pc, #264]	; (800e294 <pvPortMalloc+0x18c>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e18e:	e004      	b.n	800e19a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d903      	bls.n	800e1ac <pvPortMalloc+0xa4>
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1f1      	bne.n	800e190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e1ac:	4b36      	ldr	r3, [pc, #216]	; (800e288 <pvPortMalloc+0x180>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d04b      	beq.n	800e24e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e1b6:	6a3b      	ldr	r3, [r7, #32]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2208      	movs	r2, #8
 800e1bc:	4413      	add	r3, r2
 800e1be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	6a3b      	ldr	r3, [r7, #32]
 800e1c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	1ad2      	subs	r2, r2, r3
 800e1d0:	2308      	movs	r3, #8
 800e1d2:	005b      	lsls	r3, r3, #1
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d91f      	bls.n	800e218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4413      	add	r3, r2
 800e1de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	f003 0307 	and.w	r3, r3, #7
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00a      	beq.n	800e200 <pvPortMalloc+0xf8>
	__asm volatile
 800e1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ee:	f383 8811 	msr	BASEPRI, r3
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	613b      	str	r3, [r7, #16]
}
 800e1fc:	bf00      	nop
 800e1fe:	e7fe      	b.n	800e1fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	685a      	ldr	r2, [r3, #4]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	1ad2      	subs	r2, r2, r3
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e212:	69b8      	ldr	r0, [r7, #24]
 800e214:	f000 f8fe 	bl	800e414 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e218:	4b1d      	ldr	r3, [pc, #116]	; (800e290 <pvPortMalloc+0x188>)
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	4a1b      	ldr	r2, [pc, #108]	; (800e290 <pvPortMalloc+0x188>)
 800e224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e226:	4b1a      	ldr	r3, [pc, #104]	; (800e290 <pvPortMalloc+0x188>)
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	4b1b      	ldr	r3, [pc, #108]	; (800e298 <pvPortMalloc+0x190>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d203      	bcs.n	800e23a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e232:	4b17      	ldr	r3, [pc, #92]	; (800e290 <pvPortMalloc+0x188>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a18      	ldr	r2, [pc, #96]	; (800e298 <pvPortMalloc+0x190>)
 800e238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23c:	685a      	ldr	r2, [r3, #4]
 800e23e:	4b13      	ldr	r3, [pc, #76]	; (800e28c <pvPortMalloc+0x184>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	431a      	orrs	r2, r3
 800e244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e24e:	f7ff f84d 	bl	800d2ec <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d101      	bne.n	800e25c <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e258:	f7f2 fd9e 	bl	8000d98 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	f003 0307 	and.w	r3, r3, #7
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00a      	beq.n	800e27c <pvPortMalloc+0x174>
	__asm volatile
 800e266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	60fb      	str	r3, [r7, #12]
}
 800e278:	bf00      	nop
 800e27a:	e7fe      	b.n	800e27a <pvPortMalloc+0x172>
	return pvReturn;
 800e27c:	69fb      	ldr	r3, [r7, #28]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3728      	adds	r7, #40	; 0x28
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	20008508 	.word	0x20008508
 800e28c:	20008514 	.word	0x20008514
 800e290:	2000850c 	.word	0x2000850c
 800e294:	20008500 	.word	0x20008500
 800e298:	20008510 	.word	0x20008510

0800e29c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b086      	sub	sp, #24
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d048      	beq.n	800e340 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e2ae:	2308      	movs	r3, #8
 800e2b0:	425b      	negs	r3, r3
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	685a      	ldr	r2, [r3, #4]
 800e2c0:	4b21      	ldr	r3, [pc, #132]	; (800e348 <vPortFree+0xac>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4013      	ands	r3, r2
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d10a      	bne.n	800e2e0 <vPortFree+0x44>
	__asm volatile
 800e2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ce:	f383 8811 	msr	BASEPRI, r3
 800e2d2:	f3bf 8f6f 	isb	sy
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	60fb      	str	r3, [r7, #12]
}
 800e2dc:	bf00      	nop
 800e2de:	e7fe      	b.n	800e2de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00a      	beq.n	800e2fe <vPortFree+0x62>
	__asm volatile
 800e2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ec:	f383 8811 	msr	BASEPRI, r3
 800e2f0:	f3bf 8f6f 	isb	sy
 800e2f4:	f3bf 8f4f 	dsb	sy
 800e2f8:	60bb      	str	r3, [r7, #8]
}
 800e2fa:	bf00      	nop
 800e2fc:	e7fe      	b.n	800e2fc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	685a      	ldr	r2, [r3, #4]
 800e302:	4b11      	ldr	r3, [pc, #68]	; (800e348 <vPortFree+0xac>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4013      	ands	r3, r2
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d019      	beq.n	800e340 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d115      	bne.n	800e340 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	685a      	ldr	r2, [r3, #4]
 800e318:	4b0b      	ldr	r3, [pc, #44]	; (800e348 <vPortFree+0xac>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	43db      	mvns	r3, r3
 800e31e:	401a      	ands	r2, r3
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e324:	f7fe ffd4 	bl	800d2d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	4b07      	ldr	r3, [pc, #28]	; (800e34c <vPortFree+0xb0>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4413      	add	r3, r2
 800e332:	4a06      	ldr	r2, [pc, #24]	; (800e34c <vPortFree+0xb0>)
 800e334:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e336:	6938      	ldr	r0, [r7, #16]
 800e338:	f000 f86c 	bl	800e414 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e33c:	f7fe ffd6 	bl	800d2ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e340:	bf00      	nop
 800e342:	3718      	adds	r7, #24
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	20008514 	.word	0x20008514
 800e34c:	2000850c 	.word	0x2000850c

0800e350 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e350:	b480      	push	{r7}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e35a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e35c:	4b27      	ldr	r3, [pc, #156]	; (800e3fc <prvHeapInit+0xac>)
 800e35e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f003 0307 	and.w	r3, r3, #7
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00c      	beq.n	800e384 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	3307      	adds	r3, #7
 800e36e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f023 0307 	bic.w	r3, r3, #7
 800e376:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e378:	68ba      	ldr	r2, [r7, #8]
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	1ad3      	subs	r3, r2, r3
 800e37e:	4a1f      	ldr	r2, [pc, #124]	; (800e3fc <prvHeapInit+0xac>)
 800e380:	4413      	add	r3, r2
 800e382:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e388:	4a1d      	ldr	r2, [pc, #116]	; (800e400 <prvHeapInit+0xb0>)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e38e:	4b1c      	ldr	r3, [pc, #112]	; (800e400 <prvHeapInit+0xb0>)
 800e390:	2200      	movs	r2, #0
 800e392:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	4413      	add	r3, r2
 800e39a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e39c:	2208      	movs	r2, #8
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	1a9b      	subs	r3, r3, r2
 800e3a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f023 0307 	bic.w	r3, r3, #7
 800e3aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	4a15      	ldr	r2, [pc, #84]	; (800e404 <prvHeapInit+0xb4>)
 800e3b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3b2:	4b14      	ldr	r3, [pc, #80]	; (800e404 <prvHeapInit+0xb4>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3ba:	4b12      	ldr	r3, [pc, #72]	; (800e404 <prvHeapInit+0xb4>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	1ad2      	subs	r2, r2, r3
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e3d0:	4b0c      	ldr	r3, [pc, #48]	; (800e404 <prvHeapInit+0xb4>)
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	4a0a      	ldr	r2, [pc, #40]	; (800e408 <prvHeapInit+0xb8>)
 800e3de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	4a09      	ldr	r2, [pc, #36]	; (800e40c <prvHeapInit+0xbc>)
 800e3e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e3e8:	4b09      	ldr	r3, [pc, #36]	; (800e410 <prvHeapInit+0xc0>)
 800e3ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e3ee:	601a      	str	r2, [r3, #0]
}
 800e3f0:	bf00      	nop
 800e3f2:	3714      	adds	r7, #20
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	20000500 	.word	0x20000500
 800e400:	20008500 	.word	0x20008500
 800e404:	20008508 	.word	0x20008508
 800e408:	20008510 	.word	0x20008510
 800e40c:	2000850c 	.word	0x2000850c
 800e410:	20008514 	.word	0x20008514

0800e414 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e41c:	4b28      	ldr	r3, [pc, #160]	; (800e4c0 <prvInsertBlockIntoFreeList+0xac>)
 800e41e:	60fb      	str	r3, [r7, #12]
 800e420:	e002      	b.n	800e428 <prvInsertBlockIntoFreeList+0x14>
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	60fb      	str	r3, [r7, #12]
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d8f7      	bhi.n	800e422 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	68ba      	ldr	r2, [r7, #8]
 800e43c:	4413      	add	r3, r2
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	429a      	cmp	r2, r3
 800e442:	d108      	bne.n	800e456 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	441a      	add	r2, r3
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	441a      	add	r2, r3
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	429a      	cmp	r2, r3
 800e468:	d118      	bne.n	800e49c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	4b15      	ldr	r3, [pc, #84]	; (800e4c4 <prvInsertBlockIntoFreeList+0xb0>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	429a      	cmp	r2, r3
 800e474:	d00d      	beq.n	800e492 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	685a      	ldr	r2, [r3, #4]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	441a      	add	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	601a      	str	r2, [r3, #0]
 800e490:	e008      	b.n	800e4a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e492:	4b0c      	ldr	r3, [pc, #48]	; (800e4c4 <prvInsertBlockIntoFreeList+0xb0>)
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	601a      	str	r2, [r3, #0]
 800e49a:	e003      	b.n	800e4a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d002      	beq.n	800e4b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4b2:	bf00      	nop
 800e4b4:	3714      	adds	r7, #20
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	20008500 	.word	0x20008500
 800e4c4:	20008508 	.word	0x20008508

0800e4c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	490e      	ldr	r1, [pc, #56]	; (800e508 <MX_USB_HOST_Init+0x40>)
 800e4d0:	480e      	ldr	r0, [pc, #56]	; (800e50c <MX_USB_HOST_Init+0x44>)
 800e4d2:	f7fb ff6d 	bl	800a3b0 <USBH_Init>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d001      	beq.n	800e4e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e4dc:	f7f3 fa5a 	bl	8001994 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800e4e0:	490b      	ldr	r1, [pc, #44]	; (800e510 <MX_USB_HOST_Init+0x48>)
 800e4e2:	480a      	ldr	r0, [pc, #40]	; (800e50c <MX_USB_HOST_Init+0x44>)
 800e4e4:	f7fc f81a 	bl	800a51c <USBH_RegisterClass>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e4ee:	f7f3 fa51 	bl	8001994 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800e4f2:	4806      	ldr	r0, [pc, #24]	; (800e50c <MX_USB_HOST_Init+0x44>)
 800e4f4:	f7fc f89e 	bl	800a634 <USBH_Start>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e4fe:	f7f3 fa49 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e502:	bf00      	nop
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	0800e515 	.word	0x0800e515
 800e50c:	20008934 	.word	0x20008934
 800e510:	20000050 	.word	0x20000050

0800e514 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	460b      	mov	r3, r1
 800e51e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e520:	78fb      	ldrb	r3, [r7, #3]
 800e522:	3b01      	subs	r3, #1
 800e524:	2b04      	cmp	r3, #4
 800e526:	d819      	bhi.n	800e55c <USBH_UserProcess+0x48>
 800e528:	a201      	add	r2, pc, #4	; (adr r2, 800e530 <USBH_UserProcess+0x1c>)
 800e52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e52e:	bf00      	nop
 800e530:	0800e55d 	.word	0x0800e55d
 800e534:	0800e54d 	.word	0x0800e54d
 800e538:	0800e55d 	.word	0x0800e55d
 800e53c:	0800e555 	.word	0x0800e555
 800e540:	0800e545 	.word	0x0800e545
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e544:	4b09      	ldr	r3, [pc, #36]	; (800e56c <USBH_UserProcess+0x58>)
 800e546:	2203      	movs	r2, #3
 800e548:	701a      	strb	r2, [r3, #0]
  break;
 800e54a:	e008      	b.n	800e55e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e54c:	4b07      	ldr	r3, [pc, #28]	; (800e56c <USBH_UserProcess+0x58>)
 800e54e:	2202      	movs	r2, #2
 800e550:	701a      	strb	r2, [r3, #0]
  break;
 800e552:	e004      	b.n	800e55e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e554:	4b05      	ldr	r3, [pc, #20]	; (800e56c <USBH_UserProcess+0x58>)
 800e556:	2201      	movs	r2, #1
 800e558:	701a      	strb	r2, [r3, #0]
  break;
 800e55a:	e000      	b.n	800e55e <USBH_UserProcess+0x4a>

  default:
  break;
 800e55c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e55e:	bf00      	nop
 800e560:	370c      	adds	r7, #12
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop
 800e56c:	20008518 	.word	0x20008518

0800e570 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08a      	sub	sp, #40	; 0x28
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e578:	f107 0314 	add.w	r3, r7, #20
 800e57c:	2200      	movs	r2, #0
 800e57e:	601a      	str	r2, [r3, #0]
 800e580:	605a      	str	r2, [r3, #4]
 800e582:	609a      	str	r2, [r3, #8]
 800e584:	60da      	str	r2, [r3, #12]
 800e586:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a24      	ldr	r2, [pc, #144]	; (800e620 <HAL_HCD_MspInit+0xb0>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d141      	bne.n	800e616 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e592:	2300      	movs	r3, #0
 800e594:	613b      	str	r3, [r7, #16]
 800e596:	4b23      	ldr	r3, [pc, #140]	; (800e624 <HAL_HCD_MspInit+0xb4>)
 800e598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e59a:	4a22      	ldr	r2, [pc, #136]	; (800e624 <HAL_HCD_MspInit+0xb4>)
 800e59c:	f043 0302 	orr.w	r3, r3, #2
 800e5a0:	6313      	str	r3, [r2, #48]	; 0x30
 800e5a2:	4b20      	ldr	r3, [pc, #128]	; (800e624 <HAL_HCD_MspInit+0xb4>)
 800e5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5a6:	f003 0302 	and.w	r3, r3, #2
 800e5aa:	613b      	str	r3, [r7, #16]
 800e5ac:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800e5ae:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800e5b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5b4:	2302      	movs	r3, #2
 800e5b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e5c0:	230c      	movs	r3, #12
 800e5c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e5c4:	f107 0314 	add.w	r3, r7, #20
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	4817      	ldr	r0, [pc, #92]	; (800e628 <HAL_HCD_MspInit+0xb8>)
 800e5cc:	f7f5 fbfc 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800e5d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e5d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800e5de:	f107 0314 	add.w	r3, r7, #20
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	4810      	ldr	r0, [pc, #64]	; (800e628 <HAL_HCD_MspInit+0xb8>)
 800e5e6:	f7f5 fbef 	bl	8003dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	60fb      	str	r3, [r7, #12]
 800e5ee:	4b0d      	ldr	r3, [pc, #52]	; (800e624 <HAL_HCD_MspInit+0xb4>)
 800e5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f2:	4a0c      	ldr	r2, [pc, #48]	; (800e624 <HAL_HCD_MspInit+0xb4>)
 800e5f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e5f8:	6313      	str	r3, [r2, #48]	; 0x30
 800e5fa:	4b0a      	ldr	r3, [pc, #40]	; (800e624 <HAL_HCD_MspInit+0xb4>)
 800e5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e602:	60fb      	str	r3, [r7, #12]
 800e604:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e606:	2200      	movs	r2, #0
 800e608:	2105      	movs	r1, #5
 800e60a:	204d      	movs	r0, #77	; 0x4d
 800e60c:	f7f5 f9aa 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e610:	204d      	movs	r0, #77	; 0x4d
 800e612:	f7f5 f9c3 	bl	800399c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e616:	bf00      	nop
 800e618:	3728      	adds	r7, #40	; 0x28
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	40040000 	.word	0x40040000
 800e624:	40023800 	.word	0x40023800
 800e628:	40020400 	.word	0x40020400

0800e62c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fc fca7 	bl	800af8e <USBH_LL_IncTimer>
}
 800e640:	bf00      	nop
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e656:	4618      	mov	r0, r3
 800e658:	f7fc fceb 	bl	800b032 <USBH_LL_Connect>
}
 800e65c:	bf00      	nop
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e672:	4618      	mov	r0, r3
 800e674:	f7fc fd00 	bl	800b078 <USBH_LL_Disconnect>
}
 800e678:	bf00      	nop
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	460b      	mov	r3, r1
 800e68a:	70fb      	strb	r3, [r7, #3]
 800e68c:	4613      	mov	r3, r2
 800e68e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e696:	4618      	mov	r0, r3
 800e698:	f7fc fd35 	bl	800b106 <USBH_LL_NotifyURBChange>
#endif
}
 800e69c:	bf00      	nop
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fc fc95 	bl	800afe2 <USBH_LL_PortEnabled>
}
 800e6b8:	bf00      	nop
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fc fca1 	bl	800b016 <USBH_LL_PortDisabled>
}
 800e6d4:	bf00      	nop
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d132      	bne.n	800e754 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800e6ee:	4a1c      	ldr	r2, [pc, #112]	; (800e760 <USBH_LL_Init+0x84>)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4a19      	ldr	r2, [pc, #100]	; (800e760 <USBH_LL_Init+0x84>)
 800e6fa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e6fe:	4b18      	ldr	r3, [pc, #96]	; (800e760 <USBH_LL_Init+0x84>)
 800e700:	4a18      	ldr	r2, [pc, #96]	; (800e764 <USBH_LL_Init+0x88>)
 800e702:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800e704:	4b16      	ldr	r3, [pc, #88]	; (800e760 <USBH_LL_Init+0x84>)
 800e706:	220c      	movs	r2, #12
 800e708:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800e70a:	4b15      	ldr	r3, [pc, #84]	; (800e760 <USBH_LL_Init+0x84>)
 800e70c:	2201      	movs	r2, #1
 800e70e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e710:	4b13      	ldr	r3, [pc, #76]	; (800e760 <USBH_LL_Init+0x84>)
 800e712:	2200      	movs	r2, #0
 800e714:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e716:	4b12      	ldr	r3, [pc, #72]	; (800e760 <USBH_LL_Init+0x84>)
 800e718:	2202      	movs	r2, #2
 800e71a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e71c:	4b10      	ldr	r3, [pc, #64]	; (800e760 <USBH_LL_Init+0x84>)
 800e71e:	2200      	movs	r2, #0
 800e720:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e722:	4b0f      	ldr	r3, [pc, #60]	; (800e760 <USBH_LL_Init+0x84>)
 800e724:	2200      	movs	r2, #0
 800e726:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e728:	4b0d      	ldr	r3, [pc, #52]	; (800e760 <USBH_LL_Init+0x84>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e72e:	4b0c      	ldr	r3, [pc, #48]	; (800e760 <USBH_LL_Init+0x84>)
 800e730:	2200      	movs	r2, #0
 800e732:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800e734:	480a      	ldr	r0, [pc, #40]	; (800e760 <USBH_LL_Init+0x84>)
 800e736:	f7f5 fd25 	bl	8004184 <HAL_HCD_Init>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800e740:	f7f3 f928 	bl	8001994 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800e744:	4806      	ldr	r0, [pc, #24]	; (800e760 <USBH_LL_Init+0x84>)
 800e746:	f7f6 f929 	bl	800499c <HAL_HCD_GetCurrentFrame>
 800e74a:	4603      	mov	r3, r0
 800e74c:	4619      	mov	r1, r3
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f7fc fc0e 	bl	800af70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e754:	2300      	movs	r3, #0
}
 800e756:	4618      	mov	r0, r3
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20008d18 	.word	0x20008d18
 800e764:	40040000 	.word	0x40040000

0800e768 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e77e:	4618      	mov	r0, r3
 800e780:	f7f6 f894 	bl	80048ac <HAL_HCD_Start>
 800e784:	4603      	mov	r3, r0
 800e786:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e788:	7bfb      	ldrb	r3, [r7, #15]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 f95e 	bl	800ea4c <USBH_Get_USB_Status>
 800e790:	4603      	mov	r3, r0
 800e792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e794:	7bbb      	ldrb	r3, [r7, #14]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b084      	sub	sp, #16
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7f6 f89c 	bl	80048f2 <HAL_HCD_Stop>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e7be:	7bfb      	ldrb	r3, [r7, #15]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f000 f943 	bl	800ea4c <USBH_Get_USB_Status>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7f6 f8e6 	bl	80049b8 <HAL_HCD_GetCurrentSpeed>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d00c      	beq.n	800e80c <USBH_LL_GetSpeed+0x38>
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d80d      	bhi.n	800e812 <USBH_LL_GetSpeed+0x3e>
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d002      	beq.n	800e800 <USBH_LL_GetSpeed+0x2c>
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d003      	beq.n	800e806 <USBH_LL_GetSpeed+0x32>
 800e7fe:	e008      	b.n	800e812 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e800:	2300      	movs	r3, #0
 800e802:	73fb      	strb	r3, [r7, #15]
    break;
 800e804:	e008      	b.n	800e818 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e806:	2301      	movs	r3, #1
 800e808:	73fb      	strb	r3, [r7, #15]
    break;
 800e80a:	e005      	b.n	800e818 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e80c:	2302      	movs	r3, #2
 800e80e:	73fb      	strb	r3, [r7, #15]
    break;
 800e810:	e002      	b.n	800e818 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e812:	2301      	movs	r3, #1
 800e814:	73fb      	strb	r3, [r7, #15]
    break;
 800e816:	bf00      	nop
  }
  return  speed;
 800e818:	7bfb      	ldrb	r3, [r7, #15]
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3710      	adds	r7, #16
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b084      	sub	sp, #16
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e82a:	2300      	movs	r3, #0
 800e82c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e82e:	2300      	movs	r3, #0
 800e830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e838:	4618      	mov	r0, r3
 800e83a:	f7f6 f877 	bl	800492c <HAL_HCD_ResetPort>
 800e83e:	4603      	mov	r3, r0
 800e840:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e842:	7bfb      	ldrb	r3, [r7, #15]
 800e844:	4618      	mov	r0, r3
 800e846:	f000 f901 	bl	800ea4c <USBH_Get_USB_Status>
 800e84a:	4603      	mov	r3, r0
 800e84c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e84e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	460b      	mov	r3, r1
 800e862:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e86a:	78fa      	ldrb	r2, [r7, #3]
 800e86c:	4611      	mov	r1, r2
 800e86e:	4618      	mov	r0, r3
 800e870:	f7f6 f87f 	bl	8004972 <HAL_HCD_HC_GetXferCount>
 800e874:	4603      	mov	r3, r0
}
 800e876:	4618      	mov	r0, r3
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e87e:	b590      	push	{r4, r7, lr}
 800e880:	b089      	sub	sp, #36	; 0x24
 800e882:	af04      	add	r7, sp, #16
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	4608      	mov	r0, r1
 800e888:	4611      	mov	r1, r2
 800e88a:	461a      	mov	r2, r3
 800e88c:	4603      	mov	r3, r0
 800e88e:	70fb      	strb	r3, [r7, #3]
 800e890:	460b      	mov	r3, r1
 800e892:	70bb      	strb	r3, [r7, #2]
 800e894:	4613      	mov	r3, r2
 800e896:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e898:	2300      	movs	r3, #0
 800e89a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e89c:	2300      	movs	r3, #0
 800e89e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e8a6:	787c      	ldrb	r4, [r7, #1]
 800e8a8:	78ba      	ldrb	r2, [r7, #2]
 800e8aa:	78f9      	ldrb	r1, [r7, #3]
 800e8ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e8ae:	9302      	str	r3, [sp, #8]
 800e8b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e8b4:	9301      	str	r3, [sp, #4]
 800e8b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	4623      	mov	r3, r4
 800e8be:	f7f5 fcc3 	bl	8004248 <HAL_HCD_HC_Init>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e8c6:	7bfb      	ldrb	r3, [r7, #15]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f000 f8bf 	bl	800ea4c <USBH_Get_USB_Status>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3714      	adds	r7, #20
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd90      	pop	{r4, r7, pc}

0800e8dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e8f6:	78fa      	ldrb	r2, [r7, #3]
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7f5 fd3c 	bl	8004378 <HAL_HCD_HC_Halt>
 800e900:	4603      	mov	r3, r0
 800e902:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e904:	7bfb      	ldrb	r3, [r7, #15]
 800e906:	4618      	mov	r0, r3
 800e908:	f000 f8a0 	bl	800ea4c <USBH_Get_USB_Status>
 800e90c:	4603      	mov	r3, r0
 800e90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e910:	7bbb      	ldrb	r3, [r7, #14]
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e91a:	b590      	push	{r4, r7, lr}
 800e91c:	b089      	sub	sp, #36	; 0x24
 800e91e:	af04      	add	r7, sp, #16
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	4608      	mov	r0, r1
 800e924:	4611      	mov	r1, r2
 800e926:	461a      	mov	r2, r3
 800e928:	4603      	mov	r3, r0
 800e92a:	70fb      	strb	r3, [r7, #3]
 800e92c:	460b      	mov	r3, r1
 800e92e:	70bb      	strb	r3, [r7, #2]
 800e930:	4613      	mov	r3, r2
 800e932:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e934:	2300      	movs	r3, #0
 800e936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e938:	2300      	movs	r3, #0
 800e93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e942:	787c      	ldrb	r4, [r7, #1]
 800e944:	78ba      	ldrb	r2, [r7, #2]
 800e946:	78f9      	ldrb	r1, [r7, #3]
 800e948:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e94c:	9303      	str	r3, [sp, #12]
 800e94e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e950:	9302      	str	r3, [sp, #8]
 800e952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e954:	9301      	str	r3, [sp, #4]
 800e956:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	4623      	mov	r3, r4
 800e95e:	f7f5 fd2f 	bl	80043c0 <HAL_HCD_HC_SubmitRequest>
 800e962:	4603      	mov	r3, r0
 800e964:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e966:	7bfb      	ldrb	r3, [r7, #15]
 800e968:	4618      	mov	r0, r3
 800e96a:	f000 f86f 	bl	800ea4c <USBH_Get_USB_Status>
 800e96e:	4603      	mov	r3, r0
 800e970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e972:	7bbb      	ldrb	r3, [r7, #14]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3714      	adds	r7, #20
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd90      	pop	{r4, r7, pc}

0800e97c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e98e:	78fa      	ldrb	r2, [r7, #3]
 800e990:	4611      	mov	r1, r2
 800e992:	4618      	mov	r0, r3
 800e994:	f7f5 ffd8 	bl	8004948 <HAL_HCD_HC_GetURBState>
 800e998:	4603      	mov	r3, r0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d103      	bne.n	800e9c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800e9b8:	78fb      	ldrb	r3, [r7, #3]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 f872 	bl	800eaa4 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e9c0:	20c8      	movs	r0, #200	; 0xc8
 800e9c2:	f7f4 fb29 	bl	8003018 <HAL_Delay>
  return USBH_OK;
 800e9c6:	2300      	movs	r3, #0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b085      	sub	sp, #20
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	460b      	mov	r3, r1
 800e9da:	70fb      	strb	r3, [r7, #3]
 800e9dc:	4613      	mov	r3, r2
 800e9de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e9e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e9e8:	78fa      	ldrb	r2, [r7, #3]
 800e9ea:	68f9      	ldr	r1, [r7, #12]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	4413      	add	r3, r2
 800e9f2:	00db      	lsls	r3, r3, #3
 800e9f4:	440b      	add	r3, r1
 800e9f6:	333b      	adds	r3, #59	; 0x3b
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00a      	beq.n	800ea14 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e9fe:	78fa      	ldrb	r2, [r7, #3]
 800ea00:	68f9      	ldr	r1, [r7, #12]
 800ea02:	4613      	mov	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4413      	add	r3, r2
 800ea08:	00db      	lsls	r3, r3, #3
 800ea0a:	440b      	add	r3, r1
 800ea0c:	3350      	adds	r3, #80	; 0x50
 800ea0e:	78ba      	ldrb	r2, [r7, #2]
 800ea10:	701a      	strb	r2, [r3, #0]
 800ea12:	e009      	b.n	800ea28 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ea14:	78fa      	ldrb	r2, [r7, #3]
 800ea16:	68f9      	ldr	r1, [r7, #12]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	4413      	add	r3, r2
 800ea1e:	00db      	lsls	r3, r3, #3
 800ea20:	440b      	add	r3, r1
 800ea22:	3351      	adds	r3, #81	; 0x51
 800ea24:	78ba      	ldrb	r2, [r7, #2]
 800ea26:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3714      	adds	r7, #20
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f7f4 faea 	bl	8003018 <HAL_Delay>
}
 800ea44:	bf00      	nop
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	4603      	mov	r3, r0
 800ea54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea56:	2300      	movs	r3, #0
 800ea58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea5a:	79fb      	ldrb	r3, [r7, #7]
 800ea5c:	2b03      	cmp	r3, #3
 800ea5e:	d817      	bhi.n	800ea90 <USBH_Get_USB_Status+0x44>
 800ea60:	a201      	add	r2, pc, #4	; (adr r2, 800ea68 <USBH_Get_USB_Status+0x1c>)
 800ea62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea66:	bf00      	nop
 800ea68:	0800ea79 	.word	0x0800ea79
 800ea6c:	0800ea7f 	.word	0x0800ea7f
 800ea70:	0800ea85 	.word	0x0800ea85
 800ea74:	0800ea8b 	.word	0x0800ea8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea7c:	e00b      	b.n	800ea96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ea7e:	2302      	movs	r3, #2
 800ea80:	73fb      	strb	r3, [r7, #15]
    break;
 800ea82:	e008      	b.n	800ea96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ea84:	2301      	movs	r3, #1
 800ea86:	73fb      	strb	r3, [r7, #15]
    break;
 800ea88:	e005      	b.n	800ea96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea8e:	e002      	b.n	800ea96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ea90:	2302      	movs	r3, #2
 800ea92:	73fb      	strb	r3, [r7, #15]
    break;
 800ea94:	bf00      	nop
  }
  return usb_status;
 800ea96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3714      	adds	r7, #20
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	4603      	mov	r3, r0
 800eaac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800eaae:	79fb      	ldrb	r3, [r7, #7]
 800eab0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800eab2:	79fb      	ldrb	r3, [r7, #7]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d102      	bne.n	800eabe <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800eab8:	2301      	movs	r3, #1
 800eaba:	73fb      	strb	r3, [r7, #15]
 800eabc:	e001      	b.n	800eac2 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800eabe:	2300      	movs	r3, #0
 800eac0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800eac2:	7bfb      	ldrb	r3, [r7, #15]
 800eac4:	461a      	mov	r2, r3
 800eac6:	2110      	movs	r1, #16
 800eac8:	4803      	ldr	r0, [pc, #12]	; (800ead8 <MX_DriverVbusHS+0x34>)
 800eaca:	f7f5 fb29 	bl	8004120 <HAL_GPIO_WritePin>
}
 800eace:	bf00      	nop
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	40020800 	.word	0x40020800

0800eadc <calloc>:
 800eadc:	4b02      	ldr	r3, [pc, #8]	; (800eae8 <calloc+0xc>)
 800eade:	460a      	mov	r2, r1
 800eae0:	4601      	mov	r1, r0
 800eae2:	6818      	ldr	r0, [r3, #0]
 800eae4:	f000 b852 	b.w	800eb8c <_calloc_r>
 800eae8:	20000074 	.word	0x20000074

0800eaec <__errno>:
 800eaec:	4b01      	ldr	r3, [pc, #4]	; (800eaf4 <__errno+0x8>)
 800eaee:	6818      	ldr	r0, [r3, #0]
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	20000074 	.word	0x20000074

0800eaf8 <__libc_init_array>:
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	4d0d      	ldr	r5, [pc, #52]	; (800eb30 <__libc_init_array+0x38>)
 800eafc:	4c0d      	ldr	r4, [pc, #52]	; (800eb34 <__libc_init_array+0x3c>)
 800eafe:	1b64      	subs	r4, r4, r5
 800eb00:	10a4      	asrs	r4, r4, #2
 800eb02:	2600      	movs	r6, #0
 800eb04:	42a6      	cmp	r6, r4
 800eb06:	d109      	bne.n	800eb1c <__libc_init_array+0x24>
 800eb08:	4d0b      	ldr	r5, [pc, #44]	; (800eb38 <__libc_init_array+0x40>)
 800eb0a:	4c0c      	ldr	r4, [pc, #48]	; (800eb3c <__libc_init_array+0x44>)
 800eb0c:	f000 fdf8 	bl	800f700 <_init>
 800eb10:	1b64      	subs	r4, r4, r5
 800eb12:	10a4      	asrs	r4, r4, #2
 800eb14:	2600      	movs	r6, #0
 800eb16:	42a6      	cmp	r6, r4
 800eb18:	d105      	bne.n	800eb26 <__libc_init_array+0x2e>
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}
 800eb1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb20:	4798      	blx	r3
 800eb22:	3601      	adds	r6, #1
 800eb24:	e7ee      	b.n	800eb04 <__libc_init_array+0xc>
 800eb26:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb2a:	4798      	blx	r3
 800eb2c:	3601      	adds	r6, #1
 800eb2e:	e7f2      	b.n	800eb16 <__libc_init_array+0x1e>
 800eb30:	0800f83c 	.word	0x0800f83c
 800eb34:	0800f83c 	.word	0x0800f83c
 800eb38:	0800f83c 	.word	0x0800f83c
 800eb3c:	0800f840 	.word	0x0800f840

0800eb40 <malloc>:
 800eb40:	4b02      	ldr	r3, [pc, #8]	; (800eb4c <malloc+0xc>)
 800eb42:	4601      	mov	r1, r0
 800eb44:	6818      	ldr	r0, [r3, #0]
 800eb46:	f000 b881 	b.w	800ec4c <_malloc_r>
 800eb4a:	bf00      	nop
 800eb4c:	20000074 	.word	0x20000074

0800eb50 <free>:
 800eb50:	4b02      	ldr	r3, [pc, #8]	; (800eb5c <free+0xc>)
 800eb52:	4601      	mov	r1, r0
 800eb54:	6818      	ldr	r0, [r3, #0]
 800eb56:	f000 b829 	b.w	800ebac <_free_r>
 800eb5a:	bf00      	nop
 800eb5c:	20000074 	.word	0x20000074

0800eb60 <memcpy>:
 800eb60:	440a      	add	r2, r1
 800eb62:	4291      	cmp	r1, r2
 800eb64:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb68:	d100      	bne.n	800eb6c <memcpy+0xc>
 800eb6a:	4770      	bx	lr
 800eb6c:	b510      	push	{r4, lr}
 800eb6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb76:	4291      	cmp	r1, r2
 800eb78:	d1f9      	bne.n	800eb6e <memcpy+0xe>
 800eb7a:	bd10      	pop	{r4, pc}

0800eb7c <memset>:
 800eb7c:	4402      	add	r2, r0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d100      	bne.n	800eb86 <memset+0xa>
 800eb84:	4770      	bx	lr
 800eb86:	f803 1b01 	strb.w	r1, [r3], #1
 800eb8a:	e7f9      	b.n	800eb80 <memset+0x4>

0800eb8c <_calloc_r>:
 800eb8c:	b513      	push	{r0, r1, r4, lr}
 800eb8e:	434a      	muls	r2, r1
 800eb90:	4611      	mov	r1, r2
 800eb92:	9201      	str	r2, [sp, #4]
 800eb94:	f000 f85a 	bl	800ec4c <_malloc_r>
 800eb98:	4604      	mov	r4, r0
 800eb9a:	b118      	cbz	r0, 800eba4 <_calloc_r+0x18>
 800eb9c:	9a01      	ldr	r2, [sp, #4]
 800eb9e:	2100      	movs	r1, #0
 800eba0:	f7ff ffec 	bl	800eb7c <memset>
 800eba4:	4620      	mov	r0, r4
 800eba6:	b002      	add	sp, #8
 800eba8:	bd10      	pop	{r4, pc}
	...

0800ebac <_free_r>:
 800ebac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebae:	2900      	cmp	r1, #0
 800ebb0:	d048      	beq.n	800ec44 <_free_r+0x98>
 800ebb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebb6:	9001      	str	r0, [sp, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f1a1 0404 	sub.w	r4, r1, #4
 800ebbe:	bfb8      	it	lt
 800ebc0:	18e4      	addlt	r4, r4, r3
 800ebc2:	f000 fa57 	bl	800f074 <__malloc_lock>
 800ebc6:	4a20      	ldr	r2, [pc, #128]	; (800ec48 <_free_r+0x9c>)
 800ebc8:	9801      	ldr	r0, [sp, #4]
 800ebca:	6813      	ldr	r3, [r2, #0]
 800ebcc:	4615      	mov	r5, r2
 800ebce:	b933      	cbnz	r3, 800ebde <_free_r+0x32>
 800ebd0:	6063      	str	r3, [r4, #4]
 800ebd2:	6014      	str	r4, [r2, #0]
 800ebd4:	b003      	add	sp, #12
 800ebd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebda:	f000 ba51 	b.w	800f080 <__malloc_unlock>
 800ebde:	42a3      	cmp	r3, r4
 800ebe0:	d90b      	bls.n	800ebfa <_free_r+0x4e>
 800ebe2:	6821      	ldr	r1, [r4, #0]
 800ebe4:	1862      	adds	r2, r4, r1
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	bf04      	itt	eq
 800ebea:	681a      	ldreq	r2, [r3, #0]
 800ebec:	685b      	ldreq	r3, [r3, #4]
 800ebee:	6063      	str	r3, [r4, #4]
 800ebf0:	bf04      	itt	eq
 800ebf2:	1852      	addeq	r2, r2, r1
 800ebf4:	6022      	streq	r2, [r4, #0]
 800ebf6:	602c      	str	r4, [r5, #0]
 800ebf8:	e7ec      	b.n	800ebd4 <_free_r+0x28>
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	b10b      	cbz	r3, 800ec04 <_free_r+0x58>
 800ec00:	42a3      	cmp	r3, r4
 800ec02:	d9fa      	bls.n	800ebfa <_free_r+0x4e>
 800ec04:	6811      	ldr	r1, [r2, #0]
 800ec06:	1855      	adds	r5, r2, r1
 800ec08:	42a5      	cmp	r5, r4
 800ec0a:	d10b      	bne.n	800ec24 <_free_r+0x78>
 800ec0c:	6824      	ldr	r4, [r4, #0]
 800ec0e:	4421      	add	r1, r4
 800ec10:	1854      	adds	r4, r2, r1
 800ec12:	42a3      	cmp	r3, r4
 800ec14:	6011      	str	r1, [r2, #0]
 800ec16:	d1dd      	bne.n	800ebd4 <_free_r+0x28>
 800ec18:	681c      	ldr	r4, [r3, #0]
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	6053      	str	r3, [r2, #4]
 800ec1e:	4421      	add	r1, r4
 800ec20:	6011      	str	r1, [r2, #0]
 800ec22:	e7d7      	b.n	800ebd4 <_free_r+0x28>
 800ec24:	d902      	bls.n	800ec2c <_free_r+0x80>
 800ec26:	230c      	movs	r3, #12
 800ec28:	6003      	str	r3, [r0, #0]
 800ec2a:	e7d3      	b.n	800ebd4 <_free_r+0x28>
 800ec2c:	6825      	ldr	r5, [r4, #0]
 800ec2e:	1961      	adds	r1, r4, r5
 800ec30:	428b      	cmp	r3, r1
 800ec32:	bf04      	itt	eq
 800ec34:	6819      	ldreq	r1, [r3, #0]
 800ec36:	685b      	ldreq	r3, [r3, #4]
 800ec38:	6063      	str	r3, [r4, #4]
 800ec3a:	bf04      	itt	eq
 800ec3c:	1949      	addeq	r1, r1, r5
 800ec3e:	6021      	streq	r1, [r4, #0]
 800ec40:	6054      	str	r4, [r2, #4]
 800ec42:	e7c7      	b.n	800ebd4 <_free_r+0x28>
 800ec44:	b003      	add	sp, #12
 800ec46:	bd30      	pop	{r4, r5, pc}
 800ec48:	2000851c 	.word	0x2000851c

0800ec4c <_malloc_r>:
 800ec4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec4e:	1ccd      	adds	r5, r1, #3
 800ec50:	f025 0503 	bic.w	r5, r5, #3
 800ec54:	3508      	adds	r5, #8
 800ec56:	2d0c      	cmp	r5, #12
 800ec58:	bf38      	it	cc
 800ec5a:	250c      	movcc	r5, #12
 800ec5c:	2d00      	cmp	r5, #0
 800ec5e:	4606      	mov	r6, r0
 800ec60:	db01      	blt.n	800ec66 <_malloc_r+0x1a>
 800ec62:	42a9      	cmp	r1, r5
 800ec64:	d903      	bls.n	800ec6e <_malloc_r+0x22>
 800ec66:	230c      	movs	r3, #12
 800ec68:	6033      	str	r3, [r6, #0]
 800ec6a:	2000      	movs	r0, #0
 800ec6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec6e:	f000 fa01 	bl	800f074 <__malloc_lock>
 800ec72:	4921      	ldr	r1, [pc, #132]	; (800ecf8 <_malloc_r+0xac>)
 800ec74:	680a      	ldr	r2, [r1, #0]
 800ec76:	4614      	mov	r4, r2
 800ec78:	b99c      	cbnz	r4, 800eca2 <_malloc_r+0x56>
 800ec7a:	4f20      	ldr	r7, [pc, #128]	; (800ecfc <_malloc_r+0xb0>)
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	b923      	cbnz	r3, 800ec8a <_malloc_r+0x3e>
 800ec80:	4621      	mov	r1, r4
 800ec82:	4630      	mov	r0, r6
 800ec84:	f000 f9c6 	bl	800f014 <_sbrk_r>
 800ec88:	6038      	str	r0, [r7, #0]
 800ec8a:	4629      	mov	r1, r5
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	f000 f9c1 	bl	800f014 <_sbrk_r>
 800ec92:	1c43      	adds	r3, r0, #1
 800ec94:	d123      	bne.n	800ecde <_malloc_r+0x92>
 800ec96:	230c      	movs	r3, #12
 800ec98:	6033      	str	r3, [r6, #0]
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f000 f9f0 	bl	800f080 <__malloc_unlock>
 800eca0:	e7e3      	b.n	800ec6a <_malloc_r+0x1e>
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	1b5b      	subs	r3, r3, r5
 800eca6:	d417      	bmi.n	800ecd8 <_malloc_r+0x8c>
 800eca8:	2b0b      	cmp	r3, #11
 800ecaa:	d903      	bls.n	800ecb4 <_malloc_r+0x68>
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	441c      	add	r4, r3
 800ecb0:	6025      	str	r5, [r4, #0]
 800ecb2:	e004      	b.n	800ecbe <_malloc_r+0x72>
 800ecb4:	6863      	ldr	r3, [r4, #4]
 800ecb6:	42a2      	cmp	r2, r4
 800ecb8:	bf0c      	ite	eq
 800ecba:	600b      	streq	r3, [r1, #0]
 800ecbc:	6053      	strne	r3, [r2, #4]
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	f000 f9de 	bl	800f080 <__malloc_unlock>
 800ecc4:	f104 000b 	add.w	r0, r4, #11
 800ecc8:	1d23      	adds	r3, r4, #4
 800ecca:	f020 0007 	bic.w	r0, r0, #7
 800ecce:	1ac2      	subs	r2, r0, r3
 800ecd0:	d0cc      	beq.n	800ec6c <_malloc_r+0x20>
 800ecd2:	1a1b      	subs	r3, r3, r0
 800ecd4:	50a3      	str	r3, [r4, r2]
 800ecd6:	e7c9      	b.n	800ec6c <_malloc_r+0x20>
 800ecd8:	4622      	mov	r2, r4
 800ecda:	6864      	ldr	r4, [r4, #4]
 800ecdc:	e7cc      	b.n	800ec78 <_malloc_r+0x2c>
 800ecde:	1cc4      	adds	r4, r0, #3
 800ece0:	f024 0403 	bic.w	r4, r4, #3
 800ece4:	42a0      	cmp	r0, r4
 800ece6:	d0e3      	beq.n	800ecb0 <_malloc_r+0x64>
 800ece8:	1a21      	subs	r1, r4, r0
 800ecea:	4630      	mov	r0, r6
 800ecec:	f000 f992 	bl	800f014 <_sbrk_r>
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	d1dd      	bne.n	800ecb0 <_malloc_r+0x64>
 800ecf4:	e7cf      	b.n	800ec96 <_malloc_r+0x4a>
 800ecf6:	bf00      	nop
 800ecf8:	2000851c 	.word	0x2000851c
 800ecfc:	20008520 	.word	0x20008520

0800ed00 <swapfunc>:
 800ed00:	2b02      	cmp	r3, #2
 800ed02:	b510      	push	{r4, lr}
 800ed04:	d00a      	beq.n	800ed1c <swapfunc+0x1c>
 800ed06:	0892      	lsrs	r2, r2, #2
 800ed08:	3a01      	subs	r2, #1
 800ed0a:	6803      	ldr	r3, [r0, #0]
 800ed0c:	680c      	ldr	r4, [r1, #0]
 800ed0e:	f840 4b04 	str.w	r4, [r0], #4
 800ed12:	2a00      	cmp	r2, #0
 800ed14:	f841 3b04 	str.w	r3, [r1], #4
 800ed18:	dcf6      	bgt.n	800ed08 <swapfunc+0x8>
 800ed1a:	bd10      	pop	{r4, pc}
 800ed1c:	4402      	add	r2, r0
 800ed1e:	780c      	ldrb	r4, [r1, #0]
 800ed20:	7803      	ldrb	r3, [r0, #0]
 800ed22:	f800 4b01 	strb.w	r4, [r0], #1
 800ed26:	f801 3b01 	strb.w	r3, [r1], #1
 800ed2a:	1a13      	subs	r3, r2, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	dcf6      	bgt.n	800ed1e <swapfunc+0x1e>
 800ed30:	e7f3      	b.n	800ed1a <swapfunc+0x1a>

0800ed32 <med3.isra.0>:
 800ed32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed34:	460f      	mov	r7, r1
 800ed36:	4614      	mov	r4, r2
 800ed38:	4606      	mov	r6, r0
 800ed3a:	461d      	mov	r5, r3
 800ed3c:	4798      	blx	r3
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	4621      	mov	r1, r4
 800ed42:	4638      	mov	r0, r7
 800ed44:	da0c      	bge.n	800ed60 <med3.isra.0+0x2e>
 800ed46:	47a8      	blx	r5
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	da02      	bge.n	800ed52 <med3.isra.0+0x20>
 800ed4c:	463c      	mov	r4, r7
 800ed4e:	4620      	mov	r0, r4
 800ed50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed52:	4621      	mov	r1, r4
 800ed54:	4630      	mov	r0, r6
 800ed56:	47a8      	blx	r5
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	dbf8      	blt.n	800ed4e <med3.isra.0+0x1c>
 800ed5c:	4634      	mov	r4, r6
 800ed5e:	e7f6      	b.n	800ed4e <med3.isra.0+0x1c>
 800ed60:	47a8      	blx	r5
 800ed62:	2800      	cmp	r0, #0
 800ed64:	dcf2      	bgt.n	800ed4c <med3.isra.0+0x1a>
 800ed66:	4621      	mov	r1, r4
 800ed68:	4630      	mov	r0, r6
 800ed6a:	47a8      	blx	r5
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	daee      	bge.n	800ed4e <med3.isra.0+0x1c>
 800ed70:	e7f4      	b.n	800ed5c <med3.isra.0+0x2a>

0800ed72 <qsort>:
 800ed72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed76:	469a      	mov	sl, r3
 800ed78:	ea40 0302 	orr.w	r3, r0, r2
 800ed7c:	079b      	lsls	r3, r3, #30
 800ed7e:	b097      	sub	sp, #92	; 0x5c
 800ed80:	4606      	mov	r6, r0
 800ed82:	4614      	mov	r4, r2
 800ed84:	d11a      	bne.n	800edbc <qsort+0x4a>
 800ed86:	f1b2 0804 	subs.w	r8, r2, #4
 800ed8a:	bf18      	it	ne
 800ed8c:	f04f 0801 	movne.w	r8, #1
 800ed90:	2300      	movs	r3, #0
 800ed92:	9302      	str	r3, [sp, #8]
 800ed94:	1933      	adds	r3, r6, r4
 800ed96:	fb04 f701 	mul.w	r7, r4, r1
 800ed9a:	9301      	str	r3, [sp, #4]
 800ed9c:	2906      	cmp	r1, #6
 800ed9e:	eb06 0307 	add.w	r3, r6, r7
 800eda2:	9303      	str	r3, [sp, #12]
 800eda4:	d82a      	bhi.n	800edfc <qsort+0x8a>
 800eda6:	9b01      	ldr	r3, [sp, #4]
 800eda8:	9a03      	ldr	r2, [sp, #12]
 800edaa:	4293      	cmp	r3, r2
 800edac:	d310      	bcc.n	800edd0 <qsort+0x5e>
 800edae:	9b02      	ldr	r3, [sp, #8]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f040 811f 	bne.w	800eff4 <qsort+0x282>
 800edb6:	b017      	add	sp, #92	; 0x5c
 800edb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edbc:	f04f 0802 	mov.w	r8, #2
 800edc0:	e7e6      	b.n	800ed90 <qsort+0x1e>
 800edc2:	4643      	mov	r3, r8
 800edc4:	4622      	mov	r2, r4
 800edc6:	4639      	mov	r1, r7
 800edc8:	4628      	mov	r0, r5
 800edca:	f7ff ff99 	bl	800ed00 <swapfunc>
 800edce:	e00e      	b.n	800edee <qsort+0x7c>
 800edd0:	9d01      	ldr	r5, [sp, #4]
 800edd2:	e00d      	b.n	800edf0 <qsort+0x7e>
 800edd4:	1b2f      	subs	r7, r5, r4
 800edd6:	4629      	mov	r1, r5
 800edd8:	4638      	mov	r0, r7
 800edda:	47d0      	blx	sl
 800eddc:	2800      	cmp	r0, #0
 800edde:	dd09      	ble.n	800edf4 <qsort+0x82>
 800ede0:	f1b8 0f00 	cmp.w	r8, #0
 800ede4:	d1ed      	bne.n	800edc2 <qsort+0x50>
 800ede6:	682b      	ldr	r3, [r5, #0]
 800ede8:	683a      	ldr	r2, [r7, #0]
 800edea:	602a      	str	r2, [r5, #0]
 800edec:	603b      	str	r3, [r7, #0]
 800edee:	463d      	mov	r5, r7
 800edf0:	42ae      	cmp	r6, r5
 800edf2:	d3ef      	bcc.n	800edd4 <qsort+0x62>
 800edf4:	9b01      	ldr	r3, [sp, #4]
 800edf6:	4423      	add	r3, r4
 800edf8:	9301      	str	r3, [sp, #4]
 800edfa:	e7d4      	b.n	800eda6 <qsort+0x34>
 800edfc:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800ee00:	1b3f      	subs	r7, r7, r4
 800ee02:	2907      	cmp	r1, #7
 800ee04:	fb04 6909 	mla	r9, r4, r9, r6
 800ee08:	4437      	add	r7, r6
 800ee0a:	d022      	beq.n	800ee52 <qsort+0xe0>
 800ee0c:	2928      	cmp	r1, #40	; 0x28
 800ee0e:	d945      	bls.n	800ee9c <qsort+0x12a>
 800ee10:	08c9      	lsrs	r1, r1, #3
 800ee12:	fb04 f501 	mul.w	r5, r4, r1
 800ee16:	4653      	mov	r3, sl
 800ee18:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800ee1c:	1971      	adds	r1, r6, r5
 800ee1e:	4630      	mov	r0, r6
 800ee20:	f7ff ff87 	bl	800ed32 <med3.isra.0>
 800ee24:	4649      	mov	r1, r9
 800ee26:	eb09 0205 	add.w	r2, r9, r5
 800ee2a:	4653      	mov	r3, sl
 800ee2c:	4683      	mov	fp, r0
 800ee2e:	1b48      	subs	r0, r1, r5
 800ee30:	f7ff ff7f 	bl	800ed32 <med3.isra.0>
 800ee34:	463a      	mov	r2, r7
 800ee36:	4681      	mov	r9, r0
 800ee38:	4653      	mov	r3, sl
 800ee3a:	1b79      	subs	r1, r7, r5
 800ee3c:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800ee40:	f7ff ff77 	bl	800ed32 <med3.isra.0>
 800ee44:	4602      	mov	r2, r0
 800ee46:	4649      	mov	r1, r9
 800ee48:	4653      	mov	r3, sl
 800ee4a:	4658      	mov	r0, fp
 800ee4c:	f7ff ff71 	bl	800ed32 <med3.isra.0>
 800ee50:	4681      	mov	r9, r0
 800ee52:	f1b8 0f00 	cmp.w	r8, #0
 800ee56:	d124      	bne.n	800eea2 <qsort+0x130>
 800ee58:	6833      	ldr	r3, [r6, #0]
 800ee5a:	f8d9 2000 	ldr.w	r2, [r9]
 800ee5e:	6032      	str	r2, [r6, #0]
 800ee60:	f8c9 3000 	str.w	r3, [r9]
 800ee64:	eb06 0b04 	add.w	fp, r6, r4
 800ee68:	46b9      	mov	r9, r7
 800ee6a:	465d      	mov	r5, fp
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	45bb      	cmp	fp, r7
 800ee70:	d835      	bhi.n	800eede <qsort+0x16c>
 800ee72:	4631      	mov	r1, r6
 800ee74:	4658      	mov	r0, fp
 800ee76:	9304      	str	r3, [sp, #16]
 800ee78:	47d0      	blx	sl
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	9b04      	ldr	r3, [sp, #16]
 800ee7e:	dc3e      	bgt.n	800eefe <qsort+0x18c>
 800ee80:	d10a      	bne.n	800ee98 <qsort+0x126>
 800ee82:	f1b8 0f00 	cmp.w	r8, #0
 800ee86:	d113      	bne.n	800eeb0 <qsort+0x13e>
 800ee88:	682b      	ldr	r3, [r5, #0]
 800ee8a:	f8db 2000 	ldr.w	r2, [fp]
 800ee8e:	602a      	str	r2, [r5, #0]
 800ee90:	f8cb 3000 	str.w	r3, [fp]
 800ee94:	4425      	add	r5, r4
 800ee96:	2301      	movs	r3, #1
 800ee98:	44a3      	add	fp, r4
 800ee9a:	e7e8      	b.n	800ee6e <qsort+0xfc>
 800ee9c:	463a      	mov	r2, r7
 800ee9e:	46b3      	mov	fp, r6
 800eea0:	e7d1      	b.n	800ee46 <qsort+0xd4>
 800eea2:	4643      	mov	r3, r8
 800eea4:	4622      	mov	r2, r4
 800eea6:	4649      	mov	r1, r9
 800eea8:	4630      	mov	r0, r6
 800eeaa:	f7ff ff29 	bl	800ed00 <swapfunc>
 800eeae:	e7d9      	b.n	800ee64 <qsort+0xf2>
 800eeb0:	4643      	mov	r3, r8
 800eeb2:	4622      	mov	r2, r4
 800eeb4:	4659      	mov	r1, fp
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	f7ff ff22 	bl	800ed00 <swapfunc>
 800eebc:	e7ea      	b.n	800ee94 <qsort+0x122>
 800eebe:	d10b      	bne.n	800eed8 <qsort+0x166>
 800eec0:	f1b8 0f00 	cmp.w	r8, #0
 800eec4:	d114      	bne.n	800eef0 <qsort+0x17e>
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	f8d9 2000 	ldr.w	r2, [r9]
 800eecc:	603a      	str	r2, [r7, #0]
 800eece:	f8c9 3000 	str.w	r3, [r9]
 800eed2:	eba9 0904 	sub.w	r9, r9, r4
 800eed6:	2301      	movs	r3, #1
 800eed8:	9f04      	ldr	r7, [sp, #16]
 800eeda:	45bb      	cmp	fp, r7
 800eedc:	d90f      	bls.n	800eefe <qsort+0x18c>
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d143      	bne.n	800ef6a <qsort+0x1f8>
 800eee2:	9b01      	ldr	r3, [sp, #4]
 800eee4:	9a03      	ldr	r2, [sp, #12]
 800eee6:	4293      	cmp	r3, r2
 800eee8:	f4bf af61 	bcs.w	800edae <qsort+0x3c>
 800eeec:	9d01      	ldr	r5, [sp, #4]
 800eeee:	e036      	b.n	800ef5e <qsort+0x1ec>
 800eef0:	4643      	mov	r3, r8
 800eef2:	4622      	mov	r2, r4
 800eef4:	4649      	mov	r1, r9
 800eef6:	4638      	mov	r0, r7
 800eef8:	f7ff ff02 	bl	800ed00 <swapfunc>
 800eefc:	e7e9      	b.n	800eed2 <qsort+0x160>
 800eefe:	4631      	mov	r1, r6
 800ef00:	4638      	mov	r0, r7
 800ef02:	9305      	str	r3, [sp, #20]
 800ef04:	47d0      	blx	sl
 800ef06:	1b3b      	subs	r3, r7, r4
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	9304      	str	r3, [sp, #16]
 800ef0c:	9b05      	ldr	r3, [sp, #20]
 800ef0e:	dad6      	bge.n	800eebe <qsort+0x14c>
 800ef10:	f1b8 0f00 	cmp.w	r8, #0
 800ef14:	d006      	beq.n	800ef24 <qsort+0x1b2>
 800ef16:	4643      	mov	r3, r8
 800ef18:	4622      	mov	r2, r4
 800ef1a:	4639      	mov	r1, r7
 800ef1c:	4658      	mov	r0, fp
 800ef1e:	f7ff feef 	bl	800ed00 <swapfunc>
 800ef22:	e005      	b.n	800ef30 <qsort+0x1be>
 800ef24:	f8db 3000 	ldr.w	r3, [fp]
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	f8cb 2000 	str.w	r2, [fp]
 800ef2e:	603b      	str	r3, [r7, #0]
 800ef30:	9f04      	ldr	r7, [sp, #16]
 800ef32:	e7b0      	b.n	800ee96 <qsort+0x124>
 800ef34:	4643      	mov	r3, r8
 800ef36:	4622      	mov	r2, r4
 800ef38:	4639      	mov	r1, r7
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	f7ff fee0 	bl	800ed00 <swapfunc>
 800ef40:	e00c      	b.n	800ef5c <qsort+0x1ea>
 800ef42:	1b2f      	subs	r7, r5, r4
 800ef44:	4629      	mov	r1, r5
 800ef46:	4638      	mov	r0, r7
 800ef48:	47d0      	blx	sl
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	dd09      	ble.n	800ef62 <qsort+0x1f0>
 800ef4e:	f1b8 0f00 	cmp.w	r8, #0
 800ef52:	d1ef      	bne.n	800ef34 <qsort+0x1c2>
 800ef54:	682b      	ldr	r3, [r5, #0]
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	602a      	str	r2, [r5, #0]
 800ef5a:	603b      	str	r3, [r7, #0]
 800ef5c:	463d      	mov	r5, r7
 800ef5e:	42ae      	cmp	r6, r5
 800ef60:	d3ef      	bcc.n	800ef42 <qsort+0x1d0>
 800ef62:	9b01      	ldr	r3, [sp, #4]
 800ef64:	4423      	add	r3, r4
 800ef66:	9301      	str	r3, [sp, #4]
 800ef68:	e7bb      	b.n	800eee2 <qsort+0x170>
 800ef6a:	ebab 0305 	sub.w	r3, fp, r5
 800ef6e:	1baa      	subs	r2, r5, r6
 800ef70:	429a      	cmp	r2, r3
 800ef72:	bfa8      	it	ge
 800ef74:	461a      	movge	r2, r3
 800ef76:	9301      	str	r3, [sp, #4]
 800ef78:	b12a      	cbz	r2, 800ef86 <qsort+0x214>
 800ef7a:	4643      	mov	r3, r8
 800ef7c:	ebab 0102 	sub.w	r1, fp, r2
 800ef80:	4630      	mov	r0, r6
 800ef82:	f7ff febd 	bl	800ed00 <swapfunc>
 800ef86:	9b03      	ldr	r3, [sp, #12]
 800ef88:	eba3 0209 	sub.w	r2, r3, r9
 800ef8c:	eba9 0707 	sub.w	r7, r9, r7
 800ef90:	1b12      	subs	r2, r2, r4
 800ef92:	42ba      	cmp	r2, r7
 800ef94:	bf28      	it	cs
 800ef96:	463a      	movcs	r2, r7
 800ef98:	b12a      	cbz	r2, 800efa6 <qsort+0x234>
 800ef9a:	9903      	ldr	r1, [sp, #12]
 800ef9c:	4643      	mov	r3, r8
 800ef9e:	1a89      	subs	r1, r1, r2
 800efa0:	4658      	mov	r0, fp
 800efa2:	f7ff fead 	bl	800ed00 <swapfunc>
 800efa6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800efaa:	9b03      	ldr	r3, [sp, #12]
 800efac:	454f      	cmp	r7, r9
 800efae:	eba3 0007 	sub.w	r0, r3, r7
 800efb2:	d904      	bls.n	800efbe <qsort+0x24c>
 800efb4:	4633      	mov	r3, r6
 800efb6:	46b9      	mov	r9, r7
 800efb8:	9f01      	ldr	r7, [sp, #4]
 800efba:	4606      	mov	r6, r0
 800efbc:	4618      	mov	r0, r3
 800efbe:	42a7      	cmp	r7, r4
 800efc0:	d921      	bls.n	800f006 <qsort+0x294>
 800efc2:	fbb7 f1f4 	udiv	r1, r7, r4
 800efc6:	9b02      	ldr	r3, [sp, #8]
 800efc8:	2b07      	cmp	r3, #7
 800efca:	d80d      	bhi.n	800efe8 <qsort+0x276>
 800efcc:	fbb9 f7f4 	udiv	r7, r9, r4
 800efd0:	aa16      	add	r2, sp, #88	; 0x58
 800efd2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800efd6:	f843 6c40 	str.w	r6, [r3, #-64]
 800efda:	f843 7c3c 	str.w	r7, [r3, #-60]
 800efde:	9b02      	ldr	r3, [sp, #8]
 800efe0:	3301      	adds	r3, #1
 800efe2:	9302      	str	r3, [sp, #8]
 800efe4:	4606      	mov	r6, r0
 800efe6:	e6d5      	b.n	800ed94 <qsort+0x22>
 800efe8:	4653      	mov	r3, sl
 800efea:	4622      	mov	r2, r4
 800efec:	f7ff fec1 	bl	800ed72 <qsort>
 800eff0:	45a1      	cmp	r9, r4
 800eff2:	d80b      	bhi.n	800f00c <qsort+0x29a>
 800eff4:	9b02      	ldr	r3, [sp, #8]
 800eff6:	aa16      	add	r2, sp, #88	; 0x58
 800eff8:	3b01      	subs	r3, #1
 800effa:	9302      	str	r3, [sp, #8]
 800effc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f000:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800f004:	e7ee      	b.n	800efe4 <qsort+0x272>
 800f006:	45a1      	cmp	r9, r4
 800f008:	f67f aed1 	bls.w	800edae <qsort+0x3c>
 800f00c:	fbb9 f1f4 	udiv	r1, r9, r4
 800f010:	4630      	mov	r0, r6
 800f012:	e7e7      	b.n	800efe4 <qsort+0x272>

0800f014 <_sbrk_r>:
 800f014:	b538      	push	{r3, r4, r5, lr}
 800f016:	4d06      	ldr	r5, [pc, #24]	; (800f030 <_sbrk_r+0x1c>)
 800f018:	2300      	movs	r3, #0
 800f01a:	4604      	mov	r4, r0
 800f01c:	4608      	mov	r0, r1
 800f01e:	602b      	str	r3, [r5, #0]
 800f020:	f7f3 f9e4 	bl	80023ec <_sbrk>
 800f024:	1c43      	adds	r3, r0, #1
 800f026:	d102      	bne.n	800f02e <_sbrk_r+0x1a>
 800f028:	682b      	ldr	r3, [r5, #0]
 800f02a:	b103      	cbz	r3, 800f02e <_sbrk_r+0x1a>
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	bd38      	pop	{r3, r4, r5, pc}
 800f030:	20008fdc 	.word	0x20008fdc

0800f034 <siprintf>:
 800f034:	b40e      	push	{r1, r2, r3}
 800f036:	b500      	push	{lr}
 800f038:	b09c      	sub	sp, #112	; 0x70
 800f03a:	ab1d      	add	r3, sp, #116	; 0x74
 800f03c:	9002      	str	r0, [sp, #8]
 800f03e:	9006      	str	r0, [sp, #24]
 800f040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f044:	4809      	ldr	r0, [pc, #36]	; (800f06c <siprintf+0x38>)
 800f046:	9107      	str	r1, [sp, #28]
 800f048:	9104      	str	r1, [sp, #16]
 800f04a:	4909      	ldr	r1, [pc, #36]	; (800f070 <siprintf+0x3c>)
 800f04c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f050:	9105      	str	r1, [sp, #20]
 800f052:	6800      	ldr	r0, [r0, #0]
 800f054:	9301      	str	r3, [sp, #4]
 800f056:	a902      	add	r1, sp, #8
 800f058:	f000 f874 	bl	800f144 <_svfiprintf_r>
 800f05c:	9b02      	ldr	r3, [sp, #8]
 800f05e:	2200      	movs	r2, #0
 800f060:	701a      	strb	r2, [r3, #0]
 800f062:	b01c      	add	sp, #112	; 0x70
 800f064:	f85d eb04 	ldr.w	lr, [sp], #4
 800f068:	b003      	add	sp, #12
 800f06a:	4770      	bx	lr
 800f06c:	20000074 	.word	0x20000074
 800f070:	ffff0208 	.word	0xffff0208

0800f074 <__malloc_lock>:
 800f074:	4801      	ldr	r0, [pc, #4]	; (800f07c <__malloc_lock+0x8>)
 800f076:	f000 baf9 	b.w	800f66c <__retarget_lock_acquire_recursive>
 800f07a:	bf00      	nop
 800f07c:	20008fe4 	.word	0x20008fe4

0800f080 <__malloc_unlock>:
 800f080:	4801      	ldr	r0, [pc, #4]	; (800f088 <__malloc_unlock+0x8>)
 800f082:	f000 baf4 	b.w	800f66e <__retarget_lock_release_recursive>
 800f086:	bf00      	nop
 800f088:	20008fe4 	.word	0x20008fe4

0800f08c <__ssputs_r>:
 800f08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f090:	688e      	ldr	r6, [r1, #8]
 800f092:	429e      	cmp	r6, r3
 800f094:	4682      	mov	sl, r0
 800f096:	460c      	mov	r4, r1
 800f098:	4690      	mov	r8, r2
 800f09a:	461f      	mov	r7, r3
 800f09c:	d838      	bhi.n	800f110 <__ssputs_r+0x84>
 800f09e:	898a      	ldrh	r2, [r1, #12]
 800f0a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0a4:	d032      	beq.n	800f10c <__ssputs_r+0x80>
 800f0a6:	6825      	ldr	r5, [r4, #0]
 800f0a8:	6909      	ldr	r1, [r1, #16]
 800f0aa:	eba5 0901 	sub.w	r9, r5, r1
 800f0ae:	6965      	ldr	r5, [r4, #20]
 800f0b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	444b      	add	r3, r9
 800f0bc:	106d      	asrs	r5, r5, #1
 800f0be:	429d      	cmp	r5, r3
 800f0c0:	bf38      	it	cc
 800f0c2:	461d      	movcc	r5, r3
 800f0c4:	0553      	lsls	r3, r2, #21
 800f0c6:	d531      	bpl.n	800f12c <__ssputs_r+0xa0>
 800f0c8:	4629      	mov	r1, r5
 800f0ca:	f7ff fdbf 	bl	800ec4c <_malloc_r>
 800f0ce:	4606      	mov	r6, r0
 800f0d0:	b950      	cbnz	r0, 800f0e8 <__ssputs_r+0x5c>
 800f0d2:	230c      	movs	r3, #12
 800f0d4:	f8ca 3000 	str.w	r3, [sl]
 800f0d8:	89a3      	ldrh	r3, [r4, #12]
 800f0da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0de:	81a3      	strh	r3, [r4, #12]
 800f0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0e8:	6921      	ldr	r1, [r4, #16]
 800f0ea:	464a      	mov	r2, r9
 800f0ec:	f7ff fd38 	bl	800eb60 <memcpy>
 800f0f0:	89a3      	ldrh	r3, [r4, #12]
 800f0f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0fa:	81a3      	strh	r3, [r4, #12]
 800f0fc:	6126      	str	r6, [r4, #16]
 800f0fe:	6165      	str	r5, [r4, #20]
 800f100:	444e      	add	r6, r9
 800f102:	eba5 0509 	sub.w	r5, r5, r9
 800f106:	6026      	str	r6, [r4, #0]
 800f108:	60a5      	str	r5, [r4, #8]
 800f10a:	463e      	mov	r6, r7
 800f10c:	42be      	cmp	r6, r7
 800f10e:	d900      	bls.n	800f112 <__ssputs_r+0x86>
 800f110:	463e      	mov	r6, r7
 800f112:	4632      	mov	r2, r6
 800f114:	6820      	ldr	r0, [r4, #0]
 800f116:	4641      	mov	r1, r8
 800f118:	f000 faaa 	bl	800f670 <memmove>
 800f11c:	68a3      	ldr	r3, [r4, #8]
 800f11e:	6822      	ldr	r2, [r4, #0]
 800f120:	1b9b      	subs	r3, r3, r6
 800f122:	4432      	add	r2, r6
 800f124:	60a3      	str	r3, [r4, #8]
 800f126:	6022      	str	r2, [r4, #0]
 800f128:	2000      	movs	r0, #0
 800f12a:	e7db      	b.n	800f0e4 <__ssputs_r+0x58>
 800f12c:	462a      	mov	r2, r5
 800f12e:	f000 fab9 	bl	800f6a4 <_realloc_r>
 800f132:	4606      	mov	r6, r0
 800f134:	2800      	cmp	r0, #0
 800f136:	d1e1      	bne.n	800f0fc <__ssputs_r+0x70>
 800f138:	6921      	ldr	r1, [r4, #16]
 800f13a:	4650      	mov	r0, sl
 800f13c:	f7ff fd36 	bl	800ebac <_free_r>
 800f140:	e7c7      	b.n	800f0d2 <__ssputs_r+0x46>
	...

0800f144 <_svfiprintf_r>:
 800f144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f148:	4698      	mov	r8, r3
 800f14a:	898b      	ldrh	r3, [r1, #12]
 800f14c:	061b      	lsls	r3, r3, #24
 800f14e:	b09d      	sub	sp, #116	; 0x74
 800f150:	4607      	mov	r7, r0
 800f152:	460d      	mov	r5, r1
 800f154:	4614      	mov	r4, r2
 800f156:	d50e      	bpl.n	800f176 <_svfiprintf_r+0x32>
 800f158:	690b      	ldr	r3, [r1, #16]
 800f15a:	b963      	cbnz	r3, 800f176 <_svfiprintf_r+0x32>
 800f15c:	2140      	movs	r1, #64	; 0x40
 800f15e:	f7ff fd75 	bl	800ec4c <_malloc_r>
 800f162:	6028      	str	r0, [r5, #0]
 800f164:	6128      	str	r0, [r5, #16]
 800f166:	b920      	cbnz	r0, 800f172 <_svfiprintf_r+0x2e>
 800f168:	230c      	movs	r3, #12
 800f16a:	603b      	str	r3, [r7, #0]
 800f16c:	f04f 30ff 	mov.w	r0, #4294967295
 800f170:	e0d1      	b.n	800f316 <_svfiprintf_r+0x1d2>
 800f172:	2340      	movs	r3, #64	; 0x40
 800f174:	616b      	str	r3, [r5, #20]
 800f176:	2300      	movs	r3, #0
 800f178:	9309      	str	r3, [sp, #36]	; 0x24
 800f17a:	2320      	movs	r3, #32
 800f17c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f180:	f8cd 800c 	str.w	r8, [sp, #12]
 800f184:	2330      	movs	r3, #48	; 0x30
 800f186:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f330 <_svfiprintf_r+0x1ec>
 800f18a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f18e:	f04f 0901 	mov.w	r9, #1
 800f192:	4623      	mov	r3, r4
 800f194:	469a      	mov	sl, r3
 800f196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f19a:	b10a      	cbz	r2, 800f1a0 <_svfiprintf_r+0x5c>
 800f19c:	2a25      	cmp	r2, #37	; 0x25
 800f19e:	d1f9      	bne.n	800f194 <_svfiprintf_r+0x50>
 800f1a0:	ebba 0b04 	subs.w	fp, sl, r4
 800f1a4:	d00b      	beq.n	800f1be <_svfiprintf_r+0x7a>
 800f1a6:	465b      	mov	r3, fp
 800f1a8:	4622      	mov	r2, r4
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	4638      	mov	r0, r7
 800f1ae:	f7ff ff6d 	bl	800f08c <__ssputs_r>
 800f1b2:	3001      	adds	r0, #1
 800f1b4:	f000 80aa 	beq.w	800f30c <_svfiprintf_r+0x1c8>
 800f1b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1ba:	445a      	add	r2, fp
 800f1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800f1be:	f89a 3000 	ldrb.w	r3, [sl]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	f000 80a2 	beq.w	800f30c <_svfiprintf_r+0x1c8>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1d2:	f10a 0a01 	add.w	sl, sl, #1
 800f1d6:	9304      	str	r3, [sp, #16]
 800f1d8:	9307      	str	r3, [sp, #28]
 800f1da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1de:	931a      	str	r3, [sp, #104]	; 0x68
 800f1e0:	4654      	mov	r4, sl
 800f1e2:	2205      	movs	r2, #5
 800f1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1e8:	4851      	ldr	r0, [pc, #324]	; (800f330 <_svfiprintf_r+0x1ec>)
 800f1ea:	f7f1 f809 	bl	8000200 <memchr>
 800f1ee:	9a04      	ldr	r2, [sp, #16]
 800f1f0:	b9d8      	cbnz	r0, 800f22a <_svfiprintf_r+0xe6>
 800f1f2:	06d0      	lsls	r0, r2, #27
 800f1f4:	bf44      	itt	mi
 800f1f6:	2320      	movmi	r3, #32
 800f1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1fc:	0711      	lsls	r1, r2, #28
 800f1fe:	bf44      	itt	mi
 800f200:	232b      	movmi	r3, #43	; 0x2b
 800f202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f206:	f89a 3000 	ldrb.w	r3, [sl]
 800f20a:	2b2a      	cmp	r3, #42	; 0x2a
 800f20c:	d015      	beq.n	800f23a <_svfiprintf_r+0xf6>
 800f20e:	9a07      	ldr	r2, [sp, #28]
 800f210:	4654      	mov	r4, sl
 800f212:	2000      	movs	r0, #0
 800f214:	f04f 0c0a 	mov.w	ip, #10
 800f218:	4621      	mov	r1, r4
 800f21a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f21e:	3b30      	subs	r3, #48	; 0x30
 800f220:	2b09      	cmp	r3, #9
 800f222:	d94e      	bls.n	800f2c2 <_svfiprintf_r+0x17e>
 800f224:	b1b0      	cbz	r0, 800f254 <_svfiprintf_r+0x110>
 800f226:	9207      	str	r2, [sp, #28]
 800f228:	e014      	b.n	800f254 <_svfiprintf_r+0x110>
 800f22a:	eba0 0308 	sub.w	r3, r0, r8
 800f22e:	fa09 f303 	lsl.w	r3, r9, r3
 800f232:	4313      	orrs	r3, r2
 800f234:	9304      	str	r3, [sp, #16]
 800f236:	46a2      	mov	sl, r4
 800f238:	e7d2      	b.n	800f1e0 <_svfiprintf_r+0x9c>
 800f23a:	9b03      	ldr	r3, [sp, #12]
 800f23c:	1d19      	adds	r1, r3, #4
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	9103      	str	r1, [sp, #12]
 800f242:	2b00      	cmp	r3, #0
 800f244:	bfbb      	ittet	lt
 800f246:	425b      	neglt	r3, r3
 800f248:	f042 0202 	orrlt.w	r2, r2, #2
 800f24c:	9307      	strge	r3, [sp, #28]
 800f24e:	9307      	strlt	r3, [sp, #28]
 800f250:	bfb8      	it	lt
 800f252:	9204      	strlt	r2, [sp, #16]
 800f254:	7823      	ldrb	r3, [r4, #0]
 800f256:	2b2e      	cmp	r3, #46	; 0x2e
 800f258:	d10c      	bne.n	800f274 <_svfiprintf_r+0x130>
 800f25a:	7863      	ldrb	r3, [r4, #1]
 800f25c:	2b2a      	cmp	r3, #42	; 0x2a
 800f25e:	d135      	bne.n	800f2cc <_svfiprintf_r+0x188>
 800f260:	9b03      	ldr	r3, [sp, #12]
 800f262:	1d1a      	adds	r2, r3, #4
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	9203      	str	r2, [sp, #12]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	bfb8      	it	lt
 800f26c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f270:	3402      	adds	r4, #2
 800f272:	9305      	str	r3, [sp, #20]
 800f274:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f340 <_svfiprintf_r+0x1fc>
 800f278:	7821      	ldrb	r1, [r4, #0]
 800f27a:	2203      	movs	r2, #3
 800f27c:	4650      	mov	r0, sl
 800f27e:	f7f0 ffbf 	bl	8000200 <memchr>
 800f282:	b140      	cbz	r0, 800f296 <_svfiprintf_r+0x152>
 800f284:	2340      	movs	r3, #64	; 0x40
 800f286:	eba0 000a 	sub.w	r0, r0, sl
 800f28a:	fa03 f000 	lsl.w	r0, r3, r0
 800f28e:	9b04      	ldr	r3, [sp, #16]
 800f290:	4303      	orrs	r3, r0
 800f292:	3401      	adds	r4, #1
 800f294:	9304      	str	r3, [sp, #16]
 800f296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f29a:	4826      	ldr	r0, [pc, #152]	; (800f334 <_svfiprintf_r+0x1f0>)
 800f29c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2a0:	2206      	movs	r2, #6
 800f2a2:	f7f0 ffad 	bl	8000200 <memchr>
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d038      	beq.n	800f31c <_svfiprintf_r+0x1d8>
 800f2aa:	4b23      	ldr	r3, [pc, #140]	; (800f338 <_svfiprintf_r+0x1f4>)
 800f2ac:	bb1b      	cbnz	r3, 800f2f6 <_svfiprintf_r+0x1b2>
 800f2ae:	9b03      	ldr	r3, [sp, #12]
 800f2b0:	3307      	adds	r3, #7
 800f2b2:	f023 0307 	bic.w	r3, r3, #7
 800f2b6:	3308      	adds	r3, #8
 800f2b8:	9303      	str	r3, [sp, #12]
 800f2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2bc:	4433      	add	r3, r6
 800f2be:	9309      	str	r3, [sp, #36]	; 0x24
 800f2c0:	e767      	b.n	800f192 <_svfiprintf_r+0x4e>
 800f2c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	2001      	movs	r0, #1
 800f2ca:	e7a5      	b.n	800f218 <_svfiprintf_r+0xd4>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	3401      	adds	r4, #1
 800f2d0:	9305      	str	r3, [sp, #20]
 800f2d2:	4619      	mov	r1, r3
 800f2d4:	f04f 0c0a 	mov.w	ip, #10
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2de:	3a30      	subs	r2, #48	; 0x30
 800f2e0:	2a09      	cmp	r2, #9
 800f2e2:	d903      	bls.n	800f2ec <_svfiprintf_r+0x1a8>
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d0c5      	beq.n	800f274 <_svfiprintf_r+0x130>
 800f2e8:	9105      	str	r1, [sp, #20]
 800f2ea:	e7c3      	b.n	800f274 <_svfiprintf_r+0x130>
 800f2ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e7f0      	b.n	800f2d8 <_svfiprintf_r+0x194>
 800f2f6:	ab03      	add	r3, sp, #12
 800f2f8:	9300      	str	r3, [sp, #0]
 800f2fa:	462a      	mov	r2, r5
 800f2fc:	4b0f      	ldr	r3, [pc, #60]	; (800f33c <_svfiprintf_r+0x1f8>)
 800f2fe:	a904      	add	r1, sp, #16
 800f300:	4638      	mov	r0, r7
 800f302:	f3af 8000 	nop.w
 800f306:	1c42      	adds	r2, r0, #1
 800f308:	4606      	mov	r6, r0
 800f30a:	d1d6      	bne.n	800f2ba <_svfiprintf_r+0x176>
 800f30c:	89ab      	ldrh	r3, [r5, #12]
 800f30e:	065b      	lsls	r3, r3, #25
 800f310:	f53f af2c 	bmi.w	800f16c <_svfiprintf_r+0x28>
 800f314:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f316:	b01d      	add	sp, #116	; 0x74
 800f318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31c:	ab03      	add	r3, sp, #12
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	462a      	mov	r2, r5
 800f322:	4b06      	ldr	r3, [pc, #24]	; (800f33c <_svfiprintf_r+0x1f8>)
 800f324:	a904      	add	r1, sp, #16
 800f326:	4638      	mov	r0, r7
 800f328:	f000 f87a 	bl	800f420 <_printf_i>
 800f32c:	e7eb      	b.n	800f306 <_svfiprintf_r+0x1c2>
 800f32e:	bf00      	nop
 800f330:	0800f800 	.word	0x0800f800
 800f334:	0800f80a 	.word	0x0800f80a
 800f338:	00000000 	.word	0x00000000
 800f33c:	0800f08d 	.word	0x0800f08d
 800f340:	0800f806 	.word	0x0800f806

0800f344 <_printf_common>:
 800f344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f348:	4616      	mov	r6, r2
 800f34a:	4699      	mov	r9, r3
 800f34c:	688a      	ldr	r2, [r1, #8]
 800f34e:	690b      	ldr	r3, [r1, #16]
 800f350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f354:	4293      	cmp	r3, r2
 800f356:	bfb8      	it	lt
 800f358:	4613      	movlt	r3, r2
 800f35a:	6033      	str	r3, [r6, #0]
 800f35c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f360:	4607      	mov	r7, r0
 800f362:	460c      	mov	r4, r1
 800f364:	b10a      	cbz	r2, 800f36a <_printf_common+0x26>
 800f366:	3301      	adds	r3, #1
 800f368:	6033      	str	r3, [r6, #0]
 800f36a:	6823      	ldr	r3, [r4, #0]
 800f36c:	0699      	lsls	r1, r3, #26
 800f36e:	bf42      	ittt	mi
 800f370:	6833      	ldrmi	r3, [r6, #0]
 800f372:	3302      	addmi	r3, #2
 800f374:	6033      	strmi	r3, [r6, #0]
 800f376:	6825      	ldr	r5, [r4, #0]
 800f378:	f015 0506 	ands.w	r5, r5, #6
 800f37c:	d106      	bne.n	800f38c <_printf_common+0x48>
 800f37e:	f104 0a19 	add.w	sl, r4, #25
 800f382:	68e3      	ldr	r3, [r4, #12]
 800f384:	6832      	ldr	r2, [r6, #0]
 800f386:	1a9b      	subs	r3, r3, r2
 800f388:	42ab      	cmp	r3, r5
 800f38a:	dc26      	bgt.n	800f3da <_printf_common+0x96>
 800f38c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f390:	1e13      	subs	r3, r2, #0
 800f392:	6822      	ldr	r2, [r4, #0]
 800f394:	bf18      	it	ne
 800f396:	2301      	movne	r3, #1
 800f398:	0692      	lsls	r2, r2, #26
 800f39a:	d42b      	bmi.n	800f3f4 <_printf_common+0xb0>
 800f39c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3a0:	4649      	mov	r1, r9
 800f3a2:	4638      	mov	r0, r7
 800f3a4:	47c0      	blx	r8
 800f3a6:	3001      	adds	r0, #1
 800f3a8:	d01e      	beq.n	800f3e8 <_printf_common+0xa4>
 800f3aa:	6823      	ldr	r3, [r4, #0]
 800f3ac:	68e5      	ldr	r5, [r4, #12]
 800f3ae:	6832      	ldr	r2, [r6, #0]
 800f3b0:	f003 0306 	and.w	r3, r3, #6
 800f3b4:	2b04      	cmp	r3, #4
 800f3b6:	bf08      	it	eq
 800f3b8:	1aad      	subeq	r5, r5, r2
 800f3ba:	68a3      	ldr	r3, [r4, #8]
 800f3bc:	6922      	ldr	r2, [r4, #16]
 800f3be:	bf0c      	ite	eq
 800f3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3c4:	2500      	movne	r5, #0
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	bfc4      	itt	gt
 800f3ca:	1a9b      	subgt	r3, r3, r2
 800f3cc:	18ed      	addgt	r5, r5, r3
 800f3ce:	2600      	movs	r6, #0
 800f3d0:	341a      	adds	r4, #26
 800f3d2:	42b5      	cmp	r5, r6
 800f3d4:	d11a      	bne.n	800f40c <_printf_common+0xc8>
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	e008      	b.n	800f3ec <_printf_common+0xa8>
 800f3da:	2301      	movs	r3, #1
 800f3dc:	4652      	mov	r2, sl
 800f3de:	4649      	mov	r1, r9
 800f3e0:	4638      	mov	r0, r7
 800f3e2:	47c0      	blx	r8
 800f3e4:	3001      	adds	r0, #1
 800f3e6:	d103      	bne.n	800f3f0 <_printf_common+0xac>
 800f3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f0:	3501      	adds	r5, #1
 800f3f2:	e7c6      	b.n	800f382 <_printf_common+0x3e>
 800f3f4:	18e1      	adds	r1, r4, r3
 800f3f6:	1c5a      	adds	r2, r3, #1
 800f3f8:	2030      	movs	r0, #48	; 0x30
 800f3fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3fe:	4422      	add	r2, r4
 800f400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f408:	3302      	adds	r3, #2
 800f40a:	e7c7      	b.n	800f39c <_printf_common+0x58>
 800f40c:	2301      	movs	r3, #1
 800f40e:	4622      	mov	r2, r4
 800f410:	4649      	mov	r1, r9
 800f412:	4638      	mov	r0, r7
 800f414:	47c0      	blx	r8
 800f416:	3001      	adds	r0, #1
 800f418:	d0e6      	beq.n	800f3e8 <_printf_common+0xa4>
 800f41a:	3601      	adds	r6, #1
 800f41c:	e7d9      	b.n	800f3d2 <_printf_common+0x8e>
	...

0800f420 <_printf_i>:
 800f420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f424:	460c      	mov	r4, r1
 800f426:	4691      	mov	r9, r2
 800f428:	7e27      	ldrb	r7, [r4, #24]
 800f42a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f42c:	2f78      	cmp	r7, #120	; 0x78
 800f42e:	4680      	mov	r8, r0
 800f430:	469a      	mov	sl, r3
 800f432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f436:	d807      	bhi.n	800f448 <_printf_i+0x28>
 800f438:	2f62      	cmp	r7, #98	; 0x62
 800f43a:	d80a      	bhi.n	800f452 <_printf_i+0x32>
 800f43c:	2f00      	cmp	r7, #0
 800f43e:	f000 80d8 	beq.w	800f5f2 <_printf_i+0x1d2>
 800f442:	2f58      	cmp	r7, #88	; 0x58
 800f444:	f000 80a3 	beq.w	800f58e <_printf_i+0x16e>
 800f448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f44c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f450:	e03a      	b.n	800f4c8 <_printf_i+0xa8>
 800f452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f456:	2b15      	cmp	r3, #21
 800f458:	d8f6      	bhi.n	800f448 <_printf_i+0x28>
 800f45a:	a001      	add	r0, pc, #4	; (adr r0, 800f460 <_printf_i+0x40>)
 800f45c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f460:	0800f4b9 	.word	0x0800f4b9
 800f464:	0800f4cd 	.word	0x0800f4cd
 800f468:	0800f449 	.word	0x0800f449
 800f46c:	0800f449 	.word	0x0800f449
 800f470:	0800f449 	.word	0x0800f449
 800f474:	0800f449 	.word	0x0800f449
 800f478:	0800f4cd 	.word	0x0800f4cd
 800f47c:	0800f449 	.word	0x0800f449
 800f480:	0800f449 	.word	0x0800f449
 800f484:	0800f449 	.word	0x0800f449
 800f488:	0800f449 	.word	0x0800f449
 800f48c:	0800f5d9 	.word	0x0800f5d9
 800f490:	0800f4fd 	.word	0x0800f4fd
 800f494:	0800f5bb 	.word	0x0800f5bb
 800f498:	0800f449 	.word	0x0800f449
 800f49c:	0800f449 	.word	0x0800f449
 800f4a0:	0800f5fb 	.word	0x0800f5fb
 800f4a4:	0800f449 	.word	0x0800f449
 800f4a8:	0800f4fd 	.word	0x0800f4fd
 800f4ac:	0800f449 	.word	0x0800f449
 800f4b0:	0800f449 	.word	0x0800f449
 800f4b4:	0800f5c3 	.word	0x0800f5c3
 800f4b8:	680b      	ldr	r3, [r1, #0]
 800f4ba:	1d1a      	adds	r2, r3, #4
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	600a      	str	r2, [r1, #0]
 800f4c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f4c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	e0a3      	b.n	800f614 <_printf_i+0x1f4>
 800f4cc:	6825      	ldr	r5, [r4, #0]
 800f4ce:	6808      	ldr	r0, [r1, #0]
 800f4d0:	062e      	lsls	r6, r5, #24
 800f4d2:	f100 0304 	add.w	r3, r0, #4
 800f4d6:	d50a      	bpl.n	800f4ee <_printf_i+0xce>
 800f4d8:	6805      	ldr	r5, [r0, #0]
 800f4da:	600b      	str	r3, [r1, #0]
 800f4dc:	2d00      	cmp	r5, #0
 800f4de:	da03      	bge.n	800f4e8 <_printf_i+0xc8>
 800f4e0:	232d      	movs	r3, #45	; 0x2d
 800f4e2:	426d      	negs	r5, r5
 800f4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4e8:	485e      	ldr	r0, [pc, #376]	; (800f664 <_printf_i+0x244>)
 800f4ea:	230a      	movs	r3, #10
 800f4ec:	e019      	b.n	800f522 <_printf_i+0x102>
 800f4ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f4f2:	6805      	ldr	r5, [r0, #0]
 800f4f4:	600b      	str	r3, [r1, #0]
 800f4f6:	bf18      	it	ne
 800f4f8:	b22d      	sxthne	r5, r5
 800f4fa:	e7ef      	b.n	800f4dc <_printf_i+0xbc>
 800f4fc:	680b      	ldr	r3, [r1, #0]
 800f4fe:	6825      	ldr	r5, [r4, #0]
 800f500:	1d18      	adds	r0, r3, #4
 800f502:	6008      	str	r0, [r1, #0]
 800f504:	0628      	lsls	r0, r5, #24
 800f506:	d501      	bpl.n	800f50c <_printf_i+0xec>
 800f508:	681d      	ldr	r5, [r3, #0]
 800f50a:	e002      	b.n	800f512 <_printf_i+0xf2>
 800f50c:	0669      	lsls	r1, r5, #25
 800f50e:	d5fb      	bpl.n	800f508 <_printf_i+0xe8>
 800f510:	881d      	ldrh	r5, [r3, #0]
 800f512:	4854      	ldr	r0, [pc, #336]	; (800f664 <_printf_i+0x244>)
 800f514:	2f6f      	cmp	r7, #111	; 0x6f
 800f516:	bf0c      	ite	eq
 800f518:	2308      	moveq	r3, #8
 800f51a:	230a      	movne	r3, #10
 800f51c:	2100      	movs	r1, #0
 800f51e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f522:	6866      	ldr	r6, [r4, #4]
 800f524:	60a6      	str	r6, [r4, #8]
 800f526:	2e00      	cmp	r6, #0
 800f528:	bfa2      	ittt	ge
 800f52a:	6821      	ldrge	r1, [r4, #0]
 800f52c:	f021 0104 	bicge.w	r1, r1, #4
 800f530:	6021      	strge	r1, [r4, #0]
 800f532:	b90d      	cbnz	r5, 800f538 <_printf_i+0x118>
 800f534:	2e00      	cmp	r6, #0
 800f536:	d04d      	beq.n	800f5d4 <_printf_i+0x1b4>
 800f538:	4616      	mov	r6, r2
 800f53a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f53e:	fb03 5711 	mls	r7, r3, r1, r5
 800f542:	5dc7      	ldrb	r7, [r0, r7]
 800f544:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f548:	462f      	mov	r7, r5
 800f54a:	42bb      	cmp	r3, r7
 800f54c:	460d      	mov	r5, r1
 800f54e:	d9f4      	bls.n	800f53a <_printf_i+0x11a>
 800f550:	2b08      	cmp	r3, #8
 800f552:	d10b      	bne.n	800f56c <_printf_i+0x14c>
 800f554:	6823      	ldr	r3, [r4, #0]
 800f556:	07df      	lsls	r7, r3, #31
 800f558:	d508      	bpl.n	800f56c <_printf_i+0x14c>
 800f55a:	6923      	ldr	r3, [r4, #16]
 800f55c:	6861      	ldr	r1, [r4, #4]
 800f55e:	4299      	cmp	r1, r3
 800f560:	bfde      	ittt	le
 800f562:	2330      	movle	r3, #48	; 0x30
 800f564:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f568:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f56c:	1b92      	subs	r2, r2, r6
 800f56e:	6122      	str	r2, [r4, #16]
 800f570:	f8cd a000 	str.w	sl, [sp]
 800f574:	464b      	mov	r3, r9
 800f576:	aa03      	add	r2, sp, #12
 800f578:	4621      	mov	r1, r4
 800f57a:	4640      	mov	r0, r8
 800f57c:	f7ff fee2 	bl	800f344 <_printf_common>
 800f580:	3001      	adds	r0, #1
 800f582:	d14c      	bne.n	800f61e <_printf_i+0x1fe>
 800f584:	f04f 30ff 	mov.w	r0, #4294967295
 800f588:	b004      	add	sp, #16
 800f58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f58e:	4835      	ldr	r0, [pc, #212]	; (800f664 <_printf_i+0x244>)
 800f590:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f594:	6823      	ldr	r3, [r4, #0]
 800f596:	680e      	ldr	r6, [r1, #0]
 800f598:	061f      	lsls	r7, r3, #24
 800f59a:	f856 5b04 	ldr.w	r5, [r6], #4
 800f59e:	600e      	str	r6, [r1, #0]
 800f5a0:	d514      	bpl.n	800f5cc <_printf_i+0x1ac>
 800f5a2:	07d9      	lsls	r1, r3, #31
 800f5a4:	bf44      	itt	mi
 800f5a6:	f043 0320 	orrmi.w	r3, r3, #32
 800f5aa:	6023      	strmi	r3, [r4, #0]
 800f5ac:	b91d      	cbnz	r5, 800f5b6 <_printf_i+0x196>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	f023 0320 	bic.w	r3, r3, #32
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	2310      	movs	r3, #16
 800f5b8:	e7b0      	b.n	800f51c <_printf_i+0xfc>
 800f5ba:	6823      	ldr	r3, [r4, #0]
 800f5bc:	f043 0320 	orr.w	r3, r3, #32
 800f5c0:	6023      	str	r3, [r4, #0]
 800f5c2:	2378      	movs	r3, #120	; 0x78
 800f5c4:	4828      	ldr	r0, [pc, #160]	; (800f668 <_printf_i+0x248>)
 800f5c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5ca:	e7e3      	b.n	800f594 <_printf_i+0x174>
 800f5cc:	065e      	lsls	r6, r3, #25
 800f5ce:	bf48      	it	mi
 800f5d0:	b2ad      	uxthmi	r5, r5
 800f5d2:	e7e6      	b.n	800f5a2 <_printf_i+0x182>
 800f5d4:	4616      	mov	r6, r2
 800f5d6:	e7bb      	b.n	800f550 <_printf_i+0x130>
 800f5d8:	680b      	ldr	r3, [r1, #0]
 800f5da:	6826      	ldr	r6, [r4, #0]
 800f5dc:	6960      	ldr	r0, [r4, #20]
 800f5de:	1d1d      	adds	r5, r3, #4
 800f5e0:	600d      	str	r5, [r1, #0]
 800f5e2:	0635      	lsls	r5, r6, #24
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	d501      	bpl.n	800f5ec <_printf_i+0x1cc>
 800f5e8:	6018      	str	r0, [r3, #0]
 800f5ea:	e002      	b.n	800f5f2 <_printf_i+0x1d2>
 800f5ec:	0671      	lsls	r1, r6, #25
 800f5ee:	d5fb      	bpl.n	800f5e8 <_printf_i+0x1c8>
 800f5f0:	8018      	strh	r0, [r3, #0]
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	6123      	str	r3, [r4, #16]
 800f5f6:	4616      	mov	r6, r2
 800f5f8:	e7ba      	b.n	800f570 <_printf_i+0x150>
 800f5fa:	680b      	ldr	r3, [r1, #0]
 800f5fc:	1d1a      	adds	r2, r3, #4
 800f5fe:	600a      	str	r2, [r1, #0]
 800f600:	681e      	ldr	r6, [r3, #0]
 800f602:	6862      	ldr	r2, [r4, #4]
 800f604:	2100      	movs	r1, #0
 800f606:	4630      	mov	r0, r6
 800f608:	f7f0 fdfa 	bl	8000200 <memchr>
 800f60c:	b108      	cbz	r0, 800f612 <_printf_i+0x1f2>
 800f60e:	1b80      	subs	r0, r0, r6
 800f610:	6060      	str	r0, [r4, #4]
 800f612:	6863      	ldr	r3, [r4, #4]
 800f614:	6123      	str	r3, [r4, #16]
 800f616:	2300      	movs	r3, #0
 800f618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f61c:	e7a8      	b.n	800f570 <_printf_i+0x150>
 800f61e:	6923      	ldr	r3, [r4, #16]
 800f620:	4632      	mov	r2, r6
 800f622:	4649      	mov	r1, r9
 800f624:	4640      	mov	r0, r8
 800f626:	47d0      	blx	sl
 800f628:	3001      	adds	r0, #1
 800f62a:	d0ab      	beq.n	800f584 <_printf_i+0x164>
 800f62c:	6823      	ldr	r3, [r4, #0]
 800f62e:	079b      	lsls	r3, r3, #30
 800f630:	d413      	bmi.n	800f65a <_printf_i+0x23a>
 800f632:	68e0      	ldr	r0, [r4, #12]
 800f634:	9b03      	ldr	r3, [sp, #12]
 800f636:	4298      	cmp	r0, r3
 800f638:	bfb8      	it	lt
 800f63a:	4618      	movlt	r0, r3
 800f63c:	e7a4      	b.n	800f588 <_printf_i+0x168>
 800f63e:	2301      	movs	r3, #1
 800f640:	4632      	mov	r2, r6
 800f642:	4649      	mov	r1, r9
 800f644:	4640      	mov	r0, r8
 800f646:	47d0      	blx	sl
 800f648:	3001      	adds	r0, #1
 800f64a:	d09b      	beq.n	800f584 <_printf_i+0x164>
 800f64c:	3501      	adds	r5, #1
 800f64e:	68e3      	ldr	r3, [r4, #12]
 800f650:	9903      	ldr	r1, [sp, #12]
 800f652:	1a5b      	subs	r3, r3, r1
 800f654:	42ab      	cmp	r3, r5
 800f656:	dcf2      	bgt.n	800f63e <_printf_i+0x21e>
 800f658:	e7eb      	b.n	800f632 <_printf_i+0x212>
 800f65a:	2500      	movs	r5, #0
 800f65c:	f104 0619 	add.w	r6, r4, #25
 800f660:	e7f5      	b.n	800f64e <_printf_i+0x22e>
 800f662:	bf00      	nop
 800f664:	0800f811 	.word	0x0800f811
 800f668:	0800f822 	.word	0x0800f822

0800f66c <__retarget_lock_acquire_recursive>:
 800f66c:	4770      	bx	lr

0800f66e <__retarget_lock_release_recursive>:
 800f66e:	4770      	bx	lr

0800f670 <memmove>:
 800f670:	4288      	cmp	r0, r1
 800f672:	b510      	push	{r4, lr}
 800f674:	eb01 0402 	add.w	r4, r1, r2
 800f678:	d902      	bls.n	800f680 <memmove+0x10>
 800f67a:	4284      	cmp	r4, r0
 800f67c:	4623      	mov	r3, r4
 800f67e:	d807      	bhi.n	800f690 <memmove+0x20>
 800f680:	1e43      	subs	r3, r0, #1
 800f682:	42a1      	cmp	r1, r4
 800f684:	d008      	beq.n	800f698 <memmove+0x28>
 800f686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f68a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f68e:	e7f8      	b.n	800f682 <memmove+0x12>
 800f690:	4402      	add	r2, r0
 800f692:	4601      	mov	r1, r0
 800f694:	428a      	cmp	r2, r1
 800f696:	d100      	bne.n	800f69a <memmove+0x2a>
 800f698:	bd10      	pop	{r4, pc}
 800f69a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f69e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6a2:	e7f7      	b.n	800f694 <memmove+0x24>

0800f6a4 <_realloc_r>:
 800f6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a6:	4607      	mov	r7, r0
 800f6a8:	4614      	mov	r4, r2
 800f6aa:	460e      	mov	r6, r1
 800f6ac:	b921      	cbnz	r1, 800f6b8 <_realloc_r+0x14>
 800f6ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f6b2:	4611      	mov	r1, r2
 800f6b4:	f7ff baca 	b.w	800ec4c <_malloc_r>
 800f6b8:	b922      	cbnz	r2, 800f6c4 <_realloc_r+0x20>
 800f6ba:	f7ff fa77 	bl	800ebac <_free_r>
 800f6be:	4625      	mov	r5, r4
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6c4:	f000 f814 	bl	800f6f0 <_malloc_usable_size_r>
 800f6c8:	42a0      	cmp	r0, r4
 800f6ca:	d20f      	bcs.n	800f6ec <_realloc_r+0x48>
 800f6cc:	4621      	mov	r1, r4
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	f7ff fabc 	bl	800ec4c <_malloc_r>
 800f6d4:	4605      	mov	r5, r0
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d0f2      	beq.n	800f6c0 <_realloc_r+0x1c>
 800f6da:	4631      	mov	r1, r6
 800f6dc:	4622      	mov	r2, r4
 800f6de:	f7ff fa3f 	bl	800eb60 <memcpy>
 800f6e2:	4631      	mov	r1, r6
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	f7ff fa61 	bl	800ebac <_free_r>
 800f6ea:	e7e9      	b.n	800f6c0 <_realloc_r+0x1c>
 800f6ec:	4635      	mov	r5, r6
 800f6ee:	e7e7      	b.n	800f6c0 <_realloc_r+0x1c>

0800f6f0 <_malloc_usable_size_r>:
 800f6f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6f4:	1f18      	subs	r0, r3, #4
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	bfbc      	itt	lt
 800f6fa:	580b      	ldrlt	r3, [r1, r0]
 800f6fc:	18c0      	addlt	r0, r0, r3
 800f6fe:	4770      	bx	lr

0800f700 <_init>:
 800f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f702:	bf00      	nop
 800f704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f706:	bc08      	pop	{r3}
 800f708:	469e      	mov	lr, r3
 800f70a:	4770      	bx	lr

0800f70c <_fini>:
 800f70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70e:	bf00      	nop
 800f710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f712:	bc08      	pop	{r3}
 800f714:	469e      	mov	lr, r3
 800f716:	4770      	bx	lr
