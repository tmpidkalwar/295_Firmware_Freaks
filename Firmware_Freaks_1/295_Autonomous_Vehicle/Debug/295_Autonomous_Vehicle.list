
295_Autonomous_Vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c00c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800c1bc  0800c1bc  0001c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c240  0800c240  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c240  0800c240  0001c240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c248  0800c248  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c248  0800c248  0001c248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c24c  0800c24c  0001c24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d1c  20000094  0800c2e4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008db0  0800c2e4  00028db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c646  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005735  00000000  00000000  0004c70a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021e8  00000000  00000000  00051e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f98  00000000  00000000  00054028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b63f  00000000  00000000  00055fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e40b  00000000  00000000  000815ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2a2f  00000000  00000000  0009fa0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00192439  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000912c  00000000  00000000  001924b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c1a4 	.word	0x0800c1a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800c1a4 	.word	0x0800c1a4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200000b0 	.word	0x200000b0
 8000554:	20000108 	.word	0x20000108

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f001 f84b 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f82b 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 fab3 	bl	8000ad0 <MX_GPIO_Init>
  MX_CRC_Init();
 800056a:	f000 f8ab 	bl	80006c4 <MX_CRC_Init>
  MX_DMA2D_Init();
 800056e:	f000 f8bd 	bl	80006ec <MX_DMA2D_Init>
  MX_FMC_Init();
 8000572:	f000 fa5d 	bl	8000a30 <MX_FMC_Init>
  MX_I2C3_Init();
 8000576:	f000 f8eb 	bl	8000750 <MX_I2C3_Init>
  MX_LTDC_Init();
 800057a:	f000 f929 	bl	80007d0 <MX_LTDC_Init>
  MX_SPI5_Init();
 800057e:	f000 f9a7 	bl	80008d0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000582:	f000 f9db 	bl	800093c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000586:	f000 fa29 	bl	80009dc <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <main+0x5c>)
 800058c:	1d3c      	adds	r4, r7, #4
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f008 ffc2 	bl	800952a <osThreadCreate>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <main+0x60>)
 80005aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f008 ffb6 	bl	800951c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x58>
 80005b2:	bf00      	nop
 80005b4:	0800c1c8 	.word	0x0800c1c8
 80005b8:	2000846c 	.word	0x2000846c

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0a0      	sub	sp, #128	; 0x80
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00b fd27 	bl	800c01e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2230      	movs	r2, #48	; 0x30
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00b fd18 	bl	800c01e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <SystemClock_Config+0x100>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f6:	4a31      	ldr	r2, [pc, #196]	; (80006bc <SystemClock_Config+0x100>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	6413      	str	r3, [r2, #64]	; 0x40
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <SystemClock_Config+0x100>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <SystemClock_Config+0x104>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000616:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <SystemClock_Config+0x104>)
 8000618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0x104>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062a:	2301      	movs	r3, #1
 800062c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000632:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000638:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063e:	2304      	movs	r3, #4
 8000640:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000642:	2348      	movs	r3, #72	; 0x48
 8000644:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800064a:	2303      	movs	r3, #3
 800064c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000652:	4618      	mov	r0, r3
 8000654:	f003 feee 	bl	8004434 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800065e:	f000 fb77 	bl	8000d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f004 f948 	bl	8004914 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800068a:	f000 fb61 	bl	8000d50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800068e:	2308      	movs	r3, #8
 8000690:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000692:	2332      	movs	r3, #50	; 0x32
 8000694:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800069a:	2300      	movs	r3, #0
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fb5a 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006ae:	f000 fb4f 	bl	8000d50 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3780      	adds	r7, #128	; 0x80
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_CRC_Init+0x20>)
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_CRC_Init+0x24>)
 80006cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_CRC_Init+0x20>)
 80006d0:	f001 f8d8 	bl	8001884 <HAL_CRC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006da:	f000 fb39 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000851c 	.word	0x2000851c
 80006e8:	40023000 	.word	0x40023000

080006ec <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_DMA2D_Init+0x5c>)
 80006f2:	4a16      	ldr	r2, [pc, #88]	; (800074c <MX_DMA2D_Init+0x60>)
 80006f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_DMA2D_Init+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_DMA2D_Init+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_DMA2D_Init+0x5c>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_DMA2D_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000722:	f001 f8cb 	bl	80018bc <HAL_DMA2D_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800072c:	f000 fb10 	bl	8000d50 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000730:	2101      	movs	r1, #1
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_DMA2D_Init+0x5c>)
 8000734:	f001 fa1c 	bl	8001b70 <HAL_DMA2D_ConfigLayer>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800073e:	f000 fb07 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000864c 	.word	0x2000864c
 800074c:	4002b000 	.word	0x4002b000

08000750 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C3_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C3_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C3_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C3_Init+0x74>)
 800076e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_I2C3_Init+0x74>)
 800078e:	f003 f935 	bl	80039fc <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 fada 	bl	8000d50 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079c:	2100      	movs	r1, #0
 800079e:	4809      	ldr	r0, [pc, #36]	; (80007c4 <MX_I2C3_Init+0x74>)
 80007a0:	f003 fa64 	bl	8003c6c <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007aa:	f000 fad1 	bl	8000d50 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2C3_Init+0x74>)
 80007b2:	f003 fa97 	bl	8003ce4 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007bc:	f000 fac8 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20008470 	.word	0x20008470
 80007c8:	40005c00 	.word	0x40005c00
 80007cc:	000186a0 	.word	0x000186a0

080007d0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	; 0x38
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2234      	movs	r2, #52	; 0x34
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f00b fc1e 	bl	800c01e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007e4:	4a39      	ldr	r2, [pc, #228]	; (80008cc <MX_LTDC_Init+0xfc>)
 80007e6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000800:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000802:	2209      	movs	r2, #9
 8000804:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000808:	2201      	movs	r2, #1
 800080a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800080e:	221d      	movs	r2, #29
 8000810:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000814:	2203      	movs	r2, #3
 8000816:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800081a:	f240 120d 	movw	r2, #269	; 0x10d
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000820:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000822:	f240 1243 	movw	r2, #323	; 0x143
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800082a:	f240 1217 	movw	r2, #279	; 0x117
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000832:	f240 1247 	movw	r2, #327	; 0x147
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_LTDC_Init+0xf8>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000850:	481d      	ldr	r0, [pc, #116]	; (80008c8 <MX_LTDC_Init+0xf8>)
 8000852:	f003 fa87 	bl	8003d64 <HAL_LTDC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800085c:	f000 fa78 	bl	8000d50 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000864:	23f0      	movs	r3, #240	; 0xf0
 8000866:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800086c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000870:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000876:	23ff      	movs	r3, #255	; 0xff
 8000878:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800087e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000882:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000884:	2307      	movs	r3, #7
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000888:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800088e:	23f0      	movs	r3, #240	; 0xf0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000892:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_LTDC_Init+0xf8>)
 80008b2:	f003 fbe9 	bl	8004088 <HAL_LTDC_ConfigLayer>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008bc:	f000 fa48 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3738      	adds	r7, #56	; 0x38
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20008524 	.word	0x20008524
 80008cc:	40016800 	.word	0x40016800

080008d0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_SPI5_Init+0x64>)
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <MX_SPI5_Init+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_SPI5_Init+0x64>)
 80008dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_SPI5_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_SPI5_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_SPI5_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI5_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_SPI5_Init+0x64>)
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000900:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SPI5_Init+0x64>)
 8000904:	2218      	movs	r2, #24
 8000906:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_SPI5_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SPI5_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_SPI5_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SPI5_Init+0x64>)
 800091c:	220a      	movs	r2, #10
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_SPI5_Init+0x64>)
 8000922:	f004 fc0d 	bl	8005140 <HAL_SPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800092c:	f000 fa10 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200084c4 	.word	0x200084c4
 8000938:	40015000 	.word	0x40015000

0800093c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	463b      	mov	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_TIM1_Init+0x98>)
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <MX_TIM1_Init+0x9c>)
 800095c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_TIM1_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000982:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000984:	f004 fc40 	bl	8005208 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800098e:	f000 f9df 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_TIM1_Init+0x98>)
 80009a0:	f004 fd89 	bl	80054b6 <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80009aa:	f000 f9d1 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_TIM1_Init+0x98>)
 80009bc:	f004 ff94 	bl	80058e8 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009c6:	f000 f9c3 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000860c 	.word	0x2000860c
 80009d8:	40010000 	.word	0x40010000

080009dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART1_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f004 fff8 	bl	8005a08 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 f997 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200085cc 	.word	0x200085cc
 8000a2c:	40011000 	.word	0x40011000

08000a30 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a4a:	4a20      	ldr	r2, [pc, #128]	; (8000acc <MX_FMC_Init+0x9c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a62:	2210      	movs	r2, #16
 8000a64:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a68:	2240      	movs	r2, #64	; 0x40
 8000a6a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a6e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a72:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a80:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_FMC_Init+0x98>)
 8000ab2:	f004 fb11 	bl	80050d8 <HAL_SDRAM_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000abc:	f000 f948 	bl	8000d50 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000868c 	.word	0x2000868c
 8000acc:	a0000140 	.word	0xa0000140

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
 8000aea:	4b7a      	ldr	r3, [pc, #488]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a79      	ldr	r2, [pc, #484]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b77      	ldr	r3, [pc, #476]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	4b73      	ldr	r3, [pc, #460]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a72      	ldr	r2, [pc, #456]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b0c:	f043 0320 	orr.w	r3, r3, #32
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b70      	ldr	r3, [pc, #448]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0320 	and.w	r3, r3, #32
 8000b1a:	61fb      	str	r3, [r7, #28]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	4b6c      	ldr	r3, [pc, #432]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a6b      	ldr	r2, [pc, #428]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b69      	ldr	r3, [pc, #420]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	4b65      	ldr	r3, [pc, #404]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a64      	ldr	r2, [pc, #400]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b62      	ldr	r3, [pc, #392]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b5e      	ldr	r3, [pc, #376]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a5d      	ldr	r2, [pc, #372]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b5b      	ldr	r3, [pc, #364]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b57      	ldr	r3, [pc, #348]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a56      	ldr	r2, [pc, #344]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b54      	ldr	r3, [pc, #336]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a4f      	ldr	r2, [pc, #316]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b49      	ldr	r3, [pc, #292]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b46      	ldr	r3, [pc, #280]	; (8000cd4 <MX_GPIO_Init+0x204>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2116      	movs	r1, #22
 8000bca:	4843      	ldr	r0, [pc, #268]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000bcc:	f001 fa0c 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	4841      	ldr	r0, [pc, #260]	; (8000cdc <MX_GPIO_Init+0x20c>)
 8000bd6:	f001 fa07 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000be0:	483f      	ldr	r0, [pc, #252]	; (8000ce0 <MX_GPIO_Init+0x210>)
 8000be2:	f001 fa01 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bec:	483d      	ldr	r0, [pc, #244]	; (8000ce4 <MX_GPIO_Init+0x214>)
 8000bee:	f001 f9fb 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bf2:	2316      	movs	r3, #22
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4833      	ldr	r0, [pc, #204]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000c0a:	f001 f843 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c0e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c14:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <MX_GPIO_Init+0x218>)
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	482e      	ldr	r0, [pc, #184]	; (8000cdc <MX_GPIO_Init+0x20c>)
 8000c24:	f001 f836 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4827      	ldr	r0, [pc, #156]	; (8000cdc <MX_GPIO_Init+0x20c>)
 8000c40:	f001 f828 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c44:	2320      	movs	r3, #32
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <MX_GPIO_Init+0x218>)
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4820      	ldr	r0, [pc, #128]	; (8000cd8 <MX_GPIO_Init+0x208>)
 8000c58:	f001 f81c 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481f      	ldr	r0, [pc, #124]	; (8000cec <MX_GPIO_Init+0x21c>)
 8000c70:	f001 f810 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <MX_GPIO_Init+0x210>)
 8000c8a:	f001 f803 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <MX_GPIO_Init+0x210>)
 8000ca8:	f000 fff4 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <MX_GPIO_Init+0x214>)
 8000cc6:	f000 ffe5 	bl	8001c94 <HAL_GPIO_Init>

}
 8000cca:	bf00      	nop
 8000ccc:	3738      	adds	r7, #56	; 0x38
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	40021800 	.word	0x40021800
 8000ce8:	10120000 	.word	0x10120000
 8000cec:	40020400 	.word	0x40020400

08000cf0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000cf8:	f00a fe44 	bl	800b984 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d02:	4809      	ldr	r0, [pc, #36]	; (8000d28 <StartDefaultTask+0x38>)
 8000d04:	f001 f970 	bl	8001fe8 <HAL_GPIO_WritePin>
	osDelay(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0c:	f008 fc59 	bl	80095c2 <osDelay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d16:	4804      	ldr	r0, [pc, #16]	; (8000d28 <StartDefaultTask+0x38>)
 8000d18:	f001 f966 	bl	8001fe8 <HAL_GPIO_WritePin>
    osDelay(1000);
 8000d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d20:	f008 fc4f 	bl	80095c2 <osDelay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000d24:	e7ea      	b.n	8000cfc <StartDefaultTask+0xc>
 8000d26:	bf00      	nop
 8000d28:	40021800 	.word	0x40021800

08000d2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3e:	f000 fc7d 	bl	800163c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40001000 	.word	0x40001000

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_MspInit+0x54>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <HAL_MspInit+0x54>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_MspInit+0x54>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_MspInit+0x54>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_MspInit+0x54>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_MspInit+0x54>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	210f      	movs	r1, #15
 8000da2:	f06f 0001 	mvn.w	r0, #1
 8000da6:	f000 fd43 	bl	8001830 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_CRC_MspInit+0x3c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10d      	bne.n	8000de6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_CRC_MspInit+0x40>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_CRC_MspInit+0x40>)
 8000dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_CRC_MspInit+0x40>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023000 	.word	0x40023000
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <HAL_DMA2D_MspInit+0x48>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d115      	bne.n	8000e3a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_DMA2D_MspInit+0x4c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a0c      	ldr	r2, [pc, #48]	; (8000e48 <HAL_DMA2D_MspInit+0x4c>)
 8000e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_DMA2D_MspInit+0x4c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	205a      	movs	r0, #90	; 0x5a
 8000e30:	f000 fcfe 	bl	8001830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e34:	205a      	movs	r0, #90	; 0x5a
 8000e36:	f000 fd17 	bl	8001868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	4002b000 	.word	0x4002b000
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a29      	ldr	r2, [pc, #164]	; (8000f10 <HAL_I2C_MspInit+0xc4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d14b      	bne.n	8000f06 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <HAL_I2C_MspInit+0xc8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <HAL_I2C_MspInit+0xc8>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <HAL_I2C_MspInit+0xc8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <HAL_I2C_MspInit+0xc8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <HAL_I2C_MspInit+0xc8>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <HAL_I2C_MspInit+0xc8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eac:	2312      	movs	r3, #18
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4815      	ldr	r0, [pc, #84]	; (8000f18 <HAL_I2C_MspInit+0xcc>)
 8000ec4:	f000 fee6 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ece:	2312      	movs	r3, #18
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eda:	2304      	movs	r3, #4
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <HAL_I2C_MspInit+0xd0>)
 8000ee6:	f000 fed5 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_I2C_MspInit+0xc8>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_I2C_MspInit+0xc8>)
 8000ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_I2C_MspInit+0xc8>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40005c00 	.word	0x40005c00
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	; 0x38
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a7b      	ldr	r2, [pc, #492]	; (800112c <HAL_LTDC_MspInit+0x20c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	f040 80f0 	bne.w	8001124 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
 8000f48:	4b79      	ldr	r3, [pc, #484]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4c:	4a78      	ldr	r2, [pc, #480]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000f4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f52:	6453      	str	r3, [r2, #68]	; 0x44
 8000f54:	4b76      	ldr	r3, [pc, #472]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f5c:	623b      	str	r3, [r7, #32]
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	4b72      	ldr	r3, [pc, #456]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	4a71      	ldr	r2, [pc, #452]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000f6a:	f043 0320 	orr.w	r3, r3, #32
 8000f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f70:	4b6f      	ldr	r3, [pc, #444]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	f003 0320 	and.w	r3, r3, #32
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a6a      	ldr	r2, [pc, #424]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b68      	ldr	r3, [pc, #416]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	4b64      	ldr	r3, [pc, #400]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a63      	ldr	r2, [pc, #396]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b61      	ldr	r3, [pc, #388]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a5c      	ldr	r2, [pc, #368]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc4:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	4b56      	ldr	r3, [pc, #344]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	4a55      	ldr	r2, [pc, #340]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe0:	4b53      	ldr	r3, [pc, #332]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffc:	4b4c      	ldr	r3, [pc, #304]	; (8001130 <HAL_LTDC_MspInit+0x210>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800101a:	230e      	movs	r3, #14
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4843      	ldr	r0, [pc, #268]	; (8001134 <HAL_LTDC_MspInit+0x214>)
 8001026:	f000 fe35 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800102a:	f641 0358 	movw	r3, #6232	; 0x1858
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800103c:	230e      	movs	r3, #14
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	483c      	ldr	r0, [pc, #240]	; (8001138 <HAL_LTDC_MspInit+0x218>)
 8001048:	f000 fe24 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800104c:	2303      	movs	r3, #3
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800105c:	2309      	movs	r3, #9
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	4835      	ldr	r0, [pc, #212]	; (800113c <HAL_LTDC_MspInit+0x21c>)
 8001068:	f000 fe14 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800106c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107e:	230e      	movs	r3, #14
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	482c      	ldr	r0, [pc, #176]	; (800113c <HAL_LTDC_MspInit+0x21c>)
 800108a:	f000 fe03 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800108e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a0:	230e      	movs	r3, #14
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4825      	ldr	r0, [pc, #148]	; (8001140 <HAL_LTDC_MspInit+0x220>)
 80010ac:	f000 fdf2 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80010b0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010c2:	230e      	movs	r3, #14
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	481d      	ldr	r0, [pc, #116]	; (8001144 <HAL_LTDC_MspInit+0x224>)
 80010ce:	f000 fde1 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80010d2:	2348      	movs	r3, #72	; 0x48
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e2:	230e      	movs	r3, #14
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4816      	ldr	r0, [pc, #88]	; (8001148 <HAL_LTDC_MspInit+0x228>)
 80010ee:	f000 fdd1 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001104:	2309      	movs	r3, #9
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <HAL_LTDC_MspInit+0x220>)
 8001110:	f000 fdc0 	bl	8001c94 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2105      	movs	r1, #5
 8001118:	2058      	movs	r0, #88	; 0x58
 800111a:	f000 fb89 	bl	8001830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800111e:	2058      	movs	r0, #88	; 0x58
 8001120:	f000 fba2 	bl	8001868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3738      	adds	r7, #56	; 0x38
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40016800 	.word	0x40016800
 8001130:	40023800 	.word	0x40023800
 8001134:	40021400 	.word	0x40021400
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40021800 	.word	0x40021800
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00

0800114c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_SPI_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12c      	bne.n	80011c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001194:	f043 0320 	orr.w	r3, r3, #32
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011a6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011b8:	2305      	movs	r3, #5
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_SPI_MspInit+0x8c>)
 80011c4:	f000 fd66 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40015000 	.word	0x40015000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40021400 	.word	0x40021400

080011dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_TIM_Base_MspInit+0x3c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10d      	bne.n	800120a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_TIM_Base_MspInit+0x40>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_TIM_Base_MspInit+0x40>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_TIM_Base_MspInit+0x40>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40010000 	.word	0x40010000
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_UART_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12c      	bne.n	800129c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_UART_MspInit+0x88>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800127a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800128c:	2307      	movs	r3, #7
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_UART_MspInit+0x8c>)
 8001298:	f000 fcfc 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40011000 	.word	0x40011000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000

080012b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_FMC_MspInit+0x104>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d16f      	bne.n	80013ac <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <HAL_FMC_MspInit+0x104>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_FMC_MspInit+0x108>)
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	4a37      	ldr	r2, [pc, #220]	; (80013b8 <HAL_FMC_MspInit+0x108>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6393      	str	r3, [r2, #56]	; 0x38
 80012e2:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <HAL_FMC_MspInit+0x108>)
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80012ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012f2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001300:	230c      	movs	r3, #12
 8001302:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	482c      	ldr	r0, [pc, #176]	; (80013bc <HAL_FMC_MspInit+0x10c>)
 800130a:	f000 fcc3 	bl	8001c94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800130e:	2301      	movs	r3, #1
 8001310:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800131e:	230c      	movs	r3, #12
 8001320:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4826      	ldr	r0, [pc, #152]	; (80013c0 <HAL_FMC_MspInit+0x110>)
 8001328:	f000 fcb4 	bl	8001c94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 800132c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001330:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800133e:	230c      	movs	r3, #12
 8001340:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	481f      	ldr	r0, [pc, #124]	; (80013c4 <HAL_FMC_MspInit+0x114>)
 8001348:	f000 fca4 	bl	8001c94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800134c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001350:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800135e:	230c      	movs	r3, #12
 8001360:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4818      	ldr	r0, [pc, #96]	; (80013c8 <HAL_FMC_MspInit+0x118>)
 8001368:	f000 fc94 	bl	8001c94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 800136c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001370:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800137e:	230c      	movs	r3, #12
 8001380:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <HAL_FMC_MspInit+0x11c>)
 8001388:	f000 fc84 	bl	8001c94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800138c:	2360      	movs	r3, #96	; 0x60
 800138e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800139c:	230c      	movs	r3, #12
 800139e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <HAL_FMC_MspInit+0x120>)
 80013a6:	f000 fc75 	bl	8001c94 <HAL_GPIO_Init>
 80013aa:	e000      	b.n	80013ae <HAL_FMC_MspInit+0xfe>
    return;
 80013ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000308 	.word	0x20000308
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40021800 	.word	0x40021800
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40020400 	.word	0x40020400

080013d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013dc:	f7ff ff68 	bl	80012b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	2036      	movs	r0, #54	; 0x36
 80013fe:	f000 fa17 	bl	8001830 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001402:	2036      	movs	r0, #54	; 0x36
 8001404:	f000 fa30 	bl	8001868 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <HAL_InitTick+0xa4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	4a1e      	ldr	r2, [pc, #120]	; (800148c <HAL_InitTick+0xa4>)
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	6413      	str	r3, [r2, #64]	; 0x40
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_InitTick+0xa4>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001424:	f107 0210 	add.w	r2, r7, #16
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fc62 	bl	8004cf8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001434:	f003 fc38 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 8001438:	4603      	mov	r3, r0
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800143e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001440:	4a13      	ldr	r2, [pc, #76]	; (8001490 <HAL_InitTick+0xa8>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9b      	lsrs	r3, r3, #18
 8001448:	3b01      	subs	r3, #1
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_InitTick+0xac>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_InitTick+0xb0>)
 8001450:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_InitTick+0xac>)
 8001454:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001458:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800145a:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_InitTick+0xac>)
 800145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_InitTick+0xac>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_InitTick+0xac>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <HAL_InitTick+0xac>)
 800146e:	f003 fecb 	bl	8005208 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d104      	bne.n	8001482 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <HAL_InitTick+0xac>)
 800147a:	f003 fef0 	bl	800525e <HAL_TIM_Base_Start_IT>
 800147e:	4603      	mov	r3, r0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3730      	adds	r7, #48	; 0x30
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	431bde83 	.word	0x431bde83
 8001494:	200086c0 	.word	0x200086c0
 8001498:	40001000 	.word	0x40001000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM6_DAC_IRQHandler+0x10>)
 80014d6:	f003 fee6 	bl	80052a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200086c0 	.word	0x200086c0

080014e4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <OTG_HS_IRQHandler+0x10>)
 80014ea:	f001 f825 	bl	8002538 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20008ae8 	.word	0x20008ae8

080014f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <LTDC_IRQHandler+0x10>)
 80014fe:	f002 fd01 	bl	8003f04 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20008524 	.word	0x20008524

0800150c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <DMA2D_IRQHandler+0x10>)
 8001512:	f000 fa1c 	bl	800194e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000864c 	.word	0x2000864c

08001520 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_sbrk+0x50>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x16>
		heap_end = &end;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <_sbrk+0x50>)
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <_sbrk+0x54>)
 8001534:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <_sbrk+0x50>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <_sbrk+0x50>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	466a      	mov	r2, sp
 8001546:	4293      	cmp	r3, r2
 8001548:	d907      	bls.n	800155a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800154a:	f00a fd23 	bl	800bf94 <__errno>
 800154e:	4602      	mov	r2, r0
 8001550:	230c      	movs	r3, #12
 8001552:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	e006      	b.n	8001568 <_sbrk+0x48>
	}

	heap_end += incr;
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <_sbrk+0x50>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a03      	ldr	r2, [pc, #12]	; (8001570 <_sbrk+0x50>)
 8001564:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000030c 	.word	0x2000030c
 8001574:	20008db0 	.word	0x20008db0

08001578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <SystemInit+0x28>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <SystemInit+0x28>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SystemInit+0x28>)
 800158e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001592:	609a      	str	r2, [r3, #8]
#endif
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015dc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015aa:	e003      	b.n	80015b4 <LoopCopyDataInit>

080015ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015b2:	3104      	adds	r1, #4

080015b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015b4:	480b      	ldr	r0, [pc, #44]	; (80015e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015bc:	d3f6      	bcc.n	80015ac <CopyDataInit>
  ldr  r2, =_sbss
 80015be:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015c0:	e002      	b.n	80015c8 <LoopFillZerobss>

080015c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015c4:	f842 3b04 	str.w	r3, [r2], #4

080015c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015cc:	d3f9      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ce:	f7ff ffd3 	bl	8001578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d2:	f00a fce5 	bl	800bfa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d6:	f7fe ffbf 	bl	8000558 <main>
  bx  lr    
 80015da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015dc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80015e0:	0800c250 	.word	0x0800c250
  ldr  r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015e8:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80015ec:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 80015f0:	20008db0 	.word	0x20008db0

080015f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <HAL_Init+0x40>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_Init+0x40>)
 800160e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_Init+0x40>)
 800161a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f8fa 	bl	800181a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fede 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fb98 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000008 	.word	0x20000008
 8001660:	20008700 	.word	0x20008700

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20008700 	.word	0x20008700

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_Delay+0x40>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000008 	.word	0x20000008

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <__NVIC_EnableIRQ+0x38>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff4c 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001842:	f7ff ff61 	bl	8001708 <__NVIC_GetPriorityGrouping>
 8001846:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	6978      	ldr	r0, [r7, #20]
 800184e:	f7ff ffb1 	bl	80017b4 <NVIC_EncodePriority>
 8001852:	4602      	mov	r2, r0
 8001854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff80 	bl	8001760 <__NVIC_SetPriority>
}
 8001860:	bf00      	nop
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff54 	bl	8001724 <__NVIC_EnableIRQ>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	795b      	ldrb	r3, [r3, #5]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fa86 	bl	8000db8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e03b      	b.n	8001946 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fa8a 	bl	8000dfc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190c:	f023 0107 	bic.w	r1, r3, #7
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001926:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68d1      	ldr	r1, [r2, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	430b      	orrs	r3, r1
 8001934:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d026      	beq.n	80019be <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d021      	beq.n	80019be <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001988:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2204      	movs	r2, #4
 80019a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d026      	beq.n	8001a16 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d021      	beq.n	8001a16 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2220      	movs	r2, #32
 80019e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	f043 0202 	orr.w	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2204      	movs	r2, #4
 80019fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d026      	beq.n	8001a6e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d021      	beq.n	8001a6e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a38:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2208      	movs	r2, #8
 8001a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a46:	f043 0204 	orr.w	r2, r3, #4
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2204      	movs	r2, #4
 8001a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00e      	beq.n	8001aa0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a90:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2204      	movs	r2, #4
 8001a98:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f853 	bl	8001b46 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d024      	beq.n	8001af4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01f      	beq.n	8001af4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01f      	beq.n	8001b3e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01a      	beq.n	8001b3e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b16:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f80e 	bl	8001b5a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_DMA2D_ConfigLayer+0x20>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e079      	b.n	8001c84 <HAL_DMA2D_ConfigLayer+0x114>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	3318      	adds	r3, #24
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	041b      	lsls	r3, r3, #16
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <HAL_DMA2D_ConfigLayer+0x120>)
 8001bbc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b0a      	cmp	r3, #10
 8001bc4:	d003      	beq.n	8001bce <HAL_DMA2D_ConfigLayer+0x5e>
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b09      	cmp	r3, #9
 8001bcc:	d107      	bne.n	8001bde <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e005      	b.n	8001bea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	061b      	lsls	r3, r3, #24
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d120      	bne.n	8001c32 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	ea02 0103 	and.w	r1, r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b0a      	cmp	r3, #10
 8001c18:	d003      	beq.n	8001c22 <HAL_DMA2D_ConfigLayer+0xb2>
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	d127      	bne.n	8001c72 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c30:	e01f      	b.n	8001c72 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69da      	ldr	r2, [r3, #28]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	ea02 0103 	and.w	r1, r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b0a      	cmp	r3, #10
 8001c5a:	d003      	beq.n	8001c64 <HAL_DMA2D_ConfigLayer+0xf4>
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b09      	cmp	r3, #9
 8001c62:	d106      	bne.n	8001c72 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c70:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	ff03000f 	.word	0xff03000f

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e177      	b.n	8001fa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f040 8166 	bne.w	8001f9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d00b      	beq.n	8001cee <HAL_GPIO_Init+0x5a>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce2:	2b11      	cmp	r3, #17
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b12      	cmp	r3, #18
 8001cec:	d130      	bne.n	8001d50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0xfc>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d123      	bne.n	8001dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	08da      	lsrs	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	69b9      	ldr	r1, [r7, #24]
 8001dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80c0 	beq.w	8001f9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b65      	ldr	r3, [pc, #404]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a64      	ldr	r2, [pc, #400]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b62      	ldr	r3, [pc, #392]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e36:	4a60      	ldr	r2, [pc, #384]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_GPIO_Init+0x328>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d037      	beq.n	8001ed2 <HAL_GPIO_Init+0x23e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <HAL_GPIO_Init+0x32c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d031      	beq.n	8001ece <HAL_GPIO_Init+0x23a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a55      	ldr	r2, [pc, #340]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02b      	beq.n	8001eca <HAL_GPIO_Init+0x236>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a54      	ldr	r2, [pc, #336]	; (8001fc8 <HAL_GPIO_Init+0x334>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d025      	beq.n	8001ec6 <HAL_GPIO_Init+0x232>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a53      	ldr	r2, [pc, #332]	; (8001fcc <HAL_GPIO_Init+0x338>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x22e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_GPIO_Init+0x33c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x22a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a51      	ldr	r2, [pc, #324]	; (8001fd4 <HAL_GPIO_Init+0x340>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x226>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a50      	ldr	r2, [pc, #320]	; (8001fd8 <HAL_GPIO_Init+0x344>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x222>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4f      	ldr	r2, [pc, #316]	; (8001fdc <HAL_GPIO_Init+0x348>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x21e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x21a>
 8001eaa:	2309      	movs	r3, #9
 8001eac:	e012      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001eae:	230a      	movs	r3, #10
 8001eb0:	e010      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	e00e      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e00c      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e00a      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	e008      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e004      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e002      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	f002 0203 	and.w	r2, r2, #3
 8001eda:	0092      	lsls	r2, r2, #2
 8001edc:	4093      	lsls	r3, r2
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee4:	4934      	ldr	r1, [pc, #208]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f16:	4a33      	ldr	r2, [pc, #204]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f1c:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f40:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f94:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	f67f ae84 	bls.w	8001cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3724      	adds	r7, #36	; 0x24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40013800 	.word	0x40013800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020c00 	.word	0x40020c00
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40021400 	.word	0x40021400
 8001fd4:	40021800 	.word	0x40021800
 8001fd8:	40021c00 	.word	0x40021c00
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40022400 	.word	0x40022400
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff8:	787b      	ldrb	r3, [r7, #1]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002004:	e003      	b.n	800200e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	041a      	lsls	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	619a      	str	r2, [r3, #24]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800201a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201c:	b08f      	sub	sp, #60	; 0x3c
 800201e:	af0a      	add	r7, sp, #40	; 0x28
 8002020:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e054      	b.n	80020d6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f009 fcf0 	bl	800ba2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2203      	movs	r2, #3
 8002050:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f004 f9fa 	bl	8006464 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	687e      	ldr	r6, [r7, #4]
 8002078:	466d      	mov	r5, sp
 800207a:	f106 0410 	add.w	r4, r6, #16
 800207e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800208a:	e885 0003 	stmia.w	r5, {r0, r1}
 800208e:	1d33      	adds	r3, r6, #4
 8002090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002092:	6838      	ldr	r0, [r7, #0]
 8002094:	f004 f974 	bl	8006380 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2101      	movs	r1, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 f9f1 	bl	8006486 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	687e      	ldr	r6, [r7, #4]
 80020ac:	466d      	mov	r5, sp
 80020ae:	f106 0410 	add.w	r4, r6, #16
 80020b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020be:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c2:	1d33      	adds	r3, r6, #4
 80020c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c6:	6838      	ldr	r0, [r7, #0]
 80020c8:	f004 fb04 	bl	80066d4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020de <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020de:	b590      	push	{r4, r7, lr}
 80020e0:	b089      	sub	sp, #36	; 0x24
 80020e2:	af04      	add	r7, sp, #16
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	4608      	mov	r0, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
 80020ec:	4603      	mov	r3, r0
 80020ee:	70fb      	strb	r3, [r7, #3]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70bb      	strb	r3, [r7, #2]
 80020f4:	4613      	mov	r3, r2
 80020f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_HCD_HC_Init+0x28>
 8002102:	2302      	movs	r3, #2
 8002104:	e07f      	b.n	8002206 <HAL_HCD_HC_Init+0x128>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	333d      	adds	r3, #61	; 0x3d
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	3338      	adds	r3, #56	; 0x38
 8002132:	787a      	ldrb	r2, [r7, #1]
 8002134:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	3340      	adds	r3, #64	; 0x40
 8002146:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002148:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3339      	adds	r3, #57	; 0x39
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	333f      	adds	r3, #63	; 0x3f
 800216e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	78bb      	ldrb	r3, [r7, #2]
 8002178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800217c:	b2d8      	uxtb	r0, r3
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	333a      	adds	r3, #58	; 0x3a
 800218c:	4602      	mov	r2, r0
 800218e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002190:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002194:	2b00      	cmp	r3, #0
 8002196:	da0a      	bge.n	80021ae <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	333b      	adds	r3, #59	; 0x3b
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e009      	b.n	80021c2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	333b      	adds	r3, #59	; 0x3b
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	333c      	adds	r3, #60	; 0x3c
 80021d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021d6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	787c      	ldrb	r4, [r7, #1]
 80021de:	78ba      	ldrb	r2, [r7, #2]
 80021e0:	78f9      	ldrb	r1, [r7, #3]
 80021e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	4623      	mov	r3, r4
 80021f4:	f004 fbf0 	bl	80069d8 <USB_HC_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}

0800220e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_HCD_HC_Halt+0x1e>
 8002228:	2302      	movs	r3, #2
 800222a:	e00f      	b.n	800224c <HAL_HCD_HC_Halt+0x3e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f004 fe2c 	bl	8006e9a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	461a      	mov	r2, r3
 8002262:	4603      	mov	r3, r0
 8002264:	70fb      	strb	r3, [r7, #3]
 8002266:	460b      	mov	r3, r1
 8002268:	70bb      	strb	r3, [r7, #2]
 800226a:	4613      	mov	r3, r2
 800226c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	333b      	adds	r3, #59	; 0x3b
 800227e:	78ba      	ldrb	r2, [r7, #2]
 8002280:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	333f      	adds	r3, #63	; 0x3f
 8002292:	787a      	ldrb	r2, [r7, #1]
 8002294:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002296:	7c3b      	ldrb	r3, [r7, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d114      	bne.n	80022c6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3342      	adds	r3, #66	; 0x42
 80022ac:	2203      	movs	r2, #3
 80022ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	333d      	adds	r3, #61	; 0x3d
 80022c0:	7f3a      	ldrb	r2, [r7, #28]
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e009      	b.n	80022da <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	3342      	adds	r3, #66	; 0x42
 80022d6:	2202      	movs	r2, #2
 80022d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022da:	787b      	ldrb	r3, [r7, #1]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	f200 80d6 	bhi.w	800248e <HAL_HCD_HC_SubmitRequest+0x23a>
 80022e2:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	08002479 	.word	0x08002479
 80022f0:	08002365 	.word	0x08002365
 80022f4:	080023ef 	.word	0x080023ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022f8:	7c3b      	ldrb	r3, [r7, #16]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	f040 80c9 	bne.w	8002492 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002300:	78bb      	ldrb	r3, [r7, #2]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80c5 	bne.w	8002492 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002308:	8b3b      	ldrh	r3, [r7, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	440b      	add	r3, r1
 800231c:	3351      	adds	r3, #81	; 0x51
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	3351      	adds	r3, #81	; 0x51
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3342      	adds	r3, #66	; 0x42
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800234c:	e0a1      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	3342      	adds	r3, #66	; 0x42
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
      break;
 8002362:	e096      	b.n	8002492 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002364:	78bb      	ldrb	r3, [r7, #2]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d120      	bne.n	80023ac <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	3351      	adds	r3, #81	; 0x51
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3342      	adds	r3, #66	; 0x42
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002394:	e07e      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	440b      	add	r3, r1
 80023a4:	3342      	adds	r3, #66	; 0x42
 80023a6:	2202      	movs	r2, #2
 80023a8:	701a      	strb	r2, [r3, #0]
      break;
 80023aa:	e073      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	440b      	add	r3, r1
 80023ba:	3350      	adds	r3, #80	; 0x50
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	440b      	add	r3, r1
 80023d0:	3342      	adds	r3, #66	; 0x42
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
      break;
 80023d6:	e05d      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	440b      	add	r3, r1
 80023e6:	3342      	adds	r3, #66	; 0x42
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
      break;
 80023ec:	e052      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023ee:	78bb      	ldrb	r3, [r7, #2]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d120      	bne.n	8002436 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	440b      	add	r3, r1
 8002402:	3351      	adds	r3, #81	; 0x51
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	3342      	adds	r3, #66	; 0x42
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800241e:	e039      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	3342      	adds	r3, #66	; 0x42
 8002430:	2202      	movs	r2, #2
 8002432:	701a      	strb	r2, [r3, #0]
      break;
 8002434:	e02e      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	3350      	adds	r3, #80	; 0x50
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	440b      	add	r3, r1
 800245a:	3342      	adds	r3, #66	; 0x42
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
      break;
 8002460:	e018      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	3342      	adds	r3, #66	; 0x42
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]
      break;
 8002476:	e00d      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	3342      	adds	r3, #66	; 0x42
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
      break;
 800248c:	e002      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800248e:	bf00      	nop
 8002490:	e000      	b.n	8002494 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002492:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	3344      	adds	r3, #68	; 0x44
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	8b39      	ldrh	r1, [r7, #24]
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4403      	add	r3, r0
 80024b8:	3348      	adds	r3, #72	; 0x48
 80024ba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	335c      	adds	r3, #92	; 0x5c
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	334c      	adds	r3, #76	; 0x4c
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	3339      	adds	r3, #57	; 0x39
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	335d      	adds	r3, #93	; 0x5d
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	3338      	adds	r3, #56	; 0x38
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	18d1      	adds	r1, r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	f004 fb60 	bl	8006bec <USB_HC_StartXfer>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop

08002538 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f004 f87d 	bl	800664e <USB_GetMode>
 8002554:	4603      	mov	r3, r0
 8002556:	2b01      	cmp	r3, #1
 8002558:	f040 80ef 	bne.w	800273a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f004 f861 	bl	8006628 <USB_ReadInterrupts>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80e5 	beq.w	8002738 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f004 f858 	bl	8006628 <USB_ReadInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002582:	d104      	bne.n	800258e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800258c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f004 f848 	bl	8006628 <USB_ReadInterrupts>
 8002598:	4603      	mov	r3, r0
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a2:	d104      	bne.n	80025ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 f838 	bl	8006628 <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c2:	d104      	bne.n	80025ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f004 f828 	bl	8006628 <USB_ReadInterrupts>
 80025d8:	4603      	mov	r3, r0
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d103      	bne.n	80025ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2202      	movs	r2, #2
 80025e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 f81a 	bl	8006628 <USB_ReadInterrupts>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025fe:	d115      	bne.n	800262c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002608:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d108      	bne.n	800262c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f009 fa80 	bl	800bb20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2101      	movs	r1, #1
 8002626:	4618      	mov	r0, r3
 8002628:	f004 f910 	bl	800684c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f003 fff9 	bl	8006628 <USB_ReadInterrupts>
 8002636:	4603      	mov	r3, r0
 8002638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002640:	d102      	bne.n	8002648 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f001 f966 	bl	8003914 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f003 ffeb 	bl	8006628 <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b08      	cmp	r3, #8
 800265a:	d106      	bne.n	800266a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f009 fa43 	bl	800bae8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2208      	movs	r2, #8
 8002668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 ffda 	bl	8006628 <USB_ReadInterrupts>
 8002674:	4603      	mov	r3, r0
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800267e:	d138      	bne.n	80026f2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f004 fbf7 	bl	8006e78 <USB_HC_ReadInterrupt>
 800268a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e025      	b.n	80026de <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	fa22 f303 	lsr.w	r3, r2, r3
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d018      	beq.n	80026d8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026bc:	d106      	bne.n	80026cc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4619      	mov	r1, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f8cf 	bl	8002868 <HCD_HC_IN_IRQHandler>
 80026ca:	e005      	b.n	80026d8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fcfd 	bl	80030d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3301      	adds	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3d4      	bcc.n	8002692 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 ff96 	bl	8006628 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b10      	cmp	r3, #16
 8002704:	d101      	bne.n	800270a <HAL_HCD_IRQHandler+0x1d2>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_HCD_IRQHandler+0x1d4>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d014      	beq.n	800273a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0210 	bic.w	r2, r2, #16
 800271e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f001 f84b 	bl	80037bc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0210 	orr.w	r2, r2, #16
 8002734:	619a      	str	r2, [r3, #24]
 8002736:	e000      	b.n	800273a <HAL_HCD_IRQHandler+0x202>
      return;
 8002738:	bf00      	nop
    }
  }
}
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_HCD_Start+0x16>
 8002752:	2302      	movs	r3, #2
 8002754:	e013      	b.n	800277e <HAL_HCD_Start+0x3e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fe6d 	bl	8006442 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f004 f8d0 	bl	8006914 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_HCD_Stop+0x16>
 8002798:	2302      	movs	r3, #2
 800279a:	e00d      	b.n	80027b8 <HAL_HCD_Stop+0x32>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 fcb1 	bl	8007110 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 f877 	bl	80068c0 <USB_ResetPort>
 80027d2:	4603      	mov	r3, r0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	335c      	adds	r3, #92	; 0x5c
 80027f8:	781b      	ldrb	r3, [r3, #0]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	334c      	adds	r3, #76	; 0x4c
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f004 f8b9 	bl	80069b4 <USB_GetCurrentFrame>
 8002842:	4603      	mov	r3, r0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f004 f894 	bl	8006986 <USB_GetHostSpeed>
 800285e:	4603      	mov	r3, r0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b04      	cmp	r3, #4
 8002896:	d119      	bne.n	80028cc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	461a      	mov	r2, r3
 80028a6:	2304      	movs	r3, #4
 80028a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	0151      	lsls	r1, r2, #5
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	440a      	add	r2, r1
 80028c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	60d3      	str	r3, [r2, #12]
 80028ca:	e0ce      	b.n	8002a6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e2:	d12c      	bne.n	800293e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	461a      	mov	r2, r3
 80028f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	335d      	adds	r3, #93	; 0x5d
 8002908:	2207      	movs	r2, #7
 800290a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	0151      	lsls	r1, r2, #5
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	440a      	add	r2, r1
 8002922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f004 faaf 	bl	8006e9a <USB_HC_Halt>
 800293c:	e095      	b.n	8002a6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b20      	cmp	r3, #32
 8002952:	d109      	bne.n	8002968 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	461a      	mov	r2, r3
 8002962:	2320      	movs	r3, #32
 8002964:	6093      	str	r3, [r2, #8]
 8002966:	e080      	b.n	8002a6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b08      	cmp	r3, #8
 800297c:	d134      	bne.n	80029e8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	0151      	lsls	r1, r2, #5
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	440a      	add	r2, r1
 8002994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	335d      	adds	r3, #93	; 0x5d
 80029ae:	2205      	movs	r2, #5
 80029b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	461a      	mov	r2, r3
 80029c0:	2310      	movs	r3, #16
 80029c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	461a      	mov	r2, r3
 80029d2:	2308      	movs	r3, #8
 80029d4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f004 fa5a 	bl	8006e9a <USB_HC_Halt>
 80029e6:	e040      	b.n	8002a6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fe:	d134      	bne.n	8002a6a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	0151      	lsls	r1, r2, #5
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	440a      	add	r2, r1
 8002a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 fa35 	bl	8006e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2310      	movs	r3, #16
 8002a40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	335d      	adds	r3, #93	; 0x5d
 8002a52:	2208      	movs	r2, #8
 8002a54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a62:	461a      	mov	r2, r3
 8002a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a68:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a80:	d122      	bne.n	8002ac8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	0151      	lsls	r1, r2, #5
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	440a      	add	r2, r1
 8002a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 f9f4 	bl	8006e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ac6:	e300      	b.n	80030ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	f040 80fd 	bne.w	8002cda <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	3348      	adds	r3, #72	; 0x48
 8002af8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	0159      	lsls	r1, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	440b      	add	r3, r1
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b0c:	1ad1      	subs	r1, r2, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4403      	add	r3, r0
 8002b1c:	334c      	adds	r3, #76	; 0x4c
 8002b1e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	335d      	adds	r3, #93	; 0x5d
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	440b      	add	r3, r1
 8002b42:	3358      	adds	r3, #88	; 0x58
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	461a      	mov	r2, r3
 8002b56:	2301      	movs	r3, #1
 8002b58:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	333f      	adds	r3, #63	; 0x3f
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	333f      	adds	r3, #63	; 0x3f
 8002b80:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d121      	bne.n	8002bca <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	0151      	lsls	r1, r2, #5
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	440a      	add	r2, r1
 8002b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 f972 	bl	8006e9a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	6093      	str	r3, [r2, #8]
 8002bc8:	e070      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	333f      	adds	r3, #63	; 0x3f
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d12a      	bne.n	8002c36 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	0151      	lsls	r1, r2, #5
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	440a      	add	r2, r1
 8002bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bfe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	335c      	adds	r3, #92	; 0x5c
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	b2d8      	uxtb	r0, r3
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	335c      	adds	r3, #92	; 0x5c
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4601      	mov	r1, r0
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f008 ff84 	bl	800bb3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c34:	e03a      	b.n	8002cac <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	333f      	adds	r3, #63	; 0x3f
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d12f      	bne.n	8002cac <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	335c      	adds	r3, #92	; 0x5c
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3350      	adds	r3, #80	; 0x50
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f083 0301 	eor.w	r3, r3, #1
 8002c76:	b2d8      	uxtb	r0, r3
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	3350      	adds	r3, #80	; 0x50
 8002c88:	4602      	mov	r2, r0
 8002c8a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	b2d8      	uxtb	r0, r3
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	335c      	adds	r3, #92	; 0x5c
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f008 ff48 	bl	800bb3c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	3350      	adds	r3, #80	; 0x50
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	f083 0301 	eor.w	r3, r3, #1
 8002cc2:	b2d8      	uxtb	r0, r3
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3350      	adds	r3, #80	; 0x50
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	701a      	strb	r2, [r3, #0]
}
 8002cd8:	e1f7      	b.n	80030ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	f040 811a 	bne.w	8002f26 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	0151      	lsls	r1, r2, #5
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	440a      	add	r2, r1
 8002d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d0c:	f023 0302 	bic.w	r3, r3, #2
 8002d10:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	335d      	adds	r3, #93	; 0x5d
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10a      	bne.n	8002d3e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	e0d9      	b.n	8002ef2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	335d      	adds	r3, #93	; 0x5d
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b05      	cmp	r3, #5
 8002d52:	d10a      	bne.n	8002d6a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	335c      	adds	r3, #92	; 0x5c
 8002d64:	2205      	movs	r2, #5
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e0c3      	b.n	8002ef2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	335d      	adds	r3, #93	; 0x5d
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d00a      	beq.n	8002d96 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	335d      	adds	r3, #93	; 0x5d
 8002d90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d156      	bne.n	8002e44 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	3358      	adds	r3, #88	; 0x58
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	1c59      	adds	r1, r3, #1
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4403      	add	r3, r0
 8002db8:	3358      	adds	r3, #88	; 0x58
 8002dba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	3358      	adds	r3, #88	; 0x58
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d914      	bls.n	8002dfc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	440b      	add	r3, r1
 8002de0:	3358      	adds	r3, #88	; 0x58
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	440b      	add	r3, r1
 8002df4:	335c      	adds	r3, #92	; 0x5c
 8002df6:	2204      	movs	r2, #4
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e009      	b.n	8002e10 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	335c      	adds	r3, #92	; 0x5c
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e26:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e2e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e056      	b.n	8002ef2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	335d      	adds	r3, #93	; 0x5d
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d123      	bne.n	8002ea2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	335c      	adds	r3, #92	; 0x5c
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e84:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e8c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	e027      	b.n	8002ef2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	335d      	adds	r3, #93	; 0x5d
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b07      	cmp	r3, #7
 8002eb6:	d11c      	bne.n	8002ef2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3358      	adds	r3, #88	; 0x58
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4403      	add	r3, r0
 8002eda:	3358      	adds	r3, #88	; 0x58
 8002edc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	335c      	adds	r3, #92	; 0x5c
 8002eee:	2204      	movs	r2, #4
 8002ef0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efe:	461a      	mov	r2, r3
 8002f00:	2302      	movs	r3, #2
 8002f02:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	b2d8      	uxtb	r0, r3
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	335c      	adds	r3, #92	; 0x5c
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4601      	mov	r1, r0
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f008 fe0c 	bl	800bb3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f24:	e0d1      	b.n	80030ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f38:	2b80      	cmp	r3, #128	; 0x80
 8002f3a:	d13e      	bne.n	8002fba <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	0151      	lsls	r1, r2, #5
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	440a      	add	r2, r1
 8002f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f56:	f043 0302 	orr.w	r3, r3, #2
 8002f5a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	3358      	adds	r3, #88	; 0x58
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	1c59      	adds	r1, r3, #1
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4403      	add	r3, r0
 8002f7e:	3358      	adds	r3, #88	; 0x58
 8002f80:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	440b      	add	r3, r1
 8002f90:	335d      	adds	r3, #93	; 0x5d
 8002f92:	2206      	movs	r2, #6
 8002f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 ff7a 	bl	8006e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	6093      	str	r3, [r2, #8]
}
 8002fb8:	e087      	b.n	80030ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d17c      	bne.n	80030ca <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	333f      	adds	r3, #63	; 0x3f
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d122      	bne.n	800302c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3358      	adds	r3, #88	; 0x58
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	0151      	lsls	r1, r2, #5
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	440a      	add	r2, r1
 8003010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f003 ff38 	bl	8006e9a <USB_HC_Halt>
 800302a:	e045      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	333f      	adds	r3, #63	; 0x3f
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	333f      	adds	r3, #63	; 0x3f
 8003052:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003054:	2b02      	cmp	r3, #2
 8003056:	d12f      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	3358      	adds	r3, #88	; 0x58
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d121      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	335d      	adds	r3, #93	; 0x5d
 8003084:	2203      	movs	r2, #3
 8003086:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	0151      	lsls	r1, r2, #5
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	440a      	add	r2, r1
 800309e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a2:	f043 0302 	orr.w	r3, r3, #2
 80030a6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fef1 	bl	8006e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2310      	movs	r3, #16
 80030c8:	6093      	str	r3, [r2, #8]
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d119      	bne.n	8003136 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	2304      	movs	r3, #4
 8003112:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	0151      	lsls	r1, r2, #5
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	440a      	add	r2, r1
 800312a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800312e:	f043 0302 	orr.w	r3, r3, #2
 8003132:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003134:	e33e      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b20      	cmp	r3, #32
 800314a:	d141      	bne.n	80031d0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	461a      	mov	r2, r3
 800315a:	2320      	movs	r3, #32
 800315c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	333d      	adds	r3, #61	; 0x3d
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 831f 	bne.w	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	333d      	adds	r3, #61	; 0x3d
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	440b      	add	r3, r1
 8003198:	335c      	adds	r3, #92	; 0x5c
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	0151      	lsls	r1, r2, #5
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	440a      	add	r2, r1
 80031b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f003 fe66 	bl	8006e9a <USB_HC_Halt>
}
 80031ce:	e2f1      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d13f      	bne.n	8003266 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	335d      	adds	r3, #93	; 0x5d
 80031f6:	2204      	movs	r2, #4
 80031f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	333d      	adds	r3, #61	; 0x3d
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	3358      	adds	r3, #88	; 0x58
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	0151      	lsls	r1, r2, #5
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	440a      	add	r2, r1
 8003238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fe24 	bl	8006e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	2340      	movs	r3, #64	; 0x40
 8003262:	6093      	str	r3, [r2, #8]
}
 8003264:	e2a6      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327c:	d122      	bne.n	80032c4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4413      	add	r3, r2
 8003286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	0151      	lsls	r1, r2, #5
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	440a      	add	r2, r1
 8003294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f003 fdf6 	bl	8006e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	461a      	mov	r2, r3
 80032bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c0:	6093      	str	r3, [r2, #8]
}
 80032c2:	e277      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d135      	bne.n	8003346 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	3358      	adds	r3, #88	; 0x58
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	0151      	lsls	r1, r2, #5
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	440a      	add	r2, r1
 8003304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f003 fdbe 	bl	8006e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	2301      	movs	r3, #1
 800332e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	335d      	adds	r3, #93	; 0x5d
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
}
 8003344:	e236      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b08      	cmp	r3, #8
 800335a:	d12b      	bne.n	80033b4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	461a      	mov	r2, r3
 800336a:	2308      	movs	r3, #8
 800336c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	0151      	lsls	r1, r2, #5
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	440a      	add	r2, r1
 8003384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f003 fd7e 	bl	8006e9a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	440b      	add	r3, r1
 80033ac:	335d      	adds	r3, #93	; 0x5d
 80033ae:	2205      	movs	r2, #5
 80033b0:	701a      	strb	r2, [r3, #0]
}
 80033b2:	e1ff      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d155      	bne.n	8003476 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	3358      	adds	r3, #88	; 0x58
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	335d      	adds	r3, #93	; 0x5d
 80033ee:	2203      	movs	r2, #3
 80033f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	440b      	add	r3, r1
 8003400:	333d      	adds	r3, #61	; 0x3d
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d114      	bne.n	8003432 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	333c      	adds	r3, #60	; 0x3c
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	333d      	adds	r3, #61	; 0x3d
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	0151      	lsls	r1, r2, #5
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	440a      	add	r2, r1
 8003448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800344c:	f043 0302 	orr.w	r3, r3, #2
 8003450:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f003 fd1c 	bl	8006e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	461a      	mov	r2, r3
 8003470:	2310      	movs	r3, #16
 8003472:	6093      	str	r3, [r2, #8]
}
 8003474:	e19e      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b80      	cmp	r3, #128	; 0x80
 800348a:	d12b      	bne.n	80034e4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	0151      	lsls	r1, r2, #5
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	440a      	add	r2, r1
 80034a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f003 fcef 	bl	8006e9a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	335d      	adds	r3, #93	; 0x5d
 80034cc:	2206      	movs	r2, #6
 80034ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	6093      	str	r3, [r2, #8]
}
 80034e2:	e167      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fa:	d135      	bne.n	8003568 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	0151      	lsls	r1, r2, #5
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	440a      	add	r2, r1
 8003512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003516:	f043 0302 	orr.w	r3, r3, #2
 800351a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fcb7 	bl	8006e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003538:	461a      	mov	r2, r3
 800353a:	2310      	movs	r3, #16
 800353c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	461a      	mov	r2, r3
 800354c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003550:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	440b      	add	r3, r1
 8003560:	335d      	adds	r3, #93	; 0x5d
 8003562:	2208      	movs	r2, #8
 8003564:	701a      	strb	r2, [r3, #0]
}
 8003566:	e125      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b02      	cmp	r3, #2
 800357c:	f040 811a 	bne.w	80037b4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	0151      	lsls	r1, r2, #5
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	440a      	add	r2, r1
 8003596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800359a:	f023 0302 	bic.w	r3, r3, #2
 800359e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	335d      	adds	r3, #93	; 0x5d
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d137      	bne.n	8003626 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	440b      	add	r3, r1
 80035c4:	335c      	adds	r3, #92	; 0x5c
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	333f      	adds	r3, #63	; 0x3f
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d00b      	beq.n	80035f8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	333f      	adds	r3, #63	; 0x3f
 80035f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	f040 80c5 	bne.w	8003782 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	440b      	add	r3, r1
 8003606:	3351      	adds	r3, #81	; 0x51
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	f083 0301 	eor.w	r3, r3, #1
 800360e:	b2d8      	uxtb	r0, r3
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	3351      	adds	r3, #81	; 0x51
 8003620:	4602      	mov	r2, r0
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e0ad      	b.n	8003782 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	440b      	add	r3, r1
 8003634:	335d      	adds	r3, #93	; 0x5d
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d10a      	bne.n	8003652 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	335c      	adds	r3, #92	; 0x5c
 800364c:	2202      	movs	r2, #2
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e097      	b.n	8003782 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	335d      	adds	r3, #93	; 0x5d
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b04      	cmp	r3, #4
 8003666:	d10a      	bne.n	800367e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	335c      	adds	r3, #92	; 0x5c
 8003678:	2202      	movs	r2, #2
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e081      	b.n	8003782 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	440b      	add	r3, r1
 800368c:	335d      	adds	r3, #93	; 0x5d
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b05      	cmp	r3, #5
 8003692:	d10a      	bne.n	80036aa <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	335c      	adds	r3, #92	; 0x5c
 80036a4:	2205      	movs	r2, #5
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e06b      	b.n	8003782 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	440b      	add	r3, r1
 80036b8:	335d      	adds	r3, #93	; 0x5d
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d00a      	beq.n	80036d6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	440b      	add	r3, r1
 80036ce:	335d      	adds	r3, #93	; 0x5d
 80036d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d155      	bne.n	8003782 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	440b      	add	r3, r1
 80036e4:	3358      	adds	r3, #88	; 0x58
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1c59      	adds	r1, r3, #1
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4403      	add	r3, r0
 80036f8:	3358      	adds	r3, #88	; 0x58
 80036fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	440b      	add	r3, r1
 800370a:	3358      	adds	r3, #88	; 0x58
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d914      	bls.n	800373c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	3358      	adds	r3, #88	; 0x58
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	335c      	adds	r3, #92	; 0x5c
 8003736:	2204      	movs	r2, #4
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e009      	b.n	8003750 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	440b      	add	r3, r1
 800374a:	335c      	adds	r3, #92	; 0x5c
 800374c:	2202      	movs	r2, #2
 800374e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003766:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800376e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	461a      	mov	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4413      	add	r3, r2
 800378a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378e:	461a      	mov	r2, r3
 8003790:	2302      	movs	r3, #2
 8003792:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	b2d8      	uxtb	r0, r3
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	440b      	add	r3, r1
 80037a6:	335c      	adds	r3, #92	; 0x5c
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4601      	mov	r1, r0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f008 f9c4 	bl	800bb3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037b4:	bf00      	nop
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	0c5b      	lsrs	r3, r3, #17
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d003      	beq.n	8003800 <HCD_RXQLVL_IRQHandler+0x44>
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	f000 8082 	beq.w	8003902 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037fe:	e083      	b.n	8003908 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d07f      	beq.n	8003906 <HCD_RXQLVL_IRQHandler+0x14a>
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	3344      	adds	r3, #68	; 0x44
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d074      	beq.n	8003906 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	440b      	add	r3, r1
 800382e:	3344      	adds	r3, #68	; 0x44
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	b292      	uxth	r2, r2
 8003836:	4619      	mov	r1, r3
 8003838:	f002 fecd 	bl	80065d6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	440b      	add	r3, r1
 800384a:	3344      	adds	r3, #68	; 0x44
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	18d1      	adds	r1, r2, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4403      	add	r3, r0
 8003860:	3344      	adds	r3, #68	; 0x44
 8003862:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	440b      	add	r3, r1
 8003872:	334c      	adds	r3, #76	; 0x4c
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	18d1      	adds	r1, r2, r3
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4403      	add	r3, r0
 8003888:	334c      	adds	r3, #76	; 0x4c
 800388a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HCD_RXQLVL_IRQHandler+0x154>)
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d031      	beq.n	8003906 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ce:	461a      	mov	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	440b      	add	r3, r1
 80038e2:	3350      	adds	r3, #80	; 0x50
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	f083 0301 	eor.w	r3, r3, #1
 80038ea:	b2d8      	uxtb	r0, r3
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	440b      	add	r3, r1
 80038fa:	3350      	adds	r3, #80	; 0x50
 80038fc:	4602      	mov	r2, r0
 80038fe:	701a      	strb	r2, [r3, #0]
      break;
 8003900:	e001      	b.n	8003906 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003902:	bf00      	nop
 8003904:	e000      	b.n	8003908 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003906:	bf00      	nop
  }
}
 8003908:	bf00      	nop
 800390a:	3728      	adds	r7, #40	; 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	1ff80000 	.word	0x1ff80000

08003914 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003940:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b02      	cmp	r3, #2
 800394a:	d10b      	bne.n	8003964 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d102      	bne.n	800395c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f008 f8d4 	bl	800bb04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f043 0302 	orr.w	r3, r3, #2
 8003962:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b08      	cmp	r3, #8
 800396c:	d132      	bne.n	80039d4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f043 0308 	orr.w	r3, r3, #8
 8003974:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b04      	cmp	r3, #4
 800397e:	d126      	bne.n	80039ce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d113      	bne.n	80039b0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800398e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003992:	d106      	bne.n	80039a2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2102      	movs	r1, #2
 800399a:	4618      	mov	r0, r3
 800399c:	f002 ff56 	bl	800684c <USB_InitFSLSPClkSel>
 80039a0:	e011      	b.n	80039c6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2101      	movs	r1, #1
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 ff4f 	bl	800684c <USB_InitFSLSPClkSel>
 80039ae:	e00a      	b.n	80039c6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039be:	461a      	mov	r2, r3
 80039c0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039c4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f008 f8ca 	bl	800bb60 <HAL_HCD_PortEnabled_Callback>
 80039cc:	e002      	b.n	80039d4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f008 f8d4 	bl	800bb7c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d103      	bne.n	80039e6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f043 0320 	orr.w	r3, r3, #32
 80039e4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6013      	str	r3, [r2, #0]
}
 80039f2:	bf00      	nop
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e11f      	b.n	8003c4e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fa12 	bl	8000e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	; 0x24
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a60:	f001 f922 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 8003a64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4a7b      	ldr	r2, [pc, #492]	; (8003c58 <HAL_I2C_Init+0x25c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d807      	bhi.n	8003a80 <HAL_I2C_Init+0x84>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a7a      	ldr	r2, [pc, #488]	; (8003c5c <HAL_I2C_Init+0x260>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	bf94      	ite	ls
 8003a78:	2301      	movls	r3, #1
 8003a7a:	2300      	movhi	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	e006      	b.n	8003a8e <HAL_I2C_Init+0x92>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a77      	ldr	r2, [pc, #476]	; (8003c60 <HAL_I2C_Init+0x264>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	bf94      	ite	ls
 8003a88:	2301      	movls	r3, #1
 8003a8a:	2300      	movhi	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0db      	b.n	8003c4e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a72      	ldr	r2, [pc, #456]	; (8003c64 <HAL_I2C_Init+0x268>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0c9b      	lsrs	r3, r3, #18
 8003aa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a64      	ldr	r2, [pc, #400]	; (8003c58 <HAL_I2C_Init+0x25c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d802      	bhi.n	8003ad0 <HAL_I2C_Init+0xd4>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	3301      	adds	r3, #1
 8003ace:	e009      	b.n	8003ae4 <HAL_I2C_Init+0xe8>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	4a63      	ldr	r2, [pc, #396]	; (8003c68 <HAL_I2C_Init+0x26c>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	099b      	lsrs	r3, r3, #6
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003af6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4956      	ldr	r1, [pc, #344]	; (8003c58 <HAL_I2C_Init+0x25c>)
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d80d      	bhi.n	8003b20 <HAL_I2C_Init+0x124>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1e59      	subs	r1, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	bf38      	it	cc
 8003b1c:	2304      	movcc	r3, #4
 8003b1e:	e04f      	b.n	8003bc0 <HAL_I2C_Init+0x1c4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d111      	bne.n	8003b4c <HAL_I2C_Init+0x150>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e58      	subs	r0, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	440b      	add	r3, r1
 8003b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e012      	b.n	8003b72 <HAL_I2C_Init+0x176>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1e58      	subs	r0, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	0099      	lsls	r1, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b62:	3301      	adds	r3, #1
 8003b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Init+0x17e>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e022      	b.n	8003bc0 <HAL_I2C_Init+0x1c4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10e      	bne.n	8003ba0 <HAL_I2C_Init+0x1a4>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1e58      	subs	r0, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	440b      	add	r3, r1
 8003b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b94:	3301      	adds	r3, #1
 8003b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9e:	e00f      	b.n	8003bc0 <HAL_I2C_Init+0x1c4>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1e58      	subs	r0, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	0099      	lsls	r1, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	6809      	ldr	r1, [r1, #0]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6911      	ldr	r1, [r2, #16]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68d2      	ldr	r2, [r2, #12]
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	000186a0 	.word	0x000186a0
 8003c5c:	001e847f 	.word	0x001e847f
 8003c60:	003d08ff 	.word	0x003d08ff
 8003c64:	431bde83 	.word	0x431bde83
 8003c68:	10624dd3 	.word	0x10624dd3

08003c6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d129      	bne.n	8003cd6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2224      	movs	r2, #36	; 0x24
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0210 	bic.w	r2, r2, #16
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e000      	b.n	8003cd8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003cd6:	2302      	movs	r3, #2
  }
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d12a      	bne.n	8003d54 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2224      	movs	r2, #36	; 0x24
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003d1e:	89fb      	ldrh	r3, [r7, #14]
 8003d20:	f023 030f 	bic.w	r3, r3, #15
 8003d24:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	89fb      	ldrh	r3, [r7, #14]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	89fa      	ldrh	r2, [r7, #14]
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e000      	b.n	8003d56 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0bf      	b.n	8003ef6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd f8c8 	bl	8000f20 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003da6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003dbc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6899      	ldr	r1, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b4a      	ldr	r3, [pc, #296]	; (8003f00 <HAL_LTDC_Init+0x19c>)
 8003dd8:	400b      	ands	r3, r1
 8003dda:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6899      	ldr	r1, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68d9      	ldr	r1, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <HAL_LTDC_Init+0x19c>)
 8003e06:	400b      	ands	r3, r1
 8003e08:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68d9      	ldr	r1, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1a      	ldr	r2, [r3, #32]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6919      	ldr	r1, [r3, #16]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <HAL_LTDC_Init+0x19c>)
 8003e34:	400b      	ands	r3, r1
 8003e36:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6919      	ldr	r1, [r3, #16]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6959      	ldr	r1, [r3, #20]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <HAL_LTDC_Init+0x19c>)
 8003e62:	400b      	ands	r3, r1
 8003e64:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6959      	ldr	r1, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0206 	orr.w	r2, r2, #6
 8003ed2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	f000f800 	.word	0xf000f800

08003f04 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d023      	beq.n	8003f6e <HAL_LTDC_IRQHandler+0x6a>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01e      	beq.n	8003f6e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0204 	bic.w	r2, r2, #4
 8003f3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2204      	movs	r2, #4
 8003f46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f4e:	f043 0201 	orr.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f86f 	bl	800404c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d023      	beq.n	8003fc0 <HAL_LTDC_IRQHandler+0xbc>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01e      	beq.n	8003fc0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0202 	bic.w	r2, r2, #2
 8003f90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2202      	movs	r2, #2
 8003f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fa0:	f043 0202 	orr.w	r2, r3, #2
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2204      	movs	r2, #4
 8003fae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f846 	bl	800404c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01b      	beq.n	8004002 <HAL_LTDC_IRQHandler+0xfe>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d016      	beq.n	8004002 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0201 	bic.w	r2, r2, #1
 8003fe2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f82f 	bl	8004060 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01b      	beq.n	8004044 <HAL_LTDC_IRQHandler+0x140>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0208 	bic.w	r2, r2, #8
 8004024:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2208      	movs	r2, #8
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f818 	bl	8004074 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_LTDC_ConfigLayer+0x1a>
 800409e:	2302      	movs	r3, #2
 80040a0:	e02c      	b.n	80040fc <HAL_LTDC_ConfigLayer+0x74>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2134      	movs	r1, #52	; 0x34
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4614      	mov	r4, r2
 80040c6:	461d      	mov	r5, r3
 80040c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f811 	bl	8004104 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2201      	movs	r2, #1
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bdb0      	pop	{r4, r5, r7, pc}

08004104 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	; 0x24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	0c1b      	lsrs	r3, r3, #16
 800411c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004120:	4413      	add	r3, r2
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	01db      	lsls	r3, r3, #7
 8004130:	4413      	add	r3, r2
 8004132:	3384      	adds	r3, #132	; 0x84
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	4611      	mov	r1, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	01d2      	lsls	r2, r2, #7
 8004140:	440a      	add	r2, r1
 8004142:	3284      	adds	r2, #132	; 0x84
 8004144:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004148:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415a:	4413      	add	r3, r2
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4619      	mov	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	01db      	lsls	r3, r3, #7
 8004168:	440b      	add	r3, r1
 800416a:	3384      	adds	r3, #132	; 0x84
 800416c:	4619      	mov	r1, r3
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004182:	4413      	add	r3, r2
 8004184:	041b      	lsls	r3, r3, #16
 8004186:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	01db      	lsls	r3, r3, #7
 8004192:	4413      	add	r3, r2
 8004194:	3384      	adds	r3, #132	; 0x84
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	4611      	mov	r1, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	01d2      	lsls	r2, r2, #7
 80041a2:	440a      	add	r2, r1
 80041a4:	3284      	adds	r2, #132	; 0x84
 80041a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80041aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ba:	4413      	add	r3, r2
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4619      	mov	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	01db      	lsls	r3, r3, #7
 80041c8:	440b      	add	r3, r1
 80041ca:	3384      	adds	r3, #132	; 0x84
 80041cc:	4619      	mov	r1, r3
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	01db      	lsls	r3, r3, #7
 80041de:	4413      	add	r3, r2
 80041e0:	3384      	adds	r3, #132	; 0x84
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	4611      	mov	r1, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	01d2      	lsls	r2, r2, #7
 80041ee:	440a      	add	r2, r1
 80041f0:	3284      	adds	r2, #132	; 0x84
 80041f2:	f023 0307 	bic.w	r3, r3, #7
 80041f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	01db      	lsls	r3, r3, #7
 8004202:	4413      	add	r3, r2
 8004204:	3384      	adds	r3, #132	; 0x84
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800421e:	041b      	lsls	r3, r3, #16
 8004220:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	061b      	lsls	r3, r3, #24
 8004228:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	01db      	lsls	r3, r3, #7
 8004234:	4413      	add	r3, r2
 8004236:	3384      	adds	r3, #132	; 0x84
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	01db      	lsls	r3, r3, #7
 8004244:	4413      	add	r3, r2
 8004246:	3384      	adds	r3, #132	; 0x84
 8004248:	461a      	mov	r2, r3
 800424a:	2300      	movs	r3, #0
 800424c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004254:	461a      	mov	r2, r3
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	431a      	orrs	r2, r3
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4619      	mov	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	01db      	lsls	r3, r3, #7
 8004268:	440b      	add	r3, r1
 800426a:	3384      	adds	r3, #132	; 0x84
 800426c:	4619      	mov	r1, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	01db      	lsls	r3, r3, #7
 800427e:	4413      	add	r3, r2
 8004280:	3384      	adds	r3, #132	; 0x84
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	4611      	mov	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	01d2      	lsls	r2, r2, #7
 800428e:	440a      	add	r2, r1
 8004290:	3284      	adds	r2, #132	; 0x84
 8004292:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004296:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	01db      	lsls	r3, r3, #7
 80042a2:	4413      	add	r3, r2
 80042a4:	3384      	adds	r3, #132	; 0x84
 80042a6:	461a      	mov	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	01db      	lsls	r3, r3, #7
 80042b8:	4413      	add	r3, r2
 80042ba:	3384      	adds	r3, #132	; 0x84
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	4611      	mov	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	01d2      	lsls	r2, r2, #7
 80042c8:	440a      	add	r2, r1
 80042ca:	3284      	adds	r2, #132	; 0x84
 80042cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042d0:	f023 0307 	bic.w	r3, r3, #7
 80042d4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	68f9      	ldr	r1, [r7, #12]
 80042e0:	6809      	ldr	r1, [r1, #0]
 80042e2:	4608      	mov	r0, r1
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	01c9      	lsls	r1, r1, #7
 80042e8:	4401      	add	r1, r0
 80042ea:	3184      	adds	r1, #132	; 0x84
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	01db      	lsls	r3, r3, #7
 80042fa:	4413      	add	r3, r2
 80042fc:	3384      	adds	r3, #132	; 0x84
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	01db      	lsls	r3, r3, #7
 800430a:	4413      	add	r3, r2
 800430c:	3384      	adds	r3, #132	; 0x84
 800430e:	461a      	mov	r2, r3
 8004310:	2300      	movs	r3, #0
 8004312:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	01db      	lsls	r3, r3, #7
 800431e:	4413      	add	r3, r2
 8004320:	3384      	adds	r3, #132	; 0x84
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d102      	bne.n	8004338 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004332:	2304      	movs	r3, #4
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e01b      	b.n	8004370 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d102      	bne.n	8004346 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004340:	2303      	movs	r3, #3
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	e014      	b.n	8004370 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d00b      	beq.n	8004366 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004352:	2b02      	cmp	r3, #2
 8004354:	d007      	beq.n	8004366 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800435a:	2b03      	cmp	r3, #3
 800435c:	d003      	beq.n	8004366 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004362:	2b07      	cmp	r3, #7
 8004364:	d102      	bne.n	800436c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004366:	2302      	movs	r3, #2
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	e001      	b.n	8004370 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800436c:	2301      	movs	r3, #1
 800436e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	01db      	lsls	r3, r3, #7
 800437a:	4413      	add	r3, r2
 800437c:	3384      	adds	r3, #132	; 0x84
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	4611      	mov	r1, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	01d2      	lsls	r2, r2, #7
 800438a:	440a      	add	r2, r1
 800438c:	3284      	adds	r2, #132	; 0x84
 800438e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004392:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	041a      	lsls	r2, r3, #16
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1acb      	subs	r3, r1, r3
 80043aa:	69f9      	ldr	r1, [r7, #28]
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	3303      	adds	r3, #3
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	6809      	ldr	r1, [r1, #0]
 80043b6:	4608      	mov	r0, r1
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	01c9      	lsls	r1, r1, #7
 80043bc:	4401      	add	r1, r0
 80043be:	3184      	adds	r1, #132	; 0x84
 80043c0:	4313      	orrs	r3, r2
 80043c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	01db      	lsls	r3, r3, #7
 80043ce:	4413      	add	r3, r2
 80043d0:	3384      	adds	r3, #132	; 0x84
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	4611      	mov	r1, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	01d2      	lsls	r2, r2, #7
 80043de:	440a      	add	r2, r1
 80043e0:	3284      	adds	r2, #132	; 0x84
 80043e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043e6:	f023 0307 	bic.w	r3, r3, #7
 80043ea:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	01db      	lsls	r3, r3, #7
 80043f6:	4413      	add	r3, r2
 80043f8:	3384      	adds	r3, #132	; 0x84
 80043fa:	461a      	mov	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	01db      	lsls	r3, r3, #7
 800440c:	4413      	add	r3, r2
 800440e:	3384      	adds	r3, #132	; 0x84
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	4611      	mov	r1, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	01d2      	lsls	r2, r2, #7
 800441c:	440a      	add	r2, r1
 800441e:	3284      	adds	r2, #132	; 0x84
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6013      	str	r3, [r2, #0]
}
 8004426:	bf00      	nop
 8004428:	3724      	adds	r7, #36	; 0x24
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e25b      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d075      	beq.n	800453e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004452:	4ba3      	ldr	r3, [pc, #652]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b04      	cmp	r3, #4
 800445c:	d00c      	beq.n	8004478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800445e:	4ba0      	ldr	r3, [pc, #640]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004466:	2b08      	cmp	r3, #8
 8004468:	d112      	bne.n	8004490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446a:	4b9d      	ldr	r3, [pc, #628]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004476:	d10b      	bne.n	8004490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	4b99      	ldr	r3, [pc, #612]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d05b      	beq.n	800453c <HAL_RCC_OscConfig+0x108>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d157      	bne.n	800453c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e236      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d106      	bne.n	80044a8 <HAL_RCC_OscConfig+0x74>
 800449a:	4b91      	ldr	r3, [pc, #580]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a90      	ldr	r2, [pc, #576]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e01d      	b.n	80044e4 <HAL_RCC_OscConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x98>
 80044b2:	4b8b      	ldr	r3, [pc, #556]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a8a      	ldr	r2, [pc, #552]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b88      	ldr	r3, [pc, #544]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a87      	ldr	r2, [pc, #540]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0xb0>
 80044cc:	4b84      	ldr	r3, [pc, #528]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a83      	ldr	r2, [pc, #524]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b81      	ldr	r3, [pc, #516]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a80      	ldr	r2, [pc, #512]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d013      	beq.n	8004514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fd f8ba 	bl	8001664 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fd f8b6 	bl	8001664 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e1fb      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0xc0>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fd f8a6 	bl	8001664 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800451c:	f7fd f8a2 	bl	8001664 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1e7      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452e:	4b6c      	ldr	r3, [pc, #432]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0xe8>
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d063      	beq.n	8004612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800454a:	4b65      	ldr	r3, [pc, #404]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004556:	4b62      	ldr	r3, [pc, #392]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800455e:	2b08      	cmp	r3, #8
 8004560:	d11c      	bne.n	800459c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004562:	4b5f      	ldr	r3, [pc, #380]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456e:	4b5c      	ldr	r3, [pc, #368]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_RCC_OscConfig+0x152>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1bb      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4952      	ldr	r1, [pc, #328]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459a:	e03a      	b.n	8004612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a4:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <HAL_RCC_OscConfig+0x2b0>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fd f85b 	bl	8001664 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fd f857 	bl	8001664 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e19c      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c4:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4940      	ldr	r1, [pc, #256]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
 80045e4:	e015      	b.n	8004612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e6:	4b3f      	ldr	r3, [pc, #252]	; (80046e4 <HAL_RCC_OscConfig+0x2b0>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fd f83a 	bl	8001664 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f4:	f7fd f836 	bl	8001664 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e17b      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004606:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d030      	beq.n	8004680 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d016      	beq.n	8004654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004626:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <HAL_RCC_OscConfig+0x2b4>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fd f81a 	bl	8001664 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004634:	f7fd f816 	bl	8001664 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e15b      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004646:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x200>
 8004652:	e015      	b.n	8004680 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_RCC_OscConfig+0x2b4>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465a:	f7fd f803 	bl	8001664 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004662:	f7fc ffff 	bl	8001664 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e144      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f0      	bne.n	8004662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80a0 	beq.w	80047ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800468e:	2300      	movs	r3, #0
 8004690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004692:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10f      	bne.n	80046be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6413      	str	r3, [r2, #64]	; 0x40
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ba:	2301      	movs	r3, #1
 80046bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_OscConfig+0x2b8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d121      	bne.n	800470e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_RCC_OscConfig+0x2b8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a07      	ldr	r2, [pc, #28]	; (80046ec <HAL_RCC_OscConfig+0x2b8>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fc ffc5 	bl	8001664 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	e011      	b.n	8004702 <HAL_RCC_OscConfig+0x2ce>
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	42470000 	.word	0x42470000
 80046e8:	42470e80 	.word	0x42470e80
 80046ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f0:	f7fc ffb8 	bl	8001664 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e0fd      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4b81      	ldr	r3, [pc, #516]	; (8004908 <HAL_RCC_OscConfig+0x4d4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d106      	bne.n	8004724 <HAL_RCC_OscConfig+0x2f0>
 8004716:	4b7d      	ldr	r3, [pc, #500]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	4a7c      	ldr	r2, [pc, #496]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	; 0x70
 8004722:	e01c      	b.n	800475e <HAL_RCC_OscConfig+0x32a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b05      	cmp	r3, #5
 800472a:	d10c      	bne.n	8004746 <HAL_RCC_OscConfig+0x312>
 800472c:	4b77      	ldr	r3, [pc, #476]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	4a76      	ldr	r2, [pc, #472]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004732:	f043 0304 	orr.w	r3, r3, #4
 8004736:	6713      	str	r3, [r2, #112]	; 0x70
 8004738:	4b74      	ldr	r3, [pc, #464]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	4a73      	ldr	r2, [pc, #460]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	; 0x70
 8004744:	e00b      	b.n	800475e <HAL_RCC_OscConfig+0x32a>
 8004746:	4b71      	ldr	r3, [pc, #452]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	4a70      	ldr	r2, [pc, #448]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	6713      	str	r3, [r2, #112]	; 0x70
 8004752:	4b6e      	ldr	r3, [pc, #440]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	4a6d      	ldr	r2, [pc, #436]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d015      	beq.n	8004792 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fc ff7d 	bl	8001664 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	e00a      	b.n	8004784 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fc ff79 	bl	8001664 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f241 3288 	movw	r2, #5000	; 0x1388
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e0bc      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	4b61      	ldr	r3, [pc, #388]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ee      	beq.n	800476e <HAL_RCC_OscConfig+0x33a>
 8004790:	e014      	b.n	80047bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004792:	f7fc ff67 	bl	8001664 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fc ff63 	bl	8001664 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0a6      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	4b56      	ldr	r3, [pc, #344]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ee      	bne.n	800479a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c2:	4b52      	ldr	r3, [pc, #328]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	4a51      	ldr	r2, [pc, #324]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8092 	beq.w	80048fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047d8:	4b4c      	ldr	r3, [pc, #304]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d05c      	beq.n	800489e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d141      	bne.n	8004870 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ec:	4b48      	ldr	r3, [pc, #288]	; (8004910 <HAL_RCC_OscConfig+0x4dc>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fc ff37 	bl	8001664 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fc ff33 	bl	8001664 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e078      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480c:	4b3f      	ldr	r3, [pc, #252]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	019b      	lsls	r3, r3, #6
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	3b01      	subs	r3, #1
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	061b      	lsls	r3, r3, #24
 800483c:	4933      	ldr	r1, [pc, #204]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004842:	4b33      	ldr	r3, [pc, #204]	; (8004910 <HAL_RCC_OscConfig+0x4dc>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fc ff0c 	bl	8001664 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fc ff08 	bl	8001664 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e04d      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b2a      	ldr	r3, [pc, #168]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x41c>
 800486e:	e045      	b.n	80048fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_RCC_OscConfig+0x4dc>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004876:	f7fc fef5 	bl	8001664 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487e:	f7fc fef1 	bl	8001664 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e036      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004890:	4b1e      	ldr	r3, [pc, #120]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <HAL_RCC_OscConfig+0x44a>
 800489c:	e02e      	b.n	80048fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e029      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048aa:	4b18      	ldr	r3, [pc, #96]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d11c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d115      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048d2:	4013      	ands	r3, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10d      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d106      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40007000 	.word	0x40007000
 800490c:	40023800 	.word	0x40023800
 8004910:	42470060 	.word	0x42470060

08004914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0cc      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b68      	ldr	r3, [pc, #416]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d90c      	bls.n	8004950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b65      	ldr	r3, [pc, #404]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b63      	ldr	r3, [pc, #396]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0b8      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d020      	beq.n	800499e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004968:	4b59      	ldr	r3, [pc, #356]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4a58      	ldr	r2, [pc, #352]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004980:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4a52      	ldr	r2, [pc, #328]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800498a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498c:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	494d      	ldr	r1, [pc, #308]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d044      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	4b47      	ldr	r3, [pc, #284]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d119      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e07f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d003      	beq.n	80049d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d2:	4b3f      	ldr	r3, [pc, #252]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e06f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e2:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e067      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049f2:	4b37      	ldr	r3, [pc, #220]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f023 0203 	bic.w	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4934      	ldr	r1, [pc, #208]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a04:	f7fc fe2e 	bl	8001664 <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0c:	f7fc fe2a 	bl	8001664 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e04f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	4b2b      	ldr	r3, [pc, #172]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 020c 	and.w	r2, r3, #12
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d1eb      	bne.n	8004a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d20c      	bcs.n	8004a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b22      	ldr	r3, [pc, #136]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e032      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4916      	ldr	r1, [pc, #88]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	490e      	ldr	r1, [pc, #56]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a9a:	f000 f821 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	5cd3      	ldrb	r3, [r2, r3]
 8004aae:	fa21 f303 	lsr.w	r3, r1, r3
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <HAL_RCC_ClockConfig+0x1c8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc fc94 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40023c00 	.word	0x40023c00
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	0800c228 	.word	0x0800c228
 8004ad8:	20000000 	.word	0x20000000
 8004adc:	20000004 	.word	0x20000004

08004ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	2300      	movs	r3, #0
 8004af0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af6:	4b63      	ldr	r3, [pc, #396]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d007      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x32>
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d008      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x38>
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 80b4 	bne.w	8004c74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b5e      	ldr	r3, [pc, #376]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b0e:	60bb      	str	r3, [r7, #8]
       break;
 8004b10:	e0b3      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b12:	4b5e      	ldr	r3, [pc, #376]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004b14:	60bb      	str	r3, [r7, #8]
      break;
 8004b16:	e0b0      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b18:	4b5a      	ldr	r3, [pc, #360]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b22:	4b58      	ldr	r3, [pc, #352]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d04a      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	4b55      	ldr	r3, [pc, #340]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	f04f 0400 	mov.w	r4, #0
 8004b38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	ea03 0501 	and.w	r5, r3, r1
 8004b44:	ea04 0602 	and.w	r6, r4, r2
 8004b48:	4629      	mov	r1, r5
 8004b4a:	4632      	mov	r2, r6
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	f04f 0400 	mov.w	r4, #0
 8004b54:	0154      	lsls	r4, r2, #5
 8004b56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b5a:	014b      	lsls	r3, r1, #5
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4622      	mov	r2, r4
 8004b60:	1b49      	subs	r1, r1, r5
 8004b62:	eb62 0206 	sbc.w	r2, r2, r6
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	f04f 0400 	mov.w	r4, #0
 8004b6e:	0194      	lsls	r4, r2, #6
 8004b70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b74:	018b      	lsls	r3, r1, #6
 8004b76:	1a5b      	subs	r3, r3, r1
 8004b78:	eb64 0402 	sbc.w	r4, r4, r2
 8004b7c:	f04f 0100 	mov.w	r1, #0
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	00e2      	lsls	r2, r4, #3
 8004b86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b8a:	00d9      	lsls	r1, r3, #3
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4614      	mov	r4, r2
 8004b90:	195b      	adds	r3, r3, r5
 8004b92:	eb44 0406 	adc.w	r4, r4, r6
 8004b96:	f04f 0100 	mov.w	r1, #0
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	0262      	lsls	r2, r4, #9
 8004ba0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ba4:	0259      	lsls	r1, r3, #9
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4614      	mov	r4, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	4621      	mov	r1, r4
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f04f 0400 	mov.w	r4, #0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4623      	mov	r3, r4
 8004bb8:	f7fb fb1a 	bl	80001f0 <__aeabi_uldivmod>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e049      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc4:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	099b      	lsrs	r3, r3, #6
 8004bca:	f04f 0400 	mov.w	r4, #0
 8004bce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	ea03 0501 	and.w	r5, r3, r1
 8004bda:	ea04 0602 	and.w	r6, r4, r2
 8004bde:	4629      	mov	r1, r5
 8004be0:	4632      	mov	r2, r6
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	f04f 0400 	mov.w	r4, #0
 8004bea:	0154      	lsls	r4, r2, #5
 8004bec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bf0:	014b      	lsls	r3, r1, #5
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	1b49      	subs	r1, r1, r5
 8004bf8:	eb62 0206 	sbc.w	r2, r2, r6
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	f04f 0400 	mov.w	r4, #0
 8004c04:	0194      	lsls	r4, r2, #6
 8004c06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c0a:	018b      	lsls	r3, r1, #6
 8004c0c:	1a5b      	subs	r3, r3, r1
 8004c0e:	eb64 0402 	sbc.w	r4, r4, r2
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	00e2      	lsls	r2, r4, #3
 8004c1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c20:	00d9      	lsls	r1, r3, #3
 8004c22:	460b      	mov	r3, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	195b      	adds	r3, r3, r5
 8004c28:	eb44 0406 	adc.w	r4, r4, r6
 8004c2c:	f04f 0100 	mov.w	r1, #0
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	02a2      	lsls	r2, r4, #10
 8004c36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c3a:	0299      	lsls	r1, r3, #10
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4614      	mov	r4, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	4621      	mov	r1, r4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	f7fb facf 	bl	80001f0 <__aeabi_uldivmod>
 8004c52:	4603      	mov	r3, r0
 8004c54:	460c      	mov	r4, r1
 8004c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	3301      	adds	r3, #1
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	60bb      	str	r3, [r7, #8]
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c76:	60bb      	str	r3, [r7, #8]
      break;
 8004c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	00f42400 	.word	0x00f42400
 8004c8c:	007a1200 	.word	0x007a1200

08004c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c94:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000000 	.word	0x20000000

08004ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cac:	f7ff fff0 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cb0:	4601      	mov	r1, r0
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	0a9b      	lsrs	r3, r3, #10
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	4a03      	ldr	r2, [pc, #12]	; (8004ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cbe:	5cd3      	ldrb	r3, [r2, r3]
 8004cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	0800c238 	.word	0x0800c238

08004cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cd4:	f7ff ffdc 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cd8:	4601      	mov	r1, r0
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	0b5b      	lsrs	r3, r3, #13
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	4a03      	ldr	r2, [pc, #12]	; (8004cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce6:	5cd3      	ldrb	r3, [r2, r3]
 8004ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	0800c238 	.word	0x0800c238

08004cf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	220f      	movs	r2, #15
 8004d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d08:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <HAL_RCC_GetClockConfig+0x5c>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0203 	and.w	r2, r3, #3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_RCC_GetClockConfig+0x5c>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <HAL_RCC_GetClockConfig+0x5c>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_GetClockConfig+0x5c>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	08db      	lsrs	r3, r3, #3
 8004d32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <HAL_RCC_GetClockConfig+0x60>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 020f 	and.w	r2, r3, #15
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	601a      	str	r2, [r3, #0]
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40023800 	.word	0x40023800
 8004d58:	40023c00 	.word	0x40023c00

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10b      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d075      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d90:	4bad      	ldr	r3, [pc, #692]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d96:	f7fc fc65 	bl	8001664 <HAL_GetTick>
 8004d9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d9e:	f7fc fc61 	bl	8001664 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e18b      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004db0:	4ba6      	ldr	r3, [pc, #664]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f0      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	019a      	lsls	r2, r3, #6
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	071b      	lsls	r3, r3, #28
 8004dd4:	499d      	ldr	r1, [pc, #628]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01f      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004de8:	4b98      	ldr	r3, [pc, #608]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dee:	0f1b      	lsrs	r3, r3, #28
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	019a      	lsls	r2, r3, #6
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	431a      	orrs	r2, r3
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	071b      	lsls	r3, r3, #28
 8004e08:	4990      	ldr	r1, [pc, #576]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e10:	4b8e      	ldr	r3, [pc, #568]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e16:	f023 021f 	bic.w	r2, r3, #31
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	498a      	ldr	r1, [pc, #552]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	019a      	lsls	r2, r3, #6
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	061b      	lsls	r3, r3, #24
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	071b      	lsls	r3, r3, #28
 8004e48:	4980      	ldr	r1, [pc, #512]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e50:	4b7d      	ldr	r3, [pc, #500]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e56:	f7fc fc05 	bl	8001664 <HAL_GetTick>
 8004e5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e5e:	f7fc fc01 	bl	8001664 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e12b      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e70:	4b76      	ldr	r3, [pc, #472]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d105      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d079      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e94:	4b6e      	ldr	r3, [pc, #440]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e9a:	f7fc fbe3 	bl	8001664 <HAL_GetTick>
 8004e9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ea2:	f7fc fbdf 	bl	8001664 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e109      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004eb4:	4b65      	ldr	r3, [pc, #404]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec0:	d0ef      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d020      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ece:	4b5f      	ldr	r3, [pc, #380]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed4:	0f1b      	lsrs	r3, r3, #28
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	019a      	lsls	r2, r3, #6
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	061b      	lsls	r3, r3, #24
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	071b      	lsls	r3, r3, #28
 8004eee:	4957      	ldr	r1, [pc, #348]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ef6:	4b55      	ldr	r3, [pc, #340]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	4950      	ldr	r1, [pc, #320]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01e      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f1c:	4b4b      	ldr	r3, [pc, #300]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	0e1b      	lsrs	r3, r3, #24
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	019a      	lsls	r2, r3, #6
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	071b      	lsls	r3, r3, #28
 8004f3c:	4943      	ldr	r1, [pc, #268]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f44:	4b41      	ldr	r3, [pc, #260]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	493e      	ldr	r1, [pc, #248]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f5a:	4b3d      	ldr	r3, [pc, #244]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f60:	f7fc fb80 	bl	8001664 <HAL_GetTick>
 8004f64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f68:	f7fc fb7c 	bl	8001664 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0a6      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f7a:	4b34      	ldr	r3, [pc, #208]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f86:	d1ef      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 808d 	beq.w	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	4b2c      	ldr	r3, [pc, #176]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	4a2b      	ldr	r2, [pc, #172]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa6:	4b29      	ldr	r3, [pc, #164]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fb2:	4b28      	ldr	r3, [pc, #160]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a27      	ldr	r2, [pc, #156]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fbe:	f7fc fb51 	bl	8001664 <HAL_GetTick>
 8004fc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fc6:	f7fc fb4d 	bl	8001664 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e077      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fd8:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fe4:	4b19      	ldr	r3, [pc, #100]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d039      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d032      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005002:	4b12      	ldr	r3, [pc, #72]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800500c:	4b12      	ldr	r3, [pc, #72]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005012:	4b11      	ldr	r3, [pc, #68]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005018:	4a0c      	ldr	r2, [pc, #48]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d11e      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800502a:	f7fc fb1b 	bl	8001664 <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005030:	e014      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005032:	f7fc fb17 	bl	8001664 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d90b      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e03f      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005048:	42470068 	.word	0x42470068
 800504c:	40023800 	.word	0x40023800
 8005050:	42470070 	.word	0x42470070
 8005054:	40007000 	.word	0x40007000
 8005058:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505c:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0e4      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005074:	d10d      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005076:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508a:	4911      	ldr	r1, [pc, #68]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800508c:	4313      	orrs	r3, r2
 800508e:	608b      	str	r3, [r1, #8]
 8005090:	e005      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005098:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800509c:	6093      	str	r3, [r2, #8]
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050aa:	4909      	ldr	r1, [pc, #36]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80050c2:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050c4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40023800 	.word	0x40023800
 80050d4:	424711e0 	.word	0x424711e0

080050d8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e025      	b.n	8005138 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7fc f967 	bl	80013d4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f001 f83f 	bl	800619c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	461a      	mov	r2, r3
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	f001 f8aa 	bl	8006282 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e056      	b.n	8005200 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fb ffed 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005188:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	ea42 0103 	orr.w	r1, r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	f003 0104 	and.w	r1, r3, #4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69da      	ldr	r2, [r3, #28]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e01d      	b.n	8005256 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fb ffd4 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3304      	adds	r3, #4
 8005244:	4619      	mov	r1, r3
 8005246:	4610      	mov	r0, r2
 8005248:	f000 fa14 	bl	8005674 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b06      	cmp	r3, #6
 8005286:	d007      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d122      	bne.n	8005302 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d11b      	bne.n	8005302 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f06f 0202 	mvn.w	r2, #2
 80052d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f9a5 	bl	8005638 <HAL_TIM_IC_CaptureCallback>
 80052ee:	e005      	b.n	80052fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f997 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f9a8 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b04      	cmp	r3, #4
 800530e:	d122      	bne.n	8005356 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b04      	cmp	r3, #4
 800531c:	d11b      	bne.n	8005356 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f06f 0204 	mvn.w	r2, #4
 8005326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f97b 	bl	8005638 <HAL_TIM_IC_CaptureCallback>
 8005342:	e005      	b.n	8005350 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f96d 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f97e 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b08      	cmp	r3, #8
 8005362:	d122      	bne.n	80053aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b08      	cmp	r3, #8
 8005370:	d11b      	bne.n	80053aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f06f 0208 	mvn.w	r2, #8
 800537a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2204      	movs	r2, #4
 8005380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f951 	bl	8005638 <HAL_TIM_IC_CaptureCallback>
 8005396:	e005      	b.n	80053a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f943 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f954 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d122      	bne.n	80053fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d11b      	bne.n	80053fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f06f 0210 	mvn.w	r2, #16
 80053ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2208      	movs	r2, #8
 80053d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f927 	bl	8005638 <HAL_TIM_IC_CaptureCallback>
 80053ea:	e005      	b.n	80053f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f919 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f92a 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10e      	bne.n	800542a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b01      	cmp	r3, #1
 8005418:	d107      	bne.n	800542a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f06f 0201 	mvn.w	r2, #1
 8005422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fb fc81 	bl	8000d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005434:	2b80      	cmp	r3, #128	; 0x80
 8005436:	d10e      	bne.n	8005456 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d107      	bne.n	8005456 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800544e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 facf 	bl	80059f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005460:	2b40      	cmp	r3, #64	; 0x40
 8005462:	d10e      	bne.n	8005482 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d107      	bne.n	8005482 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800547a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f8ef 	bl	8005660 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b20      	cmp	r3, #32
 800548e:	d10e      	bne.n	80054ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b20      	cmp	r3, #32
 800549c:	d107      	bne.n	80054ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f06f 0220 	mvn.w	r2, #32
 80054a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa99 	bl	80059e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_ConfigClockSource+0x18>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e0a6      	b.n	800561c <HAL_TIM_ConfigClockSource+0x166>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d067      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x120>
 8005506:	2b40      	cmp	r3, #64	; 0x40
 8005508:	d80b      	bhi.n	8005522 <HAL_TIM_ConfigClockSource+0x6c>
 800550a:	2b10      	cmp	r3, #16
 800550c:	d073      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x140>
 800550e:	2b10      	cmp	r3, #16
 8005510:	d802      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x62>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d06f      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005516:	e078      	b.n	800560a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005518:	2b20      	cmp	r3, #32
 800551a:	d06c      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x140>
 800551c:	2b30      	cmp	r3, #48	; 0x30
 800551e:	d06a      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005520:	e073      	b.n	800560a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005522:	2b70      	cmp	r3, #112	; 0x70
 8005524:	d00d      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x8c>
 8005526:	2b70      	cmp	r3, #112	; 0x70
 8005528:	d804      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x7e>
 800552a:	2b50      	cmp	r3, #80	; 0x50
 800552c:	d033      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0xe0>
 800552e:	2b60      	cmp	r3, #96	; 0x60
 8005530:	d041      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005532:	e06a      	b.n	800560a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005538:	d066      	beq.n	8005608 <HAL_TIM_ConfigClockSource+0x152>
 800553a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553e:	d017      	beq.n	8005570 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005540:	e063      	b.n	800560a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6899      	ldr	r1, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f000 f9a9 	bl	80058a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005564:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	609a      	str	r2, [r3, #8]
      break;
 800556e:	e04c      	b.n	800560a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6899      	ldr	r1, [r3, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f000 f992 	bl	80058a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005592:	609a      	str	r2, [r3, #8]
      break;
 8005594:	e039      	b.n	800560a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f000 f906 	bl	80057b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2150      	movs	r1, #80	; 0x50
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f95f 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80055b4:	e029      	b.n	800560a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f000 f925 	bl	8005812 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2160      	movs	r1, #96	; 0x60
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f94f 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80055d4:	e019      	b.n	800560a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6859      	ldr	r1, [r3, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f000 f8e6 	bl	80057b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f93f 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80055f4:	e009      	b.n	800560a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f000 f936 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 8005606:	e000      	b.n	800560a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005608:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a40      	ldr	r2, [pc, #256]	; (8005788 <TIM_Base_SetConfig+0x114>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005692:	d00f      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3d      	ldr	r2, [pc, #244]	; (800578c <TIM_Base_SetConfig+0x118>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00b      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3c      	ldr	r2, [pc, #240]	; (8005790 <TIM_Base_SetConfig+0x11c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3b      	ldr	r2, [pc, #236]	; (8005794 <TIM_Base_SetConfig+0x120>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3a      	ldr	r2, [pc, #232]	; (8005798 <TIM_Base_SetConfig+0x124>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d108      	bne.n	80056c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2f      	ldr	r2, [pc, #188]	; (8005788 <TIM_Base_SetConfig+0x114>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d02b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d027      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2c      	ldr	r2, [pc, #176]	; (800578c <TIM_Base_SetConfig+0x118>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d023      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2b      	ldr	r2, [pc, #172]	; (8005790 <TIM_Base_SetConfig+0x11c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01f      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <TIM_Base_SetConfig+0x120>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a29      	ldr	r2, [pc, #164]	; (8005798 <TIM_Base_SetConfig+0x124>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d017      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a28      	ldr	r2, [pc, #160]	; (800579c <TIM_Base_SetConfig+0x128>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a27      	ldr	r2, [pc, #156]	; (80057a0 <TIM_Base_SetConfig+0x12c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <TIM_Base_SetConfig+0x130>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a25      	ldr	r2, [pc, #148]	; (80057a8 <TIM_Base_SetConfig+0x134>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a24      	ldr	r2, [pc, #144]	; (80057ac <TIM_Base_SetConfig+0x138>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a23      	ldr	r2, [pc, #140]	; (80057b0 <TIM_Base_SetConfig+0x13c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d108      	bne.n	8005738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a0a      	ldr	r2, [pc, #40]	; (8005788 <TIM_Base_SetConfig+0x114>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_Base_SetConfig+0xf8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0c      	ldr	r2, [pc, #48]	; (8005798 <TIM_Base_SetConfig+0x124>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d103      	bne.n	8005774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	615a      	str	r2, [r3, #20]
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40010400 	.word	0x40010400
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800
 80057a8:	40001800 	.word	0x40001800
 80057ac:	40001c00 	.word	0x40001c00
 80057b0:	40002000 	.word	0x40002000

080057b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f023 030a 	bic.w	r3, r3, #10
 80057f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005812:	b480      	push	{r7}
 8005814:	b087      	sub	sp, #28
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0210 	bic.w	r2, r3, #16
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800583c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	031b      	lsls	r3, r3, #12
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800584e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	f043 0307 	orr.w	r3, r3, #7
 8005894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	609a      	str	r2, [r3, #8]
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	021a      	lsls	r2, r3, #8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e05a      	b.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a21      	ldr	r2, [pc, #132]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d022      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594c:	d01d      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d018      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1a      	ldr	r2, [pc, #104]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00e      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d009      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a15      	ldr	r2, [pc, #84]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d10c      	bne.n	80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	4313      	orrs	r3, r2
 800599a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40010000 	.word	0x40010000
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40000c00 	.word	0x40000c00
 80059d4:	40010400 	.word	0x40010400
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40001800 	.word	0x40001800

080059e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e03f      	b.n	8005a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fb fbf6 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2224      	movs	r2, #36	; 0x24
 8005a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f829 	bl	8005aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695a      	ldr	r2, [r3, #20]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ae6:	f023 030c 	bic.w	r3, r3, #12
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b12:	f040 818b 	bne.w	8005e2c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4ac1      	ldr	r2, [pc, #772]	; (8005e20 <UART_SetConfig+0x37c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d005      	beq.n	8005b2c <UART_SetConfig+0x88>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4abf      	ldr	r2, [pc, #764]	; (8005e24 <UART_SetConfig+0x380>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	f040 80bd 	bne.w	8005ca6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b2c:	f7ff f8d0 	bl	8004cd0 <HAL_RCC_GetPCLK2Freq>
 8005b30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	461d      	mov	r5, r3
 8005b36:	f04f 0600 	mov.w	r6, #0
 8005b3a:	46a8      	mov	r8, r5
 8005b3c:	46b1      	mov	r9, r6
 8005b3e:	eb18 0308 	adds.w	r3, r8, r8
 8005b42:	eb49 0409 	adc.w	r4, r9, r9
 8005b46:	4698      	mov	r8, r3
 8005b48:	46a1      	mov	r9, r4
 8005b4a:	eb18 0805 	adds.w	r8, r8, r5
 8005b4e:	eb49 0906 	adc.w	r9, r9, r6
 8005b52:	f04f 0100 	mov.w	r1, #0
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b66:	4688      	mov	r8, r1
 8005b68:	4691      	mov	r9, r2
 8005b6a:	eb18 0005 	adds.w	r0, r8, r5
 8005b6e:	eb49 0106 	adc.w	r1, r9, r6
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	461d      	mov	r5, r3
 8005b78:	f04f 0600 	mov.w	r6, #0
 8005b7c:	196b      	adds	r3, r5, r5
 8005b7e:	eb46 0406 	adc.w	r4, r6, r6
 8005b82:	461a      	mov	r2, r3
 8005b84:	4623      	mov	r3, r4
 8005b86:	f7fa fb33 	bl	80001f0 <__aeabi_uldivmod>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4ba5      	ldr	r3, [pc, #660]	; (8005e28 <UART_SetConfig+0x384>)
 8005b92:	fba3 2302 	umull	r2, r3, r3, r2
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	461d      	mov	r5, r3
 8005ba0:	f04f 0600 	mov.w	r6, #0
 8005ba4:	46a9      	mov	r9, r5
 8005ba6:	46b2      	mov	sl, r6
 8005ba8:	eb19 0309 	adds.w	r3, r9, r9
 8005bac:	eb4a 040a 	adc.w	r4, sl, sl
 8005bb0:	4699      	mov	r9, r3
 8005bb2:	46a2      	mov	sl, r4
 8005bb4:	eb19 0905 	adds.w	r9, r9, r5
 8005bb8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bbc:	f04f 0100 	mov.w	r1, #0
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bd0:	4689      	mov	r9, r1
 8005bd2:	4692      	mov	sl, r2
 8005bd4:	eb19 0005 	adds.w	r0, r9, r5
 8005bd8:	eb4a 0106 	adc.w	r1, sl, r6
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	461d      	mov	r5, r3
 8005be2:	f04f 0600 	mov.w	r6, #0
 8005be6:	196b      	adds	r3, r5, r5
 8005be8:	eb46 0406 	adc.w	r4, r6, r6
 8005bec:	461a      	mov	r2, r3
 8005bee:	4623      	mov	r3, r4
 8005bf0:	f7fa fafe 	bl	80001f0 <__aeabi_uldivmod>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4b8b      	ldr	r3, [pc, #556]	; (8005e28 <UART_SetConfig+0x384>)
 8005bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	2164      	movs	r1, #100	; 0x64
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	3332      	adds	r3, #50	; 0x32
 8005c0e:	4a86      	ldr	r2, [pc, #536]	; (8005e28 <UART_SetConfig+0x384>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c1c:	4498      	add	r8, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	461d      	mov	r5, r3
 8005c22:	f04f 0600 	mov.w	r6, #0
 8005c26:	46a9      	mov	r9, r5
 8005c28:	46b2      	mov	sl, r6
 8005c2a:	eb19 0309 	adds.w	r3, r9, r9
 8005c2e:	eb4a 040a 	adc.w	r4, sl, sl
 8005c32:	4699      	mov	r9, r3
 8005c34:	46a2      	mov	sl, r4
 8005c36:	eb19 0905 	adds.w	r9, r9, r5
 8005c3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c3e:	f04f 0100 	mov.w	r1, #0
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c52:	4689      	mov	r9, r1
 8005c54:	4692      	mov	sl, r2
 8005c56:	eb19 0005 	adds.w	r0, r9, r5
 8005c5a:	eb4a 0106 	adc.w	r1, sl, r6
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	461d      	mov	r5, r3
 8005c64:	f04f 0600 	mov.w	r6, #0
 8005c68:	196b      	adds	r3, r5, r5
 8005c6a:	eb46 0406 	adc.w	r4, r6, r6
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4623      	mov	r3, r4
 8005c72:	f7fa fabd 	bl	80001f0 <__aeabi_uldivmod>
 8005c76:	4603      	mov	r3, r0
 8005c78:	460c      	mov	r4, r1
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <UART_SetConfig+0x384>)
 8005c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	2164      	movs	r1, #100	; 0x64
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	3332      	adds	r3, #50	; 0x32
 8005c90:	4a65      	ldr	r2, [pc, #404]	; (8005e28 <UART_SetConfig+0x384>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	f003 0207 	and.w	r2, r3, #7
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4442      	add	r2, r8
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	e26f      	b.n	8006186 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ca6:	f7fe ffff 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 8005caa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	461d      	mov	r5, r3
 8005cb0:	f04f 0600 	mov.w	r6, #0
 8005cb4:	46a8      	mov	r8, r5
 8005cb6:	46b1      	mov	r9, r6
 8005cb8:	eb18 0308 	adds.w	r3, r8, r8
 8005cbc:	eb49 0409 	adc.w	r4, r9, r9
 8005cc0:	4698      	mov	r8, r3
 8005cc2:	46a1      	mov	r9, r4
 8005cc4:	eb18 0805 	adds.w	r8, r8, r5
 8005cc8:	eb49 0906 	adc.w	r9, r9, r6
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cd8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cdc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ce0:	4688      	mov	r8, r1
 8005ce2:	4691      	mov	r9, r2
 8005ce4:	eb18 0005 	adds.w	r0, r8, r5
 8005ce8:	eb49 0106 	adc.w	r1, r9, r6
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	461d      	mov	r5, r3
 8005cf2:	f04f 0600 	mov.w	r6, #0
 8005cf6:	196b      	adds	r3, r5, r5
 8005cf8:	eb46 0406 	adc.w	r4, r6, r6
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4623      	mov	r3, r4
 8005d00:	f7fa fa76 	bl	80001f0 <__aeabi_uldivmod>
 8005d04:	4603      	mov	r3, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4b47      	ldr	r3, [pc, #284]	; (8005e28 <UART_SetConfig+0x384>)
 8005d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	461d      	mov	r5, r3
 8005d1a:	f04f 0600 	mov.w	r6, #0
 8005d1e:	46a9      	mov	r9, r5
 8005d20:	46b2      	mov	sl, r6
 8005d22:	eb19 0309 	adds.w	r3, r9, r9
 8005d26:	eb4a 040a 	adc.w	r4, sl, sl
 8005d2a:	4699      	mov	r9, r3
 8005d2c:	46a2      	mov	sl, r4
 8005d2e:	eb19 0905 	adds.w	r9, r9, r5
 8005d32:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d36:	f04f 0100 	mov.w	r1, #0
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d4a:	4689      	mov	r9, r1
 8005d4c:	4692      	mov	sl, r2
 8005d4e:	eb19 0005 	adds.w	r0, r9, r5
 8005d52:	eb4a 0106 	adc.w	r1, sl, r6
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	f04f 0600 	mov.w	r6, #0
 8005d60:	196b      	adds	r3, r5, r5
 8005d62:	eb46 0406 	adc.w	r4, r6, r6
 8005d66:	461a      	mov	r2, r3
 8005d68:	4623      	mov	r3, r4
 8005d6a:	f7fa fa41 	bl	80001f0 <__aeabi_uldivmod>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	461a      	mov	r2, r3
 8005d74:	4b2c      	ldr	r3, [pc, #176]	; (8005e28 <UART_SetConfig+0x384>)
 8005d76:	fba3 1302 	umull	r1, r3, r3, r2
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	2164      	movs	r1, #100	; 0x64
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	3332      	adds	r3, #50	; 0x32
 8005d88:	4a27      	ldr	r2, [pc, #156]	; (8005e28 <UART_SetConfig+0x384>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d96:	4498      	add	r8, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	461d      	mov	r5, r3
 8005d9c:	f04f 0600 	mov.w	r6, #0
 8005da0:	46a9      	mov	r9, r5
 8005da2:	46b2      	mov	sl, r6
 8005da4:	eb19 0309 	adds.w	r3, r9, r9
 8005da8:	eb4a 040a 	adc.w	r4, sl, sl
 8005dac:	4699      	mov	r9, r3
 8005dae:	46a2      	mov	sl, r4
 8005db0:	eb19 0905 	adds.w	r9, r9, r5
 8005db4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005db8:	f04f 0100 	mov.w	r1, #0
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dcc:	4689      	mov	r9, r1
 8005dce:	4692      	mov	sl, r2
 8005dd0:	eb19 0005 	adds.w	r0, r9, r5
 8005dd4:	eb4a 0106 	adc.w	r1, sl, r6
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	461d      	mov	r5, r3
 8005dde:	f04f 0600 	mov.w	r6, #0
 8005de2:	196b      	adds	r3, r5, r5
 8005de4:	eb46 0406 	adc.w	r4, r6, r6
 8005de8:	461a      	mov	r2, r3
 8005dea:	4623      	mov	r3, r4
 8005dec:	f7fa fa00 	bl	80001f0 <__aeabi_uldivmod>
 8005df0:	4603      	mov	r3, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	461a      	mov	r2, r3
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <UART_SetConfig+0x384>)
 8005df8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	2164      	movs	r1, #100	; 0x64
 8005e00:	fb01 f303 	mul.w	r3, r1, r3
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	3332      	adds	r3, #50	; 0x32
 8005e0a:	4a07      	ldr	r2, [pc, #28]	; (8005e28 <UART_SetConfig+0x384>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	f003 0207 	and.w	r2, r3, #7
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4442      	add	r2, r8
 8005e1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e1e:	e1b2      	b.n	8006186 <UART_SetConfig+0x6e2>
 8005e20:	40011000 	.word	0x40011000
 8005e24:	40011400 	.word	0x40011400
 8005e28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4ad7      	ldr	r2, [pc, #860]	; (8006190 <UART_SetConfig+0x6ec>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d005      	beq.n	8005e42 <UART_SetConfig+0x39e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4ad6      	ldr	r2, [pc, #856]	; (8006194 <UART_SetConfig+0x6f0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	f040 80d1 	bne.w	8005fe4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e42:	f7fe ff45 	bl	8004cd0 <HAL_RCC_GetPCLK2Freq>
 8005e46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	469a      	mov	sl, r3
 8005e4c:	f04f 0b00 	mov.w	fp, #0
 8005e50:	46d0      	mov	r8, sl
 8005e52:	46d9      	mov	r9, fp
 8005e54:	eb18 0308 	adds.w	r3, r8, r8
 8005e58:	eb49 0409 	adc.w	r4, r9, r9
 8005e5c:	4698      	mov	r8, r3
 8005e5e:	46a1      	mov	r9, r4
 8005e60:	eb18 080a 	adds.w	r8, r8, sl
 8005e64:	eb49 090b 	adc.w	r9, r9, fp
 8005e68:	f04f 0100 	mov.w	r1, #0
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e7c:	4688      	mov	r8, r1
 8005e7e:	4691      	mov	r9, r2
 8005e80:	eb1a 0508 	adds.w	r5, sl, r8
 8005e84:	eb4b 0609 	adc.w	r6, fp, r9
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	f04f 0400 	mov.w	r4, #0
 8005e9a:	0094      	lsls	r4, r2, #2
 8005e9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ea0:	008b      	lsls	r3, r1, #2
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	f7fa f9a1 	bl	80001f0 <__aeabi_uldivmod>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	4bb8      	ldr	r3, [pc, #736]	; (8006198 <UART_SetConfig+0x6f4>)
 8005eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	469b      	mov	fp, r3
 8005ec4:	f04f 0c00 	mov.w	ip, #0
 8005ec8:	46d9      	mov	r9, fp
 8005eca:	46e2      	mov	sl, ip
 8005ecc:	eb19 0309 	adds.w	r3, r9, r9
 8005ed0:	eb4a 040a 	adc.w	r4, sl, sl
 8005ed4:	4699      	mov	r9, r3
 8005ed6:	46a2      	mov	sl, r4
 8005ed8:	eb19 090b 	adds.w	r9, r9, fp
 8005edc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ee0:	f04f 0100 	mov.w	r1, #0
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ef0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ef4:	4689      	mov	r9, r1
 8005ef6:	4692      	mov	sl, r2
 8005ef8:	eb1b 0509 	adds.w	r5, fp, r9
 8005efc:	eb4c 060a 	adc.w	r6, ip, sl
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	4619      	mov	r1, r3
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	f04f 0400 	mov.w	r4, #0
 8005f12:	0094      	lsls	r4, r2, #2
 8005f14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f18:	008b      	lsls	r3, r1, #2
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4623      	mov	r3, r4
 8005f1e:	4628      	mov	r0, r5
 8005f20:	4631      	mov	r1, r6
 8005f22:	f7fa f965 	bl	80001f0 <__aeabi_uldivmod>
 8005f26:	4603      	mov	r3, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4b9a      	ldr	r3, [pc, #616]	; (8006198 <UART_SetConfig+0x6f4>)
 8005f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	2164      	movs	r1, #100	; 0x64
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	3332      	adds	r3, #50	; 0x32
 8005f40:	4a95      	ldr	r2, [pc, #596]	; (8006198 <UART_SetConfig+0x6f4>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f4c:	4498      	add	r8, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	469b      	mov	fp, r3
 8005f52:	f04f 0c00 	mov.w	ip, #0
 8005f56:	46d9      	mov	r9, fp
 8005f58:	46e2      	mov	sl, ip
 8005f5a:	eb19 0309 	adds.w	r3, r9, r9
 8005f5e:	eb4a 040a 	adc.w	r4, sl, sl
 8005f62:	4699      	mov	r9, r3
 8005f64:	46a2      	mov	sl, r4
 8005f66:	eb19 090b 	adds.w	r9, r9, fp
 8005f6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f6e:	f04f 0100 	mov.w	r1, #0
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f82:	4689      	mov	r9, r1
 8005f84:	4692      	mov	sl, r2
 8005f86:	eb1b 0509 	adds.w	r5, fp, r9
 8005f8a:	eb4c 060a 	adc.w	r6, ip, sl
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	4619      	mov	r1, r3
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	f04f 0400 	mov.w	r4, #0
 8005fa0:	0094      	lsls	r4, r2, #2
 8005fa2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fa6:	008b      	lsls	r3, r1, #2
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4623      	mov	r3, r4
 8005fac:	4628      	mov	r0, r5
 8005fae:	4631      	mov	r1, r6
 8005fb0:	f7fa f91e 	bl	80001f0 <__aeabi_uldivmod>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4b77      	ldr	r3, [pc, #476]	; (8006198 <UART_SetConfig+0x6f4>)
 8005fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	2164      	movs	r1, #100	; 0x64
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	3332      	adds	r3, #50	; 0x32
 8005fce:	4a72      	ldr	r2, [pc, #456]	; (8006198 <UART_SetConfig+0x6f4>)
 8005fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	f003 020f 	and.w	r2, r3, #15
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4442      	add	r2, r8
 8005fe0:	609a      	str	r2, [r3, #8]
 8005fe2:	e0d0      	b.n	8006186 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fe fe60 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	469a      	mov	sl, r3
 8005fee:	f04f 0b00 	mov.w	fp, #0
 8005ff2:	46d0      	mov	r8, sl
 8005ff4:	46d9      	mov	r9, fp
 8005ff6:	eb18 0308 	adds.w	r3, r8, r8
 8005ffa:	eb49 0409 	adc.w	r4, r9, r9
 8005ffe:	4698      	mov	r8, r3
 8006000:	46a1      	mov	r9, r4
 8006002:	eb18 080a 	adds.w	r8, r8, sl
 8006006:	eb49 090b 	adc.w	r9, r9, fp
 800600a:	f04f 0100 	mov.w	r1, #0
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006016:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800601a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800601e:	4688      	mov	r8, r1
 8006020:	4691      	mov	r9, r2
 8006022:	eb1a 0508 	adds.w	r5, sl, r8
 8006026:	eb4b 0609 	adc.w	r6, fp, r9
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4619      	mov	r1, r3
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	f04f 0400 	mov.w	r4, #0
 800603c:	0094      	lsls	r4, r2, #2
 800603e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006042:	008b      	lsls	r3, r1, #2
 8006044:	461a      	mov	r2, r3
 8006046:	4623      	mov	r3, r4
 8006048:	4628      	mov	r0, r5
 800604a:	4631      	mov	r1, r6
 800604c:	f7fa f8d0 	bl	80001f0 <__aeabi_uldivmod>
 8006050:	4603      	mov	r3, r0
 8006052:	460c      	mov	r4, r1
 8006054:	461a      	mov	r2, r3
 8006056:	4b50      	ldr	r3, [pc, #320]	; (8006198 <UART_SetConfig+0x6f4>)
 8006058:	fba3 2302 	umull	r2, r3, r3, r2
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	469b      	mov	fp, r3
 8006066:	f04f 0c00 	mov.w	ip, #0
 800606a:	46d9      	mov	r9, fp
 800606c:	46e2      	mov	sl, ip
 800606e:	eb19 0309 	adds.w	r3, r9, r9
 8006072:	eb4a 040a 	adc.w	r4, sl, sl
 8006076:	4699      	mov	r9, r3
 8006078:	46a2      	mov	sl, r4
 800607a:	eb19 090b 	adds.w	r9, r9, fp
 800607e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006082:	f04f 0100 	mov.w	r1, #0
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800608e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006092:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006096:	4689      	mov	r9, r1
 8006098:	4692      	mov	sl, r2
 800609a:	eb1b 0509 	adds.w	r5, fp, r9
 800609e:	eb4c 060a 	adc.w	r6, ip, sl
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4619      	mov	r1, r3
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	f04f 0400 	mov.w	r4, #0
 80060b4:	0094      	lsls	r4, r2, #2
 80060b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060ba:	008b      	lsls	r3, r1, #2
 80060bc:	461a      	mov	r2, r3
 80060be:	4623      	mov	r3, r4
 80060c0:	4628      	mov	r0, r5
 80060c2:	4631      	mov	r1, r6
 80060c4:	f7fa f894 	bl	80001f0 <__aeabi_uldivmod>
 80060c8:	4603      	mov	r3, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	461a      	mov	r2, r3
 80060ce:	4b32      	ldr	r3, [pc, #200]	; (8006198 <UART_SetConfig+0x6f4>)
 80060d0:	fba3 1302 	umull	r1, r3, r3, r2
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	2164      	movs	r1, #100	; 0x64
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	3332      	adds	r3, #50	; 0x32
 80060e2:	4a2d      	ldr	r2, [pc, #180]	; (8006198 <UART_SetConfig+0x6f4>)
 80060e4:	fba2 2303 	umull	r2, r3, r2, r3
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ee:	4498      	add	r8, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	469b      	mov	fp, r3
 80060f4:	f04f 0c00 	mov.w	ip, #0
 80060f8:	46d9      	mov	r9, fp
 80060fa:	46e2      	mov	sl, ip
 80060fc:	eb19 0309 	adds.w	r3, r9, r9
 8006100:	eb4a 040a 	adc.w	r4, sl, sl
 8006104:	4699      	mov	r9, r3
 8006106:	46a2      	mov	sl, r4
 8006108:	eb19 090b 	adds.w	r9, r9, fp
 800610c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800611c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006120:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006124:	4689      	mov	r9, r1
 8006126:	4692      	mov	sl, r2
 8006128:	eb1b 0509 	adds.w	r5, fp, r9
 800612c:	eb4c 060a 	adc.w	r6, ip, sl
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	4619      	mov	r1, r3
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	f04f 0400 	mov.w	r4, #0
 8006142:	0094      	lsls	r4, r2, #2
 8006144:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006148:	008b      	lsls	r3, r1, #2
 800614a:	461a      	mov	r2, r3
 800614c:	4623      	mov	r3, r4
 800614e:	4628      	mov	r0, r5
 8006150:	4631      	mov	r1, r6
 8006152:	f7fa f84d 	bl	80001f0 <__aeabi_uldivmod>
 8006156:	4603      	mov	r3, r0
 8006158:	460c      	mov	r4, r1
 800615a:	461a      	mov	r2, r3
 800615c:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <UART_SetConfig+0x6f4>)
 800615e:	fba3 1302 	umull	r1, r3, r3, r2
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	2164      	movs	r1, #100	; 0x64
 8006166:	fb01 f303 	mul.w	r3, r1, r3
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	3332      	adds	r3, #50	; 0x32
 8006170:	4a09      	ldr	r2, [pc, #36]	; (8006198 <UART_SetConfig+0x6f4>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	f003 020f 	and.w	r2, r3, #15
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4442      	add	r2, r8
 8006182:	609a      	str	r2, [r3, #8]
}
 8006184:	e7ff      	b.n	8006186 <UART_SetConfig+0x6e2>
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006190:	40011000 	.word	0x40011000
 8006194:	40011400 	.word	0x40011400
 8006198:	51eb851f 	.word	0x51eb851f

0800619c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d029      	beq.n	800620a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80061c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061c6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061d0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80061d6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80061dc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80061e2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80061e8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80061ee:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80061f4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80061fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e034      	b.n	8006274 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006216:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006220:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006226:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800623a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800623e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006248:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800624e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006254:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800625a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006260:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	4313      	orrs	r3, r2
 8006266:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006282:	b480      	push	{r7}
 8006284:	b087      	sub	sp, #28
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d02e      	beq.n	80062fa <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062a8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80062b8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	3b01      	subs	r3, #1
 80062c0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80062c2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80062cc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80062d6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	3b01      	subs	r3, #1
 80062de:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80062e0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80062ea:	4313      	orrs	r3, r2
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	e03b      	b.n	8006372 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006306:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800630a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	3b01      	subs	r3, #1
 8006312:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	3b01      	subs	r3, #1
 800631a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800631c:	4313      	orrs	r3, r2
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006330:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	3b01      	subs	r3, #1
 800633e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006340:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	3b01      	subs	r3, #1
 8006348:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800634a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	3b01      	subs	r3, #1
 8006352:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006354:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	3b01      	subs	r3, #1
 800635c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800635e:	4313      	orrs	r3, r2
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006380:	b084      	sub	sp, #16
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	f107 001c 	add.w	r0, r7, #28
 800638e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	2b01      	cmp	r3, #1
 8006396:	d122      	bne.n	80063de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d105      	bne.n	80063d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f94a 	bl	800666c <USB_CoreReset>
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]
 80063dc:	e01a      	b.n	8006414 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f93e 	bl	800666c <USB_CoreReset>
 80063f0:	4603      	mov	r3, r0
 80063f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	639a      	str	r2, [r3, #56]	; 0x38
 8006406:	e005      	b.n	8006414 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10b      	bne.n	8006432 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f043 0206 	orr.w	r2, r3, #6
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f043 0220 	orr.w	r2, r3, #32
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800643e:	b004      	add	sp, #16
 8006440:	4770      	bx	lr

08006442 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f043 0201 	orr.w	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f023 0201 	bic.w	r2, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d106      	bne.n	80064b2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	e00b      	b.n	80064ca <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
 80064c4:	e001      	b.n	80064ca <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e003      	b.n	80064d2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80064ca:	2032      	movs	r0, #50	; 0x32
 80064cc:	f7fb f8d6 	bl	800167c <HAL_Delay>

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	019b      	lsls	r3, r3, #6
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a09      	ldr	r2, [pc, #36]	; (8006524 <USB_FlushTxFifo+0x48>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e006      	b.n	8006516 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b20      	cmp	r3, #32
 8006512:	d0f0      	beq.n	80064f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	00030d40 	.word	0x00030d40

08006528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2210      	movs	r2, #16
 8006538:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3301      	adds	r3, #1
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a09      	ldr	r2, [pc, #36]	; (8006568 <USB_FlushRxFifo+0x40>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d901      	bls.n	800654c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e006      	b.n	800655a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b10      	cmp	r3, #16
 8006556:	d0f0      	beq.n	800653a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	00030d40 	.word	0x00030d40

0800656c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	; 0x24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4611      	mov	r1, r2
 8006578:	461a      	mov	r2, r3
 800657a:	460b      	mov	r3, r1
 800657c:	71fb      	strb	r3, [r7, #7]
 800657e:	4613      	mov	r3, r2
 8006580:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800658a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d11a      	bne.n	80065c8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006592:	88bb      	ldrh	r3, [r7, #4]
 8006594:	3303      	adds	r3, #3
 8006596:	089b      	lsrs	r3, r3, #2
 8006598:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800659a:	2300      	movs	r3, #0
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	e00f      	b.n	80065c0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	031a      	lsls	r2, r3, #12
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ac:	461a      	mov	r2, r3
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	3304      	adds	r3, #4
 80065b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	3301      	adds	r3, #1
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d3eb      	bcc.n	80065a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3724      	adds	r7, #36	; 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b089      	sub	sp, #36	; 0x24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	4613      	mov	r3, r2
 80065e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	3303      	adds	r3, #3
 80065f0:	089b      	lsrs	r3, r3, #2
 80065f2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80065f4:	2300      	movs	r3, #0
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	e00b      	b.n	8006612 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	601a      	str	r2, [r3, #0]
    pDest++;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	3304      	adds	r3, #4
 800660a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	3301      	adds	r3, #1
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	429a      	cmp	r2, r3
 8006618:	d3ef      	bcc.n	80065fa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800661a:	69fb      	ldr	r3, [r7, #28]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3724      	adds	r7, #36	; 0x24
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4013      	ands	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006640:	68fb      	ldr	r3, [r7, #12]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0301 	and.w	r3, r3, #1
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3301      	adds	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a13      	ldr	r2, [pc, #76]	; (80066d0 <USB_CoreReset+0x64>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e01b      	b.n	80066c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	daf2      	bge.n	8006678 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f043 0201 	orr.w	r2, r3, #1
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <USB_CoreReset+0x64>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e006      	b.n	80066c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d0f0      	beq.n	80066a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	00030d40 	.word	0x00030d40

080066d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066d4:	b084      	sub	sp, #16
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	f107 001c 	add.w	r0, r7, #28
 80066e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066f0:	461a      	mov	r2, r3
 80066f2:	2300      	movs	r3, #0
 80066f4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d018      	beq.n	8006758 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	2b01      	cmp	r3, #1
 800672a:	d10a      	bne.n	8006742 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800673a:	f043 0304 	orr.w	r3, r3, #4
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	e014      	b.n	800676c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006750:	f023 0304 	bic.w	r3, r3, #4
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e009      	b.n	800676c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006766:	f023 0304 	bic.w	r3, r3, #4
 800676a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800676c:	2110      	movs	r1, #16
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff feb4 	bl	80064dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff fed7 	bl	8006528 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e015      	b.n	80067ac <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4413      	add	r3, r2
 8006788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678c:	461a      	mov	r2, r3
 800678e:	f04f 33ff 	mov.w	r3, #4294967295
 8006792:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4413      	add	r3, r2
 800679c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a0:	461a      	mov	r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3301      	adds	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d3e5      	bcc.n	8006780 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80067b4:	2101      	movs	r1, #1
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f8ac 	bl	8006914 <USB_DriveVbus>

  HAL_Delay(200U);
 80067bc:	20c8      	movs	r0, #200	; 0xc8
 80067be:	f7fa ff5d 	bl	800167c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f04f 32ff 	mov.w	r2, #4294967295
 80067ce:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00b      	beq.n	80067f4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a14      	ldr	r2, [pc, #80]	; (8006838 <USB_HostInit+0x164>)
 80067e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a13      	ldr	r2, [pc, #76]	; (800683c <USB_HostInit+0x168>)
 80067ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80067f2:	e009      	b.n	8006808 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2280      	movs	r2, #128	; 0x80
 80067f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a10      	ldr	r2, [pc, #64]	; (8006840 <USB_HostInit+0x16c>)
 80067fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a10      	ldr	r2, [pc, #64]	; (8006844 <USB_HostInit+0x170>)
 8006804:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d105      	bne.n	800681a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f043 0210 	orr.w	r2, r3, #16
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <USB_HostInit+0x174>)
 8006820:	4313      	orrs	r3, r2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006832:	b004      	add	sp, #16
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	01000200 	.word	0x01000200
 800683c:	00e00300 	.word	0x00e00300
 8006840:	00600080 	.word	0x00600080
 8006844:	004000e0 	.word	0x004000e0
 8006848:	a3200008 	.word	0xa3200008

0800684c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	68f9      	ldr	r1, [r7, #12]
 8006880:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006884:	4313      	orrs	r3, r2
 8006886:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d107      	bne.n	800689e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006894:	461a      	mov	r2, r3
 8006896:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800689a:	6053      	str	r3, [r2, #4]
 800689c:	e009      	b.n	80068b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d106      	bne.n	80068b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068aa:	461a      	mov	r2, r3
 80068ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80068b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80068f0:	2064      	movs	r0, #100	; 0x64
 80068f2:	f7fa fec3 	bl	800167c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006902:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006904:	200a      	movs	r0, #10
 8006906:	f7fa feb9 	bl	800167c <HAL_Delay>

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006938:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d109      	bne.n	8006958 <USB_DriveVbus+0x44>
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d106      	bne.n	8006958 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006952:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006956:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800695e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006962:	d109      	bne.n	8006978 <USB_DriveVbus+0x64>
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006976:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	0c5b      	lsrs	r3, r3, #17
 80069a4:	f003 0303 	and.w	r3, r3, #3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	b29b      	uxth	r3, r3
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	461a      	mov	r2, r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	70fb      	strb	r3, [r7, #3]
 80069ea:	460b      	mov	r3, r1
 80069ec:	70bb      	strb	r3, [r7, #2]
 80069ee:	4613      	mov	r3, r2
 80069f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a06:	461a      	mov	r2, r3
 8006a08:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006a0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d87e      	bhi.n	8006b14 <USB_HC_Init+0x13c>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <USB_HC_Init+0x44>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a2d 	.word	0x08006a2d
 8006a20:	08006ad7 	.word	0x08006ad7
 8006a24:	08006a2d 	.word	0x08006a2d
 8006a28:	08006a99 	.word	0x08006a99
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f240 439d 	movw	r3, #1181	; 0x49d
 8006a3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006a40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	da10      	bge.n	8006a6a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	78fa      	ldrb	r2, [r7, #3]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a66:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006a68:	e057      	b.n	8006b1a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d051      	beq.n	8006b1a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	78fa      	ldrb	r2, [r7, #3]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a94:	60d3      	str	r3, [r2, #12]
      break;
 8006a96:	e040      	b.n	8006b1a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f240 639d 	movw	r3, #1693	; 0x69d
 8006aaa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006aac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	da34      	bge.n	8006b1e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	78fa      	ldrb	r2, [r7, #3]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006ad4:	e023      	b.n	8006b1e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f240 2325 	movw	r3, #549	; 0x225
 8006ae8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006aea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	da17      	bge.n	8006b22 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006af2:	78fb      	ldrb	r3, [r7, #3]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	78fa      	ldrb	r2, [r7, #3]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b0c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006b10:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006b12:	e006      	b.n	8006b22 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	75fb      	strb	r3, [r7, #23]
      break;
 8006b18:	e004      	b.n	8006b24 <USB_HC_Init+0x14c>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <USB_HC_Init+0x14c>
      break;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <USB_HC_Init+0x14c>
      break;
 8006b22:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	78fb      	ldrb	r3, [r7, #3]
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	2101      	movs	r1, #1
 8006b34:	fa01 f303 	lsl.w	r3, r1, r3
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006b4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	da03      	bge.n	8006b5e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	e001      	b.n	8006b62 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006b62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d103      	bne.n	8006b72 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e001      	b.n	8006b76 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b76:	787b      	ldrb	r3, [r7, #1]
 8006b78:	059b      	lsls	r3, r3, #22
 8006b7a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b7e:	78bb      	ldrb	r3, [r7, #2]
 8006b80:	02db      	lsls	r3, r3, #11
 8006b82:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b86:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b8c:	049b      	lsls	r3, r3, #18
 8006b8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b92:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b96:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b9a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	0159      	lsls	r1, r3, #5
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	440b      	add	r3, r1
 8006ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bac:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bb2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006bb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d10f      	bne.n	8006bdc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	78fa      	ldrb	r2, [r7, #3]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bda:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop

08006bec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08c      	sub	sp, #48	; 0x30
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	785b      	ldrb	r3, [r3, #1]
 8006c02:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c08:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d028      	beq.n	8006c68 <USB_HC_StartXfer+0x7c>
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	791b      	ldrb	r3, [r3, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d124      	bne.n	8006c68 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10b      	bne.n	8006c3c <USB_HC_StartXfer+0x50>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	795b      	ldrb	r3, [r3, #5]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d107      	bne.n	8006c3c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	4619      	mov	r1, r3
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 fa30 	bl	8007098 <USB_DoPing>
      return HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e114      	b.n	8006e66 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d112      	bne.n	8006c68 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006c60:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2200      	movs	r2, #0
 8006c66:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d018      	beq.n	8006ca2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	8912      	ldrh	r2, [r2, #8]
 8006c78:	4413      	add	r3, r2
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	8912      	ldrh	r2, [r2, #8]
 8006c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c84:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006c86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c88:	8b7b      	ldrh	r3, [r7, #26]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d90b      	bls.n	8006ca6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006c8e:	8b7b      	ldrh	r3, [r7, #26]
 8006c90:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006c92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	8912      	ldrh	r2, [r2, #8]
 8006c98:	fb02 f203 	mul.w	r2, r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	611a      	str	r2, [r3, #16]
 8006ca0:	e001      	b.n	8006ca6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	78db      	ldrb	r3, [r3, #3]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d006      	beq.n	8006cbc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006cae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	8912      	ldrh	r2, [r2, #8]
 8006cb4:	fb02 f203 	mul.w	r2, r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cc6:	04d9      	lsls	r1, r3, #19
 8006cc8:	4b69      	ldr	r3, [pc, #420]	; (8006e70 <USB_HC_StartXfer+0x284>)
 8006cca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ccc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	7a9b      	ldrb	r3, [r3, #10]
 8006cd2:	075b      	lsls	r3, r3, #29
 8006cd4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cd8:	69f9      	ldr	r1, [r7, #28]
 8006cda:	0148      	lsls	r0, r1, #5
 8006cdc:	6a39      	ldr	r1, [r7, #32]
 8006cde:	4401      	add	r1, r0
 8006ce0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ce4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ce6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	68d9      	ldr	r1, [r3, #12]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfe:	460a      	mov	r2, r1
 8006d00:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bf0c      	ite	eq
 8006d12:	2301      	moveq	r3, #1
 8006d14:	2300      	movne	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	69fa      	ldr	r2, [r7, #28]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	6a3a      	ldr	r2, [r7, #32]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d38:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	7e7b      	ldrb	r3, [r7, #25]
 8006d4a:	075b      	lsls	r3, r3, #29
 8006d4c:	69f9      	ldr	r1, [r7, #28]
 8006d4e:	0148      	lsls	r0, r1, #5
 8006d50:	6a39      	ldr	r1, [r7, #32]
 8006d52:	4401      	add	r1, r0
 8006d54:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a42      	ldr	r2, [pc, #264]	; (8006e74 <USB_HC_StartXfer+0x288>)
 8006d6c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d6e:	4b41      	ldr	r3, [pc, #260]	; (8006e74 <USB_HC_StartXfer+0x288>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d76:	4a3f      	ldr	r2, [pc, #252]	; (8006e74 <USB_HC_StartXfer+0x288>)
 8006d78:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	78db      	ldrb	r3, [r3, #3]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d006      	beq.n	8006d90 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d82:	4b3c      	ldr	r3, [pc, #240]	; (8006e74 <USB_HC_StartXfer+0x288>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8a:	4a3a      	ldr	r2, [pc, #232]	; (8006e74 <USB_HC_StartXfer+0x288>)
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e005      	b.n	8006d9c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d90:	4b38      	ldr	r3, [pc, #224]	; (8006e74 <USB_HC_StartXfer+0x288>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d98:	4a36      	ldr	r2, [pc, #216]	; (8006e74 <USB_HC_StartXfer+0x288>)
 8006d9a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d9c:	4b35      	ldr	r3, [pc, #212]	; (8006e74 <USB_HC_StartXfer+0x288>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006da4:	4a33      	ldr	r2, [pc, #204]	; (8006e74 <USB_HC_StartXfer+0x288>)
 8006da6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db4:	461a      	mov	r2, r3
 8006db6:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <USB_HC_StartXfer+0x288>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e04f      	b.n	8006e66 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	78db      	ldrb	r3, [r3, #3]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d14a      	bne.n	8006e64 <USB_HC_StartXfer+0x278>
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d046      	beq.n	8006e64 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	79db      	ldrb	r3, [r3, #7]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d830      	bhi.n	8006e40 <USB_HC_StartXfer+0x254>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <USB_HC_StartXfer+0x1f8>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e19 	.word	0x08006e19
 8006dec:	08006df5 	.word	0x08006df5
 8006df0:	08006e19 	.word	0x08006e19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	3303      	adds	r3, #3
 8006dfa:	089b      	lsrs	r3, r3, #2
 8006dfc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006dfe:	8afa      	ldrh	r2, [r7, #22]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d91c      	bls.n	8006e44 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	f043 0220 	orr.w	r2, r3, #32
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e16:	e015      	b.n	8006e44 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	3303      	adds	r3, #3
 8006e1e:	089b      	lsrs	r3, r3, #2
 8006e20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e22:	8afa      	ldrh	r2, [r7, #22]
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d90a      	bls.n	8006e48 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e3e:	e003      	b.n	8006e48 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006e40:	bf00      	nop
 8006e42:	e002      	b.n	8006e4a <USB_HC_StartXfer+0x25e>
        break;
 8006e44:	bf00      	nop
 8006e46:	e000      	b.n	8006e4a <USB_HC_StartXfer+0x25e>
        break;
 8006e48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	68d9      	ldr	r1, [r3, #12]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	785a      	ldrb	r2, [r3, #1]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	b298      	uxth	r0, r3
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff fb84 	bl	800656c <USB_WritePacket>
  }

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3728      	adds	r7, #40	; 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	1ff80000 	.word	0x1ff80000
 8006e74:	20000310 	.word	0x20000310

08006e78 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	b29b      	uxth	r3, r3
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006eaa:	78fb      	ldrb	r3, [r7, #3]
 8006eac:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	0c9b      	lsrs	r3, r3, #18
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <USB_HC_Halt+0x3a>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d16c      	bne.n	8006fae <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ef2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d143      	bne.n	8006f88 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	0151      	lsls	r1, r2, #5
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	440a      	add	r2, r1
 8006f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f5e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	3301      	adds	r3, #1
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f6c:	d81d      	bhi.n	8006faa <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f84:	d0ec      	beq.n	8006f60 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f86:	e080      	b.n	800708a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	0151      	lsls	r1, r2, #5
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	440a      	add	r2, r1
 8006f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fa6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fa8:	e06f      	b.n	800708a <USB_HC_Halt+0x1f0>
          break;
 8006faa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fac:	e06d      	b.n	800708a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fcc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d143      	bne.n	8007066 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ffc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	440a      	add	r2, r1
 8007014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007018:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800701c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	4413      	add	r3, r2
 8007026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	440a      	add	r2, r1
 8007034:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800703c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	3301      	adds	r3, #1
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800704a:	d81d      	bhi.n	8007088 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	4413      	add	r3, r2
 8007054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800705e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007062:	d0ec      	beq.n	800703e <USB_HC_Halt+0x1a4>
 8007064:	e011      	b.n	800708a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	4413      	add	r3, r2
 800706e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	0151      	lsls	r1, r2, #5
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	440a      	add	r2, r1
 800707c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	e000      	b.n	800708a <USB_HC_Halt+0x1f0>
          break;
 8007088:	bf00      	nop
    }
  }

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80070a8:	78fb      	ldrb	r3, [r7, #3]
 80070aa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80070ac:	2301      	movs	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	04da      	lsls	r2, r3, #19
 80070b4:	4b15      	ldr	r3, [pc, #84]	; (800710c <USB_DoPing+0x74>)
 80070b6:	4013      	ands	r3, r2
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070c8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070e0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070e8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f6:	461a      	mov	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	1ff80000 	.word	0x1ff80000

08007110 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff f99f 	bl	8006464 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007126:	2110      	movs	r1, #16
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff f9d7 	bl	80064dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff f9fa 	bl	8006528 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007134:	2300      	movs	r3, #0
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	e01f      	b.n	800717a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4413      	add	r3, r2
 8007142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007150:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007158:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007160:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716e:	461a      	mov	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	3301      	adds	r3, #1
 8007178:	613b      	str	r3, [r7, #16]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b0f      	cmp	r3, #15
 800717e:	d9dc      	bls.n	800713a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007180:	2300      	movs	r3, #0
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	e034      	b.n	80071f0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800719c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071ac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ba:	461a      	mov	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	3301      	adds	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071cc:	d80c      	bhi.n	80071e8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071e4:	d0ec      	beq.n	80071c0 <USB_StopHost+0xb0>
 80071e6:	e000      	b.n	80071ea <USB_StopHost+0xda>
        break;
 80071e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	3301      	adds	r3, #1
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b0f      	cmp	r3, #15
 80071f4:	d9c7      	bls.n	8007186 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071fc:	461a      	mov	r2, r3
 80071fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007202:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f04f 32ff 	mov.w	r2, #4294967295
 800720a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff f918 	bl	8006442 <USB_EnableGlobalInt>

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b089      	sub	sp, #36	; 0x24
 8007220:	af04      	add	r7, sp, #16
 8007222:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007224:	2301      	movs	r3, #1
 8007226:	2202      	movs	r2, #2
 8007228:	2102      	movs	r1, #2
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fcba 	bl	8007ba4 <USBH_FindInterface>
 8007230:	4603      	mov	r3, r0
 8007232:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	2bff      	cmp	r3, #255	; 0xff
 8007238:	d002      	beq.n	8007240 <USBH_CDC_InterfaceInit+0x24>
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d901      	bls.n	8007244 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007240:	2302      	movs	r3, #2
 8007242:	e13d      	b.n	80074c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc8f 	bl	8007b6c <USBH_SelectInterface>
 800724e:	4603      	mov	r3, r0
 8007250:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007258:	2302      	movs	r3, #2
 800725a:	e131      	b.n	80074c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007262:	2050      	movs	r0, #80	; 0x50
 8007264:	f004 fec0 	bl	800bfe8 <malloc>
 8007268:	4603      	mov	r3, r0
 800726a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800727c:	2302      	movs	r3, #2
 800727e:	e11f      	b.n	80074c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007280:	2250      	movs	r2, #80	; 0x50
 8007282:	2100      	movs	r1, #0
 8007284:	68b8      	ldr	r0, [r7, #8]
 8007286:	f004 feca 	bl	800c01e <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	211a      	movs	r1, #26
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	4413      	add	r3, r2
 8007296:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	b25b      	sxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	da15      	bge.n	80072ce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	211a      	movs	r1, #26
 80072a8:	fb01 f303 	mul.w	r3, r1, r3
 80072ac:	4413      	add	r3, r2
 80072ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072b2:	781a      	ldrb	r2, [r3, #0]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	211a      	movs	r1, #26
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80072c8:	881a      	ldrh	r2, [r3, #0]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f002 f894 	bl	8009402 <USBH_AllocPipe>
 80072da:	4603      	mov	r3, r0
 80072dc:	461a      	mov	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	7819      	ldrb	r1, [r3, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	7858      	ldrb	r0, [r3, #1]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	8952      	ldrh	r2, [r2, #10]
 80072fa:	9202      	str	r2, [sp, #8]
 80072fc:	2203      	movs	r2, #3
 80072fe:	9201      	str	r2, [sp, #4]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	4623      	mov	r3, r4
 8007304:	4602      	mov	r2, r0
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f002 f84c 	bl	80093a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2200      	movs	r2, #0
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f004 fdb7 	bl	800be88 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800731a:	2300      	movs	r3, #0
 800731c:	2200      	movs	r2, #0
 800731e:	210a      	movs	r1, #10
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fc3f 	bl	8007ba4 <USBH_FindInterface>
 8007326:	4603      	mov	r3, r0
 8007328:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	2bff      	cmp	r3, #255	; 0xff
 800732e:	d002      	beq.n	8007336 <USBH_CDC_InterfaceInit+0x11a>
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d901      	bls.n	800733a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007336:	2302      	movs	r3, #2
 8007338:	e0c2      	b.n	80074c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	211a      	movs	r1, #26
 8007340:	fb01 f303 	mul.w	r3, r1, r3
 8007344:	4413      	add	r3, r2
 8007346:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	b25b      	sxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	da16      	bge.n	8007380 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	211a      	movs	r1, #26
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	4413      	add	r3, r2
 800735e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007362:	781a      	ldrb	r2, [r3, #0]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	211a      	movs	r1, #26
 800736e:	fb01 f303 	mul.w	r3, r1, r3
 8007372:	4413      	add	r3, r2
 8007374:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007378:	881a      	ldrh	r2, [r3, #0]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	835a      	strh	r2, [r3, #26]
 800737e:	e015      	b.n	80073ac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	211a      	movs	r1, #26
 8007386:	fb01 f303 	mul.w	r3, r1, r3
 800738a:	4413      	add	r3, r2
 800738c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	211a      	movs	r1, #26
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80073a6:	881a      	ldrh	r2, [r3, #0]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	211a      	movs	r1, #26
 80073b2:	fb01 f303 	mul.w	r3, r1, r3
 80073b6:	4413      	add	r3, r2
 80073b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b25b      	sxtb	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	da16      	bge.n	80073f2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	211a      	movs	r1, #26
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	4413      	add	r3, r2
 80073d0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073d4:	781a      	ldrb	r2, [r3, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	211a      	movs	r1, #26
 80073e0:	fb01 f303 	mul.w	r3, r1, r3
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80073ea:	881a      	ldrh	r2, [r3, #0]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	835a      	strh	r2, [r3, #26]
 80073f0:	e015      	b.n	800741e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	211a      	movs	r1, #26
 80073f8:	fb01 f303 	mul.w	r3, r1, r3
 80073fc:	4413      	add	r3, r2
 80073fe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	211a      	movs	r1, #26
 800740e:	fb01 f303 	mul.w	r3, r1, r3
 8007412:	4413      	add	r3, r2
 8007414:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007418:	881a      	ldrh	r2, [r3, #0]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	7b9b      	ldrb	r3, [r3, #14]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 ffec 	bl	8009402 <USBH_AllocPipe>
 800742a:	4603      	mov	r3, r0
 800742c:	461a      	mov	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	7bdb      	ldrb	r3, [r3, #15]
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 ffe2 	bl	8009402 <USBH_AllocPipe>
 800743e:	4603      	mov	r3, r0
 8007440:	461a      	mov	r2, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	7b59      	ldrb	r1, [r3, #13]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	7b98      	ldrb	r0, [r3, #14]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	8b12      	ldrh	r2, [r2, #24]
 800745e:	9202      	str	r2, [sp, #8]
 8007460:	2202      	movs	r2, #2
 8007462:	9201      	str	r2, [sp, #4]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	4623      	mov	r3, r4
 8007468:	4602      	mov	r2, r0
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 ff9a 	bl	80093a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	7b19      	ldrb	r1, [r3, #12]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	7bd8      	ldrb	r0, [r3, #15]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	8b52      	ldrh	r2, [r2, #26]
 8007488:	9202      	str	r2, [sp, #8]
 800748a:	2202      	movs	r2, #2
 800748c:	9201      	str	r2, [sp, #4]
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	4623      	mov	r3, r4
 8007492:	4602      	mov	r2, r0
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 ff85 	bl	80093a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	7b5b      	ldrb	r3, [r3, #13]
 80074a6:	2200      	movs	r2, #0
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f004 fcec 	bl	800be88 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	7b1b      	ldrb	r3, [r3, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f004 fce5 	bl	800be88 <USBH_LL_SetToggle>

  return USBH_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd90      	pop	{r4, r7, pc}

080074c8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00e      	beq.n	8007500 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 ff7a 	bl	80093e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 ffa5 	bl	8009444 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	7b1b      	ldrb	r3, [r3, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00e      	beq.n	8007526 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	7b1b      	ldrb	r3, [r3, #12]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 ff67 	bl	80093e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	7b1b      	ldrb	r3, [r3, #12]
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f001 ff92 	bl	8009444 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	7b5b      	ldrb	r3, [r3, #13]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00e      	beq.n	800754c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	7b5b      	ldrb	r3, [r3, #13]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 ff54 	bl	80093e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	7b5b      	ldrb	r3, [r3, #13]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 ff7f 	bl	8009444 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	4618      	mov	r0, r3
 8007562:	f004 fd49 	bl	800bff8 <free>
    phost->pActiveClass->pData = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800756c:	2200      	movs	r2, #0
 800756e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3340      	adds	r3, #64	; 0x40
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f8b1 	bl	80076fa <GetLineCoding>
 8007598:	4603      	mov	r3, r0
 800759a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800759c:	7afb      	ldrb	r3, [r7, #11]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d105      	bne.n	80075ae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a8:	2102      	movs	r1, #2
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80075ae:	7afb      	ldrb	r3, [r7, #11]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80075c0:	2301      	movs	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d877      	bhi.n	80076cc <USBH_CDC_Process+0x114>
 80075dc:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <USBH_CDC_Process+0x2c>)
 80075de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e2:	bf00      	nop
 80075e4:	080075f9 	.word	0x080075f9
 80075e8:	080075ff 	.word	0x080075ff
 80075ec:	0800762f 	.word	0x0800762f
 80075f0:	080076a3 	.word	0x080076a3
 80075f4:	080076b1 	.word	0x080076b1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
      break;
 80075fc:	e06d      	b.n	80076da <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f897 	bl	8007738 <SetLineCoding>
 800760a:	4603      	mov	r3, r0
 800760c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800761c:	e058      	b.n	80076d0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d055      	beq.n	80076d0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2204      	movs	r2, #4
 8007628:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800762c:	e050      	b.n	80076d0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	3340      	adds	r3, #64	; 0x40
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f860 	bl	80076fa <GetLineCoding>
 800763a:	4603      	mov	r3, r0
 800763c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d126      	bne.n	8007692 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007656:	791b      	ldrb	r3, [r3, #4]
 8007658:	429a      	cmp	r2, r3
 800765a:	d13b      	bne.n	80076d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007666:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007668:	429a      	cmp	r2, r3
 800766a:	d133      	bne.n	80076d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007676:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007678:	429a      	cmp	r2, r3
 800767a:	d12b      	bne.n	80076d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007684:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007686:	429a      	cmp	r2, r3
 8007688:	d124      	bne.n	80076d4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f984 	bl	8007998 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007690:	e020      	b.n	80076d4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007692:	7bbb      	ldrb	r3, [r7, #14]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d01d      	beq.n	80076d4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2204      	movs	r2, #4
 800769c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80076a0:	e018      	b.n	80076d4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f867 	bl	8007776 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f8f8 	bl	800789e <CDC_ProcessReception>
      break;
 80076ae:	e014      	b.n	80076da <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80076b0:	2100      	movs	r1, #0
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 f953 	bl	800895e <USBH_ClrFeature>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10a      	bne.n	80076d8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80076ca:	e005      	b.n	80076d8 <USBH_CDC_Process+0x120>

    default:
      break;
 80076cc:	bf00      	nop
 80076ce:	e004      	b.n	80076da <USBH_CDC_Process+0x122>
      break;
 80076d0:	bf00      	nop
 80076d2:	e002      	b.n	80076da <USBH_CDC_Process+0x122>
      break;
 80076d4:	bf00      	nop
 80076d6:	e000      	b.n	80076da <USBH_CDC_Process+0x122>
      break;
 80076d8:	bf00      	nop

  }

  return status;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	22a1      	movs	r2, #161	; 0xa1
 8007708:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2221      	movs	r2, #33	; 0x21
 800770e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2207      	movs	r2, #7
 8007720:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2207      	movs	r2, #7
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 faf8 	bl	8008d1e <USBH_CtlReq>
 800772e:	4603      	mov	r3, r0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2221      	movs	r2, #33	; 0x21
 8007746:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2207      	movs	r2, #7
 800775e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2207      	movs	r2, #7
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 fad9 	bl	8008d1e <USBH_CtlReq>
 800776c:	4603      	mov	r3, r0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b086      	sub	sp, #24
 800777a:	af02      	add	r7, sp, #8
 800777c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007788:	2300      	movs	r3, #0
 800778a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007792:	2b01      	cmp	r3, #1
 8007794:	d002      	beq.n	800779c <CDC_ProcessTransmission+0x26>
 8007796:	2b02      	cmp	r3, #2
 8007798:	d025      	beq.n	80077e6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800779a:	e07c      	b.n	8007896 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	8b12      	ldrh	r2, [r2, #24]
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d90c      	bls.n	80077c2 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	69d9      	ldr	r1, [r3, #28]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8b1a      	ldrh	r2, [r3, #24]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	7b58      	ldrb	r0, [r3, #13]
 80077b4:	2301      	movs	r3, #1
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	4603      	mov	r3, r0
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fdaf 	bl	800931e <USBH_BulkSendData>
 80077c0:	e00c      	b.n	80077dc <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	7b58      	ldrb	r0, [r3, #13]
 80077d0:	2301      	movs	r3, #1
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	4603      	mov	r3, r0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 fda1 	bl	800931e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80077e4:	e057      	b.n	8007896 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	7b5b      	ldrb	r3, [r3, #13]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f004 fb21 	bl	800be34 <USBH_LL_GetURBState>
 80077f2:	4603      	mov	r3, r0
 80077f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d136      	bne.n	800786a <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	8b12      	ldrh	r2, [r2, #24]
 8007804:	4293      	cmp	r3, r2
 8007806:	d90e      	bls.n	8007826 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	8b12      	ldrh	r2, [r2, #24]
 8007810:	1a9a      	subs	r2, r3, r2
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	8b12      	ldrh	r2, [r2, #24]
 800781e:	441a      	add	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	61da      	str	r2, [r3, #28]
 8007824:	e002      	b.n	800782c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800783c:	e006      	b.n	800784c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f892 	bl	8007970 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2204      	movs	r2, #4
 8007850:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007860:	2200      	movs	r2, #0
 8007862:	4619      	mov	r1, r3
 8007864:	f001 feea 	bl	800963c <osMessagePut>
      break;
 8007868:	e014      	b.n	8007894 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800786a:	7afb      	ldrb	r3, [r7, #11]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d111      	bne.n	8007894 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2204      	movs	r2, #4
 800787c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800788c:	2200      	movs	r2, #0
 800788e:	4619      	mov	r1, r3
 8007890:	f001 fed4 	bl	800963c <osMessagePut>
      break;
 8007894:	bf00      	nop
  }
}
 8007896:	bf00      	nop
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b086      	sub	sp, #24
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d002      	beq.n	80078c4 <CDC_ProcessReception+0x26>
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d00e      	beq.n	80078e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80078c2:	e051      	b.n	8007968 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	6a19      	ldr	r1, [r3, #32]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	8b5a      	ldrh	r2, [r3, #26]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	7b1b      	ldrb	r3, [r3, #12]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 fd49 	bl	8009368 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2204      	movs	r2, #4
 80078da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80078de:	e043      	b.n	8007968 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	7b1b      	ldrb	r3, [r3, #12]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f004 faa4 	bl	800be34 <USBH_LL_GetURBState>
 80078ec:	4603      	mov	r3, r0
 80078ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80078f0:	7cfb      	ldrb	r3, [r7, #19]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d137      	bne.n	8007966 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	7b1b      	ldrb	r3, [r3, #12]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f004 fa07 	bl	800bd10 <USBH_LL_GetLastXferSize>
 8007902:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	429a      	cmp	r2, r3
 800790c:	d016      	beq.n	800793c <CDC_ProcessReception+0x9e>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	8b5b      	ldrh	r3, [r3, #26]
 8007912:	461a      	mov	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4293      	cmp	r3, r2
 8007918:	d910      	bls.n	800793c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	1ad2      	subs	r2, r2, r3
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	6a1a      	ldr	r2, [r3, #32]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	441a      	add	r2, r3
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2203      	movs	r2, #3
 8007936:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800793a:	e006      	b.n	800794a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f81d 	bl	8007984 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2204      	movs	r2, #4
 800794e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800795e:	2200      	movs	r2, #0
 8007960:	4619      	mov	r1, r3
 8007962:	f001 fe6b 	bl	800963c <osMessagePut>
      break;
 8007966:	bf00      	nop
  }
}
 8007968:	bf00      	nop
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80079ac:	b5b0      	push	{r4, r5, r7, lr}
 80079ae:	b090      	sub	sp, #64	; 0x40
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80079c0:	2302      	movs	r3, #2
 80079c2:	e04d      	b.n	8007a60 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	79fa      	ldrb	r2, [r7, #7]
 80079c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f847 	bl	8007a70 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007a10:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <USBH_Init+0xbc>)
 8007a12:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007a1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a20:	2100      	movs	r1, #0
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 fde1 	bl	80095ea <osMessageCreate>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007a30:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <USBH_Init+0xc0>)
 8007a32:	f107 0414 	add.w	r4, r7, #20
 8007a36:	461d      	mov	r5, r3
 8007a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007a40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007a44:	f107 0314 	add.w	r3, r7, #20
 8007a48:	68f9      	ldr	r1, [r7, #12]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f001 fd6d 	bl	800952a <osThreadCreate>
 8007a50:	4602      	mov	r2, r0
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f004 f89d 	bl	800bb98 <USBH_LL_Init>

  return USBH_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3740      	adds	r7, #64	; 0x40
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bdb0      	pop	{r4, r5, r7, pc}
 8007a68:	0800c1e8 	.word	0x0800c1e8
 8007a6c:	0800c204 	.word	0x0800c204

08007a70 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e009      	b.n	8007a96 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	33e0      	adds	r3, #224	; 0xe0
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b0e      	cmp	r3, #14
 8007a9a:	d9f2      	bls.n	8007a82 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	e009      	b.n	8007ab6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007abc:	d3f1      	bcc.n	8007aa2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2240      	movs	r2, #64	; 0x40
 8007ae2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d016      	beq.n	8007b5a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10e      	bne.n	8007b54 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b3c:	1c59      	adds	r1, r3, #1
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	33de      	adds	r3, #222	; 0xde
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]
 8007b52:	e004      	b.n	8007b5e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b54:	2302      	movs	r3, #2
 8007b56:	73fb      	strb	r3, [r7, #15]
 8007b58:	e001      	b.n	8007b5e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d204      	bcs.n	8007b92 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	78fa      	ldrb	r2, [r7, #3]
 8007b8c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007b90:	e001      	b.n	8007b96 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007b92:	2302      	movs	r3, #2
 8007b94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	4608      	mov	r0, r1
 8007bae:	4611      	mov	r1, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	70fb      	strb	r3, [r7, #3]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70bb      	strb	r3, [r7, #2]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007bcc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bce:	e025      	b.n	8007c1c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	221a      	movs	r2, #26
 8007bd4:	fb02 f303 	mul.w	r3, r2, r3
 8007bd8:	3308      	adds	r3, #8
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4413      	add	r3, r2
 8007bde:	3302      	adds	r3, #2
 8007be0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	795b      	ldrb	r3, [r3, #5]
 8007be6:	78fa      	ldrb	r2, [r7, #3]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d002      	beq.n	8007bf2 <USBH_FindInterface+0x4e>
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	2bff      	cmp	r3, #255	; 0xff
 8007bf0:	d111      	bne.n	8007c16 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bf6:	78ba      	ldrb	r2, [r7, #2]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d002      	beq.n	8007c02 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bfc:	78bb      	ldrb	r3, [r7, #2]
 8007bfe:	2bff      	cmp	r3, #255	; 0xff
 8007c00:	d109      	bne.n	8007c16 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c06:	787a      	ldrb	r2, [r7, #1]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d002      	beq.n	8007c12 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c0c:	787b      	ldrb	r3, [r7, #1]
 8007c0e:	2bff      	cmp	r3, #255	; 0xff
 8007c10:	d101      	bne.n	8007c16 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	e006      	b.n	8007c24 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d9d6      	bls.n	8007bd0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007c22:	23ff      	movs	r3, #255	; 0xff
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f003 fff3 	bl	800bc24 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007c3e:	2101      	movs	r1, #1
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f004 f90a 	bl	800be5a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af04      	add	r7, sp, #16
 8007c56:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d102      	bne.n	8007c72 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2203      	movs	r2, #3
 8007c70:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b0b      	cmp	r3, #11
 8007c7a:	f200 823c 	bhi.w	80080f6 <USBH_Process+0x4a6>
 8007c7e:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <USBH_Process+0x34>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007cb5 	.word	0x08007cb5
 8007c88:	08007d03 	.word	0x08007d03
 8007c8c:	08007d87 	.word	0x08007d87
 8007c90:	08008075 	.word	0x08008075
 8007c94:	080080f7 	.word	0x080080f7
 8007c98:	08007e47 	.word	0x08007e47
 8007c9c:	08007fff 	.word	0x08007fff
 8007ca0:	08007e99 	.word	0x08007e99
 8007ca4:	08007ed5 	.word	0x08007ed5
 8007ca8:	08007f0f 	.word	0x08007f0f
 8007cac:	08007f57 	.word	0x08007f57
 8007cb0:	0800805d 	.word	0x0800805d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 821c 	beq.w	80080fa <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007cc8:	20c8      	movs	r0, #200	; 0xc8
 8007cca:	f004 f910 	bl	800beee <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f004 f803 	bl	800bcda <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	f001 fc9e 	bl	800963c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d00:	e1fb      	b.n	80080fa <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d107      	bne.n	8007d1c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	e025      	b.n	8007d68 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d26:	d914      	bls.n	8007d52 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d2e:	3301      	adds	r3, #1
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d903      	bls.n	8007d4a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	220d      	movs	r2, #13
 8007d46:	701a      	strb	r2, [r3, #0]
 8007d48:	e00e      	b.n	8007d68 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	701a      	strb	r2, [r3, #0]
 8007d50:	e00a      	b.n	8007d68 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d58:	f103 020a 	add.w	r2, r3, #10
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007d62:	200a      	movs	r0, #10
 8007d64:	f004 f8c3 	bl	800beee <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4619      	mov	r1, r3
 8007d80:	f001 fc5c 	bl	800963c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d84:	e1c0      	b.n	8008108 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d96:	2104      	movs	r1, #4
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007d9c:	2064      	movs	r0, #100	; 0x64
 8007d9e:	f004 f8a6 	bl	800beee <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f003 ff74 	bl	800bc90 <USBH_LL_GetSpeed>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2205      	movs	r2, #5
 8007db6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007db8:	2100      	movs	r1, #0
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 fb21 	bl	8009402 <USBH_AllocPipe>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007dc8:	2180      	movs	r1, #128	; 0x80
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 fb19 	bl	8009402 <USBH_AllocPipe>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	7919      	ldrb	r1, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007dec:	b292      	uxth	r2, r2
 8007dee:	9202      	str	r2, [sp, #8]
 8007df0:	2200      	movs	r2, #0
 8007df2:	9201      	str	r2, [sp, #4]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	4603      	mov	r3, r0
 8007df8:	2280      	movs	r2, #128	; 0x80
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 fad2 	bl	80093a4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	7959      	ldrb	r1, [r3, #5]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e14:	b292      	uxth	r2, r2
 8007e16:	9202      	str	r2, [sp, #8]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	9201      	str	r2, [sp, #4]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2200      	movs	r2, #0
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 fabe 	bl	80093a4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4619      	mov	r1, r3
 8007e40:	f001 fbfc 	bl	800963c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e44:	e160      	b.n	8008108 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f964 	bl	8008114 <USBH_HandleEnum>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f040 8152 	bne.w	80080fe <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d103      	bne.n	8007e74 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2208      	movs	r2, #8
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	e002      	b.n	8007e7a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2207      	movs	r2, #7
 8007e78:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2205      	movs	r2, #5
 8007e7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4619      	mov	r1, r3
 8007e92:	f001 fbd3 	bl	800963c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e96:	e132      	b.n	80080fe <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 812f 	beq.w	8008102 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eaa:	2101      	movs	r1, #1
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2208      	movs	r2, #8
 8007eb4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2205      	movs	r2, #5
 8007eba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007eca:	2200      	movs	r2, #0
 8007ecc:	4619      	mov	r1, r3
 8007ece:	f001 fbb5 	bl	800963c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007ed2:	e116      	b.n	8008102 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fcf6 	bl	80088d0 <USBH_SetCfg>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d102      	bne.n	8007ef0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2209      	movs	r2, #9
 8007eee:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f04:	2200      	movs	r2, #0
 8007f06:	4619      	mov	r1, r3
 8007f08:	f001 fb98 	bl	800963c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f0c:	e0fc      	b.n	8008108 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fcf9 	bl	8008916 <USBH_SetFeature>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d106      	bne.n	8007f38 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e002      	b.n	8007f38 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	220a      	movs	r2, #10
 8007f36:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4619      	mov	r1, r3
 8007f50:	f001 fb74 	bl	800963c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f54:	e0d8      	b.n	8008108 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d03f      	beq.n	8007fe0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73fb      	strb	r3, [r7, #15]
 8007f6c:	e016      	b.n	8007f9c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f6e:	7bfa      	ldrb	r2, [r7, #15]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	32de      	adds	r2, #222	; 0xde
 8007f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f78:	791a      	ldrb	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d108      	bne.n	8007f96 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f84:	7bfa      	ldrb	r2, [r7, #15]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	32de      	adds	r2, #222	; 0xde
 8007f8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007f94:	e005      	b.n	8007fa2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0e5      	beq.n	8007f6e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d016      	beq.n	8007fda <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	4798      	blx	r3
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2206      	movs	r2, #6
 8007fc2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fca:	2103      	movs	r1, #3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
 8007fd0:	e006      	b.n	8007fe0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	220d      	movs	r2, #13
 8007fd6:	701a      	strb	r2, [r3, #0]
 8007fd8:	e002      	b.n	8007fe0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	220d      	movs	r2, #13
 8007fde:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2205      	movs	r2, #5
 8007fe4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	f001 fb20 	bl	800963c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ffc:	e084      	b.n	8008108 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008004:	2b00      	cmp	r3, #0
 8008006:	d017      	beq.n	8008038 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
 8008014:	4603      	mov	r3, r0
 8008016:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d103      	bne.n	8008028 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	220b      	movs	r2, #11
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	e00a      	b.n	800803e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d106      	bne.n	800803e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	220d      	movs	r2, #13
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	e002      	b.n	800803e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	220d      	movs	r2, #13
 800803c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2205      	movs	r2, #5
 8008042:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008052:	2200      	movs	r2, #0
 8008054:	4619      	mov	r1, r3
 8008056:	f001 faf1 	bl	800963c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800805a:	e055      	b.n	8008108 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d04f      	beq.n	8008106 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
      }
      break;
 8008072:	e048      	b.n	8008106 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff fcf7 	bl	8007a70 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d009      	beq.n	80080a0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080b0:	2105      	movs	r1, #5
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d107      	bne.n	80080d2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7ff fdb0 	bl	8007c30 <USBH_Start>
 80080d0:	e002      	b.n	80080d8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f003 fda6 	bl	800bc24 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80080ec:	2200      	movs	r2, #0
 80080ee:	4619      	mov	r1, r3
 80080f0:	f001 faa4 	bl	800963c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080f4:	e008      	b.n	8008108 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80080f6:	bf00      	nop
 80080f8:	e006      	b.n	8008108 <USBH_Process+0x4b8>
      break;
 80080fa:	bf00      	nop
 80080fc:	e004      	b.n	8008108 <USBH_Process+0x4b8>
      break;
 80080fe:	bf00      	nop
 8008100:	e002      	b.n	8008108 <USBH_Process+0x4b8>
    break;
 8008102:	bf00      	nop
 8008104:	e000      	b.n	8008108 <USBH_Process+0x4b8>
      break;
 8008106:	bf00      	nop
  }
  return USBH_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop

08008114 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af04      	add	r7, sp, #16
 800811a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800811c:	2301      	movs	r3, #1
 800811e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008120:	2301      	movs	r3, #1
 8008122:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	2b07      	cmp	r3, #7
 800812a:	f200 8208 	bhi.w	800853e <USBH_HandleEnum+0x42a>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <USBH_HandleEnum+0x20>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008155 	.word	0x08008155
 8008138:	08008213 	.word	0x08008213
 800813c:	0800827d 	.word	0x0800827d
 8008140:	0800830b 	.word	0x0800830b
 8008144:	08008375 	.word	0x08008375
 8008148:	080083e5 	.word	0x080083e5
 800814c:	08008481 	.word	0x08008481
 8008150:	080084ff 	.word	0x080084ff
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008154:	2108      	movs	r1, #8
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 faea 	bl	8008730 <USBH_Get_DevDesc>
 800815c:	4603      	mov	r3, r0
 800815e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d130      	bne.n	80081c8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7919      	ldrb	r1, [r3, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800818a:	b292      	uxth	r2, r2
 800818c:	9202      	str	r2, [sp, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	9201      	str	r2, [sp, #4]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	4603      	mov	r3, r0
 8008196:	2280      	movs	r2, #128	; 0x80
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f903 	bl	80093a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	7959      	ldrb	r1, [r3, #5]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081b2:	b292      	uxth	r2, r2
 80081b4:	9202      	str	r2, [sp, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	9201      	str	r2, [sp, #4]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	4603      	mov	r3, r0
 80081be:	2200      	movs	r2, #0
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 f8ef 	bl	80093a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081c6:	e1bc      	b.n	8008542 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	f040 81b9 	bne.w	8008542 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081d6:	3301      	adds	r3, #1
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d903      	bls.n	80081f2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	220d      	movs	r2, #13
 80081ee:	701a      	strb	r2, [r3, #0]
      break;
 80081f0:	e1a7      	b.n	8008542 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	795b      	ldrb	r3, [r3, #5]
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 f923 	bl	8009444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	791b      	ldrb	r3, [r3, #4]
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 f91d 	bl	8009444 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	701a      	strb	r2, [r3, #0]
      break;
 8008210:	e197      	b.n	8008542 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008212:	2112      	movs	r1, #18
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fa8b 	bl	8008730 <USBH_Get_DevDesc>
 800821a:	4603      	mov	r3, r0
 800821c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d103      	bne.n	800822c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800822a:	e18c      	b.n	8008546 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	2b03      	cmp	r3, #3
 8008230:	f040 8189 	bne.w	8008546 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800823a:	3301      	adds	r3, #1
 800823c:	b2da      	uxtb	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800824a:	2b03      	cmp	r3, #3
 800824c:	d903      	bls.n	8008256 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	220d      	movs	r2, #13
 8008252:	701a      	strb	r2, [r3, #0]
      break;
 8008254:	e177      	b.n	8008546 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	795b      	ldrb	r3, [r3, #5]
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 f8f1 	bl	8009444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	791b      	ldrb	r3, [r3, #4]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f001 f8eb 	bl	8009444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	701a      	strb	r2, [r3, #0]
      break;
 800827a:	e164      	b.n	8008546 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800827c:	2101      	movs	r1, #1
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fb02 	bl	8008888 <USBH_SetAddress>
 8008284:	4603      	mov	r3, r0
 8008286:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d132      	bne.n	80082f4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800828e:	2002      	movs	r0, #2
 8008290:	f003 fe2d 	bl	800beee <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2203      	movs	r2, #3
 80082a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	7919      	ldrb	r1, [r3, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082b6:	b292      	uxth	r2, r2
 80082b8:	9202      	str	r2, [sp, #8]
 80082ba:	2200      	movs	r2, #0
 80082bc:	9201      	str	r2, [sp, #4]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	4603      	mov	r3, r0
 80082c2:	2280      	movs	r2, #128	; 0x80
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 f86d 	bl	80093a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7959      	ldrb	r1, [r3, #5]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082de:	b292      	uxth	r2, r2
 80082e0:	9202      	str	r2, [sp, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	9201      	str	r2, [sp, #4]
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	4603      	mov	r3, r0
 80082ea:	2200      	movs	r2, #0
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f859 	bl	80093a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80082f2:	e12a      	b.n	800854a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	f040 8127 	bne.w	800854a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	220d      	movs	r2, #13
 8008300:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	705a      	strb	r2, [r3, #1]
      break;
 8008308:	e11f      	b.n	800854a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800830a:	2109      	movs	r1, #9
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fa37 	bl	8008780 <USBH_Get_CfgDesc>
 8008312:	4603      	mov	r3, r0
 8008314:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d103      	bne.n	8008324 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2204      	movs	r2, #4
 8008320:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008322:	e114      	b.n	800854e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b03      	cmp	r3, #3
 8008328:	f040 8111 	bne.w	800854e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008332:	3301      	adds	r3, #1
 8008334:	b2da      	uxtb	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008342:	2b03      	cmp	r3, #3
 8008344:	d903      	bls.n	800834e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	220d      	movs	r2, #13
 800834a:	701a      	strb	r2, [r3, #0]
      break;
 800834c:	e0ff      	b.n	800854e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	795b      	ldrb	r3, [r3, #5]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 f875 	bl	8009444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	791b      	ldrb	r3, [r3, #4]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f86f 	bl	8009444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	701a      	strb	r2, [r3, #0]
      break;
 8008372:	e0ec      	b.n	800854e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f9ff 	bl	8008780 <USBH_Get_CfgDesc>
 8008382:	4603      	mov	r3, r0
 8008384:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2205      	movs	r2, #5
 8008390:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008392:	e0de      	b.n	8008552 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b03      	cmp	r3, #3
 8008398:	f040 80db 	bne.w	8008552 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083a2:	3301      	adds	r3, #1
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d903      	bls.n	80083be <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	220d      	movs	r2, #13
 80083ba:	701a      	strb	r2, [r3, #0]
      break;
 80083bc:	e0c9      	b.n	8008552 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 f83d 	bl	8009444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	791b      	ldrb	r3, [r3, #4]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 f837 	bl	8009444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	701a      	strb	r2, [r3, #0]
      break;
 80083e2:	e0b6      	b.n	8008552 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d036      	beq.n	800845c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083fa:	23ff      	movs	r3, #255	; 0xff
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f9e3 	bl	80087c8 <USBH_Get_StringDesc>
 8008402:	4603      	mov	r3, r0
 8008404:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d111      	bne.n	8008430 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2206      	movs	r2, #6
 8008410:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2205      	movs	r2, #5
 8008416:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008426:	2200      	movs	r2, #0
 8008428:	4619      	mov	r1, r3
 800842a:	f001 f907 	bl	800963c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800842e:	e092      	b.n	8008556 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b03      	cmp	r3, #3
 8008434:	f040 808f 	bne.w	8008556 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2206      	movs	r2, #6
 800843c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2205      	movs	r2, #5
 8008442:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008452:	2200      	movs	r2, #0
 8008454:	4619      	mov	r1, r3
 8008456:	f001 f8f1 	bl	800963c <osMessagePut>
      break;
 800845a:	e07c      	b.n	8008556 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2206      	movs	r2, #6
 8008460:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2205      	movs	r2, #5
 8008466:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008476:	2200      	movs	r2, #0
 8008478:	4619      	mov	r1, r3
 800847a:	f001 f8df 	bl	800963c <osMessagePut>
      break;
 800847e:	e06a      	b.n	8008556 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008486:	2b00      	cmp	r3, #0
 8008488:	d027      	beq.n	80084da <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008496:	23ff      	movs	r3, #255	; 0xff
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f995 	bl	80087c8 <USBH_Get_StringDesc>
 800849e:	4603      	mov	r3, r0
 80084a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d103      	bne.n	80084b0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2207      	movs	r2, #7
 80084ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80084ae:	e054      	b.n	800855a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d151      	bne.n	800855a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2207      	movs	r2, #7
 80084ba:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2205      	movs	r2, #5
 80084c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084d0:	2200      	movs	r2, #0
 80084d2:	4619      	mov	r1, r3
 80084d4:	f001 f8b2 	bl	800963c <osMessagePut>
      break;
 80084d8:	e03f      	b.n	800855a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2207      	movs	r2, #7
 80084de:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2205      	movs	r2, #5
 80084e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084f4:	2200      	movs	r2, #0
 80084f6:	4619      	mov	r1, r3
 80084f8:	f001 f8a0 	bl	800963c <osMessagePut>
      break;
 80084fc:	e02d      	b.n	800855a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008504:	2b00      	cmp	r3, #0
 8008506:	d017      	beq.n	8008538 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008514:	23ff      	movs	r3, #255	; 0xff
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f956 	bl	80087c8 <USBH_Get_StringDesc>
 800851c:	4603      	mov	r3, r0
 800851e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d102      	bne.n	800852c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800852a:	e018      	b.n	800855e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	2b03      	cmp	r3, #3
 8008530:	d115      	bne.n	800855e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]
      break;
 8008536:	e012      	b.n	800855e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]
      break;
 800853c:	e00f      	b.n	800855e <USBH_HandleEnum+0x44a>

    default:
      break;
 800853e:	bf00      	nop
 8008540:	e00e      	b.n	8008560 <USBH_HandleEnum+0x44c>
      break;
 8008542:	bf00      	nop
 8008544:	e00c      	b.n	8008560 <USBH_HandleEnum+0x44c>
      break;
 8008546:	bf00      	nop
 8008548:	e00a      	b.n	8008560 <USBH_HandleEnum+0x44c>
      break;
 800854a:	bf00      	nop
 800854c:	e008      	b.n	8008560 <USBH_HandleEnum+0x44c>
      break;
 800854e:	bf00      	nop
 8008550:	e006      	b.n	8008560 <USBH_HandleEnum+0x44c>
      break;
 8008552:	bf00      	nop
 8008554:	e004      	b.n	8008560 <USBH_HandleEnum+0x44c>
      break;
 8008556:	bf00      	nop
 8008558:	e002      	b.n	8008560 <USBH_HandleEnum+0x44c>
      break;
 800855a:	bf00      	nop
 800855c:	e000      	b.n	8008560 <USBH_HandleEnum+0x44c>
      break;
 800855e:	bf00      	nop
  }
  return Status;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop

0800856c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f804 	bl	80085ae <USBH_HandleSof>
}
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b0b      	cmp	r3, #11
 80085be:	d10a      	bne.n	80085d6 <USBH_HandleSof+0x28>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
  }
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008602:	2200      	movs	r2, #0
 8008604:	4619      	mov	r1, r3
 8008606:	f001 f819 	bl	800963c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800860a:	bf00      	nop
}
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008612:	b480      	push	{r7}
 8008614:	b083      	sub	sp, #12
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008622:	bf00      	nop
}
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008662:	2200      	movs	r2, #0
 8008664:	4619      	mov	r1, r3
 8008666:	f000 ffe9 	bl	800963c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f003 fae0 	bl	800bc5a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	791b      	ldrb	r3, [r3, #4]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fecf 	bl	8009444 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	795b      	ldrb	r3, [r3, #5]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fec9 	bl	8009444 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086c6:	2200      	movs	r2, #0
 80086c8:	4619      	mov	r1, r3
 80086ca:	f000 ffb7 	bl	800963c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80086e6:	f107 030c 	add.w	r3, r7, #12
 80086ea:	f04f 32ff 	mov.w	r2, #4294967295
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 ffe4 	bl	80096bc <osMessageGet>
    if (event.status == osEventMessage)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b10      	cmp	r3, #16
 80086f8:	d1f2      	bne.n	80086e0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff faa8 	bl	8007c50 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008700:	e7ee      	b.n	80086e0 <USBH_Process_OS+0x8>

08008702 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800871e:	2200      	movs	r2, #0
 8008720:	4619      	mov	r1, r3
 8008722:	f000 ff8b 	bl	800963c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af02      	add	r7, sp, #8
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	b29b      	uxth	r3, r3
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	4613      	mov	r3, r2
 800874a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800874e:	2100      	movs	r1, #0
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f864 	bl	800881e <USBH_GetDescriptor>
 8008756:	4603      	mov	r3, r0
 8008758:	73fb      	strb	r3, [r7, #15]
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10a      	bne.n	8008776 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	b292      	uxth	r2, r2
 8008770:	4619      	mov	r1, r3
 8008772:	f000 f918 	bl	80089a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	331c      	adds	r3, #28
 8008790:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008792:	887b      	ldrh	r3, [r7, #2]
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800879c:	2100      	movs	r1, #0
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f83d 	bl	800881e <USBH_GetDescriptor>
 80087a4:	4603      	mov	r3, r0
 80087a6:	72fb      	strb	r3, [r7, #11]
 80087a8:	7afb      	ldrb	r3, [r7, #11]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d107      	bne.n	80087be <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80087b4:	887a      	ldrh	r2, [r7, #2]
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 f964 	bl	8008a86 <USBH_ParseCfgDesc>
  }

  return status;
 80087be:	7afb      	ldrb	r3, [r7, #11]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	607a      	str	r2, [r7, #4]
 80087d2:	461a      	mov	r2, r3
 80087d4:	460b      	mov	r3, r1
 80087d6:	72fb      	strb	r3, [r7, #11]
 80087d8:	4613      	mov	r3, r2
 80087da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80087e4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80087ec:	893b      	ldrh	r3, [r7, #8]
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	460b      	mov	r3, r1
 80087f2:	2100      	movs	r1, #0
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f812 	bl	800881e <USBH_GetDescriptor>
 80087fa:	4603      	mov	r3, r0
 80087fc:	75fb      	strb	r3, [r7, #23]
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d107      	bne.n	8008814 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800880a:	893a      	ldrh	r2, [r7, #8]
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	4618      	mov	r0, r3
 8008810:	f000 fa37 	bl	8008c82 <USBH_ParseStringDesc>
  }

  return status;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	607b      	str	r3, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	72fb      	strb	r3, [r7, #11]
 800882c:	4613      	mov	r3, r2
 800882e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	789b      	ldrb	r3, [r3, #2]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d11c      	bne.n	8008872 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008838:	7afb      	ldrb	r3, [r7, #11]
 800883a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800883e:	b2da      	uxtb	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2206      	movs	r2, #6
 8008848:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	893a      	ldrh	r2, [r7, #8]
 800884e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008850:	893b      	ldrh	r3, [r7, #8]
 8008852:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800885a:	d104      	bne.n	8008866 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f240 4209 	movw	r2, #1033	; 0x409
 8008862:	829a      	strh	r2, [r3, #20]
 8008864:	e002      	b.n	800886c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	8b3a      	ldrh	r2, [r7, #24]
 8008870:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008872:	8b3b      	ldrh	r3, [r7, #24]
 8008874:	461a      	mov	r2, r3
 8008876:	6879      	ldr	r1, [r7, #4]
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 fa50 	bl	8008d1e <USBH_CtlReq>
 800887e:	4603      	mov	r3, r0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	789b      	ldrb	r3, [r3, #2]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d10f      	bne.n	80088bc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2205      	movs	r2, #5
 80088a6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80088bc:	2200      	movs	r2, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa2c 	bl	8008d1e <USBH_CtlReq>
 80088c6:	4603      	mov	r3, r0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	789b      	ldrb	r3, [r3, #2]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d10e      	bne.n	8008902 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2209      	movs	r2, #9
 80088ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	887a      	ldrh	r2, [r7, #2]
 80088f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fa09 	bl	8008d1e <USBH_CtlReq>
 800890c:	4603      	mov	r3, r0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	789b      	ldrb	r3, [r3, #2]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d10f      	bne.n	800894a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2203      	movs	r2, #3
 8008934:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008936:	78fb      	ldrb	r3, [r7, #3]
 8008938:	b29a      	uxth	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800894a:	2200      	movs	r2, #0
 800894c:	2100      	movs	r1, #0
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f9e5 	bl	8008d1e <USBH_CtlReq>
 8008954:	4603      	mov	r3, r0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	789b      	ldrb	r3, [r3, #2]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d10f      	bne.n	8008992 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2202      	movs	r2, #2
 8008976:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	b29a      	uxth	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008992:	2200      	movs	r2, #0
 8008994:	2100      	movs	r1, #0
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f9c1 	bl	8008d1e <USBH_CtlReq>
 800899c:	4603      	mov	r3, r0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b085      	sub	sp, #20
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	4613      	mov	r3, r2
 80089b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	785a      	ldrb	r2, [r3, #1]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	3302      	adds	r3, #2
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	3303      	adds	r3, #3
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	4313      	orrs	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	791a      	ldrb	r2, [r3, #4]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	795a      	ldrb	r2, [r3, #5]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	799a      	ldrb	r2, [r3, #6]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	79da      	ldrb	r2, [r3, #7]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008a00:	88fb      	ldrh	r3, [r7, #6]
 8008a02:	2b08      	cmp	r3, #8
 8008a04:	d939      	bls.n	8008a7a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	3309      	adds	r3, #9
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	021b      	lsls	r3, r3, #8
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	330a      	adds	r3, #10
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	330b      	adds	r3, #11
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	4313      	orrs	r3, r2
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	330c      	adds	r3, #12
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	330d      	adds	r3, #13
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	021b      	lsls	r3, r3, #8
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	4313      	orrs	r3, r2
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	7b9a      	ldrb	r2, [r3, #14]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	7bda      	ldrb	r2, [r3, #15]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	7c1a      	ldrb	r2, [r3, #16]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	7c5a      	ldrb	r2, [r3, #17]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	745a      	strb	r2, [r3, #17]
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b08a      	sub	sp, #40	; 0x28
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	4613      	mov	r3, r2
 8008a92:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	781a      	ldrb	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	785a      	ldrb	r2, [r3, #1]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	3302      	adds	r3, #2
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3303      	adds	r3, #3
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	4313      	orrs	r3, r2
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	791a      	ldrb	r2, [r3, #4]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	795a      	ldrb	r2, [r3, #5]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	799a      	ldrb	r2, [r3, #6]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	79da      	ldrb	r2, [r3, #7]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	7a1a      	ldrb	r2, [r3, #8]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008afc:	88fb      	ldrh	r3, [r7, #6]
 8008afe:	2b09      	cmp	r3, #9
 8008b00:	d95f      	bls.n	8008bc2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b02:	2309      	movs	r3, #9
 8008b04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b0a:	e051      	b.n	8008bb0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b0c:	f107 0316 	add.w	r3, r7, #22
 8008b10:	4619      	mov	r1, r3
 8008b12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b14:	f000 f8e8 	bl	8008ce8 <USBH_GetNextDesc>
 8008b18:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	785b      	ldrb	r3, [r3, #1]
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d146      	bne.n	8008bb0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b26:	221a      	movs	r2, #26
 8008b28:	fb02 f303 	mul.w	r3, r2, r3
 8008b2c:	3308      	adds	r3, #8
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4413      	add	r3, r2
 8008b32:	3302      	adds	r3, #2
 8008b34:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b38:	69f8      	ldr	r0, [r7, #28]
 8008b3a:	f000 f846 	bl	8008bca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b48:	e022      	b.n	8008b90 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b4a:	f107 0316 	add.w	r3, r7, #22
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b52:	f000 f8c9 	bl	8008ce8 <USBH_GetNextDesc>
 8008b56:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	785b      	ldrb	r3, [r3, #1]
 8008b5c:	2b05      	cmp	r3, #5
 8008b5e:	d117      	bne.n	8008b90 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b64:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008b68:	3201      	adds	r2, #1
 8008b6a:	00d2      	lsls	r2, r2, #3
 8008b6c:	211a      	movs	r1, #26
 8008b6e:	fb01 f303 	mul.w	r3, r1, r3
 8008b72:	4413      	add	r3, r2
 8008b74:	3308      	adds	r3, #8
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	4413      	add	r3, r2
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b80:	69b8      	ldr	r0, [r7, #24]
 8008b82:	f000 f851 	bl	8008c28 <USBH_ParseEPDesc>
            ep_ix++;
 8008b86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	791b      	ldrb	r3, [r3, #4]
 8008b94:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d204      	bcs.n	8008ba6 <USBH_ParseCfgDesc+0x120>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	885a      	ldrh	r2, [r3, #2]
 8008ba0:	8afb      	ldrh	r3, [r7, #22]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d8d1      	bhi.n	8008b4a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008baa:	3301      	adds	r3, #1
 8008bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d804      	bhi.n	8008bc2 <USBH_ParseCfgDesc+0x13c>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	885a      	ldrh	r2, [r3, #2]
 8008bbc:	8afb      	ldrh	r3, [r7, #22]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d8a4      	bhi.n	8008b0c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008bc2:	bf00      	nop
 8008bc4:	3728      	adds	r7, #40	; 0x28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781a      	ldrb	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	785a      	ldrb	r2, [r3, #1]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	789a      	ldrb	r2, [r3, #2]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	78da      	ldrb	r2, [r3, #3]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	791a      	ldrb	r2, [r3, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	795a      	ldrb	r2, [r3, #5]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	799a      	ldrb	r2, [r3, #6]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	79da      	ldrb	r2, [r3, #7]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	7a1a      	ldrb	r2, [r3, #8]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	721a      	strb	r2, [r3, #8]
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781a      	ldrb	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	785a      	ldrb	r2, [r3, #1]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	789a      	ldrb	r2, [r3, #2]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	78da      	ldrb	r2, [r3, #3]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	3304      	adds	r3, #4
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	3305      	adds	r3, #5
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	021b      	lsls	r3, r3, #8
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	4313      	orrs	r3, r2
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	799a      	ldrb	r2, [r3, #6]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	719a      	strb	r2, [r3, #6]
}
 8008c76:	bf00      	nop
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b087      	sub	sp, #28
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	3301      	adds	r3, #1
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d120      	bne.n	8008cdc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	1e9a      	subs	r2, r3, #2
 8008ca0:	88fb      	ldrh	r3, [r7, #6]
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	bf28      	it	cs
 8008ca6:	4613      	movcs	r3, r2
 8008ca8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3302      	adds	r3, #2
 8008cae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	82fb      	strh	r3, [r7, #22]
 8008cb4:	e00b      	b.n	8008cce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008cb6:	8afb      	ldrh	r3, [r7, #22]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	781a      	ldrb	r2, [r3, #0]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008cc8:	8afb      	ldrh	r3, [r7, #22]
 8008cca:	3302      	adds	r3, #2
 8008ccc:	82fb      	strh	r3, [r7, #22]
 8008cce:	8afa      	ldrh	r2, [r7, #22]
 8008cd0:	8abb      	ldrh	r3, [r7, #20]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d3ef      	bcc.n	8008cb6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	701a      	strb	r2, [r3, #0]
  }
}
 8008cdc:	bf00      	nop
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	881a      	ldrh	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d10:	68fb      	ldr	r3, [r7, #12]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b086      	sub	sp, #24
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	789b      	ldrb	r3, [r3, #2]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d002      	beq.n	8008d3e <USBH_CtlReq+0x20>
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d01d      	beq.n	8008d78 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008d3c:	e043      	b.n	8008dc6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	88fa      	ldrh	r2, [r7, #6]
 8008d48:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2202      	movs	r2, #2
 8008d54:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008d56:	2301      	movs	r3, #1
 8008d58:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2203      	movs	r2, #3
 8008d5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d6e:	2200      	movs	r2, #0
 8008d70:	4619      	mov	r1, r3
 8008d72:	f000 fc63 	bl	800963c <osMessagePut>
      break;
 8008d76:	e026      	b.n	8008dc6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 f829 	bl	8008dd0 <USBH_HandleControl>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <USBH_CtlReq+0x70>
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d106      	bne.n	8008d9c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2201      	movs	r2, #1
 8008d92:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	761a      	strb	r2, [r3, #24]
 8008d9a:	e005      	b.n	8008da8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d102      	bne.n	8008da8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2201      	movs	r2, #1
 8008da6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2203      	movs	r2, #3
 8008dac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	f000 fc3c 	bl	800963c <osMessagePut>
      break;
 8008dc4:	bf00      	nop
  }
  return status;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af02      	add	r7, sp, #8
 8008dd6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	7e1b      	ldrb	r3, [r3, #24]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	2b0a      	cmp	r3, #10
 8008de8:	f200 822b 	bhi.w	8009242 <USBH_HandleControl+0x472>
 8008dec:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <USBH_HandleControl+0x24>)
 8008dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df2:	bf00      	nop
 8008df4:	08008e21 	.word	0x08008e21
 8008df8:	08008e3b 	.word	0x08008e3b
 8008dfc:	08008edd 	.word	0x08008edd
 8008e00:	08008f03 	.word	0x08008f03
 8008e04:	08008f8f 	.word	0x08008f8f
 8008e08:	08008fbb 	.word	0x08008fbb
 8008e0c:	0800907d 	.word	0x0800907d
 8008e10:	0800909f 	.word	0x0800909f
 8008e14:	08009131 	.word	0x08009131
 8008e18:	08009159 	.word	0x08009159
 8008e1c:	080091eb 	.word	0x080091eb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f103 0110 	add.w	r1, r3, #16
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	795b      	ldrb	r3, [r3, #5]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fa19 	bl	8009264 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	761a      	strb	r2, [r3, #24]
      break;
 8008e38:	e20e      	b.n	8009258 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	795b      	ldrb	r3, [r3, #5]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f002 fff7 	bl	800be34 <USBH_LL_GetURBState>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d12c      	bne.n	8008eaa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7c1b      	ldrb	r3, [r3, #16]
 8008e54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e58:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	8adb      	ldrh	r3, [r3, #22]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00a      	beq.n	8008e78 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008e62:	7b7b      	ldrb	r3, [r7, #13]
 8008e64:	2b80      	cmp	r3, #128	; 0x80
 8008e66:	d103      	bne.n	8008e70 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2203      	movs	r2, #3
 8008e6c:	761a      	strb	r2, [r3, #24]
 8008e6e:	e00d      	b.n	8008e8c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2205      	movs	r2, #5
 8008e74:	761a      	strb	r2, [r3, #24]
 8008e76:	e009      	b.n	8008e8c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008e78:	7b7b      	ldrb	r3, [r7, #13]
 8008e7a:	2b80      	cmp	r3, #128	; 0x80
 8008e7c:	d103      	bne.n	8008e86 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2209      	movs	r2, #9
 8008e82:	761a      	strb	r2, [r3, #24]
 8008e84:	e002      	b.n	8008e8c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2207      	movs	r2, #7
 8008e8a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2203      	movs	r2, #3
 8008e90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	f000 fbca 	bl	800963c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ea8:	e1cd      	b.n	8009246 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008eaa:	7bbb      	ldrb	r3, [r7, #14]
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d003      	beq.n	8008eb8 <USBH_HandleControl+0xe8>
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	f040 81c7 	bne.w	8009246 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	220b      	movs	r2, #11
 8008ebc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2203      	movs	r2, #3
 8008ec2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	f000 fbb1 	bl	800963c <osMessagePut>
      break;
 8008eda:	e1b4      	b.n	8009246 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6899      	ldr	r1, [r3, #8]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	899a      	ldrh	r2, [r3, #12]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	791b      	ldrb	r3, [r3, #4]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f9f4 	bl	80092e2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2204      	movs	r2, #4
 8008efe:	761a      	strb	r2, [r3, #24]
      break;
 8008f00:	e1aa      	b.n	8009258 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	791b      	ldrb	r3, [r3, #4]
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f002 ff93 	bl	800be34 <USBH_LL_GetURBState>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d110      	bne.n	8008f3a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2209      	movs	r2, #9
 8008f1c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2203      	movs	r2, #3
 8008f22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f32:	2200      	movs	r2, #0
 8008f34:	4619      	mov	r1, r3
 8008f36:	f000 fb81 	bl	800963c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b05      	cmp	r3, #5
 8008f3e:	d110      	bne.n	8008f62 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008f40:	2303      	movs	r3, #3
 8008f42:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2203      	movs	r2, #3
 8008f48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	f000 fb6e 	bl	800963c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f60:	e173      	b.n	800924a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	f040 8170 	bne.w	800924a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	220b      	movs	r2, #11
 8008f6e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2203      	movs	r2, #3
 8008f74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f84:	2200      	movs	r2, #0
 8008f86:	4619      	mov	r1, r3
 8008f88:	f000 fb58 	bl	800963c <osMessagePut>
      break;
 8008f8c:	e15d      	b.n	800924a <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6899      	ldr	r1, [r3, #8]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	899a      	ldrh	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	7958      	ldrb	r0, [r3, #5]
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f979 	bl	8009298 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2206      	movs	r2, #6
 8008fb6:	761a      	strb	r2, [r3, #24]
      break;
 8008fb8:	e14e      	b.n	8009258 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	795b      	ldrb	r3, [r3, #5]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f002 ff37 	bl	800be34 <USBH_LL_GetURBState>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d111      	bne.n	8008ff4 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2207      	movs	r2, #7
 8008fd4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2203      	movs	r2, #3
 8008fda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fea:	2200      	movs	r2, #0
 8008fec:	4619      	mov	r1, r3
 8008fee:	f000 fb25 	bl	800963c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ff2:	e12c      	b.n	800924e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	d113      	bne.n	8009022 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	220c      	movs	r2, #12
 8008ffe:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009000:	2303      	movs	r3, #3
 8009002:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2203      	movs	r2, #3
 8009008:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009018:	2200      	movs	r2, #0
 800901a:	4619      	mov	r1, r3
 800901c:	f000 fb0e 	bl	800963c <osMessagePut>
      break;
 8009020:	e115      	b.n	800924e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d111      	bne.n	800904c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2205      	movs	r2, #5
 800902c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2203      	movs	r2, #3
 8009032:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009042:	2200      	movs	r2, #0
 8009044:	4619      	mov	r1, r3
 8009046:	f000 faf9 	bl	800963c <osMessagePut>
      break;
 800904a:	e100      	b.n	800924e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	2b04      	cmp	r3, #4
 8009050:	f040 80fd 	bne.w	800924e <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	220b      	movs	r2, #11
 8009058:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800905a:	2302      	movs	r3, #2
 800905c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2203      	movs	r2, #3
 8009062:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009072:	2200      	movs	r2, #0
 8009074:	4619      	mov	r1, r3
 8009076:	f000 fae1 	bl	800963c <osMessagePut>
      break;
 800907a:	e0e8      	b.n	800924e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	791b      	ldrb	r3, [r3, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	2100      	movs	r1, #0
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f92c 	bl	80092e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009090:	b29a      	uxth	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2208      	movs	r2, #8
 800909a:	761a      	strb	r2, [r3, #24]

      break;
 800909c:	e0dc      	b.n	8009258 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	791b      	ldrb	r3, [r3, #4]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f002 fec5 	bl	800be34 <USBH_LL_GetURBState>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d113      	bne.n	80090dc <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	220d      	movs	r2, #13
 80090b8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2203      	movs	r2, #3
 80090c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090d2:	2200      	movs	r2, #0
 80090d4:	4619      	mov	r1, r3
 80090d6:	f000 fab1 	bl	800963c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80090da:	e0ba      	b.n	8009252 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d111      	bne.n	8009106 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	220b      	movs	r2, #11
 80090e6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2203      	movs	r2, #3
 80090ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090fc:	2200      	movs	r2, #0
 80090fe:	4619      	mov	r1, r3
 8009100:	f000 fa9c 	bl	800963c <osMessagePut>
      break;
 8009104:	e0a5      	b.n	8009252 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	2b05      	cmp	r3, #5
 800910a:	f040 80a2 	bne.w	8009252 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800910e:	2303      	movs	r3, #3
 8009110:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2203      	movs	r2, #3
 8009116:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009126:	2200      	movs	r2, #0
 8009128:	4619      	mov	r1, r3
 800912a:	f000 fa87 	bl	800963c <osMessagePut>
      break;
 800912e:	e090      	b.n	8009252 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	795a      	ldrb	r2, [r3, #5]
 8009134:	2301      	movs	r3, #1
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	4613      	mov	r3, r2
 800913a:	2200      	movs	r2, #0
 800913c:	2100      	movs	r1, #0
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f8aa 	bl	8009298 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800914a:	b29a      	uxth	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	220a      	movs	r2, #10
 8009154:	761a      	strb	r2, [r3, #24]
      break;
 8009156:	e07f      	b.n	8009258 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	795b      	ldrb	r3, [r3, #5]
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f002 fe68 	bl	800be34 <USBH_LL_GetURBState>
 8009164:	4603      	mov	r3, r0
 8009166:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d113      	bne.n	8009196 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	220d      	movs	r2, #13
 8009176:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2203      	movs	r2, #3
 800917c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800918c:	2200      	movs	r2, #0
 800918e:	4619      	mov	r1, r3
 8009190:	f000 fa54 	bl	800963c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009194:	e05f      	b.n	8009256 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009196:	7bbb      	ldrb	r3, [r7, #14]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d111      	bne.n	80091c0 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2209      	movs	r2, #9
 80091a0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2203      	movs	r2, #3
 80091a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091b6:	2200      	movs	r2, #0
 80091b8:	4619      	mov	r1, r3
 80091ba:	f000 fa3f 	bl	800963c <osMessagePut>
      break;
 80091be:	e04a      	b.n	8009256 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d147      	bne.n	8009256 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	220b      	movs	r2, #11
 80091ca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2203      	movs	r2, #3
 80091d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091e0:	2200      	movs	r2, #0
 80091e2:	4619      	mov	r1, r3
 80091e4:	f000 fa2a 	bl	800963c <osMessagePut>
      break;
 80091e8:	e035      	b.n	8009256 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	7e5b      	ldrb	r3, [r3, #25]
 80091ee:	3301      	adds	r3, #1
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	765a      	strb	r2, [r3, #25]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	7e5b      	ldrb	r3, [r3, #25]
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d806      	bhi.n	800920c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800920a:	e025      	b.n	8009258 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009212:	2106      	movs	r1, #6
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	795b      	ldrb	r3, [r3, #5]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f90d 	bl	8009444 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	791b      	ldrb	r3, [r3, #4]
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f907 	bl	8009444 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800923c:	2302      	movs	r3, #2
 800923e:	73fb      	strb	r3, [r7, #15]
      break;
 8009240:	e00a      	b.n	8009258 <USBH_HandleControl+0x488>

    default:
      break;
 8009242:	bf00      	nop
 8009244:	e008      	b.n	8009258 <USBH_HandleControl+0x488>
      break;
 8009246:	bf00      	nop
 8009248:	e006      	b.n	8009258 <USBH_HandleControl+0x488>
      break;
 800924a:	bf00      	nop
 800924c:	e004      	b.n	8009258 <USBH_HandleControl+0x488>
      break;
 800924e:	bf00      	nop
 8009250:	e002      	b.n	8009258 <USBH_HandleControl+0x488>
      break;
 8009252:	bf00      	nop
 8009254:	e000      	b.n	8009258 <USBH_HandleControl+0x488>
      break;
 8009256:	bf00      	nop
  }

  return status;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop

08009264 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af04      	add	r7, sp, #16
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	4613      	mov	r3, r2
 8009270:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009272:	79f9      	ldrb	r1, [r7, #7]
 8009274:	2300      	movs	r3, #0
 8009276:	9303      	str	r3, [sp, #12]
 8009278:	2308      	movs	r3, #8
 800927a:	9302      	str	r3, [sp, #8]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	2300      	movs	r3, #0
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	2300      	movs	r3, #0
 8009286:	2200      	movs	r2, #0
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f002 fda2 	bl	800bdd2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af04      	add	r7, sp, #16
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4611      	mov	r1, r2
 80092a4:	461a      	mov	r2, r3
 80092a6:	460b      	mov	r3, r1
 80092a8:	80fb      	strh	r3, [r7, #6]
 80092aa:	4613      	mov	r3, r2
 80092ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092bc:	7979      	ldrb	r1, [r7, #5]
 80092be:	7e3b      	ldrb	r3, [r7, #24]
 80092c0:	9303      	str	r3, [sp, #12]
 80092c2:	88fb      	ldrh	r3, [r7, #6]
 80092c4:	9302      	str	r3, [sp, #8]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	2301      	movs	r3, #1
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	2300      	movs	r3, #0
 80092d0:	2200      	movs	r2, #0
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f002 fd7d 	bl	800bdd2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b088      	sub	sp, #32
 80092e6:	af04      	add	r7, sp, #16
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	4611      	mov	r1, r2
 80092ee:	461a      	mov	r2, r3
 80092f0:	460b      	mov	r3, r1
 80092f2:	80fb      	strh	r3, [r7, #6]
 80092f4:	4613      	mov	r3, r2
 80092f6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092f8:	7979      	ldrb	r1, [r7, #5]
 80092fa:	2300      	movs	r3, #0
 80092fc:	9303      	str	r3, [sp, #12]
 80092fe:	88fb      	ldrh	r3, [r7, #6]
 8009300:	9302      	str	r3, [sp, #8]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	2301      	movs	r3, #1
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	2300      	movs	r3, #0
 800930c:	2201      	movs	r2, #1
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f002 fd5f 	bl	800bdd2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009314:	2300      	movs	r3, #0

}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b088      	sub	sp, #32
 8009322:	af04      	add	r7, sp, #16
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	60b9      	str	r1, [r7, #8]
 8009328:	4611      	mov	r1, r2
 800932a:	461a      	mov	r2, r3
 800932c:	460b      	mov	r3, r1
 800932e:	80fb      	strh	r3, [r7, #6]
 8009330:	4613      	mov	r3, r2
 8009332:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800933e:	2300      	movs	r3, #0
 8009340:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009342:	7979      	ldrb	r1, [r7, #5]
 8009344:	7e3b      	ldrb	r3, [r7, #24]
 8009346:	9303      	str	r3, [sp, #12]
 8009348:	88fb      	ldrh	r3, [r7, #6]
 800934a:	9302      	str	r3, [sp, #8]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	2301      	movs	r3, #1
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	2302      	movs	r3, #2
 8009356:	2200      	movs	r2, #0
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f002 fd3a 	bl	800bdd2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af04      	add	r7, sp, #16
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4611      	mov	r1, r2
 8009374:	461a      	mov	r2, r3
 8009376:	460b      	mov	r3, r1
 8009378:	80fb      	strh	r3, [r7, #6]
 800937a:	4613      	mov	r3, r2
 800937c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800937e:	7979      	ldrb	r1, [r7, #5]
 8009380:	2300      	movs	r3, #0
 8009382:	9303      	str	r3, [sp, #12]
 8009384:	88fb      	ldrh	r3, [r7, #6]
 8009386:	9302      	str	r3, [sp, #8]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	9301      	str	r3, [sp, #4]
 800938c:	2301      	movs	r3, #1
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	2302      	movs	r3, #2
 8009392:	2201      	movs	r2, #1
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f002 fd1c 	bl	800bdd2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af04      	add	r7, sp, #16
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	4608      	mov	r0, r1
 80093ae:	4611      	mov	r1, r2
 80093b0:	461a      	mov	r2, r3
 80093b2:	4603      	mov	r3, r0
 80093b4:	70fb      	strb	r3, [r7, #3]
 80093b6:	460b      	mov	r3, r1
 80093b8:	70bb      	strb	r3, [r7, #2]
 80093ba:	4613      	mov	r3, r2
 80093bc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80093be:	7878      	ldrb	r0, [r7, #1]
 80093c0:	78ba      	ldrb	r2, [r7, #2]
 80093c2:	78f9      	ldrb	r1, [r7, #3]
 80093c4:	8b3b      	ldrh	r3, [r7, #24]
 80093c6:	9302      	str	r3, [sp, #8]
 80093c8:	7d3b      	ldrb	r3, [r7, #20]
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	7c3b      	ldrb	r3, [r7, #16]
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	4603      	mov	r3, r0
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f002 fcaf 	bl	800bd36 <USBH_LL_OpenPipe>

  return USBH_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b082      	sub	sp, #8
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	460b      	mov	r3, r1
 80093ec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f002 fcce 	bl	800bd94 <USBH_LL_ClosePipe>

  return USBH_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	460b      	mov	r3, r1
 800940c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f836 	bl	8009480 <USBH_GetFreePipe>
 8009414:	4603      	mov	r3, r0
 8009416:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009418:	89fb      	ldrh	r3, [r7, #14]
 800941a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800941e:	4293      	cmp	r3, r2
 8009420:	d00a      	beq.n	8009438 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009422:	78fa      	ldrb	r2, [r7, #3]
 8009424:	89fb      	ldrh	r3, [r7, #14]
 8009426:	f003 030f 	and.w	r3, r3, #15
 800942a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	33e0      	adds	r3, #224	; 0xe0
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	440b      	add	r3, r1
 8009436:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009438:	89fb      	ldrh	r3, [r7, #14]
 800943a:	b2db      	uxtb	r3, r3
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	2b0a      	cmp	r3, #10
 8009454:	d80d      	bhi.n	8009472 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009456:	78fb      	ldrb	r3, [r7, #3]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	33e0      	adds	r3, #224	; 0xe0
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	33e0      	adds	r3, #224	; 0xe0
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
 8009490:	e00f      	b.n	80094b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	33e0      	adds	r3, #224	; 0xe0
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	e007      	b.n	80094bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	3301      	adds	r3, #1
 80094b0:	73fb      	strb	r3, [r7, #15]
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	2b0a      	cmp	r3, #10
 80094b6:	d9ec      	bls.n	8009492 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80094b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80094d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094da:	2b84      	cmp	r3, #132	; 0x84
 80094dc:	d005      	beq.n	80094ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80094de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4413      	add	r3, r2
 80094e6:	3303      	adds	r3, #3
 80094e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80094ea:	68fb      	ldr	r3, [r7, #12]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094fe:	f3ef 8305 	mrs	r3, IPSR
 8009502:	607b      	str	r3, [r7, #4]
  return(result);
 8009504:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009506:	2b00      	cmp	r3, #0
 8009508:	bf14      	ite	ne
 800950a:	2301      	movne	r3, #1
 800950c:	2300      	moveq	r3, #0
 800950e:	b2db      	uxtb	r3, r3
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009520:	f001 f8f4 	bl	800a70c <vTaskStartScheduler>
  
  return osOK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	bd80      	pop	{r7, pc}

0800952a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800952a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952c:	b089      	sub	sp, #36	; 0x24
 800952e:	af04      	add	r7, sp, #16
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d020      	beq.n	800957e <osThreadCreate+0x54>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d01c      	beq.n	800957e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685c      	ldr	r4, [r3, #4]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681d      	ldr	r5, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	691e      	ldr	r6, [r3, #16]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009556:	4618      	mov	r0, r3
 8009558:	f7ff ffb6 	bl	80094c8 <makeFreeRtosPriority>
 800955c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009566:	9202      	str	r2, [sp, #8]
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	9100      	str	r1, [sp, #0]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	4632      	mov	r2, r6
 8009570:	4629      	mov	r1, r5
 8009572:	4620      	mov	r0, r4
 8009574:	f000 fefb 	bl	800a36e <xTaskCreateStatic>
 8009578:	4603      	mov	r3, r0
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	e01c      	b.n	80095b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685c      	ldr	r4, [r3, #4]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800958a:	b29e      	uxth	r6, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009592:	4618      	mov	r0, r3
 8009594:	f7ff ff98 	bl	80094c8 <makeFreeRtosPriority>
 8009598:	4602      	mov	r2, r0
 800959a:	f107 030c 	add.w	r3, r7, #12
 800959e:	9301      	str	r3, [sp, #4]
 80095a0:	9200      	str	r2, [sp, #0]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	4632      	mov	r2, r6
 80095a6:	4629      	mov	r1, r5
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 ff3a 	bl	800a422 <xTaskCreate>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d001      	beq.n	80095b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80095b4:	2300      	movs	r3, #0
 80095b6:	e000      	b.n	80095ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80095b8:	68fb      	ldr	r3, [r7, #12]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <osDelay+0x16>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	e000      	b.n	80095da <osDelay+0x18>
 80095d8:	2301      	movs	r3, #1
 80095da:	4618      	mov	r0, r3
 80095dc:	f001 f862 	bl	800a6a4 <vTaskDelay>
  
  return osOK;
 80095e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80095ea:	b590      	push	{r4, r7, lr}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af02      	add	r7, sp, #8
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d012      	beq.n	8009622 <osMessageCreate+0x38>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00e      	beq.n	8009622 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6818      	ldr	r0, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6859      	ldr	r1, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	689a      	ldr	r2, [r3, #8]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	68dc      	ldr	r4, [r3, #12]
 8009614:	2300      	movs	r3, #0
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	4623      	mov	r3, r4
 800961a:	f000 f9df 	bl	80099dc <xQueueGenericCreateStatic>
 800961e:	4603      	mov	r3, r0
 8009620:	e008      	b.n	8009634 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	4619      	mov	r1, r3
 800962e:	f000 fa48 	bl	8009ac2 <xQueueGenericCreate>
 8009632:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	bd90      	pop	{r4, r7, pc}

0800963c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009648:	2300      	movs	r3, #0
 800964a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <osMessagePut+0x1e>
    ticks = 1;
 8009656:	2301      	movs	r3, #1
 8009658:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800965a:	f7ff ff4d 	bl	80094f8 <inHandlerMode>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d018      	beq.n	8009696 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009664:	f107 0210 	add.w	r2, r7, #16
 8009668:	f107 0108 	add.w	r1, r7, #8
 800966c:	2300      	movs	r3, #0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 fb80 	bl	8009d74 <xQueueGenericSendFromISR>
 8009674:	4603      	mov	r3, r0
 8009676:	2b01      	cmp	r3, #1
 8009678:	d001      	beq.n	800967e <osMessagePut+0x42>
      return osErrorOS;
 800967a:	23ff      	movs	r3, #255	; 0xff
 800967c:	e018      	b.n	80096b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d014      	beq.n	80096ae <osMessagePut+0x72>
 8009684:	4b0c      	ldr	r3, [pc, #48]	; (80096b8 <osMessagePut+0x7c>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	e00b      	b.n	80096ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009696:	f107 0108 	add.w	r1, r7, #8
 800969a:	2300      	movs	r3, #0
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 fa6e 	bl	8009b80 <xQueueGenericSend>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d001      	beq.n	80096ae <osMessagePut+0x72>
      return osErrorOS;
 80096aa:	23ff      	movs	r3, #255	; 0xff
 80096ac:	e000      	b.n	80096b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80096bc:	b590      	push	{r4, r7, lr}
 80096be:	b08b      	sub	sp, #44	; 0x2c
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80096d6:	2380      	movs	r3, #128	; 0x80
 80096d8:	617b      	str	r3, [r7, #20]
    return event;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	461c      	mov	r4, r3
 80096de:	f107 0314 	add.w	r3, r7, #20
 80096e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096ea:	e054      	b.n	8009796 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fa:	d103      	bne.n	8009704 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80096fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009700:	627b      	str	r3, [r7, #36]	; 0x24
 8009702:	e009      	b.n	8009718 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d006      	beq.n	8009718 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <osMessageGet+0x5c>
      ticks = 1;
 8009714:	2301      	movs	r3, #1
 8009716:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009718:	f7ff feee 	bl	80094f8 <inHandlerMode>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01c      	beq.n	800975c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009722:	f107 0220 	add.w	r2, r7, #32
 8009726:	f107 0314 	add.w	r3, r7, #20
 800972a:	3304      	adds	r3, #4
 800972c:	4619      	mov	r1, r3
 800972e:	68b8      	ldr	r0, [r7, #8]
 8009730:	f000 fc90 	bl	800a054 <xQueueReceiveFromISR>
 8009734:	4603      	mov	r3, r0
 8009736:	2b01      	cmp	r3, #1
 8009738:	d102      	bne.n	8009740 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800973a:	2310      	movs	r3, #16
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	e001      	b.n	8009744 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d01d      	beq.n	8009786 <osMessageGet+0xca>
 800974a:	4b15      	ldr	r3, [pc, #84]	; (80097a0 <osMessageGet+0xe4>)
 800974c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	e014      	b.n	8009786 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800975c:	f107 0314 	add.w	r3, r7, #20
 8009760:	3304      	adds	r3, #4
 8009762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009764:	4619      	mov	r1, r3
 8009766:	68b8      	ldr	r0, [r7, #8]
 8009768:	f000 fb98 	bl	8009e9c <xQueueReceive>
 800976c:	4603      	mov	r3, r0
 800976e:	2b01      	cmp	r3, #1
 8009770:	d102      	bne.n	8009778 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009772:	2310      	movs	r3, #16
 8009774:	617b      	str	r3, [r7, #20]
 8009776:	e006      	b.n	8009786 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <osMessageGet+0xc6>
 800977e:	2300      	movs	r3, #0
 8009780:	e000      	b.n	8009784 <osMessageGet+0xc8>
 8009782:	2340      	movs	r3, #64	; 0x40
 8009784:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	461c      	mov	r4, r3
 800978a:	f107 0314 	add.w	r3, r7, #20
 800978e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	372c      	adds	r7, #44	; 0x2c
 800979a:	46bd      	mov	sp, r7
 800979c:	bd90      	pop	{r4, r7, pc}
 800979e:	bf00      	nop
 80097a0:	e000ed04 	.word	0xe000ed04

080097a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f103 0208 	add.w	r2, r3, #8
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f04f 32ff 	mov.w	r2, #4294967295
 80097bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f103 0208 	add.w	r2, r3, #8
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f103 0208 	add.w	r2, r3, #8
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097fe:	b480      	push	{r7}
 8009800:	b085      	sub	sp, #20
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	601a      	str	r2, [r3, #0]
}
 800983a:	bf00      	nop
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985c:	d103      	bne.n	8009866 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	e00c      	b.n	8009880 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3308      	adds	r3, #8
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	e002      	b.n	8009874 <vListInsert+0x2e>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	429a      	cmp	r2, r3
 800987e:	d2f6      	bcs.n	800986e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	601a      	str	r2, [r3, #0]
}
 80098ac:	bf00      	nop
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6892      	ldr	r2, [r2, #8]
 80098ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	6852      	ldr	r2, [r2, #4]
 80098d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d103      	bne.n	80098ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	1e5a      	subs	r2, r3, #1
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d109      	bne.n	8009934 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	60bb      	str	r3, [r7, #8]
 8009932:	e7fe      	b.n	8009932 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009934:	f001 fd32 	bl	800b39c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009940:	68f9      	ldr	r1, [r7, #12]
 8009942:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009944:	fb01 f303 	mul.w	r3, r1, r3
 8009948:	441a      	add	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009964:	3b01      	subs	r3, #1
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800996a:	fb01 f303 	mul.w	r3, r1, r3
 800996e:	441a      	add	r2, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	22ff      	movs	r2, #255	; 0xff
 8009978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	22ff      	movs	r2, #255	; 0xff
 8009980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d114      	bne.n	80099b4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d01a      	beq.n	80099c8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3310      	adds	r3, #16
 8009996:	4618      	mov	r0, r3
 8009998:	f001 f91c 	bl	800abd4 <xTaskRemoveFromEventList>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d012      	beq.n	80099c8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099a2:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <xQueueGenericReset+0xcc>)
 80099a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	e009      	b.n	80099c8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3310      	adds	r3, #16
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff fef3 	bl	80097a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	3324      	adds	r3, #36	; 0x24
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff feee 	bl	80097a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099c8:	f001 fd16 	bl	800b3f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099cc:	2301      	movs	r3, #1
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b08e      	sub	sp, #56	; 0x38
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d109      	bne.n	8009a04 <xQueueGenericCreateStatic+0x28>
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a02:	e7fe      	b.n	8009a02 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d109      	bne.n	8009a1e <xQueueGenericCreateStatic+0x42>
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a1c:	e7fe      	b.n	8009a1c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <xQueueGenericCreateStatic+0x4e>
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <xQueueGenericCreateStatic+0x52>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e000      	b.n	8009a30 <xQueueGenericCreateStatic+0x54>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d109      	bne.n	8009a48 <xQueueGenericCreateStatic+0x6c>
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	623b      	str	r3, [r7, #32]
 8009a46:	e7fe      	b.n	8009a46 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d102      	bne.n	8009a54 <xQueueGenericCreateStatic+0x78>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <xQueueGenericCreateStatic+0x7c>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e000      	b.n	8009a5a <xQueueGenericCreateStatic+0x7e>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d109      	bne.n	8009a72 <xQueueGenericCreateStatic+0x96>
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	61fb      	str	r3, [r7, #28]
 8009a70:	e7fe      	b.n	8009a70 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a72:	2348      	movs	r3, #72	; 0x48
 8009a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2b48      	cmp	r3, #72	; 0x48
 8009a7a:	d009      	beq.n	8009a90 <xQueueGenericCreateStatic+0xb4>
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	61bb      	str	r3, [r7, #24]
 8009a8e:	e7fe      	b.n	8009a8e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00d      	beq.n	8009ab8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009aa4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	4613      	mov	r3, r2
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	68b9      	ldr	r1, [r7, #8]
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 f844 	bl	8009b40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3730      	adds	r7, #48	; 0x30
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b08a      	sub	sp, #40	; 0x28
 8009ac6:	af02      	add	r7, sp, #8
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	4613      	mov	r3, r2
 8009ace:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d109      	bne.n	8009aea <xQueueGenericCreate+0x28>
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	613b      	str	r3, [r7, #16]
 8009ae8:	e7fe      	b.n	8009ae8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61fb      	str	r3, [r7, #28]
 8009af4:	e004      	b.n	8009b00 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	fb02 f303 	mul.w	r3, r2, r3
 8009afe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	3348      	adds	r3, #72	; 0x48
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fd63 	bl	800b5d0 <pvPortMalloc>
 8009b0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d011      	beq.n	8009b36 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	3348      	adds	r3, #72	; 0x48
 8009b1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b24:	79fa      	ldrb	r2, [r7, #7]
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	697a      	ldr	r2, [r7, #20]
 8009b2e:	68b9      	ldr	r1, [r7, #8]
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 f805 	bl	8009b40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b36:	69bb      	ldr	r3, [r7, #24]
	}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3720      	adds	r7, #32
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d103      	bne.n	8009b5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	69ba      	ldr	r2, [r7, #24]
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	e002      	b.n	8009b62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b6e:	2101      	movs	r1, #1
 8009b70:	69b8      	ldr	r0, [r7, #24]
 8009b72:	f7ff fecb 	bl	800990c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b76:	bf00      	nop
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08e      	sub	sp, #56	; 0x38
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d109      	bne.n	8009bb0 <xQueueGenericSend+0x30>
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bae:	e7fe      	b.n	8009bae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d103      	bne.n	8009bbe <xQueueGenericSend+0x3e>
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <xQueueGenericSend+0x42>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e000      	b.n	8009bc4 <xQueueGenericSend+0x44>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d109      	bne.n	8009bdc <xQueueGenericSend+0x5c>
 8009bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bda:	e7fe      	b.n	8009bda <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d103      	bne.n	8009bea <xQueueGenericSend+0x6a>
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d101      	bne.n	8009bee <xQueueGenericSend+0x6e>
 8009bea:	2301      	movs	r3, #1
 8009bec:	e000      	b.n	8009bf0 <xQueueGenericSend+0x70>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d109      	bne.n	8009c08 <xQueueGenericSend+0x88>
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	623b      	str	r3, [r7, #32]
 8009c06:	e7fe      	b.n	8009c06 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c08:	f001 f99c 	bl	800af44 <xTaskGetSchedulerState>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d102      	bne.n	8009c18 <xQueueGenericSend+0x98>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <xQueueGenericSend+0x9c>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e000      	b.n	8009c1e <xQueueGenericSend+0x9e>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <xQueueGenericSend+0xb6>
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	61fb      	str	r3, [r7, #28]
 8009c34:	e7fe      	b.n	8009c34 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c36:	f001 fbb1 	bl	800b39c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d302      	bcc.n	8009c4c <xQueueGenericSend+0xcc>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d129      	bne.n	8009ca0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c52:	f000 fa7c 	bl	800a14e <prvCopyDataToQueue>
 8009c56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d010      	beq.n	8009c82 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c62:	3324      	adds	r3, #36	; 0x24
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 ffb5 	bl	800abd4 <xTaskRemoveFromEventList>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d013      	beq.n	8009c98 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c70:	4b3f      	ldr	r3, [pc, #252]	; (8009d70 <xQueueGenericSend+0x1f0>)
 8009c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c76:	601a      	str	r2, [r3, #0]
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	e00a      	b.n	8009c98 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d007      	beq.n	8009c98 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c88:	4b39      	ldr	r3, [pc, #228]	; (8009d70 <xQueueGenericSend+0x1f0>)
 8009c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c98:	f001 fbae 	bl	800b3f8 <vPortExitCritical>
				return pdPASS;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e063      	b.n	8009d68 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ca6:	f001 fba7 	bl	800b3f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	e05c      	b.n	8009d68 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d106      	bne.n	8009cc2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cb4:	f107 0314 	add.w	r3, r7, #20
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 ffed 	bl	800ac98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cc2:	f001 fb99 	bl	800b3f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cc6:	f000 fd7f 	bl	800a7c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cca:	f001 fb67 	bl	800b39c <vPortEnterCritical>
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cd4:	b25b      	sxtb	r3, r3
 8009cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cda:	d103      	bne.n	8009ce4 <xQueueGenericSend+0x164>
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cea:	b25b      	sxtb	r3, r3
 8009cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf0:	d103      	bne.n	8009cfa <xQueueGenericSend+0x17a>
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cfa:	f001 fb7d 	bl	800b3f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cfe:	1d3a      	adds	r2, r7, #4
 8009d00:	f107 0314 	add.w	r3, r7, #20
 8009d04:	4611      	mov	r1, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 ffdc 	bl	800acc4 <xTaskCheckForTimeOut>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d124      	bne.n	8009d5c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d14:	f000 fb13 	bl	800a33e <prvIsQueueFull>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d018      	beq.n	8009d50 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d20:	3310      	adds	r3, #16
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 ff30 	bl	800ab8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d2e:	f000 fa9e 	bl	800a26e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d32:	f000 fd57 	bl	800a7e4 <xTaskResumeAll>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f47f af7c 	bne.w	8009c36 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009d3e:	4b0c      	ldr	r3, [pc, #48]	; (8009d70 <xQueueGenericSend+0x1f0>)
 8009d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	e772      	b.n	8009c36 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d52:	f000 fa8c 	bl	800a26e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d56:	f000 fd45 	bl	800a7e4 <xTaskResumeAll>
 8009d5a:	e76c      	b.n	8009c36 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d5e:	f000 fa86 	bl	800a26e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d62:	f000 fd3f 	bl	800a7e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3738      	adds	r7, #56	; 0x38
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	e000ed04 	.word	0xe000ed04

08009d74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08e      	sub	sp, #56	; 0x38
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d109      	bne.n	8009da0 <xQueueGenericSendFromISR+0x2c>
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9e:	e7fe      	b.n	8009d9e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d103      	bne.n	8009dae <xQueueGenericSendFromISR+0x3a>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <xQueueGenericSendFromISR+0x3e>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <xQueueGenericSendFromISR+0x40>
 8009db2:	2300      	movs	r3, #0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d109      	bne.n	8009dcc <xQueueGenericSendFromISR+0x58>
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	623b      	str	r3, [r7, #32]
 8009dca:	e7fe      	b.n	8009dca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d103      	bne.n	8009dda <xQueueGenericSendFromISR+0x66>
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d101      	bne.n	8009dde <xQueueGenericSendFromISR+0x6a>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <xQueueGenericSendFromISR+0x6c>
 8009dde:	2300      	movs	r3, #0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d109      	bne.n	8009df8 <xQueueGenericSendFromISR+0x84>
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	e7fe      	b.n	8009df6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009df8:	f001 fbac 	bl	800b554 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009dfc:	f3ef 8211 	mrs	r2, BASEPRI
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	61ba      	str	r2, [r7, #24]
 8009e12:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e16:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d302      	bcc.n	8009e2a <xQueueGenericSendFromISR+0xb6>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d12c      	bne.n	8009e84 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	68b9      	ldr	r1, [r7, #8]
 8009e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e3a:	f000 f988 	bl	800a14e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e46:	d112      	bne.n	8009e6e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d016      	beq.n	8009e7e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	3324      	adds	r3, #36	; 0x24
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 febd 	bl	800abd4 <xTaskRemoveFromEventList>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00e      	beq.n	8009e7e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	601a      	str	r2, [r3, #0]
 8009e6c:	e007      	b.n	8009e7e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e72:	3301      	adds	r3, #1
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	b25a      	sxtb	r2, r3
 8009e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009e82:	e001      	b.n	8009e88 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e84:	2300      	movs	r3, #0
 8009e86:	637b      	str	r3, [r7, #52]	; 0x34
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3738      	adds	r7, #56	; 0x38
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08c      	sub	sp, #48	; 0x30
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d109      	bne.n	8009eca <xQueueReceive+0x2e>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	623b      	str	r3, [r7, #32]
 8009ec8:	e7fe      	b.n	8009ec8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d103      	bne.n	8009ed8 <xQueueReceive+0x3c>
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <xQueueReceive+0x40>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e000      	b.n	8009ede <xQueueReceive+0x42>
 8009edc:	2300      	movs	r3, #0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d109      	bne.n	8009ef6 <xQueueReceive+0x5a>
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	61fb      	str	r3, [r7, #28]
 8009ef4:	e7fe      	b.n	8009ef4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ef6:	f001 f825 	bl	800af44 <xTaskGetSchedulerState>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d102      	bne.n	8009f06 <xQueueReceive+0x6a>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <xQueueReceive+0x6e>
 8009f06:	2301      	movs	r3, #1
 8009f08:	e000      	b.n	8009f0c <xQueueReceive+0x70>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d109      	bne.n	8009f24 <xQueueReceive+0x88>
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	61bb      	str	r3, [r7, #24]
 8009f22:	e7fe      	b.n	8009f22 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f24:	f001 fa3a 	bl	800b39c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01f      	beq.n	8009f74 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f34:	68b9      	ldr	r1, [r7, #8]
 8009f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f38:	f000 f973 	bl	800a222 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	1e5a      	subs	r2, r3, #1
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00f      	beq.n	8009f6c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4e:	3310      	adds	r3, #16
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 fe3f 	bl	800abd4 <xTaskRemoveFromEventList>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d007      	beq.n	8009f6c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f5c:	4b3c      	ldr	r3, [pc, #240]	; (800a050 <xQueueReceive+0x1b4>)
 8009f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f6c:	f001 fa44 	bl	800b3f8 <vPortExitCritical>
				return pdPASS;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e069      	b.n	800a048 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d103      	bne.n	8009f82 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f7a:	f001 fa3d 	bl	800b3f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e062      	b.n	800a048 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d106      	bne.n	8009f96 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f88:	f107 0310 	add.w	r3, r7, #16
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 fe83 	bl	800ac98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f92:	2301      	movs	r3, #1
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f96:	f001 fa2f 	bl	800b3f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f9a:	f000 fc15 	bl	800a7c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f9e:	f001 f9fd 	bl	800b39c <vPortEnterCritical>
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fa8:	b25b      	sxtb	r3, r3
 8009faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fae:	d103      	bne.n	8009fb8 <xQueueReceive+0x11c>
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fbe:	b25b      	sxtb	r3, r3
 8009fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc4:	d103      	bne.n	8009fce <xQueueReceive+0x132>
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fce:	f001 fa13 	bl	800b3f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fd2:	1d3a      	adds	r2, r7, #4
 8009fd4:	f107 0310 	add.w	r3, r7, #16
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fe72 	bl	800acc4 <xTaskCheckForTimeOut>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d123      	bne.n	800a02e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fe8:	f000 f993 	bl	800a312 <prvIsQueueEmpty>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d017      	beq.n	800a022 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff4:	3324      	adds	r3, #36	; 0x24
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 fdc6 	bl	800ab8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a002:	f000 f934 	bl	800a26e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a006:	f000 fbed 	bl	800a7e4 <xTaskResumeAll>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d189      	bne.n	8009f24 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a010:	4b0f      	ldr	r3, [pc, #60]	; (800a050 <xQueueReceive+0x1b4>)
 800a012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	e780      	b.n	8009f24 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a024:	f000 f923 	bl	800a26e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a028:	f000 fbdc 	bl	800a7e4 <xTaskResumeAll>
 800a02c:	e77a      	b.n	8009f24 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a030:	f000 f91d 	bl	800a26e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a034:	f000 fbd6 	bl	800a7e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a03a:	f000 f96a 	bl	800a312 <prvIsQueueEmpty>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	f43f af6f 	beq.w	8009f24 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a046:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3730      	adds	r7, #48	; 0x30
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	e000ed04 	.word	0xe000ed04

0800a054 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08e      	sub	sp, #56	; 0x38
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	2b00      	cmp	r3, #0
 800a068:	d109      	bne.n	800a07e <xQueueReceiveFromISR+0x2a>
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	623b      	str	r3, [r7, #32]
 800a07c:	e7fe      	b.n	800a07c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d103      	bne.n	800a08c <xQueueReceiveFromISR+0x38>
 800a084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <xQueueReceiveFromISR+0x3c>
 800a08c:	2301      	movs	r3, #1
 800a08e:	e000      	b.n	800a092 <xQueueReceiveFromISR+0x3e>
 800a090:	2300      	movs	r3, #0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d109      	bne.n	800a0aa <xQueueReceiveFromISR+0x56>
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	61fb      	str	r3, [r7, #28]
 800a0a8:	e7fe      	b.n	800a0a8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0aa:	f001 fa53 	bl	800b554 <vPortValidateInterruptPriority>
	__asm volatile
 800a0ae:	f3ef 8211 	mrs	r2, BASEPRI
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	61ba      	str	r2, [r7, #24]
 800a0c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a0c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d02f      	beq.n	800a136 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0e4:	f000 f89d 	bl	800a222 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ea:	1e5a      	subs	r2, r3, #1
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a0f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f8:	d112      	bne.n	800a120 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d016      	beq.n	800a130 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a104:	3310      	adds	r3, #16
 800a106:	4618      	mov	r0, r3
 800a108:	f000 fd64 	bl	800abd4 <xTaskRemoveFromEventList>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00e      	beq.n	800a130 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	e007      	b.n	800a130 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a124:	3301      	adds	r3, #1
 800a126:	b2db      	uxtb	r3, r3
 800a128:	b25a      	sxtb	r2, r3
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a130:	2301      	movs	r3, #1
 800a132:	637b      	str	r3, [r7, #52]	; 0x34
 800a134:	e001      	b.n	800a13a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a136:	2300      	movs	r3, #0
 800a138:	637b      	str	r3, [r7, #52]	; 0x34
 800a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a146:	4618      	mov	r0, r3
 800a148:	3738      	adds	r7, #56	; 0x38
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b086      	sub	sp, #24
 800a152:	af00      	add	r7, sp, #0
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a162:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10d      	bne.n	800a188 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d14d      	bne.n	800a210 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 ff01 	bl	800af80 <xTaskPriorityDisinherit>
 800a17e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	609a      	str	r2, [r3, #8]
 800a186:	e043      	b.n	800a210 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d119      	bne.n	800a1c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6858      	ldr	r0, [r3, #4]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	461a      	mov	r2, r3
 800a198:	68b9      	ldr	r1, [r7, #8]
 800a19a:	f001 ff35 	bl	800c008 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	441a      	add	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d32b      	bcc.n	800a210 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	605a      	str	r2, [r3, #4]
 800a1c0:	e026      	b.n	800a210 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	68d8      	ldr	r0, [r3, #12]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	f001 ff1b 	bl	800c008 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68da      	ldr	r2, [r3, #12]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	425b      	negs	r3, r3
 800a1dc:	441a      	add	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d207      	bcs.n	800a1fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	689a      	ldr	r2, [r3, #8]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f6:	425b      	negs	r3, r3
 800a1f8:	441a      	add	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2b02      	cmp	r3, #2
 800a202:	d105      	bne.n	800a210 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a218:	697b      	ldr	r3, [r7, #20]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b082      	sub	sp, #8
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	d018      	beq.n	800a266 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68da      	ldr	r2, [r3, #12]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23c:	441a      	add	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68da      	ldr	r2, [r3, #12]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d303      	bcc.n	800a256 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68d9      	ldr	r1, [r3, #12]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25e:	461a      	mov	r2, r3
 800a260:	6838      	ldr	r0, [r7, #0]
 800a262:	f001 fed1 	bl	800c008 <memcpy>
	}
}
 800a266:	bf00      	nop
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a276:	f001 f891 	bl	800b39c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a280:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a282:	e011      	b.n	800a2a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d012      	beq.n	800a2b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3324      	adds	r3, #36	; 0x24
 800a290:	4618      	mov	r0, r3
 800a292:	f000 fc9f 	bl	800abd4 <xTaskRemoveFromEventList>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a29c:	f000 fd72 	bl	800ad84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	dce9      	bgt.n	800a284 <prvUnlockQueue+0x16>
 800a2b0:	e000      	b.n	800a2b4 <prvUnlockQueue+0x46>
					break;
 800a2b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	22ff      	movs	r2, #255	; 0xff
 800a2b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a2bc:	f001 f89c 	bl	800b3f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2c0:	f001 f86c 	bl	800b39c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2cc:	e011      	b.n	800a2f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d012      	beq.n	800a2fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3310      	adds	r3, #16
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 fc7a 	bl	800abd4 <xTaskRemoveFromEventList>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2e6:	f000 fd4d 	bl	800ad84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2ea:	7bbb      	ldrb	r3, [r7, #14]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	dce9      	bgt.n	800a2ce <prvUnlockQueue+0x60>
 800a2fa:	e000      	b.n	800a2fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	22ff      	movs	r2, #255	; 0xff
 800a302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a306:	f001 f877 	bl	800b3f8 <vPortExitCritical>
}
 800a30a:	bf00      	nop
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a31a:	f001 f83f 	bl	800b39c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a322:	2b00      	cmp	r3, #0
 800a324:	d102      	bne.n	800a32c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a326:	2301      	movs	r3, #1
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	e001      	b.n	800a330 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a32c:	2300      	movs	r3, #0
 800a32e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a330:	f001 f862 	bl	800b3f8 <vPortExitCritical>

	return xReturn;
 800a334:	68fb      	ldr	r3, [r7, #12]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a346:	f001 f829 	bl	800b39c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a352:	429a      	cmp	r2, r3
 800a354:	d102      	bne.n	800a35c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a356:	2301      	movs	r3, #1
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	e001      	b.n	800a360 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a360:	f001 f84a 	bl	800b3f8 <vPortExitCritical>

	return xReturn;
 800a364:	68fb      	ldr	r3, [r7, #12]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b08e      	sub	sp, #56	; 0x38
 800a372:	af04      	add	r7, sp, #16
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	607a      	str	r2, [r7, #4]
 800a37a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d109      	bne.n	800a396 <xTaskCreateStatic+0x28>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	623b      	str	r3, [r7, #32]
 800a394:	e7fe      	b.n	800a394 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d109      	bne.n	800a3b0 <xTaskCreateStatic+0x42>
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	61fb      	str	r3, [r7, #28]
 800a3ae:	e7fe      	b.n	800a3ae <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a3b0:	2358      	movs	r3, #88	; 0x58
 800a3b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	2b58      	cmp	r3, #88	; 0x58
 800a3b8:	d009      	beq.n	800a3ce <xTaskCreateStatic+0x60>
 800a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	61bb      	str	r3, [r7, #24]
 800a3cc:	e7fe      	b.n	800a3cc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a3ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d01e      	beq.n	800a414 <xTaskCreateStatic+0xa6>
 800a3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d01b      	beq.n	800a414 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9303      	str	r3, [sp, #12]
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	9302      	str	r3, [sp, #8]
 800a3f6:	f107 0314 	add.w	r3, r7, #20
 800a3fa:	9301      	str	r3, [sp, #4]
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	68b9      	ldr	r1, [r7, #8]
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f000 f850 	bl	800a4ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a40c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a40e:	f000 f8df 	bl	800a5d0 <prvAddNewTaskToReadyList>
 800a412:	e001      	b.n	800a418 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a414:	2300      	movs	r3, #0
 800a416:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a418:	697b      	ldr	r3, [r7, #20]
	}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3728      	adds	r7, #40	; 0x28
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a422:	b580      	push	{r7, lr}
 800a424:	b08c      	sub	sp, #48	; 0x30
 800a426:	af04      	add	r7, sp, #16
 800a428:	60f8      	str	r0, [r7, #12]
 800a42a:	60b9      	str	r1, [r7, #8]
 800a42c:	603b      	str	r3, [r7, #0]
 800a42e:	4613      	mov	r3, r2
 800a430:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a432:	88fb      	ldrh	r3, [r7, #6]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4618      	mov	r0, r3
 800a438:	f001 f8ca 	bl	800b5d0 <pvPortMalloc>
 800a43c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00e      	beq.n	800a462 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a444:	2058      	movs	r0, #88	; 0x58
 800a446:	f001 f8c3 	bl	800b5d0 <pvPortMalloc>
 800a44a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	631a      	str	r2, [r3, #48]	; 0x30
 800a458:	e005      	b.n	800a466 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a45a:	6978      	ldr	r0, [r7, #20]
 800a45c:	f001 f97e 	bl	800b75c <vPortFree>
 800a460:	e001      	b.n	800a466 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a462:	2300      	movs	r3, #0
 800a464:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d017      	beq.n	800a49c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a474:	88fa      	ldrh	r2, [r7, #6]
 800a476:	2300      	movs	r3, #0
 800a478:	9303      	str	r3, [sp, #12]
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	9302      	str	r3, [sp, #8]
 800a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	68b9      	ldr	r1, [r7, #8]
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 f80e 	bl	800a4ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a490:	69f8      	ldr	r0, [r7, #28]
 800a492:	f000 f89d 	bl	800a5d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a496:	2301      	movs	r3, #1
 800a498:	61bb      	str	r3, [r7, #24]
 800a49a:	e002      	b.n	800a4a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a4a2:	69bb      	ldr	r3, [r7, #24]
	}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3720      	adds	r7, #32
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	21a5      	movs	r1, #165	; 0xa5
 800a4c6:	f001 fdaa 	bl	800c01e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	f023 0307 	bic.w	r3, r3, #7
 800a4e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	f003 0307 	and.w	r3, r3, #7
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d009      	beq.n	800a502 <prvInitialiseNewTask+0x56>
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	617b      	str	r3, [r7, #20]
 800a500:	e7fe      	b.n	800a500 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d01f      	beq.n	800a548 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a508:	2300      	movs	r3, #0
 800a50a:	61fb      	str	r3, [r7, #28]
 800a50c:	e012      	b.n	800a534 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	4413      	add	r3, r2
 800a514:	7819      	ldrb	r1, [r3, #0]
 800a516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	4413      	add	r3, r2
 800a51c:	3334      	adds	r3, #52	; 0x34
 800a51e:	460a      	mov	r2, r1
 800a520:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	4413      	add	r3, r2
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d006      	beq.n	800a53c <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	3301      	adds	r3, #1
 800a532:	61fb      	str	r3, [r7, #28]
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	2b0f      	cmp	r3, #15
 800a538:	d9e9      	bls.n	800a50e <prvInitialiseNewTask+0x62>
 800a53a:	e000      	b.n	800a53e <prvInitialiseNewTask+0x92>
			{
				break;
 800a53c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a546:	e003      	b.n	800a550 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	2b06      	cmp	r3, #6
 800a554:	d901      	bls.n	800a55a <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a556:	2306      	movs	r3, #6
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a55e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a564:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	2200      	movs	r2, #0
 800a56a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	3304      	adds	r3, #4
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff f937 	bl	80097e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	3318      	adds	r3, #24
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff f932 	bl	80097e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a584:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	f1c3 0207 	rsb	r2, r3, #7
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a594:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	2200      	movs	r2, #0
 800a59a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	2200      	movs	r2, #0
 800a5a0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	68f9      	ldr	r1, [r7, #12]
 800a5ae:	69b8      	ldr	r0, [r7, #24]
 800a5b0:	f000 fdd0 	bl	800b154 <pxPortInitialiseStack>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5c6:	bf00      	nop
 800a5c8:	3720      	adds	r7, #32
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5d8:	f000 fee0 	bl	800b39c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5dc:	4b2a      	ldr	r3, [pc, #168]	; (800a688 <prvAddNewTaskToReadyList+0xb8>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	4a29      	ldr	r2, [pc, #164]	; (800a688 <prvAddNewTaskToReadyList+0xb8>)
 800a5e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5e6:	4b29      	ldr	r3, [pc, #164]	; (800a68c <prvAddNewTaskToReadyList+0xbc>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d109      	bne.n	800a602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a5ee:	4a27      	ldr	r2, [pc, #156]	; (800a68c <prvAddNewTaskToReadyList+0xbc>)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5f4:	4b24      	ldr	r3, [pc, #144]	; (800a688 <prvAddNewTaskToReadyList+0xb8>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d110      	bne.n	800a61e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a5fc:	f000 fbe8 	bl	800add0 <prvInitialiseTaskLists>
 800a600:	e00d      	b.n	800a61e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a602:	4b23      	ldr	r3, [pc, #140]	; (800a690 <prvAddNewTaskToReadyList+0xc0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d109      	bne.n	800a61e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a60a:	4b20      	ldr	r3, [pc, #128]	; (800a68c <prvAddNewTaskToReadyList+0xbc>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	429a      	cmp	r2, r3
 800a616:	d802      	bhi.n	800a61e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a618:	4a1c      	ldr	r2, [pc, #112]	; (800a68c <prvAddNewTaskToReadyList+0xbc>)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a61e:	4b1d      	ldr	r3, [pc, #116]	; (800a694 <prvAddNewTaskToReadyList+0xc4>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3301      	adds	r3, #1
 800a624:	4a1b      	ldr	r2, [pc, #108]	; (800a694 <prvAddNewTaskToReadyList+0xc4>)
 800a626:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62c:	2201      	movs	r2, #1
 800a62e:	409a      	lsls	r2, r3
 800a630:	4b19      	ldr	r3, [pc, #100]	; (800a698 <prvAddNewTaskToReadyList+0xc8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4313      	orrs	r3, r2
 800a636:	4a18      	ldr	r2, [pc, #96]	; (800a698 <prvAddNewTaskToReadyList+0xc8>)
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a63e:	4613      	mov	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4a15      	ldr	r2, [pc, #84]	; (800a69c <prvAddNewTaskToReadyList+0xcc>)
 800a648:	441a      	add	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3304      	adds	r3, #4
 800a64e:	4619      	mov	r1, r3
 800a650:	4610      	mov	r0, r2
 800a652:	f7ff f8d4 	bl	80097fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a656:	f000 fecf 	bl	800b3f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a65a:	4b0d      	ldr	r3, [pc, #52]	; (800a690 <prvAddNewTaskToReadyList+0xc0>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00e      	beq.n	800a680 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a662:	4b0a      	ldr	r3, [pc, #40]	; (800a68c <prvAddNewTaskToReadyList+0xbc>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d207      	bcs.n	800a680 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a670:	4b0b      	ldr	r3, [pc, #44]	; (800a6a0 <prvAddNewTaskToReadyList+0xd0>)
 800a672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20000414 	.word	0x20000414
 800a68c:	20000314 	.word	0x20000314
 800a690:	20000420 	.word	0x20000420
 800a694:	20000430 	.word	0x20000430
 800a698:	2000041c 	.word	0x2000041c
 800a69c:	20000318 	.word	0x20000318
 800a6a0:	e000ed04 	.word	0xe000ed04

0800a6a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d016      	beq.n	800a6e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6b6:	4b13      	ldr	r3, [pc, #76]	; (800a704 <vTaskDelay+0x60>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <vTaskDelay+0x2e>
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	60bb      	str	r3, [r7, #8]
 800a6d0:	e7fe      	b.n	800a6d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a6d2:	f000 f879 	bl	800a7c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fcd5 	bl	800b088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6de:	f000 f881 	bl	800a7e4 <xTaskResumeAll>
 800a6e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d107      	bne.n	800a6fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a6ea:	4b07      	ldr	r3, [pc, #28]	; (800a708 <vTaskDelay+0x64>)
 800a6ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6fa:	bf00      	nop
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	2000043c 	.word	0x2000043c
 800a708:	e000ed04 	.word	0xe000ed04

0800a70c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08a      	sub	sp, #40	; 0x28
 800a710:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a712:	2300      	movs	r3, #0
 800a714:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a716:	2300      	movs	r3, #0
 800a718:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a71a:	463a      	mov	r2, r7
 800a71c:	1d39      	adds	r1, r7, #4
 800a71e:	f107 0308 	add.w	r3, r7, #8
 800a722:	4618      	mov	r0, r3
 800a724:	f7f5 fefe 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	9202      	str	r2, [sp, #8]
 800a730:	9301      	str	r3, [sp, #4]
 800a732:	2300      	movs	r3, #0
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	2300      	movs	r3, #0
 800a738:	460a      	mov	r2, r1
 800a73a:	491d      	ldr	r1, [pc, #116]	; (800a7b0 <vTaskStartScheduler+0xa4>)
 800a73c:	481d      	ldr	r0, [pc, #116]	; (800a7b4 <vTaskStartScheduler+0xa8>)
 800a73e:	f7ff fe16 	bl	800a36e <xTaskCreateStatic>
 800a742:	4602      	mov	r2, r0
 800a744:	4b1c      	ldr	r3, [pc, #112]	; (800a7b8 <vTaskStartScheduler+0xac>)
 800a746:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a748:	4b1b      	ldr	r3, [pc, #108]	; (800a7b8 <vTaskStartScheduler+0xac>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a750:	2301      	movs	r3, #1
 800a752:	617b      	str	r3, [r7, #20]
 800a754:	e001      	b.n	800a75a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a756:	2300      	movs	r3, #0
 800a758:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d115      	bne.n	800a78c <vTaskStartScheduler+0x80>
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a772:	4b12      	ldr	r3, [pc, #72]	; (800a7bc <vTaskStartScheduler+0xb0>)
 800a774:	f04f 32ff 	mov.w	r2, #4294967295
 800a778:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a77a:	4b11      	ldr	r3, [pc, #68]	; (800a7c0 <vTaskStartScheduler+0xb4>)
 800a77c:	2201      	movs	r2, #1
 800a77e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a780:	4b10      	ldr	r3, [pc, #64]	; (800a7c4 <vTaskStartScheduler+0xb8>)
 800a782:	2200      	movs	r2, #0
 800a784:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a786:	f000 fd6b 	bl	800b260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a78a:	e00d      	b.n	800a7a8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a792:	d109      	bne.n	800a7a8 <vTaskStartScheduler+0x9c>
 800a794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a798:	f383 8811 	msr	BASEPRI, r3
 800a79c:	f3bf 8f6f 	isb	sy
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	e7fe      	b.n	800a7a6 <vTaskStartScheduler+0x9a>
}
 800a7a8:	bf00      	nop
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	0800c220 	.word	0x0800c220
 800a7b4:	0800ad9d 	.word	0x0800ad9d
 800a7b8:	20000438 	.word	0x20000438
 800a7bc:	20000434 	.word	0x20000434
 800a7c0:	20000420 	.word	0x20000420
 800a7c4:	20000418 	.word	0x20000418

0800a7c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a7cc:	4b04      	ldr	r3, [pc, #16]	; (800a7e0 <vTaskSuspendAll+0x18>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	4a03      	ldr	r2, [pc, #12]	; (800a7e0 <vTaskSuspendAll+0x18>)
 800a7d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a7d6:	bf00      	nop
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	2000043c 	.word	0x2000043c

0800a7e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a7f2:	4b41      	ldr	r3, [pc, #260]	; (800a8f8 <xTaskResumeAll+0x114>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d109      	bne.n	800a80e <xTaskResumeAll+0x2a>
 800a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fe:	f383 8811 	msr	BASEPRI, r3
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	e7fe      	b.n	800a80c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a80e:	f000 fdc5 	bl	800b39c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a812:	4b39      	ldr	r3, [pc, #228]	; (800a8f8 <xTaskResumeAll+0x114>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3b01      	subs	r3, #1
 800a818:	4a37      	ldr	r2, [pc, #220]	; (800a8f8 <xTaskResumeAll+0x114>)
 800a81a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a81c:	4b36      	ldr	r3, [pc, #216]	; (800a8f8 <xTaskResumeAll+0x114>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d161      	bne.n	800a8e8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a824:	4b35      	ldr	r3, [pc, #212]	; (800a8fc <xTaskResumeAll+0x118>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d05d      	beq.n	800a8e8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a82c:	e02e      	b.n	800a88c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a82e:	4b34      	ldr	r3, [pc, #208]	; (800a900 <xTaskResumeAll+0x11c>)
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3318      	adds	r3, #24
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff f83c 	bl	80098b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	3304      	adds	r3, #4
 800a844:	4618      	mov	r0, r3
 800a846:	f7ff f837 	bl	80098b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84e:	2201      	movs	r2, #1
 800a850:	409a      	lsls	r2, r3
 800a852:	4b2c      	ldr	r3, [pc, #176]	; (800a904 <xTaskResumeAll+0x120>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4313      	orrs	r3, r2
 800a858:	4a2a      	ldr	r2, [pc, #168]	; (800a904 <xTaskResumeAll+0x120>)
 800a85a:	6013      	str	r3, [r2, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a860:	4613      	mov	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4a27      	ldr	r2, [pc, #156]	; (800a908 <xTaskResumeAll+0x124>)
 800a86a:	441a      	add	r2, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3304      	adds	r3, #4
 800a870:	4619      	mov	r1, r3
 800a872:	4610      	mov	r0, r2
 800a874:	f7fe ffc3 	bl	80097fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87c:	4b23      	ldr	r3, [pc, #140]	; (800a90c <xTaskResumeAll+0x128>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a882:	429a      	cmp	r2, r3
 800a884:	d302      	bcc.n	800a88c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a886:	4b22      	ldr	r3, [pc, #136]	; (800a910 <xTaskResumeAll+0x12c>)
 800a888:	2201      	movs	r2, #1
 800a88a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a88c:	4b1c      	ldr	r3, [pc, #112]	; (800a900 <xTaskResumeAll+0x11c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1cc      	bne.n	800a82e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a89a:	f000 fb33 	bl	800af04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a89e:	4b1d      	ldr	r3, [pc, #116]	; (800a914 <xTaskResumeAll+0x130>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d010      	beq.n	800a8cc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8aa:	f000 f837 	bl	800a91c <xTaskIncrementTick>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a8b4:	4b16      	ldr	r3, [pc, #88]	; (800a910 <xTaskResumeAll+0x12c>)
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1f1      	bne.n	800a8aa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a8c6:	4b13      	ldr	r3, [pc, #76]	; (800a914 <xTaskResumeAll+0x130>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8cc:	4b10      	ldr	r3, [pc, #64]	; (800a910 <xTaskResumeAll+0x12c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d009      	beq.n	800a8e8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8d8:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <xTaskResumeAll+0x134>)
 800a8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8e8:	f000 fd86 	bl	800b3f8 <vPortExitCritical>

	return xAlreadyYielded;
 800a8ec:	68bb      	ldr	r3, [r7, #8]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	2000043c 	.word	0x2000043c
 800a8fc:	20000414 	.word	0x20000414
 800a900:	200003d4 	.word	0x200003d4
 800a904:	2000041c 	.word	0x2000041c
 800a908:	20000318 	.word	0x20000318
 800a90c:	20000314 	.word	0x20000314
 800a910:	20000428 	.word	0x20000428
 800a914:	20000424 	.word	0x20000424
 800a918:	e000ed04 	.word	0xe000ed04

0800a91c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a922:	2300      	movs	r3, #0
 800a924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a926:	4b4e      	ldr	r3, [pc, #312]	; (800aa60 <xTaskIncrementTick+0x144>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f040 8087 	bne.w	800aa3e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a930:	4b4c      	ldr	r3, [pc, #304]	; (800aa64 <xTaskIncrementTick+0x148>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3301      	adds	r3, #1
 800a936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a938:	4a4a      	ldr	r2, [pc, #296]	; (800aa64 <xTaskIncrementTick+0x148>)
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d11f      	bne.n	800a984 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a944:	4b48      	ldr	r3, [pc, #288]	; (800aa68 <xTaskIncrementTick+0x14c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d009      	beq.n	800a962 <xTaskIncrementTick+0x46>
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	603b      	str	r3, [r7, #0]
 800a960:	e7fe      	b.n	800a960 <xTaskIncrementTick+0x44>
 800a962:	4b41      	ldr	r3, [pc, #260]	; (800aa68 <xTaskIncrementTick+0x14c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	4b40      	ldr	r3, [pc, #256]	; (800aa6c <xTaskIncrementTick+0x150>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a3e      	ldr	r2, [pc, #248]	; (800aa68 <xTaskIncrementTick+0x14c>)
 800a96e:	6013      	str	r3, [r2, #0]
 800a970:	4a3e      	ldr	r2, [pc, #248]	; (800aa6c <xTaskIncrementTick+0x150>)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	4b3e      	ldr	r3, [pc, #248]	; (800aa70 <xTaskIncrementTick+0x154>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3301      	adds	r3, #1
 800a97c:	4a3c      	ldr	r2, [pc, #240]	; (800aa70 <xTaskIncrementTick+0x154>)
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	f000 fac0 	bl	800af04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a984:	4b3b      	ldr	r3, [pc, #236]	; (800aa74 <xTaskIncrementTick+0x158>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d348      	bcc.n	800aa20 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a98e:	4b36      	ldr	r3, [pc, #216]	; (800aa68 <xTaskIncrementTick+0x14c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d104      	bne.n	800a9a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a998:	4b36      	ldr	r3, [pc, #216]	; (800aa74 <xTaskIncrementTick+0x158>)
 800a99a:	f04f 32ff 	mov.w	r2, #4294967295
 800a99e:	601a      	str	r2, [r3, #0]
					break;
 800a9a0:	e03e      	b.n	800aa20 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a2:	4b31      	ldr	r3, [pc, #196]	; (800aa68 <xTaskIncrementTick+0x14c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d203      	bcs.n	800a9c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a9ba:	4a2e      	ldr	r2, [pc, #184]	; (800aa74 <xTaskIncrementTick+0x158>)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a9c0:	e02e      	b.n	800aa20 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe ff76 	bl	80098b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d004      	beq.n	800a9de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	3318      	adds	r3, #24
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fe ff6d 	bl	80098b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	409a      	lsls	r2, r3
 800a9e6:	4b24      	ldr	r3, [pc, #144]	; (800aa78 <xTaskIncrementTick+0x15c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	4a22      	ldr	r2, [pc, #136]	; (800aa78 <xTaskIncrementTick+0x15c>)
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4a1f      	ldr	r2, [pc, #124]	; (800aa7c <xTaskIncrementTick+0x160>)
 800a9fe:	441a      	add	r2, r3
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	3304      	adds	r3, #4
 800aa04:	4619      	mov	r1, r3
 800aa06:	4610      	mov	r0, r2
 800aa08:	f7fe fef9 	bl	80097fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa10:	4b1b      	ldr	r3, [pc, #108]	; (800aa80 <xTaskIncrementTick+0x164>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d3b9      	bcc.n	800a98e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa1e:	e7b6      	b.n	800a98e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa20:	4b17      	ldr	r3, [pc, #92]	; (800aa80 <xTaskIncrementTick+0x164>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa26:	4915      	ldr	r1, [pc, #84]	; (800aa7c <xTaskIncrementTick+0x160>)
 800aa28:	4613      	mov	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	440b      	add	r3, r1
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d907      	bls.n	800aa48 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	e004      	b.n	800aa48 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aa3e:	4b11      	ldr	r3, [pc, #68]	; (800aa84 <xTaskIncrementTick+0x168>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3301      	adds	r3, #1
 800aa44:	4a0f      	ldr	r2, [pc, #60]	; (800aa84 <xTaskIncrementTick+0x168>)
 800aa46:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aa48:	4b0f      	ldr	r3, [pc, #60]	; (800aa88 <xTaskIncrementTick+0x16c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800aa50:	2301      	movs	r3, #1
 800aa52:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aa54:	697b      	ldr	r3, [r7, #20]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	2000043c 	.word	0x2000043c
 800aa64:	20000418 	.word	0x20000418
 800aa68:	200003cc 	.word	0x200003cc
 800aa6c:	200003d0 	.word	0x200003d0
 800aa70:	2000042c 	.word	0x2000042c
 800aa74:	20000434 	.word	0x20000434
 800aa78:	2000041c 	.word	0x2000041c
 800aa7c:	20000318 	.word	0x20000318
 800aa80:	20000314 	.word	0x20000314
 800aa84:	20000424 	.word	0x20000424
 800aa88:	20000428 	.word	0x20000428

0800aa8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b088      	sub	sp, #32
 800aa90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa92:	4b39      	ldr	r3, [pc, #228]	; (800ab78 <vTaskSwitchContext+0xec>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa9a:	4b38      	ldr	r3, [pc, #224]	; (800ab7c <vTaskSwitchContext+0xf0>)
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aaa0:	e065      	b.n	800ab6e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800aaa2:	4b36      	ldr	r3, [pc, #216]	; (800ab7c <vTaskSwitchContext+0xf0>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800aaa8:	4b35      	ldr	r3, [pc, #212]	; (800ab80 <vTaskSwitchContext+0xf4>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaae:	61fb      	str	r3, [r7, #28]
 800aab0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800aab4:	61bb      	str	r3, [r7, #24]
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	69ba      	ldr	r2, [r7, #24]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d111      	bne.n	800aae4 <vTaskSwitchContext+0x58>
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	3304      	adds	r3, #4
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	69ba      	ldr	r2, [r7, #24]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d10b      	bne.n	800aae4 <vTaskSwitchContext+0x58>
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	3308      	adds	r3, #8
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	69ba      	ldr	r2, [r7, #24]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d105      	bne.n	800aae4 <vTaskSwitchContext+0x58>
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	330c      	adds	r3, #12
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d008      	beq.n	800aaf6 <vTaskSwitchContext+0x6a>
 800aae4:	4b26      	ldr	r3, [pc, #152]	; (800ab80 <vTaskSwitchContext+0xf4>)
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	4b25      	ldr	r3, [pc, #148]	; (800ab80 <vTaskSwitchContext+0xf4>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3334      	adds	r3, #52	; 0x34
 800aaee:	4619      	mov	r1, r3
 800aaf0:	4610      	mov	r0, r2
 800aaf2:	f7f5 fd04 	bl	80004fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf6:	4b23      	ldr	r3, [pc, #140]	; (800ab84 <vTaskSwitchContext+0xf8>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	fab3 f383 	clz	r3, r3
 800ab02:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ab04:	7afb      	ldrb	r3, [r7, #11]
 800ab06:	f1c3 031f 	rsb	r3, r3, #31
 800ab0a:	617b      	str	r3, [r7, #20]
 800ab0c:	491e      	ldr	r1, [pc, #120]	; (800ab88 <vTaskSwitchContext+0xfc>)
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	4613      	mov	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	440b      	add	r3, r1
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d109      	bne.n	800ab34 <vTaskSwitchContext+0xa8>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	607b      	str	r3, [r7, #4]
 800ab32:	e7fe      	b.n	800ab32 <vTaskSwitchContext+0xa6>
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	4613      	mov	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4a12      	ldr	r2, [pc, #72]	; (800ab88 <vTaskSwitchContext+0xfc>)
 800ab40:	4413      	add	r3, r2
 800ab42:	613b      	str	r3, [r7, #16]
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	685a      	ldr	r2, [r3, #4]
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	605a      	str	r2, [r3, #4]
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	3308      	adds	r3, #8
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d104      	bne.n	800ab64 <vTaskSwitchContext+0xd8>
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	605a      	str	r2, [r3, #4]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	4a05      	ldr	r2, [pc, #20]	; (800ab80 <vTaskSwitchContext+0xf4>)
 800ab6c:	6013      	str	r3, [r2, #0]
}
 800ab6e:	bf00      	nop
 800ab70:	3720      	adds	r7, #32
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	2000043c 	.word	0x2000043c
 800ab7c:	20000428 	.word	0x20000428
 800ab80:	20000314 	.word	0x20000314
 800ab84:	2000041c 	.word	0x2000041c
 800ab88:	20000318 	.word	0x20000318

0800ab8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d109      	bne.n	800abb0 <vTaskPlaceOnEventList+0x24>
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	60fb      	str	r3, [r7, #12]
 800abae:	e7fe      	b.n	800abae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abb0:	4b07      	ldr	r3, [pc, #28]	; (800abd0 <vTaskPlaceOnEventList+0x44>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3318      	adds	r3, #24
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7fe fe44 	bl	8009846 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abbe:	2101      	movs	r1, #1
 800abc0:	6838      	ldr	r0, [r7, #0]
 800abc2:	f000 fa61 	bl	800b088 <prvAddCurrentTaskToDelayedList>
}
 800abc6:	bf00      	nop
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	20000314 	.word	0x20000314

0800abd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d109      	bne.n	800abfe <xTaskRemoveFromEventList+0x2a>
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	e7fe      	b.n	800abfc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	3318      	adds	r3, #24
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe fe58 	bl	80098b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac08:	4b1d      	ldr	r3, [pc, #116]	; (800ac80 <xTaskRemoveFromEventList+0xac>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d11c      	bne.n	800ac4a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	3304      	adds	r3, #4
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe fe4f 	bl	80098b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	2201      	movs	r2, #1
 800ac20:	409a      	lsls	r2, r3
 800ac22:	4b18      	ldr	r3, [pc, #96]	; (800ac84 <xTaskRemoveFromEventList+0xb0>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	4a16      	ldr	r2, [pc, #88]	; (800ac84 <xTaskRemoveFromEventList+0xb0>)
 800ac2a:	6013      	str	r3, [r2, #0]
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac30:	4613      	mov	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4a13      	ldr	r2, [pc, #76]	; (800ac88 <xTaskRemoveFromEventList+0xb4>)
 800ac3a:	441a      	add	r2, r3
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	4619      	mov	r1, r3
 800ac42:	4610      	mov	r0, r2
 800ac44:	f7fe fddb 	bl	80097fe <vListInsertEnd>
 800ac48:	e005      	b.n	800ac56 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	3318      	adds	r3, #24
 800ac4e:	4619      	mov	r1, r3
 800ac50:	480e      	ldr	r0, [pc, #56]	; (800ac8c <xTaskRemoveFromEventList+0xb8>)
 800ac52:	f7fe fdd4 	bl	80097fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5a:	4b0d      	ldr	r3, [pc, #52]	; (800ac90 <xTaskRemoveFromEventList+0xbc>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d905      	bls.n	800ac70 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac64:	2301      	movs	r3, #1
 800ac66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac68:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <xTaskRemoveFromEventList+0xc0>)
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	601a      	str	r2, [r3, #0]
 800ac6e:	e001      	b.n	800ac74 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ac70:	2300      	movs	r3, #0
 800ac72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac74:	697b      	ldr	r3, [r7, #20]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	2000043c 	.word	0x2000043c
 800ac84:	2000041c 	.word	0x2000041c
 800ac88:	20000318 	.word	0x20000318
 800ac8c:	200003d4 	.word	0x200003d4
 800ac90:	20000314 	.word	0x20000314
 800ac94:	20000428 	.word	0x20000428

0800ac98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aca0:	4b06      	ldr	r3, [pc, #24]	; (800acbc <vTaskInternalSetTimeOutState+0x24>)
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aca8:	4b05      	ldr	r3, [pc, #20]	; (800acc0 <vTaskInternalSetTimeOutState+0x28>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	605a      	str	r2, [r3, #4]
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	2000042c 	.word	0x2000042c
 800acc0:	20000418 	.word	0x20000418

0800acc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d109      	bne.n	800ace8 <xTaskCheckForTimeOut+0x24>
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	613b      	str	r3, [r7, #16]
 800ace6:	e7fe      	b.n	800ace6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d109      	bne.n	800ad02 <xTaskCheckForTimeOut+0x3e>
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	e7fe      	b.n	800ad00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ad02:	f000 fb4b 	bl	800b39c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad06:	4b1d      	ldr	r3, [pc, #116]	; (800ad7c <xTaskCheckForTimeOut+0xb8>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	69ba      	ldr	r2, [r7, #24]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1e:	d102      	bne.n	800ad26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad20:	2300      	movs	r3, #0
 800ad22:	61fb      	str	r3, [r7, #28]
 800ad24:	e023      	b.n	800ad6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	4b15      	ldr	r3, [pc, #84]	; (800ad80 <xTaskCheckForTimeOut+0xbc>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d007      	beq.n	800ad42 <xTaskCheckForTimeOut+0x7e>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	69ba      	ldr	r2, [r7, #24]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d302      	bcc.n	800ad42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	61fb      	str	r3, [r7, #28]
 800ad40:	e015      	b.n	800ad6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d20b      	bcs.n	800ad64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	1ad2      	subs	r2, r2, r3
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff ff9d 	bl	800ac98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	61fb      	str	r3, [r7, #28]
 800ad62:	e004      	b.n	800ad6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2200      	movs	r2, #0
 800ad68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad6e:	f000 fb43 	bl	800b3f8 <vPortExitCritical>

	return xReturn;
 800ad72:	69fb      	ldr	r3, [r7, #28]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3720      	adds	r7, #32
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	20000418 	.word	0x20000418
 800ad80:	2000042c 	.word	0x2000042c

0800ad84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad84:	b480      	push	{r7}
 800ad86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad88:	4b03      	ldr	r3, [pc, #12]	; (800ad98 <vTaskMissedYield+0x14>)
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	601a      	str	r2, [r3, #0]
}
 800ad8e:	bf00      	nop
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	20000428 	.word	0x20000428

0800ad9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ada4:	f000 f854 	bl	800ae50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ada8:	4b07      	ldr	r3, [pc, #28]	; (800adc8 <prvIdleTask+0x2c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d907      	bls.n	800adc0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800adb0:	4b06      	ldr	r3, [pc, #24]	; (800adcc <prvIdleTask+0x30>)
 800adb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800adc0:	f7f5 fb96 	bl	80004f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800adc4:	e7ee      	b.n	800ada4 <prvIdleTask+0x8>
 800adc6:	bf00      	nop
 800adc8:	20000318 	.word	0x20000318
 800adcc:	e000ed04 	.word	0xe000ed04

0800add0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800add6:	2300      	movs	r3, #0
 800add8:	607b      	str	r3, [r7, #4]
 800adda:	e00c      	b.n	800adf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	4613      	mov	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4a12      	ldr	r2, [pc, #72]	; (800ae30 <prvInitialiseTaskLists+0x60>)
 800ade8:	4413      	add	r3, r2
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe fcda 	bl	80097a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	3301      	adds	r3, #1
 800adf4:	607b      	str	r3, [r7, #4]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b06      	cmp	r3, #6
 800adfa:	d9ef      	bls.n	800addc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800adfc:	480d      	ldr	r0, [pc, #52]	; (800ae34 <prvInitialiseTaskLists+0x64>)
 800adfe:	f7fe fcd1 	bl	80097a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae02:	480d      	ldr	r0, [pc, #52]	; (800ae38 <prvInitialiseTaskLists+0x68>)
 800ae04:	f7fe fcce 	bl	80097a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae08:	480c      	ldr	r0, [pc, #48]	; (800ae3c <prvInitialiseTaskLists+0x6c>)
 800ae0a:	f7fe fccb 	bl	80097a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae0e:	480c      	ldr	r0, [pc, #48]	; (800ae40 <prvInitialiseTaskLists+0x70>)
 800ae10:	f7fe fcc8 	bl	80097a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae14:	480b      	ldr	r0, [pc, #44]	; (800ae44 <prvInitialiseTaskLists+0x74>)
 800ae16:	f7fe fcc5 	bl	80097a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae1a:	4b0b      	ldr	r3, [pc, #44]	; (800ae48 <prvInitialiseTaskLists+0x78>)
 800ae1c:	4a05      	ldr	r2, [pc, #20]	; (800ae34 <prvInitialiseTaskLists+0x64>)
 800ae1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae20:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <prvInitialiseTaskLists+0x7c>)
 800ae22:	4a05      	ldr	r2, [pc, #20]	; (800ae38 <prvInitialiseTaskLists+0x68>)
 800ae24:	601a      	str	r2, [r3, #0]
}
 800ae26:	bf00      	nop
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	20000318 	.word	0x20000318
 800ae34:	200003a4 	.word	0x200003a4
 800ae38:	200003b8 	.word	0x200003b8
 800ae3c:	200003d4 	.word	0x200003d4
 800ae40:	200003e8 	.word	0x200003e8
 800ae44:	20000400 	.word	0x20000400
 800ae48:	200003cc 	.word	0x200003cc
 800ae4c:	200003d0 	.word	0x200003d0

0800ae50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae56:	e019      	b.n	800ae8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae58:	f000 faa0 	bl	800b39c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae5c:	4b0f      	ldr	r3, [pc, #60]	; (800ae9c <prvCheckTasksWaitingTermination+0x4c>)
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	3304      	adds	r3, #4
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fe fd25 	bl	80098b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae6e:	4b0c      	ldr	r3, [pc, #48]	; (800aea0 <prvCheckTasksWaitingTermination+0x50>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	4a0a      	ldr	r2, [pc, #40]	; (800aea0 <prvCheckTasksWaitingTermination+0x50>)
 800ae76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <prvCheckTasksWaitingTermination+0x54>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	4a09      	ldr	r2, [pc, #36]	; (800aea4 <prvCheckTasksWaitingTermination+0x54>)
 800ae80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae82:	f000 fab9 	bl	800b3f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f80e 	bl	800aea8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae8c:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <prvCheckTasksWaitingTermination+0x54>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1e1      	bne.n	800ae58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae94:	bf00      	nop
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	200003e8 	.word	0x200003e8
 800aea0:	20000414 	.word	0x20000414
 800aea4:	200003fc 	.word	0x200003fc

0800aea8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d108      	bne.n	800aecc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fc4c 	bl	800b75c <vPortFree>
				vPortFree( pxTCB );
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fc49 	bl	800b75c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aeca:	e017      	b.n	800aefc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d103      	bne.n	800aede <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fc40 	bl	800b75c <vPortFree>
	}
 800aedc:	e00e      	b.n	800aefc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d009      	beq.n	800aefc <prvDeleteTCB+0x54>
 800aee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	60fb      	str	r3, [r7, #12]
 800aefa:	e7fe      	b.n	800aefa <prvDeleteTCB+0x52>
	}
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af0a:	4b0c      	ldr	r3, [pc, #48]	; (800af3c <prvResetNextTaskUnblockTime+0x38>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d104      	bne.n	800af1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af14:	4b0a      	ldr	r3, [pc, #40]	; (800af40 <prvResetNextTaskUnblockTime+0x3c>)
 800af16:	f04f 32ff 	mov.w	r2, #4294967295
 800af1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af1c:	e008      	b.n	800af30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af1e:	4b07      	ldr	r3, [pc, #28]	; (800af3c <prvResetNextTaskUnblockTime+0x38>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	4a04      	ldr	r2, [pc, #16]	; (800af40 <prvResetNextTaskUnblockTime+0x3c>)
 800af2e:	6013      	str	r3, [r2, #0]
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	200003cc 	.word	0x200003cc
 800af40:	20000434 	.word	0x20000434

0800af44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af4a:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <xTaskGetSchedulerState+0x34>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d102      	bne.n	800af58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af52:	2301      	movs	r3, #1
 800af54:	607b      	str	r3, [r7, #4]
 800af56:	e008      	b.n	800af6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af58:	4b08      	ldr	r3, [pc, #32]	; (800af7c <xTaskGetSchedulerState+0x38>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d102      	bne.n	800af66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af60:	2302      	movs	r3, #2
 800af62:	607b      	str	r3, [r7, #4]
 800af64:	e001      	b.n	800af6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af66:	2300      	movs	r3, #0
 800af68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af6a:	687b      	ldr	r3, [r7, #4]
	}
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr
 800af78:	20000420 	.word	0x20000420
 800af7c:	2000043c 	.word	0x2000043c

0800af80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af8c:	2300      	movs	r3, #0
 800af8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d06c      	beq.n	800b070 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af96:	4b39      	ldr	r3, [pc, #228]	; (800b07c <xTaskPriorityDisinherit+0xfc>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d009      	beq.n	800afb4 <xTaskPriorityDisinherit+0x34>
 800afa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	e7fe      	b.n	800afb2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d109      	bne.n	800afd0 <xTaskPriorityDisinherit+0x50>
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	60bb      	str	r3, [r7, #8]
 800afce:	e7fe      	b.n	800afce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afd4:	1e5a      	subs	r2, r3, #1
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d044      	beq.n	800b070 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afea:	2b00      	cmp	r3, #0
 800afec:	d140      	bne.n	800b070 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	3304      	adds	r3, #4
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fe fc60 	bl	80098b8 <uxListRemove>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d115      	bne.n	800b02a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b002:	491f      	ldr	r1, [pc, #124]	; (800b080 <xTaskPriorityDisinherit+0x100>)
 800b004:	4613      	mov	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	440b      	add	r3, r1
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10a      	bne.n	800b02a <xTaskPriorityDisinherit+0xaa>
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	2201      	movs	r2, #1
 800b01a:	fa02 f303 	lsl.w	r3, r2, r3
 800b01e:	43da      	mvns	r2, r3
 800b020:	4b18      	ldr	r3, [pc, #96]	; (800b084 <xTaskPriorityDisinherit+0x104>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4013      	ands	r3, r2
 800b026:	4a17      	ldr	r2, [pc, #92]	; (800b084 <xTaskPriorityDisinherit+0x104>)
 800b028:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b036:	f1c3 0207 	rsb	r2, r3, #7
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b042:	2201      	movs	r2, #1
 800b044:	409a      	lsls	r2, r3
 800b046:	4b0f      	ldr	r3, [pc, #60]	; (800b084 <xTaskPriorityDisinherit+0x104>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	4a0d      	ldr	r2, [pc, #52]	; (800b084 <xTaskPriorityDisinherit+0x104>)
 800b04e:	6013      	str	r3, [r2, #0]
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b054:	4613      	mov	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4a08      	ldr	r2, [pc, #32]	; (800b080 <xTaskPriorityDisinherit+0x100>)
 800b05e:	441a      	add	r2, r3
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	3304      	adds	r3, #4
 800b064:	4619      	mov	r1, r3
 800b066:	4610      	mov	r0, r2
 800b068:	f7fe fbc9 	bl	80097fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b06c:	2301      	movs	r3, #1
 800b06e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b070:	697b      	ldr	r3, [r7, #20]
	}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20000314 	.word	0x20000314
 800b080:	20000318 	.word	0x20000318
 800b084:	2000041c 	.word	0x2000041c

0800b088 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b092:	4b29      	ldr	r3, [pc, #164]	; (800b138 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b098:	4b28      	ldr	r3, [pc, #160]	; (800b13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3304      	adds	r3, #4
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe fc0a 	bl	80098b8 <uxListRemove>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10b      	bne.n	800b0c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b0aa:	4b24      	ldr	r3, [pc, #144]	; (800b13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b6:	43da      	mvns	r2, r3
 800b0b8:	4b21      	ldr	r3, [pc, #132]	; (800b140 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4013      	ands	r3, r2
 800b0be:	4a20      	ldr	r2, [pc, #128]	; (800b140 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b0c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c8:	d10a      	bne.n	800b0e0 <prvAddCurrentTaskToDelayedList+0x58>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d007      	beq.n	800b0e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0d0:	4b1a      	ldr	r3, [pc, #104]	; (800b13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	481a      	ldr	r0, [pc, #104]	; (800b144 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b0da:	f7fe fb90 	bl	80097fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b0de:	e026      	b.n	800b12e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b0e8:	4b14      	ldr	r3, [pc, #80]	; (800b13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d209      	bcs.n	800b10c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0f8:	4b13      	ldr	r3, [pc, #76]	; (800b148 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	3304      	adds	r3, #4
 800b102:	4619      	mov	r1, r3
 800b104:	4610      	mov	r0, r2
 800b106:	f7fe fb9e 	bl	8009846 <vListInsert>
}
 800b10a:	e010      	b.n	800b12e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b10c:	4b0f      	ldr	r3, [pc, #60]	; (800b14c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3304      	adds	r3, #4
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f7fe fb94 	bl	8009846 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b11e:	4b0c      	ldr	r3, [pc, #48]	; (800b150 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	429a      	cmp	r2, r3
 800b126:	d202      	bcs.n	800b12e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b128:	4a09      	ldr	r2, [pc, #36]	; (800b150 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	6013      	str	r3, [r2, #0]
}
 800b12e:	bf00      	nop
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20000418 	.word	0x20000418
 800b13c:	20000314 	.word	0x20000314
 800b140:	2000041c 	.word	0x2000041c
 800b144:	20000400 	.word	0x20000400
 800b148:	200003d0 	.word	0x200003d0
 800b14c:	200003cc 	.word	0x200003cc
 800b150:	20000434 	.word	0x20000434

0800b154 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3b04      	subs	r3, #4
 800b164:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b16c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3b04      	subs	r3, #4
 800b172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f023 0201 	bic.w	r2, r3, #1
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3b04      	subs	r3, #4
 800b182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b184:	4a0c      	ldr	r2, [pc, #48]	; (800b1b8 <pxPortInitialiseStack+0x64>)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	3b14      	subs	r3, #20
 800b18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3b04      	subs	r3, #4
 800b19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f06f 0202 	mvn.w	r2, #2
 800b1a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3b20      	subs	r3, #32
 800b1a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3714      	adds	r7, #20
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	0800b1bd 	.word	0x0800b1bd

0800b1bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1c6:	4b11      	ldr	r3, [pc, #68]	; (800b20c <prvTaskExitError+0x50>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ce:	d009      	beq.n	800b1e4 <prvTaskExitError+0x28>
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	e7fe      	b.n	800b1e2 <prvTaskExitError+0x26>
 800b1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1f6:	bf00      	nop
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d0fc      	beq.n	800b1f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1fe:	bf00      	nop
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	2000002c 	.word	0x2000002c

0800b210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b210:	4b07      	ldr	r3, [pc, #28]	; (800b230 <pxCurrentTCBConst2>)
 800b212:	6819      	ldr	r1, [r3, #0]
 800b214:	6808      	ldr	r0, [r1, #0]
 800b216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21a:	f380 8809 	msr	PSP, r0
 800b21e:	f3bf 8f6f 	isb	sy
 800b222:	f04f 0000 	mov.w	r0, #0
 800b226:	f380 8811 	msr	BASEPRI, r0
 800b22a:	4770      	bx	lr
 800b22c:	f3af 8000 	nop.w

0800b230 <pxCurrentTCBConst2>:
 800b230:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b234:	bf00      	nop
 800b236:	bf00      	nop

0800b238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b238:	4808      	ldr	r0, [pc, #32]	; (800b25c <prvPortStartFirstTask+0x24>)
 800b23a:	6800      	ldr	r0, [r0, #0]
 800b23c:	6800      	ldr	r0, [r0, #0]
 800b23e:	f380 8808 	msr	MSP, r0
 800b242:	f04f 0000 	mov.w	r0, #0
 800b246:	f380 8814 	msr	CONTROL, r0
 800b24a:	b662      	cpsie	i
 800b24c:	b661      	cpsie	f
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	df00      	svc	0
 800b258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b25a:	bf00      	nop
 800b25c:	e000ed08 	.word	0xe000ed08

0800b260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b266:	4b44      	ldr	r3, [pc, #272]	; (800b378 <xPortStartScheduler+0x118>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a44      	ldr	r2, [pc, #272]	; (800b37c <xPortStartScheduler+0x11c>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d109      	bne.n	800b284 <xPortStartScheduler+0x24>
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	613b      	str	r3, [r7, #16]
 800b282:	e7fe      	b.n	800b282 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b284:	4b3c      	ldr	r3, [pc, #240]	; (800b378 <xPortStartScheduler+0x118>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a3d      	ldr	r2, [pc, #244]	; (800b380 <xPortStartScheduler+0x120>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d109      	bne.n	800b2a2 <xPortStartScheduler+0x42>
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	e7fe      	b.n	800b2a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2a2:	4b38      	ldr	r3, [pc, #224]	; (800b384 <xPortStartScheduler+0x124>)
 800b2a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	22ff      	movs	r2, #255	; 0xff
 800b2b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2bc:	78fb      	ldrb	r3, [r7, #3]
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	4b30      	ldr	r3, [pc, #192]	; (800b388 <xPortStartScheduler+0x128>)
 800b2c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2ca:	4b30      	ldr	r3, [pc, #192]	; (800b38c <xPortStartScheduler+0x12c>)
 800b2cc:	2207      	movs	r2, #7
 800b2ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2d0:	e009      	b.n	800b2e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b2d2:	4b2e      	ldr	r3, [pc, #184]	; (800b38c <xPortStartScheduler+0x12c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	4a2c      	ldr	r2, [pc, #176]	; (800b38c <xPortStartScheduler+0x12c>)
 800b2da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2dc:	78fb      	ldrb	r3, [r7, #3]
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2e6:	78fb      	ldrb	r3, [r7, #3]
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ee:	2b80      	cmp	r3, #128	; 0x80
 800b2f0:	d0ef      	beq.n	800b2d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2f2:	4b26      	ldr	r3, [pc, #152]	; (800b38c <xPortStartScheduler+0x12c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f1c3 0307 	rsb	r3, r3, #7
 800b2fa:	2b04      	cmp	r3, #4
 800b2fc:	d009      	beq.n	800b312 <xPortStartScheduler+0xb2>
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	60bb      	str	r3, [r7, #8]
 800b310:	e7fe      	b.n	800b310 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b312:	4b1e      	ldr	r3, [pc, #120]	; (800b38c <xPortStartScheduler+0x12c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	021b      	lsls	r3, r3, #8
 800b318:	4a1c      	ldr	r2, [pc, #112]	; (800b38c <xPortStartScheduler+0x12c>)
 800b31a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b31c:	4b1b      	ldr	r3, [pc, #108]	; (800b38c <xPortStartScheduler+0x12c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b324:	4a19      	ldr	r2, [pc, #100]	; (800b38c <xPortStartScheduler+0x12c>)
 800b326:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b330:	4b17      	ldr	r3, [pc, #92]	; (800b390 <xPortStartScheduler+0x130>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a16      	ldr	r2, [pc, #88]	; (800b390 <xPortStartScheduler+0x130>)
 800b336:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b33a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b33c:	4b14      	ldr	r3, [pc, #80]	; (800b390 <xPortStartScheduler+0x130>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a13      	ldr	r2, [pc, #76]	; (800b390 <xPortStartScheduler+0x130>)
 800b342:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b346:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b348:	f000 f8d6 	bl	800b4f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b34c:	4b11      	ldr	r3, [pc, #68]	; (800b394 <xPortStartScheduler+0x134>)
 800b34e:	2200      	movs	r2, #0
 800b350:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b352:	f000 f8f5 	bl	800b540 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b356:	4b10      	ldr	r3, [pc, #64]	; (800b398 <xPortStartScheduler+0x138>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a0f      	ldr	r2, [pc, #60]	; (800b398 <xPortStartScheduler+0x138>)
 800b35c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b360:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b362:	f7ff ff69 	bl	800b238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b366:	f7ff fb91 	bl	800aa8c <vTaskSwitchContext>
	prvTaskExitError();
 800b36a:	f7ff ff27 	bl	800b1bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3718      	adds	r7, #24
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	e000ed00 	.word	0xe000ed00
 800b37c:	410fc271 	.word	0x410fc271
 800b380:	410fc270 	.word	0x410fc270
 800b384:	e000e400 	.word	0xe000e400
 800b388:	20000440 	.word	0x20000440
 800b38c:	20000444 	.word	0x20000444
 800b390:	e000ed20 	.word	0xe000ed20
 800b394:	2000002c 	.word	0x2000002c
 800b398:	e000ef34 	.word	0xe000ef34

0800b39c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3b4:	4b0e      	ldr	r3, [pc, #56]	; (800b3f0 <vPortEnterCritical+0x54>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	4a0d      	ldr	r2, [pc, #52]	; (800b3f0 <vPortEnterCritical+0x54>)
 800b3bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3be:	4b0c      	ldr	r3, [pc, #48]	; (800b3f0 <vPortEnterCritical+0x54>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d10e      	bne.n	800b3e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	; (800b3f4 <vPortEnterCritical+0x58>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d009      	beq.n	800b3e4 <vPortEnterCritical+0x48>
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	603b      	str	r3, [r7, #0]
 800b3e2:	e7fe      	b.n	800b3e2 <vPortEnterCritical+0x46>
	}
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	2000002c 	.word	0x2000002c
 800b3f4:	e000ed04 	.word	0xe000ed04

0800b3f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3fe:	4b11      	ldr	r3, [pc, #68]	; (800b444 <vPortExitCritical+0x4c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d109      	bne.n	800b41a <vPortExitCritical+0x22>
 800b406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40a:	f383 8811 	msr	BASEPRI, r3
 800b40e:	f3bf 8f6f 	isb	sy
 800b412:	f3bf 8f4f 	dsb	sy
 800b416:	607b      	str	r3, [r7, #4]
 800b418:	e7fe      	b.n	800b418 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b41a:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <vPortExitCritical+0x4c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	3b01      	subs	r3, #1
 800b420:	4a08      	ldr	r2, [pc, #32]	; (800b444 <vPortExitCritical+0x4c>)
 800b422:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b424:	4b07      	ldr	r3, [pc, #28]	; (800b444 <vPortExitCritical+0x4c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <vPortExitCritical+0x3e>
 800b42c:	2300      	movs	r3, #0
 800b42e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b436:	bf00      	nop
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	2000002c 	.word	0x2000002c
	...

0800b450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b450:	f3ef 8009 	mrs	r0, PSP
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	4b15      	ldr	r3, [pc, #84]	; (800b4b0 <pxCurrentTCBConst>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	f01e 0f10 	tst.w	lr, #16
 800b460:	bf08      	it	eq
 800b462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46a:	6010      	str	r0, [r2, #0]
 800b46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b474:	f380 8811 	msr	BASEPRI, r0
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f7ff fb04 	bl	800aa8c <vTaskSwitchContext>
 800b484:	f04f 0000 	mov.w	r0, #0
 800b488:	f380 8811 	msr	BASEPRI, r0
 800b48c:	bc09      	pop	{r0, r3}
 800b48e:	6819      	ldr	r1, [r3, #0]
 800b490:	6808      	ldr	r0, [r1, #0]
 800b492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b496:	f01e 0f10 	tst.w	lr, #16
 800b49a:	bf08      	it	eq
 800b49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4a0:	f380 8809 	msr	PSP, r0
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	f3af 8000 	nop.w

0800b4b0 <pxCurrentTCBConst>:
 800b4b0:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop

0800b4b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4d0:	f7ff fa24 	bl	800a91c <xTaskIncrementTick>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4da:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <SysTick_Handler+0x3c>)
 800b4dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4ec:	bf00      	nop
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	e000ed04 	.word	0xe000ed04

0800b4f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4fc:	4b0b      	ldr	r3, [pc, #44]	; (800b52c <vPortSetupTimerInterrupt+0x34>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b502:	4b0b      	ldr	r3, [pc, #44]	; (800b530 <vPortSetupTimerInterrupt+0x38>)
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b508:	4b0a      	ldr	r3, [pc, #40]	; (800b534 <vPortSetupTimerInterrupt+0x3c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a0a      	ldr	r2, [pc, #40]	; (800b538 <vPortSetupTimerInterrupt+0x40>)
 800b50e:	fba2 2303 	umull	r2, r3, r2, r3
 800b512:	099b      	lsrs	r3, r3, #6
 800b514:	4a09      	ldr	r2, [pc, #36]	; (800b53c <vPortSetupTimerInterrupt+0x44>)
 800b516:	3b01      	subs	r3, #1
 800b518:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b51a:	4b04      	ldr	r3, [pc, #16]	; (800b52c <vPortSetupTimerInterrupt+0x34>)
 800b51c:	2207      	movs	r2, #7
 800b51e:	601a      	str	r2, [r3, #0]
}
 800b520:	bf00      	nop
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	e000e010 	.word	0xe000e010
 800b530:	e000e018 	.word	0xe000e018
 800b534:	20000000 	.word	0x20000000
 800b538:	10624dd3 	.word	0x10624dd3
 800b53c:	e000e014 	.word	0xe000e014

0800b540 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b540:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b550 <vPortEnableVFP+0x10>
 800b544:	6801      	ldr	r1, [r0, #0]
 800b546:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b54a:	6001      	str	r1, [r0, #0]
 800b54c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b54e:	bf00      	nop
 800b550:	e000ed88 	.word	0xe000ed88

0800b554 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b55a:	f3ef 8305 	mrs	r3, IPSR
 800b55e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b0f      	cmp	r3, #15
 800b564:	d913      	bls.n	800b58e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b566:	4a16      	ldr	r2, [pc, #88]	; (800b5c0 <vPortValidateInterruptPriority+0x6c>)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	4413      	add	r3, r2
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b570:	4b14      	ldr	r3, [pc, #80]	; (800b5c4 <vPortValidateInterruptPriority+0x70>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	7afa      	ldrb	r2, [r7, #11]
 800b576:	429a      	cmp	r2, r3
 800b578:	d209      	bcs.n	800b58e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	607b      	str	r3, [r7, #4]
 800b58c:	e7fe      	b.n	800b58c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b58e:	4b0e      	ldr	r3, [pc, #56]	; (800b5c8 <vPortValidateInterruptPriority+0x74>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b596:	4b0d      	ldr	r3, [pc, #52]	; (800b5cc <vPortValidateInterruptPriority+0x78>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d909      	bls.n	800b5b2 <vPortValidateInterruptPriority+0x5e>
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	603b      	str	r3, [r7, #0]
 800b5b0:	e7fe      	b.n	800b5b0 <vPortValidateInterruptPriority+0x5c>
	}
 800b5b2:	bf00      	nop
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	e000e3f0 	.word	0xe000e3f0
 800b5c4:	20000440 	.word	0x20000440
 800b5c8:	e000ed0c 	.word	0xe000ed0c
 800b5cc:	20000444 	.word	0x20000444

0800b5d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08a      	sub	sp, #40	; 0x28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5dc:	f7ff f8f4 	bl	800a7c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5e0:	4b59      	ldr	r3, [pc, #356]	; (800b748 <pvPortMalloc+0x178>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5e8:	f000 f910 	bl	800b80c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5ec:	4b57      	ldr	r3, [pc, #348]	; (800b74c <pvPortMalloc+0x17c>)
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f040 808c 	bne.w	800b712 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d01c      	beq.n	800b63a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b600:	2208      	movs	r2, #8
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4413      	add	r3, r2
 800b606:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f003 0307 	and.w	r3, r3, #7
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d013      	beq.n	800b63a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f023 0307 	bic.w	r3, r3, #7
 800b618:	3308      	adds	r3, #8
 800b61a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f003 0307 	and.w	r3, r3, #7
 800b622:	2b00      	cmp	r3, #0
 800b624:	d009      	beq.n	800b63a <pvPortMalloc+0x6a>
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	617b      	str	r3, [r7, #20]
 800b638:	e7fe      	b.n	800b638 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d068      	beq.n	800b712 <pvPortMalloc+0x142>
 800b640:	4b43      	ldr	r3, [pc, #268]	; (800b750 <pvPortMalloc+0x180>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	429a      	cmp	r2, r3
 800b648:	d863      	bhi.n	800b712 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b64a:	4b42      	ldr	r3, [pc, #264]	; (800b754 <pvPortMalloc+0x184>)
 800b64c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b64e:	4b41      	ldr	r3, [pc, #260]	; (800b754 <pvPortMalloc+0x184>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b654:	e004      	b.n	800b660 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	429a      	cmp	r2, r3
 800b668:	d903      	bls.n	800b672 <pvPortMalloc+0xa2>
 800b66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1f1      	bne.n	800b656 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b672:	4b35      	ldr	r3, [pc, #212]	; (800b748 <pvPortMalloc+0x178>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b678:	429a      	cmp	r2, r3
 800b67a:	d04a      	beq.n	800b712 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b67c:	6a3b      	ldr	r3, [r7, #32]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2208      	movs	r2, #8
 800b682:	4413      	add	r3, r2
 800b684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	685a      	ldr	r2, [r3, #4]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	1ad2      	subs	r2, r2, r3
 800b696:	2308      	movs	r3, #8
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d91e      	bls.n	800b6dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b69e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	f003 0307 	and.w	r3, r3, #7
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d009      	beq.n	800b6c4 <pvPortMalloc+0xf4>
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	613b      	str	r3, [r7, #16]
 800b6c2:	e7fe      	b.n	800b6c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	1ad2      	subs	r2, r2, r3
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6d6:	69b8      	ldr	r0, [r7, #24]
 800b6d8:	f000 f8fa 	bl	800b8d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6dc:	4b1c      	ldr	r3, [pc, #112]	; (800b750 <pvPortMalloc+0x180>)
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	4a1a      	ldr	r2, [pc, #104]	; (800b750 <pvPortMalloc+0x180>)
 800b6e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6ea:	4b19      	ldr	r3, [pc, #100]	; (800b750 <pvPortMalloc+0x180>)
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	4b1a      	ldr	r3, [pc, #104]	; (800b758 <pvPortMalloc+0x188>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d203      	bcs.n	800b6fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6f6:	4b16      	ldr	r3, [pc, #88]	; (800b750 <pvPortMalloc+0x180>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a17      	ldr	r2, [pc, #92]	; (800b758 <pvPortMalloc+0x188>)
 800b6fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b700:	685a      	ldr	r2, [r3, #4]
 800b702:	4b12      	ldr	r3, [pc, #72]	; (800b74c <pvPortMalloc+0x17c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	431a      	orrs	r2, r3
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70e:	2200      	movs	r2, #0
 800b710:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b712:	f7ff f867 	bl	800a7e4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d101      	bne.n	800b720 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b71c:	f7f4 fefa 	bl	8000514 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	f003 0307 	and.w	r3, r3, #7
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <pvPortMalloc+0x16e>
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	e7fe      	b.n	800b73c <pvPortMalloc+0x16c>
	return pvReturn;
 800b73e:	69fb      	ldr	r3, [r7, #28]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3728      	adds	r7, #40	; 0x28
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	20008450 	.word	0x20008450
 800b74c:	2000845c 	.word	0x2000845c
 800b750:	20008454 	.word	0x20008454
 800b754:	20008448 	.word	0x20008448
 800b758:	20008458 	.word	0x20008458

0800b75c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d046      	beq.n	800b7fc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b76e:	2308      	movs	r3, #8
 800b770:	425b      	negs	r3, r3
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	4413      	add	r3, r2
 800b776:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	4b20      	ldr	r3, [pc, #128]	; (800b804 <vPortFree+0xa8>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4013      	ands	r3, r2
 800b786:	2b00      	cmp	r3, #0
 800b788:	d109      	bne.n	800b79e <vPortFree+0x42>
 800b78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	e7fe      	b.n	800b79c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d009      	beq.n	800b7ba <vPortFree+0x5e>
 800b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60bb      	str	r3, [r7, #8]
 800b7b8:	e7fe      	b.n	800b7b8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	4b11      	ldr	r3, [pc, #68]	; (800b804 <vPortFree+0xa8>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d019      	beq.n	800b7fc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d115      	bne.n	800b7fc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	4b0b      	ldr	r3, [pc, #44]	; (800b804 <vPortFree+0xa8>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	43db      	mvns	r3, r3
 800b7da:	401a      	ands	r2, r3
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7e0:	f7fe fff2 	bl	800a7c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	685a      	ldr	r2, [r3, #4]
 800b7e8:	4b07      	ldr	r3, [pc, #28]	; (800b808 <vPortFree+0xac>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	4a06      	ldr	r2, [pc, #24]	; (800b808 <vPortFree+0xac>)
 800b7f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7f2:	6938      	ldr	r0, [r7, #16]
 800b7f4:	f000 f86c 	bl	800b8d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b7f8:	f7fe fff4 	bl	800a7e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7fc:	bf00      	nop
 800b7fe:	3718      	adds	r7, #24
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	2000845c 	.word	0x2000845c
 800b808:	20008454 	.word	0x20008454

0800b80c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b816:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b818:	4b27      	ldr	r3, [pc, #156]	; (800b8b8 <prvHeapInit+0xac>)
 800b81a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f003 0307 	and.w	r3, r3, #7
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00c      	beq.n	800b840 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	3307      	adds	r3, #7
 800b82a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f023 0307 	bic.w	r3, r3, #7
 800b832:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	4a1f      	ldr	r2, [pc, #124]	; (800b8b8 <prvHeapInit+0xac>)
 800b83c:	4413      	add	r3, r2
 800b83e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b844:	4a1d      	ldr	r2, [pc, #116]	; (800b8bc <prvHeapInit+0xb0>)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b84a:	4b1c      	ldr	r3, [pc, #112]	; (800b8bc <prvHeapInit+0xb0>)
 800b84c:	2200      	movs	r2, #0
 800b84e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	4413      	add	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b858:	2208      	movs	r2, #8
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	1a9b      	subs	r3, r3, r2
 800b85e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f023 0307 	bic.w	r3, r3, #7
 800b866:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4a15      	ldr	r2, [pc, #84]	; (800b8c0 <prvHeapInit+0xb4>)
 800b86c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b86e:	4b14      	ldr	r3, [pc, #80]	; (800b8c0 <prvHeapInit+0xb4>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2200      	movs	r2, #0
 800b874:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b876:	4b12      	ldr	r3, [pc, #72]	; (800b8c0 <prvHeapInit+0xb4>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2200      	movs	r2, #0
 800b87c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	1ad2      	subs	r2, r2, r3
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b88c:	4b0c      	ldr	r3, [pc, #48]	; (800b8c0 <prvHeapInit+0xb4>)
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	4a0a      	ldr	r2, [pc, #40]	; (800b8c4 <prvHeapInit+0xb8>)
 800b89a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	4a09      	ldr	r2, [pc, #36]	; (800b8c8 <prvHeapInit+0xbc>)
 800b8a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8a4:	4b09      	ldr	r3, [pc, #36]	; (800b8cc <prvHeapInit+0xc0>)
 800b8a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8aa:	601a      	str	r2, [r3, #0]
}
 800b8ac:	bf00      	nop
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	20000448 	.word	0x20000448
 800b8bc:	20008448 	.word	0x20008448
 800b8c0:	20008450 	.word	0x20008450
 800b8c4:	20008458 	.word	0x20008458
 800b8c8:	20008454 	.word	0x20008454
 800b8cc:	2000845c 	.word	0x2000845c

0800b8d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8d8:	4b28      	ldr	r3, [pc, #160]	; (800b97c <prvInsertBlockIntoFreeList+0xac>)
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	e002      	b.n	800b8e4 <prvInsertBlockIntoFreeList+0x14>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d8f7      	bhi.n	800b8de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d108      	bne.n	800b912 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	441a      	add	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	441a      	add	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	429a      	cmp	r2, r3
 800b924:	d118      	bne.n	800b958 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	4b15      	ldr	r3, [pc, #84]	; (800b980 <prvInsertBlockIntoFreeList+0xb0>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d00d      	beq.n	800b94e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	441a      	add	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	e008      	b.n	800b960 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b94e:	4b0c      	ldr	r3, [pc, #48]	; (800b980 <prvInsertBlockIntoFreeList+0xb0>)
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	601a      	str	r2, [r3, #0]
 800b956:	e003      	b.n	800b960 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	429a      	cmp	r2, r3
 800b966:	d002      	beq.n	800b96e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b96e:	bf00      	nop
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	20008448 	.word	0x20008448
 800b980:	20008450 	.word	0x20008450

0800b984 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800b988:	2200      	movs	r2, #0
 800b98a:	490e      	ldr	r1, [pc, #56]	; (800b9c4 <MX_USB_HOST_Init+0x40>)
 800b98c:	480e      	ldr	r0, [pc, #56]	; (800b9c8 <MX_USB_HOST_Init+0x44>)
 800b98e:	f7fc f80d 	bl	80079ac <USBH_Init>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d001      	beq.n	800b99c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b998:	f7f5 f9da 	bl	8000d50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800b99c:	490b      	ldr	r1, [pc, #44]	; (800b9cc <MX_USB_HOST_Init+0x48>)
 800b99e:	480a      	ldr	r0, [pc, #40]	; (800b9c8 <MX_USB_HOST_Init+0x44>)
 800b9a0:	f7fc f8ba 	bl	8007b18 <USBH_RegisterClass>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b9aa:	f7f5 f9d1 	bl	8000d50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800b9ae:	4806      	ldr	r0, [pc, #24]	; (800b9c8 <MX_USB_HOST_Init+0x44>)
 800b9b0:	f7fc f93e 	bl	8007c30 <USBH_Start>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b9ba:	f7f5 f9c9 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b9be:	bf00      	nop
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	0800b9d1 	.word	0x0800b9d1
 800b9c8:	20008704 	.word	0x20008704
 800b9cc:	2000000c 	.word	0x2000000c

0800b9d0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b9dc:	78fb      	ldrb	r3, [r7, #3]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	2b04      	cmp	r3, #4
 800b9e2:	d819      	bhi.n	800ba18 <USBH_UserProcess+0x48>
 800b9e4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ec <USBH_UserProcess+0x1c>)
 800b9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ea:	bf00      	nop
 800b9ec:	0800ba19 	.word	0x0800ba19
 800b9f0:	0800ba09 	.word	0x0800ba09
 800b9f4:	0800ba19 	.word	0x0800ba19
 800b9f8:	0800ba11 	.word	0x0800ba11
 800b9fc:	0800ba01 	.word	0x0800ba01
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ba00:	4b09      	ldr	r3, [pc, #36]	; (800ba28 <USBH_UserProcess+0x58>)
 800ba02:	2203      	movs	r2, #3
 800ba04:	701a      	strb	r2, [r3, #0]
  break;
 800ba06:	e008      	b.n	800ba1a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ba08:	4b07      	ldr	r3, [pc, #28]	; (800ba28 <USBH_UserProcess+0x58>)
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	701a      	strb	r2, [r3, #0]
  break;
 800ba0e:	e004      	b.n	800ba1a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ba10:	4b05      	ldr	r3, [pc, #20]	; (800ba28 <USBH_UserProcess+0x58>)
 800ba12:	2201      	movs	r2, #1
 800ba14:	701a      	strb	r2, [r3, #0]
  break;
 800ba16:	e000      	b.n	800ba1a <USBH_UserProcess+0x4a>

  default:
  break;
 800ba18:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ba1a:	bf00      	nop
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	20008460 	.word	0x20008460

0800ba2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b08a      	sub	sp, #40	; 0x28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba34:	f107 0314 	add.w	r3, r7, #20
 800ba38:	2200      	movs	r2, #0
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	605a      	str	r2, [r3, #4]
 800ba3e:	609a      	str	r2, [r3, #8]
 800ba40:	60da      	str	r2, [r3, #12]
 800ba42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a24      	ldr	r2, [pc, #144]	; (800badc <HAL_HCD_MspInit+0xb0>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d141      	bne.n	800bad2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba4e:	2300      	movs	r3, #0
 800ba50:	613b      	str	r3, [r7, #16]
 800ba52:	4b23      	ldr	r3, [pc, #140]	; (800bae0 <HAL_HCD_MspInit+0xb4>)
 800ba54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba56:	4a22      	ldr	r2, [pc, #136]	; (800bae0 <HAL_HCD_MspInit+0xb4>)
 800ba58:	f043 0302 	orr.w	r3, r3, #2
 800ba5c:	6313      	str	r3, [r2, #48]	; 0x30
 800ba5e:	4b20      	ldr	r3, [pc, #128]	; (800bae0 <HAL_HCD_MspInit+0xb4>)
 800ba60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba62:	f003 0302 	and.w	r3, r3, #2
 800ba66:	613b      	str	r3, [r7, #16]
 800ba68:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800ba6a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800ba6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba70:	2302      	movs	r3, #2
 800ba72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba74:	2300      	movs	r3, #0
 800ba76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ba7c:	230c      	movs	r3, #12
 800ba7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ba80:	f107 0314 	add.w	r3, r7, #20
 800ba84:	4619      	mov	r1, r3
 800ba86:	4817      	ldr	r0, [pc, #92]	; (800bae4 <HAL_HCD_MspInit+0xb8>)
 800ba88:	f7f6 f904 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800ba8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba92:	2300      	movs	r3, #0
 800ba94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ba9a:	f107 0314 	add.w	r3, r7, #20
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4810      	ldr	r0, [pc, #64]	; (800bae4 <HAL_HCD_MspInit+0xb8>)
 800baa2:	f7f6 f8f7 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <HAL_HCD_MspInit+0xb4>)
 800baac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baae:	4a0c      	ldr	r2, [pc, #48]	; (800bae0 <HAL_HCD_MspInit+0xb4>)
 800bab0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bab4:	6313      	str	r3, [r2, #48]	; 0x30
 800bab6:	4b0a      	ldr	r3, [pc, #40]	; (800bae0 <HAL_HCD_MspInit+0xb4>)
 800bab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800bac2:	2200      	movs	r2, #0
 800bac4:	2105      	movs	r1, #5
 800bac6:	204d      	movs	r0, #77	; 0x4d
 800bac8:	f7f5 feb2 	bl	8001830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bacc:	204d      	movs	r0, #77	; 0x4d
 800bace:	f7f5 fecb 	bl	8001868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bad2:	bf00      	nop
 800bad4:	3728      	adds	r7, #40	; 0x28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	40040000 	.word	0x40040000
 800bae0:	40023800 	.word	0x40023800
 800bae4:	40020400 	.word	0x40020400

0800bae8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fc fd47 	bl	800858a <USBH_LL_IncTimer>
}
 800bafc:	bf00      	nop
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fc fd8b 	bl	800862e <USBH_LL_Connect>
}
 800bb18:	bf00      	nop
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fc fda0 	bl	8008674 <USBH_LL_Disconnect>
}
 800bb34:	bf00      	nop
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	460b      	mov	r3, r1
 800bb46:	70fb      	strb	r3, [r7, #3]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fc fdd5 	bl	8008702 <USBH_LL_NotifyURBChange>
#endif
}
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fc fd35 	bl	80085de <USBH_LL_PortEnabled>
} 
 800bb74:	bf00      	nop
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fc fd41 	bl	8008612 <USBH_LL_PortDisabled>
} 
 800bb90:	bf00      	nop
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d132      	bne.n	800bc10 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800bbaa:	4a1c      	ldr	r2, [pc, #112]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a19      	ldr	r2, [pc, #100]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbb6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800bbba:	4b18      	ldr	r3, [pc, #96]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbbc:	4a18      	ldr	r2, [pc, #96]	; (800bc20 <USBH_LL_Init+0x88>)
 800bbbe:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800bbc0:	4b16      	ldr	r3, [pc, #88]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbc2:	220c      	movs	r2, #12
 800bbc4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800bbc6:	4b15      	ldr	r3, [pc, #84]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbc8:	2201      	movs	r2, #1
 800bbca:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800bbcc:	4b13      	ldr	r3, [pc, #76]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800bbd2:	4b12      	ldr	r3, [pc, #72]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800bbd8:	4b10      	ldr	r3, [pc, #64]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800bbde:	4b0f      	ldr	r3, [pc, #60]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800bbe4:	4b0d      	ldr	r3, [pc, #52]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800bbea:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbec:	2200      	movs	r2, #0
 800bbee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800bbf0:	480a      	ldr	r0, [pc, #40]	; (800bc1c <USBH_LL_Init+0x84>)
 800bbf2:	f7f6 fa12 	bl	800201a <HAL_HCD_Init>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800bbfc:	f7f5 f8a8 	bl	8000d50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800bc00:	4806      	ldr	r0, [pc, #24]	; (800bc1c <USBH_LL_Init+0x84>)
 800bc02:	f7f6 fe15 	bl	8002830 <HAL_HCD_GetCurrentFrame>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7fc fcae 	bl	800856c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20008ae8 	.word	0x20008ae8
 800bc20:	40040000 	.word	0x40040000

0800bc24 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7f6 fd80 	bl	8002740 <HAL_HCD_Start>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc44:	7bfb      	ldrb	r3, [r7, #15]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 f95c 	bl	800bf04 <USBH_Get_USB_Status>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bc50:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b084      	sub	sp, #16
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7f6 fd88 	bl	8002786 <HAL_HCD_Stop>
 800bc76:	4603      	mov	r3, r0
 800bc78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 f941 	bl	800bf04 <USBH_Get_USB_Status>
 800bc82:	4603      	mov	r3, r0
 800bc84:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7f6 fdd2 	bl	800284c <HAL_HCD_GetCurrentSpeed>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d007      	beq.n	800bcbe <USBH_LL_GetSpeed+0x2e>
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d302      	bcc.n	800bcb8 <USBH_LL_GetSpeed+0x28>
 800bcb2:	2b02      	cmp	r3, #2
 800bcb4:	d006      	beq.n	800bcc4 <USBH_LL_GetSpeed+0x34>
 800bcb6:	e008      	b.n	800bcca <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	73fb      	strb	r3, [r7, #15]
    break;
 800bcbc:	e008      	b.n	800bcd0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc2:	e005      	b.n	800bcd0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bcc4:	2302      	movs	r3, #2
 800bcc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc8:	e002      	b.n	800bcd0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800bcca:	2301      	movs	r3, #1
 800bccc:	73fb      	strb	r3, [r7, #15]
    break;
 800bcce:	bf00      	nop
  }
  return  speed;
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7f6 fd65 	bl	80027c0 <HAL_HCD_ResetPort>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f000 f901 	bl	800bf04 <USBH_Get_USB_Status>
 800bd02:	4603      	mov	r3, r0
 800bd04:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bd06:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd22:	78fa      	ldrb	r2, [r7, #3]
 800bd24:	4611      	mov	r1, r2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7f6 fd6d 	bl	8002806 <HAL_HCD_HC_GetXferCount>
 800bd2c:	4603      	mov	r3, r0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd36:	b590      	push	{r4, r7, lr}
 800bd38:	b089      	sub	sp, #36	; 0x24
 800bd3a:	af04      	add	r7, sp, #16
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	4608      	mov	r0, r1
 800bd40:	4611      	mov	r1, r2
 800bd42:	461a      	mov	r2, r3
 800bd44:	4603      	mov	r3, r0
 800bd46:	70fb      	strb	r3, [r7, #3]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	70bb      	strb	r3, [r7, #2]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bd5e:	787c      	ldrb	r4, [r7, #1]
 800bd60:	78ba      	ldrb	r2, [r7, #2]
 800bd62:	78f9      	ldrb	r1, [r7, #3]
 800bd64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	4623      	mov	r3, r4
 800bd76:	f7f6 f9b2 	bl	80020de <HAL_HCD_HC_Init>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 f8bf 	bl	800bf04 <USBH_Get_USB_Status>
 800bd86:	4603      	mov	r3, r0
 800bd88:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bd8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd90      	pop	{r4, r7, pc}

0800bd94 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bdae:	78fa      	ldrb	r2, [r7, #3]
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7f6 fa2b 	bl	800220e <HAL_HCD_HC_Halt>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 f8a0 	bl	800bf04 <USBH_Get_USB_Status>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bdd2:	b590      	push	{r4, r7, lr}
 800bdd4:	b089      	sub	sp, #36	; 0x24
 800bdd6:	af04      	add	r7, sp, #16
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	4608      	mov	r0, r1
 800bddc:	4611      	mov	r1, r2
 800bdde:	461a      	mov	r2, r3
 800bde0:	4603      	mov	r3, r0
 800bde2:	70fb      	strb	r3, [r7, #3]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70bb      	strb	r3, [r7, #2]
 800bde8:	4613      	mov	r3, r2
 800bdea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bdfa:	787c      	ldrb	r4, [r7, #1]
 800bdfc:	78ba      	ldrb	r2, [r7, #2]
 800bdfe:	78f9      	ldrb	r1, [r7, #3]
 800be00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800be04:	9303      	str	r3, [sp, #12]
 800be06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800be08:	9302      	str	r3, [sp, #8]
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	4623      	mov	r3, r4
 800be16:	f7f6 fa1d 	bl	8002254 <HAL_HCD_HC_SubmitRequest>
 800be1a:	4603      	mov	r3, r0
 800be1c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	4618      	mov	r0, r3
 800be22:	f000 f86f 	bl	800bf04 <USBH_Get_USB_Status>
 800be26:	4603      	mov	r3, r0
 800be28:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800be2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3714      	adds	r7, #20
 800be30:	46bd      	mov	sp, r7
 800be32:	bd90      	pop	{r4, r7, pc}

0800be34 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be46:	78fa      	ldrb	r2, [r7, #3]
 800be48:	4611      	mov	r1, r2
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7f6 fcc6 	bl	80027dc <HAL_HCD_HC_GetURBState>
 800be50:	4603      	mov	r3, r0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b082      	sub	sp, #8
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d103      	bne.n	800be78 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800be70:	78fb      	ldrb	r3, [r7, #3]
 800be72:	4618      	mov	r0, r3
 800be74:	f000 f872 	bl	800bf5c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800be78:	20c8      	movs	r0, #200	; 0xc8
 800be7a:	f7f5 fbff 	bl	800167c <HAL_Delay>
  return USBH_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
 800be94:	4613      	mov	r3, r2
 800be96:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be9e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bea0:	78fa      	ldrb	r2, [r7, #3]
 800bea2:	68f9      	ldr	r1, [r7, #12]
 800bea4:	4613      	mov	r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	00db      	lsls	r3, r3, #3
 800beac:	440b      	add	r3, r1
 800beae:	333b      	adds	r3, #59	; 0x3b
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00a      	beq.n	800becc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800beb6:	78fa      	ldrb	r2, [r7, #3]
 800beb8:	68f9      	ldr	r1, [r7, #12]
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	440b      	add	r3, r1
 800bec4:	3350      	adds	r3, #80	; 0x50
 800bec6:	78ba      	ldrb	r2, [r7, #2]
 800bec8:	701a      	strb	r2, [r3, #0]
 800beca:	e009      	b.n	800bee0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800becc:	78fa      	ldrb	r2, [r7, #3]
 800bece:	68f9      	ldr	r1, [r7, #12]
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	00db      	lsls	r3, r3, #3
 800bed8:	440b      	add	r3, r1
 800beda:	3351      	adds	r3, #81	; 0x51
 800bedc:	78ba      	ldrb	r2, [r7, #2]
 800bede:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b082      	sub	sp, #8
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7f5 fbc0 	bl	800167c <HAL_Delay>
}
 800befc:	bf00      	nop
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	2b03      	cmp	r3, #3
 800bf16:	d817      	bhi.n	800bf48 <USBH_Get_USB_Status+0x44>
 800bf18:	a201      	add	r2, pc, #4	; (adr r2, 800bf20 <USBH_Get_USB_Status+0x1c>)
 800bf1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1e:	bf00      	nop
 800bf20:	0800bf31 	.word	0x0800bf31
 800bf24:	0800bf37 	.word	0x0800bf37
 800bf28:	0800bf3d 	.word	0x0800bf3d
 800bf2c:	0800bf43 	.word	0x0800bf43
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	73fb      	strb	r3, [r7, #15]
    break;
 800bf34:	e00b      	b.n	800bf4e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bf36:	2302      	movs	r3, #2
 800bf38:	73fb      	strb	r3, [r7, #15]
    break;
 800bf3a:	e008      	b.n	800bf4e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf40:	e005      	b.n	800bf4e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bf42:	2302      	movs	r3, #2
 800bf44:	73fb      	strb	r3, [r7, #15]
    break;
 800bf46:	e002      	b.n	800bf4e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bf48:	2302      	movs	r3, #2
 800bf4a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf4c:	bf00      	nop
  }
  return usb_status;
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{ 
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800bf66:	79fb      	ldrb	r3, [r7, #7]
 800bf68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d102      	bne.n	800bf76 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800bf70:	2301      	movs	r3, #1
 800bf72:	73fb      	strb	r3, [r7, #15]
 800bf74:	e001      	b.n	800bf7a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800bf76:	2300      	movs	r3, #0
 800bf78:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800bf7a:	7bfb      	ldrb	r3, [r7, #15]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	2110      	movs	r1, #16
 800bf80:	4803      	ldr	r0, [pc, #12]	; (800bf90 <MX_DriverVbusHS+0x34>)
 800bf82:	f7f6 f831 	bl	8001fe8 <HAL_GPIO_WritePin>
}
 800bf86:	bf00      	nop
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	40020800 	.word	0x40020800

0800bf94 <__errno>:
 800bf94:	4b01      	ldr	r3, [pc, #4]	; (800bf9c <__errno+0x8>)
 800bf96:	6818      	ldr	r0, [r3, #0]
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	20000030 	.word	0x20000030

0800bfa0 <__libc_init_array>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	4e0d      	ldr	r6, [pc, #52]	; (800bfd8 <__libc_init_array+0x38>)
 800bfa4:	4c0d      	ldr	r4, [pc, #52]	; (800bfdc <__libc_init_array+0x3c>)
 800bfa6:	1ba4      	subs	r4, r4, r6
 800bfa8:	10a4      	asrs	r4, r4, #2
 800bfaa:	2500      	movs	r5, #0
 800bfac:	42a5      	cmp	r5, r4
 800bfae:	d109      	bne.n	800bfc4 <__libc_init_array+0x24>
 800bfb0:	4e0b      	ldr	r6, [pc, #44]	; (800bfe0 <__libc_init_array+0x40>)
 800bfb2:	4c0c      	ldr	r4, [pc, #48]	; (800bfe4 <__libc_init_array+0x44>)
 800bfb4:	f000 f8f6 	bl	800c1a4 <_init>
 800bfb8:	1ba4      	subs	r4, r4, r6
 800bfba:	10a4      	asrs	r4, r4, #2
 800bfbc:	2500      	movs	r5, #0
 800bfbe:	42a5      	cmp	r5, r4
 800bfc0:	d105      	bne.n	800bfce <__libc_init_array+0x2e>
 800bfc2:	bd70      	pop	{r4, r5, r6, pc}
 800bfc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfc8:	4798      	blx	r3
 800bfca:	3501      	adds	r5, #1
 800bfcc:	e7ee      	b.n	800bfac <__libc_init_array+0xc>
 800bfce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bfd2:	4798      	blx	r3
 800bfd4:	3501      	adds	r5, #1
 800bfd6:	e7f2      	b.n	800bfbe <__libc_init_array+0x1e>
 800bfd8:	0800c248 	.word	0x0800c248
 800bfdc:	0800c248 	.word	0x0800c248
 800bfe0:	0800c248 	.word	0x0800c248
 800bfe4:	0800c24c 	.word	0x0800c24c

0800bfe8 <malloc>:
 800bfe8:	4b02      	ldr	r3, [pc, #8]	; (800bff4 <malloc+0xc>)
 800bfea:	4601      	mov	r1, r0
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	f000 b86d 	b.w	800c0cc <_malloc_r>
 800bff2:	bf00      	nop
 800bff4:	20000030 	.word	0x20000030

0800bff8 <free>:
 800bff8:	4b02      	ldr	r3, [pc, #8]	; (800c004 <free+0xc>)
 800bffa:	4601      	mov	r1, r0
 800bffc:	6818      	ldr	r0, [r3, #0]
 800bffe:	f000 b817 	b.w	800c030 <_free_r>
 800c002:	bf00      	nop
 800c004:	20000030 	.word	0x20000030

0800c008 <memcpy>:
 800c008:	b510      	push	{r4, lr}
 800c00a:	1e43      	subs	r3, r0, #1
 800c00c:	440a      	add	r2, r1
 800c00e:	4291      	cmp	r1, r2
 800c010:	d100      	bne.n	800c014 <memcpy+0xc>
 800c012:	bd10      	pop	{r4, pc}
 800c014:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c01c:	e7f7      	b.n	800c00e <memcpy+0x6>

0800c01e <memset>:
 800c01e:	4402      	add	r2, r0
 800c020:	4603      	mov	r3, r0
 800c022:	4293      	cmp	r3, r2
 800c024:	d100      	bne.n	800c028 <memset+0xa>
 800c026:	4770      	bx	lr
 800c028:	f803 1b01 	strb.w	r1, [r3], #1
 800c02c:	e7f9      	b.n	800c022 <memset+0x4>
	...

0800c030 <_free_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4605      	mov	r5, r0
 800c034:	2900      	cmp	r1, #0
 800c036:	d045      	beq.n	800c0c4 <_free_r+0x94>
 800c038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c03c:	1f0c      	subs	r4, r1, #4
 800c03e:	2b00      	cmp	r3, #0
 800c040:	bfb8      	it	lt
 800c042:	18e4      	addlt	r4, r4, r3
 800c044:	f000 f8ac 	bl	800c1a0 <__malloc_lock>
 800c048:	4a1f      	ldr	r2, [pc, #124]	; (800c0c8 <_free_r+0x98>)
 800c04a:	6813      	ldr	r3, [r2, #0]
 800c04c:	4610      	mov	r0, r2
 800c04e:	b933      	cbnz	r3, 800c05e <_free_r+0x2e>
 800c050:	6063      	str	r3, [r4, #4]
 800c052:	6014      	str	r4, [r2, #0]
 800c054:	4628      	mov	r0, r5
 800c056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c05a:	f000 b8a2 	b.w	800c1a2 <__malloc_unlock>
 800c05e:	42a3      	cmp	r3, r4
 800c060:	d90c      	bls.n	800c07c <_free_r+0x4c>
 800c062:	6821      	ldr	r1, [r4, #0]
 800c064:	1862      	adds	r2, r4, r1
 800c066:	4293      	cmp	r3, r2
 800c068:	bf04      	itt	eq
 800c06a:	681a      	ldreq	r2, [r3, #0]
 800c06c:	685b      	ldreq	r3, [r3, #4]
 800c06e:	6063      	str	r3, [r4, #4]
 800c070:	bf04      	itt	eq
 800c072:	1852      	addeq	r2, r2, r1
 800c074:	6022      	streq	r2, [r4, #0]
 800c076:	6004      	str	r4, [r0, #0]
 800c078:	e7ec      	b.n	800c054 <_free_r+0x24>
 800c07a:	4613      	mov	r3, r2
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	b10a      	cbz	r2, 800c084 <_free_r+0x54>
 800c080:	42a2      	cmp	r2, r4
 800c082:	d9fa      	bls.n	800c07a <_free_r+0x4a>
 800c084:	6819      	ldr	r1, [r3, #0]
 800c086:	1858      	adds	r0, r3, r1
 800c088:	42a0      	cmp	r0, r4
 800c08a:	d10b      	bne.n	800c0a4 <_free_r+0x74>
 800c08c:	6820      	ldr	r0, [r4, #0]
 800c08e:	4401      	add	r1, r0
 800c090:	1858      	adds	r0, r3, r1
 800c092:	4282      	cmp	r2, r0
 800c094:	6019      	str	r1, [r3, #0]
 800c096:	d1dd      	bne.n	800c054 <_free_r+0x24>
 800c098:	6810      	ldr	r0, [r2, #0]
 800c09a:	6852      	ldr	r2, [r2, #4]
 800c09c:	605a      	str	r2, [r3, #4]
 800c09e:	4401      	add	r1, r0
 800c0a0:	6019      	str	r1, [r3, #0]
 800c0a2:	e7d7      	b.n	800c054 <_free_r+0x24>
 800c0a4:	d902      	bls.n	800c0ac <_free_r+0x7c>
 800c0a6:	230c      	movs	r3, #12
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	e7d3      	b.n	800c054 <_free_r+0x24>
 800c0ac:	6820      	ldr	r0, [r4, #0]
 800c0ae:	1821      	adds	r1, r4, r0
 800c0b0:	428a      	cmp	r2, r1
 800c0b2:	bf04      	itt	eq
 800c0b4:	6811      	ldreq	r1, [r2, #0]
 800c0b6:	6852      	ldreq	r2, [r2, #4]
 800c0b8:	6062      	str	r2, [r4, #4]
 800c0ba:	bf04      	itt	eq
 800c0bc:	1809      	addeq	r1, r1, r0
 800c0be:	6021      	streq	r1, [r4, #0]
 800c0c0:	605c      	str	r4, [r3, #4]
 800c0c2:	e7c7      	b.n	800c054 <_free_r+0x24>
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20008464 	.word	0x20008464

0800c0cc <_malloc_r>:
 800c0cc:	b570      	push	{r4, r5, r6, lr}
 800c0ce:	1ccd      	adds	r5, r1, #3
 800c0d0:	f025 0503 	bic.w	r5, r5, #3
 800c0d4:	3508      	adds	r5, #8
 800c0d6:	2d0c      	cmp	r5, #12
 800c0d8:	bf38      	it	cc
 800c0da:	250c      	movcc	r5, #12
 800c0dc:	2d00      	cmp	r5, #0
 800c0de:	4606      	mov	r6, r0
 800c0e0:	db01      	blt.n	800c0e6 <_malloc_r+0x1a>
 800c0e2:	42a9      	cmp	r1, r5
 800c0e4:	d903      	bls.n	800c0ee <_malloc_r+0x22>
 800c0e6:	230c      	movs	r3, #12
 800c0e8:	6033      	str	r3, [r6, #0]
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	bd70      	pop	{r4, r5, r6, pc}
 800c0ee:	f000 f857 	bl	800c1a0 <__malloc_lock>
 800c0f2:	4a21      	ldr	r2, [pc, #132]	; (800c178 <_malloc_r+0xac>)
 800c0f4:	6814      	ldr	r4, [r2, #0]
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	b991      	cbnz	r1, 800c120 <_malloc_r+0x54>
 800c0fa:	4c20      	ldr	r4, [pc, #128]	; (800c17c <_malloc_r+0xb0>)
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	b91b      	cbnz	r3, 800c108 <_malloc_r+0x3c>
 800c100:	4630      	mov	r0, r6
 800c102:	f000 f83d 	bl	800c180 <_sbrk_r>
 800c106:	6020      	str	r0, [r4, #0]
 800c108:	4629      	mov	r1, r5
 800c10a:	4630      	mov	r0, r6
 800c10c:	f000 f838 	bl	800c180 <_sbrk_r>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d124      	bne.n	800c15e <_malloc_r+0x92>
 800c114:	230c      	movs	r3, #12
 800c116:	6033      	str	r3, [r6, #0]
 800c118:	4630      	mov	r0, r6
 800c11a:	f000 f842 	bl	800c1a2 <__malloc_unlock>
 800c11e:	e7e4      	b.n	800c0ea <_malloc_r+0x1e>
 800c120:	680b      	ldr	r3, [r1, #0]
 800c122:	1b5b      	subs	r3, r3, r5
 800c124:	d418      	bmi.n	800c158 <_malloc_r+0x8c>
 800c126:	2b0b      	cmp	r3, #11
 800c128:	d90f      	bls.n	800c14a <_malloc_r+0x7e>
 800c12a:	600b      	str	r3, [r1, #0]
 800c12c:	50cd      	str	r5, [r1, r3]
 800c12e:	18cc      	adds	r4, r1, r3
 800c130:	4630      	mov	r0, r6
 800c132:	f000 f836 	bl	800c1a2 <__malloc_unlock>
 800c136:	f104 000b 	add.w	r0, r4, #11
 800c13a:	1d23      	adds	r3, r4, #4
 800c13c:	f020 0007 	bic.w	r0, r0, #7
 800c140:	1ac3      	subs	r3, r0, r3
 800c142:	d0d3      	beq.n	800c0ec <_malloc_r+0x20>
 800c144:	425a      	negs	r2, r3
 800c146:	50e2      	str	r2, [r4, r3]
 800c148:	e7d0      	b.n	800c0ec <_malloc_r+0x20>
 800c14a:	428c      	cmp	r4, r1
 800c14c:	684b      	ldr	r3, [r1, #4]
 800c14e:	bf16      	itet	ne
 800c150:	6063      	strne	r3, [r4, #4]
 800c152:	6013      	streq	r3, [r2, #0]
 800c154:	460c      	movne	r4, r1
 800c156:	e7eb      	b.n	800c130 <_malloc_r+0x64>
 800c158:	460c      	mov	r4, r1
 800c15a:	6849      	ldr	r1, [r1, #4]
 800c15c:	e7cc      	b.n	800c0f8 <_malloc_r+0x2c>
 800c15e:	1cc4      	adds	r4, r0, #3
 800c160:	f024 0403 	bic.w	r4, r4, #3
 800c164:	42a0      	cmp	r0, r4
 800c166:	d005      	beq.n	800c174 <_malloc_r+0xa8>
 800c168:	1a21      	subs	r1, r4, r0
 800c16a:	4630      	mov	r0, r6
 800c16c:	f000 f808 	bl	800c180 <_sbrk_r>
 800c170:	3001      	adds	r0, #1
 800c172:	d0cf      	beq.n	800c114 <_malloc_r+0x48>
 800c174:	6025      	str	r5, [r4, #0]
 800c176:	e7db      	b.n	800c130 <_malloc_r+0x64>
 800c178:	20008464 	.word	0x20008464
 800c17c:	20008468 	.word	0x20008468

0800c180 <_sbrk_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4c06      	ldr	r4, [pc, #24]	; (800c19c <_sbrk_r+0x1c>)
 800c184:	2300      	movs	r3, #0
 800c186:	4605      	mov	r5, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	f7f5 f9c8 	bl	8001520 <_sbrk>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <_sbrk_r+0x1a>
 800c194:	6823      	ldr	r3, [r4, #0]
 800c196:	b103      	cbz	r3, 800c19a <_sbrk_r+0x1a>
 800c198:	602b      	str	r3, [r5, #0]
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	20008dac 	.word	0x20008dac

0800c1a0 <__malloc_lock>:
 800c1a0:	4770      	bx	lr

0800c1a2 <__malloc_unlock>:
 800c1a2:	4770      	bx	lr

0800c1a4 <_init>:
 800c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a6:	bf00      	nop
 800c1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1aa:	bc08      	pop	{r3}
 800c1ac:	469e      	mov	lr, r3
 800c1ae:	4770      	bx	lr

0800c1b0 <_fini>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	bf00      	nop
 800c1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1b6:	bc08      	pop	{r3}
 800c1b8:	469e      	mov	lr, r3
 800c1ba:	4770      	bx	lr
