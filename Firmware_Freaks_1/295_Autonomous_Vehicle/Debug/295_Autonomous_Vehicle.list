
295_Autonomous_Vehicle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f824  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800f9d4  0800f9d4  0001f9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fac0  0800fac0  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800fac0  0800fac0  0001fac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fac8  0800fac8  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fac8  0800fac8  0001fac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800facc  0800facc  0001facc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800fad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008f28  20000120  0800fbf0  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009048  0800fbf0  00029048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   000355bd  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ee1  00000000  00000000  0005570d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002540  00000000  00000000  0005c5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002280  00000000  00000000  0005eb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d656  00000000  00000000  00060db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dd10  00000000  00000000  0008e406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f86f2  00000000  00000000  000bc116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b4808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a214  00000000  00000000  001b485c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000120 	.word	0x20000120
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f9bc 	.word	0x0800f9bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000124 	.word	0x20000124
 80001ec:	0800f9bc 	.word	0x0800f9bc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b96e 	b.w	8000e10 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468c      	mov	ip, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f040 8083 	bne.w	8000c62 <__udivmoddi4+0x116>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4617      	mov	r7, r2
 8000b60:	d947      	bls.n	8000bf2 <__udivmoddi4+0xa6>
 8000b62:	fab2 f282 	clz	r2, r2
 8000b66:	b142      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	f1c2 0020 	rsb	r0, r2, #32
 8000b6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b70:	4091      	lsls	r1, r2
 8000b72:	4097      	lsls	r7, r2
 8000b74:	ea40 0c01 	orr.w	ip, r0, r1
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbbc f6f8 	udiv	r6, ip, r8
 8000b84:	fa1f fe87 	uxth.w	lr, r7
 8000b88:	fb08 c116 	mls	r1, r8, r6, ip
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb06 f10e 	mul.w	r1, r6, lr
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9e:	f080 8119 	bcs.w	8000dd4 <__udivmoddi4+0x288>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8116 	bls.w	8000dd4 <__udivmoddi4+0x288>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	443b      	add	r3, r7
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8105 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000bce:	45a6      	cmp	lr, r4
 8000bd0:	f240 8102 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	443c      	add	r4, r7
 8000bd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	2600      	movs	r6, #0
 8000be2:	b11d      	cbz	r5, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	b902      	cbnz	r2, 8000bf6 <__udivmoddi4+0xaa>
 8000bf4:	deff      	udf	#255	; 0xff
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d150      	bne.n	8000ca0 <__udivmoddi4+0x154>
 8000bfe:	1bcb      	subs	r3, r1, r7
 8000c00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c04:	fa1f f887 	uxth.w	r8, r7
 8000c08:	2601      	movs	r6, #1
 8000c0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c18:	fb08 f30c 	mul.w	r3, r8, ip
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000c20:	1879      	adds	r1, r7, r1
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0xe2>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	f200 80e9 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1ac9      	subs	r1, r1, r3
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x10c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x10a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80d9 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e7bf      	b.n	8000be2 <__udivmoddi4+0x96>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x12e>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	f000 80b1 	beq.w	8000dce <__udivmoddi4+0x282>
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c72:	4630      	mov	r0, r6
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f683 	clz	r6, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x1cc>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0x140>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80b8 	bhi.w	8000dfc <__udivmoddi4+0x2b0>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	468c      	mov	ip, r1
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d0a8      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c9e:	e7a5      	b.n	8000bec <__udivmoddi4+0xa0>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca8:	4097      	lsls	r7, r2
 8000caa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb2:	40d9      	lsrs	r1, r3
 8000cb4:	4330      	orrs	r0, r6
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cbc:	fa1f f887 	uxth.w	r8, r7
 8000cc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb06 f108 	mul.w	r1, r6, r8
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x19c>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cda:	f080 808d 	bcs.w	8000df8 <__udivmoddi4+0x2ac>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 808a 	bls.w	8000df8 <__udivmoddi4+0x2ac>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b281      	uxth	r1, r0
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb00 f308 	mul.w	r3, r0, r8
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x1c4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d06:	d273      	bcs.n	8000df0 <__udivmoddi4+0x2a4>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d971      	bls.n	8000df0 <__udivmoddi4+0x2a4>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4439      	add	r1, r7
 8000d10:	1acb      	subs	r3, r1, r3
 8000d12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d16:	e778      	b.n	8000c0a <__udivmoddi4+0xbe>
 8000d18:	f1c6 0c20 	rsb	ip, r6, #32
 8000d1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d24:	431c      	orrs	r4, r3
 8000d26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d36:	431f      	orrs	r7, r3
 8000d38:	0c3b      	lsrs	r3, r7, #16
 8000d3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d3e:	fa1f f884 	uxth.w	r8, r4
 8000d42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4e:	458a      	cmp	sl, r1
 8000d50:	fa02 f206 	lsl.w	r2, r2, r6
 8000d54:	fa00 f306 	lsl.w	r3, r0, r6
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x220>
 8000d5a:	1861      	adds	r1, r4, r1
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	d248      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000d62:	458a      	cmp	sl, r1
 8000d64:	d946      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4421      	add	r1, r4
 8000d6c:	eba1 010a 	sub.w	r1, r1, sl
 8000d70:	b2bf      	uxth	r7, r7
 8000d72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d7e:	fb00 f808 	mul.w	r8, r0, r8
 8000d82:	45b8      	cmp	r8, r7
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x24a>
 8000d86:	19e7      	adds	r7, r4, r7
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d22e      	bcs.n	8000dec <__udivmoddi4+0x2a0>
 8000d8e:	45b8      	cmp	r8, r7
 8000d90:	d92c      	bls.n	8000dec <__udivmoddi4+0x2a0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4427      	add	r7, r4
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	eba7 0708 	sub.w	r7, r7, r8
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	454f      	cmp	r7, r9
 8000da4:	46c6      	mov	lr, r8
 8000da6:	4649      	mov	r1, r9
 8000da8:	d31a      	bcc.n	8000de0 <__udivmoddi4+0x294>
 8000daa:	d017      	beq.n	8000ddc <__udivmoddi4+0x290>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x27a>
 8000dae:	ebb3 020e 	subs.w	r2, r3, lr
 8000db2:	eb67 0701 	sbc.w	r7, r7, r1
 8000db6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dba:	40f2      	lsrs	r2, r6
 8000dbc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dc0:	40f7      	lsrs	r7, r6
 8000dc2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e70b      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0x60>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6fd      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000ddc:	4543      	cmp	r3, r8
 8000dde:	d2e5      	bcs.n	8000dac <__udivmoddi4+0x260>
 8000de0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de4:	eb69 0104 	sbc.w	r1, r9, r4
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7df      	b.n	8000dac <__udivmoddi4+0x260>
 8000dec:	4608      	mov	r0, r1
 8000dee:	e7d2      	b.n	8000d96 <__udivmoddi4+0x24a>
 8000df0:	4660      	mov	r0, ip
 8000df2:	e78d      	b.n	8000d10 <__udivmoddi4+0x1c4>
 8000df4:	4681      	mov	r9, r0
 8000df6:	e7b9      	b.n	8000d6c <__udivmoddi4+0x220>
 8000df8:	4666      	mov	r6, ip
 8000dfa:	e775      	b.n	8000ce8 <__udivmoddi4+0x19c>
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e74a      	b.n	8000c96 <__udivmoddi4+0x14a>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	4439      	add	r1, r7
 8000e06:	e713      	b.n	8000c30 <__udivmoddi4+0xe4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	443c      	add	r4, r7
 8000e0c:	e724      	b.n	8000c58 <__udivmoddi4+0x10c>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <vApplicationGetIdleTaskMemory+0x30>)
 8000e5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000013c 	.word	0x2000013c
 8000e78:	20000194 	.word	0x20000194

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f002 fb57 	bl	8003534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f85b 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f000 fc8b 	bl	80017a4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000e8e:	f000 f9d1 	bl	8001234 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000e92:	f000 f9e3 	bl	800125c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e96:	f000 fc35 	bl	8001704 <MX_FMC_Init>
  MX_I2C3_Init();
 8000e9a:	f000 fa11 	bl	80012c0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000e9e:	f000 fa4f 	bl	8001340 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000ea2:	f000 facd 	bl	8001440 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000ea6:	f000 fb01 	bl	80014ac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000eaa:	f000 fc01 	bl	80016b0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000eae:	f000 f8cb 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000eb2:	f000 f91b 	bl	80010ec <MX_ADC2_Init>
  MX_ADC3_Init();
 8000eb6:	f000 f96b 	bl	8001190 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000eba:	f000 fb47 	bl	800154c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ebe:	f000 fb9d 	bl	80015fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000ec2:	481a      	ldr	r0, [pc, #104]	; (8000f2c <main+0xb0>)
 8000ec4:	f006 fd83 	bl	80079ce <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //SERVO_PWM
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4819      	ldr	r0, [pc, #100]	; (8000f30 <main+0xb4>)
 8000ecc:	f006 fdf2 	bl	8007ab4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //DC_PWM
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <main+0xb8>)
 8000ed4:	f006 fdee 	bl	8007ab4 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1500);  //Set Servo Duty cycle to 15%
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <main+0xb4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);  //Set DC motor Duty cycle to 15%
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <main+0xb8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000eea:	635a      	str	r2, [r3, #52]	; 0x34
//  HAL_Delay(2000);
//
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1500);


  const bool run_1000hz = true;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  const size_t stack_size_bytes = 2048 / sizeof(void *);
 8000ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef6:	623b      	str	r3, [r7, #32]
  periodic_scheduler__initialize(stack_size_bytes, run_1000hz);
 8000ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000efc:	4619      	mov	r1, r3
 8000efe:	6a38      	ldr	r0, [r7, #32]
 8000f00:	f002 f982 	bl	8003208 <periodic_scheduler__initialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <main+0xbc>)
 8000f06:	1d3c      	adds	r4, r7, #4
 8000f08:	461d      	mov	r5, r3
 8000f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00b faef 	bl	800c4fe <osThreadCreate>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <main+0xc0>)
 8000f24:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f26:	f00b fae3 	bl	800c4f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <main+0xae>
 8000f2c:	20008838 	.word	0x20008838
 8000f30:	200088b8 	.word	0x200088b8
 8000f34:	20008680 	.word	0x20008680
 8000f38:	0800f9e0 	.word	0x0800f9e0
 8000f3c:	20008580 	.word	0x20008580

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0a0      	sub	sp, #128	; 0x80
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f00e f8fc 	bl	800f14c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2230      	movs	r2, #48	; 0x30
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f00e f8ed 	bl	800f14c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b32      	ldr	r3, [pc, #200]	; (8001040 <SystemClock_Config+0x100>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a31      	ldr	r2, [pc, #196]	; (8001040 <SystemClock_Config+0x100>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <SystemClock_Config+0x100>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <SystemClock_Config+0x104>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f9a:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <SystemClock_Config+0x104>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <SystemClock_Config+0x104>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fc6:	2348      	movs	r3, #72	; 0x48
 8000fc8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f005 fdda 	bl	8006b90 <HAL_RCC_OscConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fe2:	f000 fd27 	bl	8001a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fea:	2302      	movs	r3, #2
 8000fec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f006 f834 	bl	8007070 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800100e:	f000 fd11 	bl	8001a34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001012:	2308      	movs	r3, #8
 8001014:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001016:	2332      	movs	r3, #50	; 0x32
 8001018:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800101a:	2302      	movs	r3, #2
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4618      	mov	r0, r3
 8001028:	f006 fa50 	bl	80074cc <HAL_RCCEx_PeriphCLKConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001032:	f000 fcff 	bl	8001a34 <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3780      	adds	r7, #128	; 0x80
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40007000 	.word	0x40007000

08001048 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_ADC1_Init+0x98>)
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <MX_ADC1_Init+0x9c>)
 800105e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_ADC1_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_ADC1_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <MX_ADC1_Init+0xa0>)
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_ADC1_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001094:	2201      	movs	r2, #1
 8001096:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_ADC1_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010a8:	f002 faaa 	bl	8003600 <HAL_ADC_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010b2:	f000 fcbf 	bl	8001a34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010b6:	2305      	movs	r3, #5
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010c8:	f002 fc36 	bl	8003938 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010d2:	f000 fcaf 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20008768 	.word	0x20008768
 80010e4:	40012000 	.word	0x40012000
 80010e8:	0f000001 	.word	0x0f000001

080010ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <MX_ADC2_Init+0x98>)
 8001100:	4a21      	ldr	r2, [pc, #132]	; (8001188 <MX_ADC2_Init+0x9c>)
 8001102:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_ADC2_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <MX_ADC2_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_ADC2_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MX_ADC2_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_ADC2_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_ADC2_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_ADC2_Init+0x98>)
 800112c:	4a17      	ldr	r2, [pc, #92]	; (800118c <MX_ADC2_Init+0xa0>)
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_ADC2_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_ADC2_Init+0x98>)
 8001138:	2201      	movs	r2, #1
 800113a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_ADC2_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_ADC2_Init+0x98>)
 8001146:	2201      	movs	r2, #1
 8001148:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <MX_ADC2_Init+0x98>)
 800114c:	f002 fa58 	bl	8003600 <HAL_ADC_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001156:	f000 fc6d 	bl	8001a34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800115a:	230d      	movs	r3, #13
 800115c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <MX_ADC2_Init+0x98>)
 800116c:	f002 fbe4 	bl	8003938 <HAL_ADC_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001176:	f000 fc5d 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20008630 	.word	0x20008630
 8001188:	40012100 	.word	0x40012100
 800118c:	0f000001 	.word	0x0f000001

08001190 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <MX_ADC3_Init+0x98>)
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <MX_ADC3_Init+0x9c>)
 80011a6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_ADC3_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <MX_ADC3_Init+0x98>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_ADC3_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_ADC3_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_ADC3_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_ADC3_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_ADC3_Init+0x98>)
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <MX_ADC3_Init+0xa0>)
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_ADC3_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_ADC3_Init+0x98>)
 80011dc:	2201      	movs	r2, #1
 80011de:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_ADC3_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_ADC3_Init+0x98>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <MX_ADC3_Init+0x98>)
 80011f0:	f002 fa06 	bl	8003600 <HAL_ADC_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80011fa:	f000 fc1b 	bl	8001a34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011fe:	2304      	movs	r3, #4
 8001200:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001202:	2301      	movs	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	4619      	mov	r1, r3
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <MX_ADC3_Init+0x98>)
 8001210:	f002 fb92 	bl	8003938 <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800121a:	f000 fc0b 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200087b0 	.word	0x200087b0
 800122c:	40012200 	.word	0x40012200
 8001230:	0f000001 	.word	0x0f000001

08001234 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_CRC_Init+0x20>)
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <MX_CRC_Init+0x24>)
 800123c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_CRC_Init+0x20>)
 8001240:	f002 fea5 	bl	8003f8e <HAL_CRC_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800124a:	f000 fbf3 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20008678 	.word	0x20008678
 8001258:	40023000 	.word	0x40023000

0800125c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_DMA2D_Init+0x5c>)
 8001262:	4a16      	ldr	r2, [pc, #88]	; (80012bc <MX_DMA2D_Init+0x60>)
 8001264:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_DMA2D_Init+0x5c>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_DMA2D_Init+0x5c>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_DMA2D_Init+0x5c>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_DMA2D_Init+0x5c>)
 800127a:	2200      	movs	r2, #0
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_DMA2D_Init+0x5c>)
 8001280:	2200      	movs	r2, #0
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_DMA2D_Init+0x5c>)
 8001286:	2200      	movs	r2, #0
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_DMA2D_Init+0x5c>)
 800128c:	2200      	movs	r2, #0
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <MX_DMA2D_Init+0x5c>)
 8001292:	f002 fe98 	bl	8003fc6 <HAL_DMA2D_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800129c:	f000 fbca 	bl	8001a34 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80012a0:	2101      	movs	r1, #1
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_DMA2D_Init+0x5c>)
 80012a4:	f002 ffe8 	bl	8004278 <HAL_DMA2D_ConfigLayer>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80012ae:	f000 fbc1 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20008878 	.word	0x20008878
 80012bc:	4002b000 	.word	0x4002b000

080012c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_I2C3_Init+0x74>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <MX_I2C3_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_I2C3_Init+0x74>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <MX_I2C3_Init+0x7c>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_I2C3_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_I2C3_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_I2C3_Init+0x74>)
 80012de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_I2C3_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_I2C3_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_I2C3_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_I2C3_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_I2C3_Init+0x74>)
 80012fe:	f004 ff1f 	bl	8006140 <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 fb94 	bl	8001a34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <MX_I2C3_Init+0x74>)
 8001310:	f005 f85a 	bl	80063c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800131a:	f000 fb8b 	bl	8001a34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_I2C3_Init+0x74>)
 8001322:	f005 f88d 	bl	8006440 <HAL_I2CEx_ConfigDigitalFilter>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800132c:	f000 fb82 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20008584 	.word	0x20008584
 8001338:	40005c00 	.word	0x40005c00
 800133c:	000186a0 	.word	0x000186a0

08001340 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	; 0x38
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2234      	movs	r2, #52	; 0x34
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00d fefd 	bl	800f14c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001352:	4b39      	ldr	r3, [pc, #228]	; (8001438 <MX_LTDC_Init+0xf8>)
 8001354:	4a39      	ldr	r2, [pc, #228]	; (800143c <MX_LTDC_Init+0xfc>)
 8001356:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001358:	4b37      	ldr	r3, [pc, #220]	; (8001438 <MX_LTDC_Init+0xf8>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <MX_LTDC_Init+0xf8>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <MX_LTDC_Init+0xf8>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800136a:	4b33      	ldr	r3, [pc, #204]	; (8001438 <MX_LTDC_Init+0xf8>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <MX_LTDC_Init+0xf8>)
 8001372:	2209      	movs	r2, #9
 8001374:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <MX_LTDC_Init+0xf8>)
 8001378:	2201      	movs	r2, #1
 800137a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800137c:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <MX_LTDC_Init+0xf8>)
 800137e:	221d      	movs	r2, #29
 8001380:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <MX_LTDC_Init+0xf8>)
 8001384:	2203      	movs	r2, #3
 8001386:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001388:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <MX_LTDC_Init+0xf8>)
 800138a:	f240 120d 	movw	r2, #269	; 0x10d
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <MX_LTDC_Init+0xf8>)
 8001392:	f240 1243 	movw	r2, #323	; 0x143
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <MX_LTDC_Init+0xf8>)
 800139a:	f240 1217 	movw	r2, #279	; 0x117
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MX_LTDC_Init+0xf8>)
 80013a2:	f240 1247 	movw	r2, #327	; 0x147
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <MX_LTDC_Init+0xf8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <MX_LTDC_Init+0xf8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_LTDC_Init+0xf8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013c0:	481d      	ldr	r0, [pc, #116]	; (8001438 <MX_LTDC_Init+0xf8>)
 80013c2:	f005 f87d 	bl	80064c0 <HAL_LTDC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013cc:	f000 fb32 	bl	8001a34 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80013d4:	23f0      	movs	r3, #240	; 0xf0
 80013d6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80013dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013e0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013e2:	2302      	movs	r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013e6:	23ff      	movs	r3, #255	; 0xff
 80013e8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013f2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013f4:	2307      	movs	r3, #7
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80013f8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80013fe:	23f0      	movs	r3, #240	; 0xf0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001402:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_LTDC_Init+0xf8>)
 8001422:	f005 f9df 	bl	80067e4 <HAL_LTDC_ConfigLayer>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800142c:	f000 fb02 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	; 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200086c0 	.word	0x200086c0
 800143c:	40016800 	.word	0x40016800

08001440 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001444:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_SPI5_Init+0x64>)
 8001446:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <MX_SPI5_Init+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_SPI5_Init+0x64>)
 800144c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001450:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_SPI5_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_SPI5_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_SPI5_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_SPI5_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_SPI5_Init+0x64>)
 800146c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001470:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_SPI5_Init+0x64>)
 8001474:	2218      	movs	r2, #24
 8001476:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_SPI5_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_SPI5_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_SPI5_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_SPI5_Init+0x64>)
 800148c:	220a      	movs	r2, #10
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_SPI5_Init+0x64>)
 8001492:	f006 fa0d 	bl	80078b0 <HAL_SPI_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800149c:	f000 faca 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200085d8 	.word	0x200085d8
 80014a8:	40015000 	.word	0x40015000

080014ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_TIM1_Init+0x98>)
 80014ca:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <MX_TIM1_Init+0x9c>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_TIM1_Init+0x98>)
 80014d0:	2247      	movs	r2, #71	; 0x47
 80014d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_TIM1_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_TIM1_Init+0x98>)
 80014dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_TIM1_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_TIM1_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_TIM1_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f4:	4813      	ldr	r0, [pc, #76]	; (8001544 <MX_TIM1_Init+0x98>)
 80014f6:	f006 fa3f 	bl	8007978 <HAL_TIM_Base_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001500:	f000 fa98 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_TIM1_Init+0x98>)
 8001512:	f006 fcdb 	bl	8007ecc <HAL_TIM_ConfigClockSource>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800151c:	f000 fa8a 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_TIM1_Init+0x98>)
 800152e:	f007 f8c9 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001538:	f000 fa7c 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20008838 	.word	0x20008838
 8001548:	40010000 	.word	0x40010000

0800154c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <MX_TIM2_Init+0xac>)
 8001570:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001574:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <MX_TIM2_Init+0xac>)
 8001578:	2247      	movs	r2, #71	; 0x47
 800157a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <MX_TIM2_Init+0xac>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_TIM2_Init+0xac>)
 8001584:	f242 720f 	movw	r2, #9999	; 0x270f
 8001588:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_TIM2_Init+0xac>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_TIM2_Init+0xac>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001596:	4818      	ldr	r0, [pc, #96]	; (80015f8 <MX_TIM2_Init+0xac>)
 8001598:	f006 fa61 	bl	8007a5e <HAL_TIM_PWM_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80015a2:	f000 fa47 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	4619      	mov	r1, r3
 80015b4:	4810      	ldr	r0, [pc, #64]	; (80015f8 <MX_TIM2_Init+0xac>)
 80015b6:	f007 f885 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015c0:	f000 fa38 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c4:	2360      	movs	r3, #96	; 0x60
 80015c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2204      	movs	r2, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4807      	ldr	r0, [pc, #28]	; (80015f8 <MX_TIM2_Init+0xac>)
 80015dc:	f006 fbb0 	bl	8007d40 <HAL_TIM_PWM_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80015e6:	f000 fa25 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ea:	4803      	ldr	r0, [pc, #12]	; (80015f8 <MX_TIM2_Init+0xac>)
 80015ec:	f000 fd68 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200088b8 	.word	0x200088b8

080015fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_TIM3_Init+0xac>)
 8001620:	4a22      	ldr	r2, [pc, #136]	; (80016ac <MX_TIM3_Init+0xb0>)
 8001622:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_TIM3_Init+0xac>)
 8001626:	2247      	movs	r2, #71	; 0x47
 8001628:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM3_Init+0xac>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_TIM3_Init+0xac>)
 8001632:	f242 720f 	movw	r2, #9999	; 0x270f
 8001636:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_TIM3_Init+0xac>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_TIM3_Init+0xac>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001644:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_TIM3_Init+0xac>)
 8001646:	f006 fa0a 	bl	8007a5e <HAL_TIM_PWM_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001650:	f000 f9f0 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	4619      	mov	r1, r3
 8001662:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MX_TIM3_Init+0xac>)
 8001664:	f007 f82e 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800166e:	f000 f9e1 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001672:	2360      	movs	r3, #96	; 0x60
 8001674:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM3_Init+0xac>)
 800168a:	f006 fb59 	bl	8007d40 <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001694:	f000 f9ce 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM3_Init+0xac>)
 800169a:	f000 fd11 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20008680 	.word	0x20008680
 80016ac:	40000400 	.word	0x40000400

080016b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_USART1_UART_Init+0x4c>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <MX_USART1_UART_Init+0x50>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <MX_USART1_UART_Init+0x4c>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_USART1_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_USART1_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_USART1_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_USART1_UART_Init+0x4c>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_USART1_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_USART1_UART_Init+0x4c>)
 80016e8:	f007 f87c 	bl	80087e4 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016f2:	f000 f99f 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200087f8 	.word	0x200087f8
 8001700:	40011000 	.word	0x40011000

08001704 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	615a      	str	r2, [r3, #20]
 800171a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <MX_FMC_Init+0x98>)
 800171e:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <MX_FMC_Init+0x9c>)
 8001720:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <MX_FMC_Init+0x98>)
 8001724:	2201      	movs	r2, #1
 8001726:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <MX_FMC_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_FMC_Init+0x98>)
 8001730:	2204      	movs	r2, #4
 8001732:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <MX_FMC_Init+0x98>)
 8001736:	2210      	movs	r2, #16
 8001738:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_FMC_Init+0x98>)
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_FMC_Init+0x98>)
 8001742:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001746:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_FMC_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <MX_FMC_Init+0x98>)
 8001750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001754:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_FMC_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_FMC_Init+0x98>)
 800175e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001764:	2302      	movs	r3, #2
 8001766:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001768:	2307      	movs	r3, #7
 800176a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800176c:	2304      	movs	r3, #4
 800176e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001770:	2307      	movs	r3, #7
 8001772:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001774:	2303      	movs	r3, #3
 8001776:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800177c:	2302      	movs	r3, #2
 800177e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_FMC_Init+0x98>)
 8001786:	f006 f85f 	bl	8007848 <HAL_SDRAM_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001790:	f000 f950 	bl	8001a34 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200088f8 	.word	0x200088f8
 80017a0:	a0000140 	.word	0xa0000140

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
 80017be:	4b87      	ldr	r3, [pc, #540]	; (80019dc <MX_GPIO_Init+0x238>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a86      	ldr	r2, [pc, #536]	; (80019dc <MX_GPIO_Init+0x238>)
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b84      	ldr	r3, [pc, #528]	; (80019dc <MX_GPIO_Init+0x238>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	623b      	str	r3, [r7, #32]
 80017d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	4b80      	ldr	r3, [pc, #512]	; (80019dc <MX_GPIO_Init+0x238>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a7f      	ldr	r2, [pc, #508]	; (80019dc <MX_GPIO_Init+0x238>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b7d      	ldr	r3, [pc, #500]	; (80019dc <MX_GPIO_Init+0x238>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	4b79      	ldr	r3, [pc, #484]	; (80019dc <MX_GPIO_Init+0x238>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a78      	ldr	r2, [pc, #480]	; (80019dc <MX_GPIO_Init+0x238>)
 80017fc:	f043 0320 	orr.w	r3, r3, #32
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b76      	ldr	r3, [pc, #472]	; (80019dc <MX_GPIO_Init+0x238>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	4b72      	ldr	r3, [pc, #456]	; (80019dc <MX_GPIO_Init+0x238>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a71      	ldr	r2, [pc, #452]	; (80019dc <MX_GPIO_Init+0x238>)
 8001818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b6f      	ldr	r3, [pc, #444]	; (80019dc <MX_GPIO_Init+0x238>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b6b      	ldr	r3, [pc, #428]	; (80019dc <MX_GPIO_Init+0x238>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a6a      	ldr	r2, [pc, #424]	; (80019dc <MX_GPIO_Init+0x238>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b68      	ldr	r3, [pc, #416]	; (80019dc <MX_GPIO_Init+0x238>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b64      	ldr	r3, [pc, #400]	; (80019dc <MX_GPIO_Init+0x238>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a63      	ldr	r2, [pc, #396]	; (80019dc <MX_GPIO_Init+0x238>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b61      	ldr	r3, [pc, #388]	; (80019dc <MX_GPIO_Init+0x238>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <MX_GPIO_Init+0x238>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a5c      	ldr	r2, [pc, #368]	; (80019dc <MX_GPIO_Init+0x238>)
 800186c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <MX_GPIO_Init+0x238>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b56      	ldr	r3, [pc, #344]	; (80019dc <MX_GPIO_Init+0x238>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a55      	ldr	r2, [pc, #340]	; (80019dc <MX_GPIO_Init+0x238>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b53      	ldr	r3, [pc, #332]	; (80019dc <MX_GPIO_Init+0x238>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	211c      	movs	r1, #28
 800189e:	4850      	ldr	r0, [pc, #320]	; (80019e0 <MX_GPIO_Init+0x23c>)
 80018a0:	f002 ff28 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2116      	movs	r1, #22
 80018a8:	484e      	ldr	r0, [pc, #312]	; (80019e4 <MX_GPIO_Init+0x240>)
 80018aa:	f002 ff23 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	484d      	ldr	r0, [pc, #308]	; (80019e8 <MX_GPIO_Init+0x244>)
 80018b4:	f002 ff1e 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80018be:	484b      	ldr	r0, [pc, #300]	; (80019ec <MX_GPIO_Init+0x248>)
 80018c0:	f002 ff18 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80018ca:	4849      	ldr	r0, [pc, #292]	; (80019f0 <MX_GPIO_Init+0x24c>)
 80018cc:	f002 ff12 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80018d0:	231c      	movs	r3, #28
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	483e      	ldr	r0, [pc, #248]	; (80019e0 <MX_GPIO_Init+0x23c>)
 80018e8:	f002 fd58 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80018ec:	2316      	movs	r3, #22
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4838      	ldr	r0, [pc, #224]	; (80019e4 <MX_GPIO_Init+0x240>)
 8001904:	f002 fd4a 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001908:	f248 0307 	movw	r3, #32775	; 0x8007
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800190e:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <MX_GPIO_Init+0x250>)
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191a:	4619      	mov	r1, r3
 800191c:	4832      	ldr	r0, [pc, #200]	; (80019e8 <MX_GPIO_Init+0x244>)
 800191e:	f002 fd3d 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001926:	2301      	movs	r3, #1
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	482b      	ldr	r0, [pc, #172]	; (80019e8 <MX_GPIO_Init+0x244>)
 800193a:	f002 fd2f 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800193e:	2304      	movs	r3, #4
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001942:	2300      	movs	r3, #0
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194e:	4619      	mov	r1, r3
 8001950:	4829      	ldr	r0, [pc, #164]	; (80019f8 <MX_GPIO_Init+0x254>)
 8001952:	f002 fd23 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001956:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4820      	ldr	r0, [pc, #128]	; (80019ec <MX_GPIO_Init+0x248>)
 800196c:	f002 fd16 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001970:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001986:	4619      	mov	r1, r3
 8001988:	4818      	ldr	r0, [pc, #96]	; (80019ec <MX_GPIO_Init+0x248>)
 800198a:	f002 fd07 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800198e:	2320      	movs	r3, #32
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_GPIO_Init+0x258>)
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199e:	4619      	mov	r1, r3
 80019a0:	4812      	ldr	r0, [pc, #72]	; (80019ec <MX_GPIO_Init+0x248>)
 80019a2:	f002 fcfb 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80019a6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019bc:	4619      	mov	r1, r3
 80019be:	480c      	ldr	r0, [pc, #48]	; (80019f0 <MX_GPIO_Init+0x24c>)
 80019c0:	f002 fcec 	bl	800439c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2105      	movs	r1, #5
 80019c8:	2017      	movs	r0, #23
 80019ca:	f002 fab2 	bl	8003f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019ce:	2017      	movs	r0, #23
 80019d0:	f002 facb 	bl	8003f6a <HAL_NVIC_EnableIRQ>

}
 80019d4:	bf00      	nop
 80019d6:	3738      	adds	r7, #56	; 0x38
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020c00 	.word	0x40020c00
 80019f0:	40021800 	.word	0x40021800
 80019f4:	10120000 	.word	0x10120000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	10110000 	.word	0x10110000

08001a00 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001a08:	f00d f846 	bl	800ea98 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8001a0c:	e7fe      	b.n	8001a0c <StartDefaultTask+0xc>
	...

08001a10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a22:	f001 fda9 	bl	8003578 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40001000 	.word	0x40001000

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_MspInit+0x54>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_MspInit+0x54>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_MspInit+0x54>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_MspInit+0x54>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_MspInit+0x54>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_MspInit+0x54>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	210f      	movs	r1, #15
 8001a86:	f06f 0001 	mvn.w	r0, #1
 8001a8a:	f002 fa52 	bl	8003f32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	; 0x38
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a45      	ldr	r2, [pc, #276]	; (8001bd0 <HAL_ADC_MspInit+0x134>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d128      	bne.n	8001b10 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
 8001ac2:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a43      	ldr	r2, [pc, #268]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	623b      	str	r3, [r7, #32]
 8001ad8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a3c      	ldr	r2, [pc, #240]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001af6:	2320      	movs	r3, #32
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afa:	2303      	movs	r3, #3
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b06:	4619      	mov	r1, r3
 8001b08:	4833      	ldr	r0, [pc, #204]	; (8001bd8 <HAL_ADC_MspInit+0x13c>)
 8001b0a:	f002 fc47 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b0e:	e05a      	b.n	8001bc6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a31      	ldr	r2, [pc, #196]	; (8001bdc <HAL_ADC_MspInit+0x140>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d128      	bne.n	8001b6c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a2c      	ldr	r2, [pc, #176]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b52:	2308      	movs	r3, #8
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b56:	2303      	movs	r3, #3
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	481e      	ldr	r0, [pc, #120]	; (8001be0 <HAL_ADC_MspInit+0x144>)
 8001b66:	f002 fc19 	bl	800439c <HAL_GPIO_Init>
}
 8001b6a:	e02c      	b.n	8001bc6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <HAL_ADC_MspInit+0x148>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d127      	bne.n	8001bc6 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001b9c:	f043 0320 	orr.w	r3, r3, #32
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_ADC_MspInit+0x138>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <HAL_ADC_MspInit+0x14c>)
 8001bc2:	f002 fbeb 	bl	800439c <HAL_GPIO_Init>
}
 8001bc6:	bf00      	nop
 8001bc8:	3738      	adds	r7, #56	; 0x38
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40012000 	.word	0x40012000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40012100 	.word	0x40012100
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40012200 	.word	0x40012200
 8001be8:	40021400 	.word	0x40021400

08001bec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_CRC_MspInit+0x3c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10d      	bne.n	8001c1a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_CRC_MspInit+0x40>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <HAL_CRC_MspInit+0x40>)
 8001c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <HAL_CRC_MspInit+0x40>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023000 	.word	0x40023000
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <HAL_DMA2D_MspInit+0x48>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d115      	bne.n	8001c6e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_DMA2D_MspInit+0x4c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <HAL_DMA2D_MspInit+0x4c>)
 8001c4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_DMA2D_MspInit+0x4c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2105      	movs	r1, #5
 8001c62:	205a      	movs	r0, #90	; 0x5a
 8001c64:	f002 f965 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c68:	205a      	movs	r0, #90	; 0x5a
 8001c6a:	f002 f97e 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	4002b000 	.word	0x4002b000
 8001c7c:	40023800 	.word	0x40023800

08001c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a29      	ldr	r2, [pc, #164]	; (8001d44 <HAL_I2C_MspInit+0xc4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d14b      	bne.n	8001d3a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_I2C_MspInit+0xc8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a27      	ldr	r2, [pc, #156]	; (8001d48 <HAL_I2C_MspInit+0xc8>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_I2C_MspInit+0xc8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_I2C_MspInit+0xc8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <HAL_I2C_MspInit+0xc8>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_I2C_MspInit+0xc8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce0:	2312      	movs	r3, #18
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cec:	2304      	movs	r3, #4
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4815      	ldr	r0, [pc, #84]	; (8001d4c <HAL_I2C_MspInit+0xcc>)
 8001cf8:	f002 fb50 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d02:	2312      	movs	r3, #18
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <HAL_I2C_MspInit+0xd0>)
 8001d1a:	f002 fb3f 	bl	800439c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_I2C_MspInit+0xc8>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_I2C_MspInit+0xc8>)
 8001d28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_I2C_MspInit+0xc8>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40005c00 	.word	0x40005c00
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020000 	.word	0x40020000

08001d54 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a7b      	ldr	r2, [pc, #492]	; (8001f60 <HAL_LTDC_MspInit+0x20c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	f040 80f0 	bne.w	8001f58 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	4a78      	ldr	r2, [pc, #480]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001d82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d86:	6453      	str	r3, [r2, #68]	; 0x44
 8001d88:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d90:	623b      	str	r3, [r7, #32]
 8001d92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	4a71      	ldr	r2, [pc, #452]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001d9e:	f043 0320 	orr.w	r3, r3, #32
 8001da2:	6313      	str	r3, [r2, #48]	; 0x30
 8001da4:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	4b6b      	ldr	r3, [pc, #428]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	4a6a      	ldr	r2, [pc, #424]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc0:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	4b64      	ldr	r3, [pc, #400]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a63      	ldr	r2, [pc, #396]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b61      	ldr	r3, [pc, #388]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	4a5c      	ldr	r2, [pc, #368]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df6:	6313      	str	r3, [r2, #48]	; 0x30
 8001df8:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	4b56      	ldr	r3, [pc, #344]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a55      	ldr	r2, [pc, #340]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4a4e      	ldr	r2, [pc, #312]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001e2a:	f043 0308 	orr.w	r3, r3, #8
 8001e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_LTDC_MspInit+0x210>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e4e:	230e      	movs	r3, #14
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	4619      	mov	r1, r3
 8001e58:	4843      	ldr	r0, [pc, #268]	; (8001f68 <HAL_LTDC_MspInit+0x214>)
 8001e5a:	f002 fa9f 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001e5e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e70:	230e      	movs	r3, #14
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e78:	4619      	mov	r1, r3
 8001e7a:	483c      	ldr	r0, [pc, #240]	; (8001f6c <HAL_LTDC_MspInit+0x218>)
 8001e7c:	f002 fa8e 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001e80:	2303      	movs	r3, #3
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e90:	2309      	movs	r3, #9
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4835      	ldr	r0, [pc, #212]	; (8001f70 <HAL_LTDC_MspInit+0x21c>)
 8001e9c:	f002 fa7e 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001ea0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eb2:	230e      	movs	r3, #14
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eba:	4619      	mov	r1, r3
 8001ebc:	482c      	ldr	r0, [pc, #176]	; (8001f70 <HAL_LTDC_MspInit+0x21c>)
 8001ebe:	f002 fa6d 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001ec2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ed4:	230e      	movs	r3, #14
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	4619      	mov	r1, r3
 8001ede:	4825      	ldr	r0, [pc, #148]	; (8001f74 <HAL_LTDC_MspInit+0x220>)
 8001ee0:	f002 fa5c 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001ee4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ef6:	230e      	movs	r3, #14
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efe:	4619      	mov	r1, r3
 8001f00:	481d      	ldr	r0, [pc, #116]	; (8001f78 <HAL_LTDC_MspInit+0x224>)
 8001f02:	f002 fa4b 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001f06:	2348      	movs	r3, #72	; 0x48
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f16:	230e      	movs	r3, #14
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4816      	ldr	r0, [pc, #88]	; (8001f7c <HAL_LTDC_MspInit+0x228>)
 8001f22:	f002 fa3b 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001f26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f38:	2309      	movs	r3, #9
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f40:	4619      	mov	r1, r3
 8001f42:	480c      	ldr	r0, [pc, #48]	; (8001f74 <HAL_LTDC_MspInit+0x220>)
 8001f44:	f002 fa2a 	bl	800439c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2105      	movs	r1, #5
 8001f4c:	2058      	movs	r0, #88	; 0x58
 8001f4e:	f001 fff0 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f52:	2058      	movs	r0, #88	; 0x58
 8001f54:	f002 f809 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	3738      	adds	r7, #56	; 0x38
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40016800 	.word	0x40016800
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40021400 	.word	0x40021400
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00

08001f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_SPI_MspInit+0x84>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12c      	bne.n	8001ffc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_SPI_MspInit+0x88>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_SPI_MspInit+0x88>)
 8001fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_SPI_MspInit+0x88>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_SPI_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <HAL_SPI_MspInit+0x88>)
 8001fc8:	f043 0320 	orr.w	r3, r3, #32
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_SPI_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001fda:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fec:	2305      	movs	r3, #5
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <HAL_SPI_MspInit+0x8c>)
 8001ff8:	f002 f9d0 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40015000 	.word	0x40015000
 8002008:	40023800 	.word	0x40023800
 800200c:	40021400 	.word	0x40021400

08002010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0b      	ldr	r2, [pc, #44]	; (800204c <HAL_TIM_Base_MspInit+0x3c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d10d      	bne.n	800203e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_TIM_Base_MspInit+0x40>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_TIM_Base_MspInit+0x40>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <HAL_TIM_Base_MspInit+0x40>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40010000 	.word	0x40010000
 8002050:	40023800 	.word	0x40023800

08002054 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_TIM_PWM_MspInit+0x64>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <HAL_TIM_PWM_MspInit+0x64>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_TIM_PWM_MspInit+0x64>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002082:	e012      	b.n	80020aa <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <HAL_TIM_PWM_MspInit+0x68>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10d      	bne.n	80020aa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_TIM_PWM_MspInit+0x64>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <HAL_TIM_PWM_MspInit+0x64>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_TIM_PWM_MspInit+0x64>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40000400 	.word	0x40000400

080020c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d11e      	bne.n	8002120 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a21      	ldr	r2, [pc, #132]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020fe:	2308      	movs	r3, #8
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210e:	2301      	movs	r3, #1
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4816      	ldr	r0, [pc, #88]	; (8002174 <HAL_TIM_MspPostInit+0xb4>)
 800211a:	f002 f93f 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800211e:	e022      	b.n	8002166 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_TIM_MspPostInit+0xb8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d11d      	bne.n	8002166 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_TIM_MspPostInit+0xb0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002146:	2310      	movs	r3, #16
 8002148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002156:	2302      	movs	r3, #2
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <HAL_TIM_MspPostInit+0xb4>)
 8002162:	f002 f91b 	bl	800439c <HAL_GPIO_Init>
}
 8002166:	bf00      	nop
 8002168:	3728      	adds	r7, #40	; 0x28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40020400 	.word	0x40020400
 8002178:	40000400 	.word	0x40000400

0800217c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	; (8002200 <HAL_UART_MspInit+0x84>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d12c      	bne.n	80021f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_UART_MspInit+0x88>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_UART_MspInit+0x88>)
 80021a8:	f043 0310 	orr.w	r3, r3, #16
 80021ac:	6453      	str	r3, [r2, #68]	; 0x44
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_UART_MspInit+0x88>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_UART_MspInit+0x88>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <HAL_UART_MspInit+0x88>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_UART_MspInit+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80021d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021e8:	2307      	movs	r3, #7
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <HAL_UART_MspInit+0x8c>)
 80021f4:	f002 f8d2 	bl	800439c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	; 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40011000 	.word	0x40011000
 8002204:	40023800 	.word	0x40023800
 8002208:	40020000 	.word	0x40020000

0800220c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_FMC_MspInit+0x104>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d16f      	bne.n	8002308 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_FMC_MspInit+0x104>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	4b38      	ldr	r3, [pc, #224]	; (8002314 <HAL_FMC_MspInit+0x108>)
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	4a37      	ldr	r2, [pc, #220]	; (8002314 <HAL_FMC_MspInit+0x108>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6393      	str	r3, [r2, #56]	; 0x38
 800223e:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_FMC_MspInit+0x108>)
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800224a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800224e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800225c:	230c      	movs	r3, #12
 800225e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	4619      	mov	r1, r3
 8002264:	482c      	ldr	r0, [pc, #176]	; (8002318 <HAL_FMC_MspInit+0x10c>)
 8002266:	f002 f899 	bl	800439c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800226a:	2301      	movs	r3, #1
 800226c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800227a:	230c      	movs	r3, #12
 800227c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	4619      	mov	r1, r3
 8002282:	4826      	ldr	r0, [pc, #152]	; (800231c <HAL_FMC_MspInit+0x110>)
 8002284:	f002 f88a 	bl	800439c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002288:	f248 1333 	movw	r3, #33075	; 0x8133
 800228c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800229a:	230c      	movs	r3, #12
 800229c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	481f      	ldr	r0, [pc, #124]	; (8002320 <HAL_FMC_MspInit+0x114>)
 80022a4:	f002 f87a 	bl	800439c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80022a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80022ac:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022ba:	230c      	movs	r3, #12
 80022bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	4818      	ldr	r0, [pc, #96]	; (8002324 <HAL_FMC_MspInit+0x118>)
 80022c4:	f002 f86a 	bl	800439c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80022c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80022cc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022da:	230c      	movs	r3, #12
 80022dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4811      	ldr	r0, [pc, #68]	; (8002328 <HAL_FMC_MspInit+0x11c>)
 80022e4:	f002 f85a 	bl	800439c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80022e8:	2360      	movs	r3, #96	; 0x60
 80022ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022f8:	230c      	movs	r3, #12
 80022fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	4619      	mov	r1, r3
 8002300:	480a      	ldr	r0, [pc, #40]	; (800232c <HAL_FMC_MspInit+0x120>)
 8002302:	f002 f84b 	bl	800439c <HAL_GPIO_Init>
 8002306:	e000      	b.n	800230a <HAL_FMC_MspInit+0xfe>
    return;
 8002308:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000394 	.word	0x20000394
 8002314:	40023800 	.word	0x40023800
 8002318:	40021400 	.word	0x40021400
 800231c:	40020800 	.word	0x40020800
 8002320:	40021800 	.word	0x40021800
 8002324:	40021000 	.word	0x40021000
 8002328:	40020c00 	.word	0x40020c00
 800232c:	40020400 	.word	0x40020400

08002330 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002338:	f7ff ff68 	bl	800220c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	2036      	movs	r0, #54	; 0x36
 800235a:	f001 fdea 	bl	8003f32 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800235e:	2036      	movs	r0, #54	; 0x36
 8002360:	f001 fe03 	bl	8003f6a <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_InitTick+0xa4>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_InitTick+0xa4>)
 800236e:	f043 0310 	orr.w	r3, r3, #16
 8002372:	6413      	str	r3, [r2, #64]	; 0x40
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_InitTick+0xa4>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002380:	f107 0210 	add.w	r2, r7, #16
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f005 f86c 	bl	8007468 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002390:	f005 f842 	bl	8007418 <HAL_RCC_GetPCLK1Freq>
 8002394:	4603      	mov	r3, r0
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	4a13      	ldr	r2, [pc, #76]	; (80023ec <HAL_InitTick+0xa8>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0c9b      	lsrs	r3, r3, #18
 80023a4:	3b01      	subs	r3, #1
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_InitTick+0xac>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_InitTick+0xb0>)
 80023ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_InitTick+0xac>)
 80023b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023b6:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <HAL_InitTick+0xac>)
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_InitTick+0xac>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_InitTick+0xac>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80023c8:	4809      	ldr	r0, [pc, #36]	; (80023f0 <HAL_InitTick+0xac>)
 80023ca:	f005 fad5 	bl	8007978 <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <HAL_InitTick+0xac>)
 80023d6:	f005 fb1e 	bl	8007a16 <HAL_TIM_Base_Start_IT>
 80023da:	4603      	mov	r3, r0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3730      	adds	r7, #48	; 0x30
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	431bde83 	.word	0x431bde83
 80023f0:	2000892c 	.word	0x2000892c
 80023f4:	40001000 	.word	0x40001000

080023f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <HardFault_Handler+0x4>

0800240c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <MemManage_Handler+0x4>

08002412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <BusFault_Handler+0x4>

08002418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <UsageFault_Handler+0x4>

0800241e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002430:	2020      	movs	r0, #32
 8002432:	f002 f979 	bl	8004728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <TIM6_DAC_IRQHandler+0x10>)
 8002442:	f005 fb75 	bl	8007b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	2000892c 	.word	0x2000892c

08002450 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <OTG_HS_IRQHandler+0x10>)
 8002456:	f002 fc0f 	bl	8004c78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20008d74 	.word	0x20008d74

08002464 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <LTDC_IRQHandler+0x10>)
 800246a:	f004 f8f9 	bl	8006660 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200086c0 	.word	0x200086c0

08002478 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <DMA2D_IRQHandler+0x10>)
 800247e:	f001 fdeb 	bl	8004058 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20008878 	.word	0x20008878

0800248c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <_sbrk+0x50>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <_sbrk+0x16>
		heap_end = &end;
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <_sbrk+0x50>)
 800249e:	4a10      	ldr	r2, [pc, #64]	; (80024e0 <_sbrk+0x54>)
 80024a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <_sbrk+0x50>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <_sbrk+0x50>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	466a      	mov	r2, sp
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d907      	bls.n	80024c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80024b6:	f00c fe01 	bl	800f0bc <__errno>
 80024ba:	4603      	mov	r3, r0
 80024bc:	220c      	movs	r2, #12
 80024be:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
 80024c4:	e006      	b.n	80024d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <_sbrk+0x50>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a03      	ldr	r2, [pc, #12]	; (80024dc <_sbrk+0x50>)
 80024d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000398 	.word	0x20000398
 80024e0:	20009048 	.word	0x20009048

080024e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <SystemInit+0x28>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <SystemInit+0x28>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <SystemInit+0x28>)
 80024fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fe:	609a      	str	r2, [r3, #8]
#endif
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002548 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002514:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002516:	e003      	b.n	8002520 <LoopCopyDataInit>

08002518 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800251a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800251c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800251e:	3104      	adds	r1, #4

08002520 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002520:	480b      	ldr	r0, [pc, #44]	; (8002550 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002524:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002526:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002528:	d3f6      	bcc.n	8002518 <CopyDataInit>
  ldr  r2, =_sbss
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800252c:	e002      	b.n	8002534 <LoopFillZerobss>

0800252e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800252e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002530:	f842 3b04 	str.w	r3, [r2], #4

08002534 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002536:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002538:	d3f9      	bcc.n	800252e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800253a:	f7ff ffd3 	bl	80024e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800253e:	f00c fdc3 	bl	800f0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002542:	f7fe fc9b 	bl	8000e7c <main>
  bx  lr    
 8002546:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002548:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800254c:	0800fad0 	.word	0x0800fad0
  ldr  r0, =_sdata
 8002550:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002554:	20000120 	.word	0x20000120
  ldr  r2, =_sbss
 8002558:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 800255c:	20009048 	.word	0x20009048

08002560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002560:	e7fe      	b.n	8002560 <ADC_IRQHandler>
 8002562:	0000      	movs	r0, r0
 8002564:	0000      	movs	r0, r0
	...

08002568 <motor_encoder__get_speed>:
  observed_rotation_count = rotation_counter;
  calculate_rps(observed_rotation_count);
  rotation_counter = 0;
}

float motor_encoder__get_speed() {
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
  float current_speed;
  current_speed = (float)((rotation_to_convert * 2 * PI * wheel_radius) / gear_ratio);
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <motor_encoder__get_speed+0x88>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002578:	ee17 0a90 	vmov	r0, s15
 800257c:	f7fd fff4 	bl	8000568 <__aeabi_f2d>
 8002580:	a319      	add	r3, pc, #100	; (adr r3, 80025e8 <motor_encoder__get_speed+0x80>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f7fe f847 	bl	8000618 <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4614      	mov	r4, r2
 8002590:	461d      	mov	r5, r3
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <motor_encoder__get_speed+0x8c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd ffe6 	bl	8000568 <__aeabi_f2d>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4620      	mov	r0, r4
 80025a2:	4629      	mov	r1, r5
 80025a4:	f7fe f838 	bl	8000618 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4614      	mov	r4, r2
 80025ae:	461d      	mov	r5, r3
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <motor_encoder__get_speed+0x90>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ffd7 	bl	8000568 <__aeabi_f2d>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4620      	mov	r0, r4
 80025c0:	4629      	mov	r1, r5
 80025c2:	f7fe f953 	bl	800086c <__aeabi_ddiv>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe fa55 	bl	8000a7c <__aeabi_d2f>
 80025d2:	4603      	mov	r3, r0
 80025d4:	607b      	str	r3, [r7, #4]
  return current_speed;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	ee07 3a90 	vmov	s15, r3
}
 80025dc:	eeb0 0a67 	vmov.f32	s0, s15
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bdb0      	pop	{r4, r5, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	51eb851f 	.word	0x51eb851f
 80025ec:	40091eb8 	.word	0x40091eb8
 80025f0:	200003a0 	.word	0x200003a0
 80025f4:	20000004 	.word	0x20000004
 80025f8:	20000008 	.word	0x20000008

080025fc <motor_encoder__get_rps>:

uint32_t motor_encoder__get_rps(void) { return rps; }
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <motor_encoder__get_rps+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	2000039c 	.word	0x2000039c

08002614 <HAL_GPIO_EXTI_Callback>:
//    LPC_GPIOINT->IO0IntClr = encoder_pin_mask;
//  }
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  rotation_counter++;
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_GPIO_EXTI_Callback+0x20>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	4a03      	ldr	r2, [pc, #12]	; (8002634 <HAL_GPIO_EXTI_Callback+0x20>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	200003a4 	.word	0x200003a4

08002638 <motor_esc__control_speed>:
int received_speed = 0;
float calculated_pwm_dc = 15;

static uint8_t reverse_counter = 0;

void motor_esc__control_speed(float motor_speed) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	ed87 0a01 	vstr	s0, [r7, #4]
  int current_speed_from_enc = motor_encoder__get_speed();
 8002642:	f7ff ff91 	bl	8002568 <motor_encoder__get_speed>
 8002646:	eef0 7a40 	vmov.f32	s15, s0
 800264a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800264e:	ee17 3a90 	vmov	r3, s15
 8002652:	60fb      	str	r3, [r7, #12]
  if (motor_speed <= 0) {
 8002654:	edd7 7a01 	vldr	s15, [r7, #4]
 8002658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002660:	d847      	bhi.n	80026f2 <motor_esc__control_speed+0xba>
    boost_pwm = false;
 8002662:	4bb3      	ldr	r3, [pc, #716]	; (8002930 <motor_esc__control_speed+0x2f8>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
    reverse_counter++;
 8002668:	4bb2      	ldr	r3, [pc, #712]	; (8002934 <motor_esc__control_speed+0x2fc>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4bb0      	ldr	r3, [pc, #704]	; (8002934 <motor_esc__control_speed+0x2fc>)
 8002672:	701a      	strb	r2, [r3, #0]
    if (reverse_flag) {
 8002674:	4bb0      	ldr	r3, [pc, #704]	; (8002938 <motor_esc__control_speed+0x300>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <motor_esc__control_speed+0x4c>
      calculated_pwm_dc = PWM_REVERSE;
 800267c:	4baf      	ldr	r3, [pc, #700]	; (800293c <motor_esc__control_speed+0x304>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4aaf      	ldr	r2, [pc, #700]	; (8002940 <motor_esc__control_speed+0x308>)
 8002682:	6013      	str	r3, [r2, #0]
//      if (motor_speed < 0)
//        gpio__set(buzzer);
    }

    if (reverse_counter >= 1 && (!reverse_flag)) {
 8002684:	4bab      	ldr	r3, [pc, #684]	; (8002934 <motor_esc__control_speed+0x2fc>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d059      	beq.n	8002740 <motor_esc__control_speed+0x108>
 800268c:	4baa      	ldr	r3, [pc, #680]	; (8002938 <motor_esc__control_speed+0x300>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d052      	beq.n	8002740 <motor_esc__control_speed+0x108>
      //      received_speed = SPEED_R;
      if (reverse_counter < 8) {
 800269a:	4ba6      	ldr	r3, [pc, #664]	; (8002934 <motor_esc__control_speed+0x2fc>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b07      	cmp	r3, #7
 80026a0:	d803      	bhi.n	80026aa <motor_esc__control_speed+0x72>
        calculated_pwm_dc = PWM_FULL_REVERSE;
 80026a2:	4ba8      	ldr	r3, [pc, #672]	; (8002944 <motor_esc__control_speed+0x30c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4aa6      	ldr	r2, [pc, #664]	; (8002940 <motor_esc__control_speed+0x308>)
 80026a8:	6013      	str	r3, [r2, #0]
//        gpio__set(mid_ind);
      }
      if (reverse_counter >= 8 && reverse_counter < 11) {
 80026aa:	4ba2      	ldr	r3, [pc, #648]	; (8002934 <motor_esc__control_speed+0x2fc>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b07      	cmp	r3, #7
 80026b0:	d907      	bls.n	80026c2 <motor_esc__control_speed+0x8a>
 80026b2:	4ba0      	ldr	r3, [pc, #640]	; (8002934 <motor_esc__control_speed+0x2fc>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b0a      	cmp	r3, #10
 80026b8:	d803      	bhi.n	80026c2 <motor_esc__control_speed+0x8a>
        calculated_pwm_dc = PWM_NEUTRAL;
 80026ba:	4ba3      	ldr	r3, [pc, #652]	; (8002948 <motor_esc__control_speed+0x310>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4aa0      	ldr	r2, [pc, #640]	; (8002940 <motor_esc__control_speed+0x308>)
 80026c0:	6013      	str	r3, [r2, #0]
      }
      if (reverse_counter >= 11) {
 80026c2:	4b9c      	ldr	r3, [pc, #624]	; (8002934 <motor_esc__control_speed+0x2fc>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b0a      	cmp	r3, #10
 80026c8:	d93a      	bls.n	8002740 <motor_esc__control_speed+0x108>
        if (motor_encoder__get_rps() != 0) {
 80026ca:	f7ff ff97 	bl	80025fc <motor_encoder__get_rps>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <motor_esc__control_speed+0xa4>
          reverse_counter = 9;
 80026d4:	4b97      	ldr	r3, [pc, #604]	; (8002934 <motor_esc__control_speed+0x2fc>)
 80026d6:	2209      	movs	r2, #9
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e031      	b.n	8002740 <motor_esc__control_speed+0x108>
        } else {
          calculated_pwm_dc = PWM_REVERSE;
 80026dc:	4b97      	ldr	r3, [pc, #604]	; (800293c <motor_esc__control_speed+0x304>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a97      	ldr	r2, [pc, #604]	; (8002940 <motor_esc__control_speed+0x308>)
 80026e2:	6013      	str	r3, [r2, #0]
          reverse_flag = true;
 80026e4:	4b94      	ldr	r3, [pc, #592]	; (8002938 <motor_esc__control_speed+0x300>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
          reverse_counter = 0;
 80026ea:	4b92      	ldr	r3, [pc, #584]	; (8002934 <motor_esc__control_speed+0x2fc>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e026      	b.n	8002740 <motor_esc__control_speed+0x108>
//      gpio__reset(board_io__get_led1());
    }
  }
  // HERE END
  else {
    reverse_flag = false;
 80026f2:	4b91      	ldr	r3, [pc, #580]	; (8002938 <motor_esc__control_speed+0x300>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
    reverse_counter = 0;
 80026f8:	4b8e      	ldr	r3, [pc, #568]	; (8002934 <motor_esc__control_speed+0x2fc>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
//    gpio__set(board_io__get_led1());
//    gpio__reset(buzzer);

    static uint8_t boost_count = 0;
    if (motor_encoder__get_rps() == 0) {
 80026fe:	f7ff ff7d 	bl	80025fc <motor_encoder__get_rps>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d115      	bne.n	8002734 <motor_esc__control_speed+0xfc>
      boost_count++;
 8002708:	4b90      	ldr	r3, [pc, #576]	; (800294c <motor_esc__control_speed+0x314>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b8e      	ldr	r3, [pc, #568]	; (800294c <motor_esc__control_speed+0x314>)
 8002712:	701a      	strb	r2, [r3, #0]
      if (boost_count > 65 && boost_count < 76) {
 8002714:	4b8d      	ldr	r3, [pc, #564]	; (800294c <motor_esc__control_speed+0x314>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b41      	cmp	r3, #65	; 0x41
 800271a:	d907      	bls.n	800272c <motor_esc__control_speed+0xf4>
 800271c:	4b8b      	ldr	r3, [pc, #556]	; (800294c <motor_esc__control_speed+0x314>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b4b      	cmp	r3, #75	; 0x4b
 8002722:	d803      	bhi.n	800272c <motor_esc__control_speed+0xf4>
        boost_pwm = true;
 8002724:	4b82      	ldr	r3, [pc, #520]	; (8002930 <motor_esc__control_speed+0x2f8>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e009      	b.n	8002740 <motor_esc__control_speed+0x108>
      } else {
        boost_pwm = false;
 800272c:	4b80      	ldr	r3, [pc, #512]	; (8002930 <motor_esc__control_speed+0x2f8>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e005      	b.n	8002740 <motor_esc__control_speed+0x108>
      }
    } else {
      boost_count = 0;
 8002734:	4b85      	ldr	r3, [pc, #532]	; (800294c <motor_esc__control_speed+0x314>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
      boost_pwm = false;
 800273a:	4b7d      	ldr	r3, [pc, #500]	; (8002930 <motor_esc__control_speed+0x2f8>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (motor_speed >= 0 && motor_speed < (float)(0.5)) {
 8002740:	edd7 7a01 	vldr	s15, [r7, #4]
 8002744:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274c:	db24      	blt.n	8002798 <motor_esc__control_speed+0x160>
 800274e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002752:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275e:	d51b      	bpl.n	8002798 <motor_esc__control_speed+0x160>
    if (!hard_brake) {
 8002760:	4b7b      	ldr	r3, [pc, #492]	; (8002950 <motor_esc__control_speed+0x318>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	f083 0301 	eor.w	r3, r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00f      	beq.n	800278e <motor_esc__control_speed+0x156>
      hard_brake = true;
 800276e:	4b78      	ldr	r3, [pc, #480]	; (8002950 <motor_esc__control_speed+0x318>)
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
      received_speed = SPEED_ZERO;
 8002774:	eddf 7a77 	vldr	s15, [pc, #476]	; 8002954 <motor_esc__control_speed+0x31c>
 8002778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800277c:	ee17 2a90 	vmov	r2, s15
 8002780:	4b75      	ldr	r3, [pc, #468]	; (8002958 <motor_esc__control_speed+0x320>)
 8002782:	601a      	str	r2, [r3, #0]
      calculated_pwm_dc = PWM_FULL_REVERSE;
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <motor_esc__control_speed+0x30c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6d      	ldr	r2, [pc, #436]	; (8002940 <motor_esc__control_speed+0x308>)
 800278a:	6013      	str	r3, [r2, #0]
    if (!hard_brake) {
 800278c:	e1d6      	b.n	8002b3c <motor_esc__control_speed+0x504>

    } else {
      calculated_pwm_dc = PWM_NEUTRAL;
 800278e:	4b6e      	ldr	r3, [pc, #440]	; (8002948 <motor_esc__control_speed+0x310>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6b      	ldr	r2, [pc, #428]	; (8002940 <motor_esc__control_speed+0x308>)
 8002794:	6013      	str	r3, [r2, #0]
    if (!hard_brake) {
 8002796:	e1d1      	b.n	8002b3c <motor_esc__control_speed+0x504>
    }
  } else if (motor_speed >= (float)(0.5) && motor_speed < 1) {
 8002798:	edd7 7a01 	vldr	s15, [r7, #4]
 800279c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	db18      	blt.n	80027dc <motor_esc__control_speed+0x1a4>
 80027aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ba:	d50f      	bpl.n	80027dc <motor_esc__control_speed+0x1a4>
    hard_brake = false;
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <motor_esc__control_speed+0x318>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L1;
 80027c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80027c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ca:	ee17 2a90 	vmov	r2, s15
 80027ce:	4b62      	ldr	r3, [pc, #392]	; (8002958 <motor_esc__control_speed+0x320>)
 80027d0:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_1;
 80027d2:	4b62      	ldr	r3, [pc, #392]	; (800295c <motor_esc__control_speed+0x324>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5a      	ldr	r2, [pc, #360]	; (8002940 <motor_esc__control_speed+0x308>)
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e1af      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 1 && motor_speed < 2) {
 80027dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80027e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ec:	db18      	blt.n	8002820 <motor_esc__control_speed+0x1e8>
 80027ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80027f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	d50f      	bpl.n	8002820 <motor_esc__control_speed+0x1e8>
    hard_brake = false;
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <motor_esc__control_speed+0x318>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 8002806:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800280a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800280e:	ee17 2a90 	vmov	r2, s15
 8002812:	4b51      	ldr	r3, [pc, #324]	; (8002958 <motor_esc__control_speed+0x320>)
 8002814:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_2;
 8002816:	4b52      	ldr	r3, [pc, #328]	; (8002960 <motor_esc__control_speed+0x328>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a49      	ldr	r2, [pc, #292]	; (8002940 <motor_esc__control_speed+0x308>)
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e18d      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 2 && motor_speed < 3) {
 8002820:	edd7 7a01 	vldr	s15, [r7, #4]
 8002824:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	db18      	blt.n	8002864 <motor_esc__control_speed+0x22c>
 8002832:	edd7 7a01 	vldr	s15, [r7, #4]
 8002836:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800283a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d50f      	bpl.n	8002864 <motor_esc__control_speed+0x22c>
    hard_brake = false;
 8002844:	4b42      	ldr	r3, [pc, #264]	; (8002950 <motor_esc__control_speed+0x318>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 800284a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800284e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002852:	ee17 2a90 	vmov	r2, s15
 8002856:	4b40      	ldr	r3, [pc, #256]	; (8002958 <motor_esc__control_speed+0x320>)
 8002858:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_3;
 800285a:	4b42      	ldr	r3, [pc, #264]	; (8002964 <motor_esc__control_speed+0x32c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a38      	ldr	r2, [pc, #224]	; (8002940 <motor_esc__control_speed+0x308>)
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e16b      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 3 && motor_speed < 4) {
 8002864:	edd7 7a01 	vldr	s15, [r7, #4]
 8002868:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800286c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	db18      	blt.n	80028a8 <motor_esc__control_speed+0x270>
 8002876:	edd7 7a01 	vldr	s15, [r7, #4]
 800287a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800287e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	d50f      	bpl.n	80028a8 <motor_esc__control_speed+0x270>
    hard_brake = false;
 8002888:	4b31      	ldr	r3, [pc, #196]	; (8002950 <motor_esc__control_speed+0x318>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 800288e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002896:	ee17 2a90 	vmov	r2, s15
 800289a:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <motor_esc__control_speed+0x320>)
 800289c:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_4;
 800289e:	4b32      	ldr	r3, [pc, #200]	; (8002968 <motor_esc__control_speed+0x330>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a27      	ldr	r2, [pc, #156]	; (8002940 <motor_esc__control_speed+0x308>)
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e149      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 4 && motor_speed < 5) {
 80028a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ac:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80028b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b8:	db18      	blt.n	80028ec <motor_esc__control_speed+0x2b4>
 80028ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80028be:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80028c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ca:	d50f      	bpl.n	80028ec <motor_esc__control_speed+0x2b4>
    hard_brake = false;
 80028cc:	4b20      	ldr	r3, [pc, #128]	; (8002950 <motor_esc__control_speed+0x318>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 80028d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80028d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028da:	ee17 2a90 	vmov	r2, s15
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <motor_esc__control_speed+0x320>)
 80028e0:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_5;
 80028e2:	4b22      	ldr	r3, [pc, #136]	; (800296c <motor_esc__control_speed+0x334>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a16      	ldr	r2, [pc, #88]	; (8002940 <motor_esc__control_speed+0x308>)
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e127      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 5 && motor_speed < 6) {
 80028ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80028f0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80028f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fc:	db3a      	blt.n	8002974 <motor_esc__control_speed+0x33c>
 80028fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002902:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	d531      	bpl.n	8002974 <motor_esc__control_speed+0x33c>
    hard_brake = false;
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <motor_esc__control_speed+0x318>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 8002916:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800291a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800291e:	ee17 2a90 	vmov	r2, s15
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <motor_esc__control_speed+0x320>)
 8002924:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_6;
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <motor_esc__control_speed+0x338>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <motor_esc__control_speed+0x308>)
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e105      	b.n	8002b3c <motor_esc__control_speed+0x504>
 8002930:	200003ac 	.word	0x200003ac
 8002934:	200003b4 	.word	0x200003b4
 8002938:	200003ad 	.word	0x200003ad
 800293c:	20000044 	.word	0x20000044
 8002940:	2000004c 	.word	0x2000004c
 8002944:	20000048 	.word	0x20000048
 8002948:	2000000c 	.word	0x2000000c
 800294c:	200003b5 	.word	0x200003b5
 8002950:	200003ae 	.word	0x200003ae
 8002954:	00000000 	.word	0x00000000
 8002958:	200003b0 	.word	0x200003b0
 800295c:	20000010 	.word	0x20000010
 8002960:	20000014 	.word	0x20000014
 8002964:	20000018 	.word	0x20000018
 8002968:	2000001c 	.word	0x2000001c
 800296c:	20000020 	.word	0x20000020
 8002970:	20000024 	.word	0x20000024
  } else if (motor_speed >= 6 && motor_speed < 7) {
 8002974:	edd7 7a01 	vldr	s15, [r7, #4]
 8002978:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800297c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	db18      	blt.n	80029b8 <motor_esc__control_speed+0x380>
 8002986:	edd7 7a01 	vldr	s15, [r7, #4]
 800298a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800298e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	d50f      	bpl.n	80029b8 <motor_esc__control_speed+0x380>
    hard_brake = false;
 8002998:	4b6e      	ldr	r3, [pc, #440]	; (8002b54 <motor_esc__control_speed+0x51c>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 800299e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80029a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a6:	ee17 2a90 	vmov	r2, s15
 80029aa:	4b6b      	ldr	r3, [pc, #428]	; (8002b58 <motor_esc__control_speed+0x520>)
 80029ac:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_7;
 80029ae:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <motor_esc__control_speed+0x524>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6b      	ldr	r2, [pc, #428]	; (8002b60 <motor_esc__control_speed+0x528>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e0c1      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 7 && motor_speed < 8) {
 80029b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80029bc:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80029c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c8:	db18      	blt.n	80029fc <motor_esc__control_speed+0x3c4>
 80029ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80029ce:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80029d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029da:	d50f      	bpl.n	80029fc <motor_esc__control_speed+0x3c4>
    hard_brake = false;
 80029dc:	4b5d      	ldr	r3, [pc, #372]	; (8002b54 <motor_esc__control_speed+0x51c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 80029e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80029e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ea:	ee17 2a90 	vmov	r2, s15
 80029ee:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <motor_esc__control_speed+0x520>)
 80029f0:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_8;
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <motor_esc__control_speed+0x52c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a5a      	ldr	r2, [pc, #360]	; (8002b60 <motor_esc__control_speed+0x528>)
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e09f      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 8 && motor_speed < 9) {
 80029fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a00:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0c:	db18      	blt.n	8002a40 <motor_esc__control_speed+0x408>
 8002a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a12:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1e:	d50f      	bpl.n	8002a40 <motor_esc__control_speed+0x408>
    hard_brake = false;
 8002a20:	4b4c      	ldr	r3, [pc, #304]	; (8002b54 <motor_esc__control_speed+0x51c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 8002a26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a2e:	ee17 2a90 	vmov	r2, s15
 8002a32:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <motor_esc__control_speed+0x520>)
 8002a34:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_9;
 8002a36:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <motor_esc__control_speed+0x530>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a49      	ldr	r2, [pc, #292]	; (8002b60 <motor_esc__control_speed+0x528>)
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e07d      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 9 && motor_speed < 10) {
 8002a40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a44:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a50:	db18      	blt.n	8002a84 <motor_esc__control_speed+0x44c>
 8002a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	d50f      	bpl.n	8002a84 <motor_esc__control_speed+0x44c>
    hard_brake = false;
 8002a64:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <motor_esc__control_speed+0x51c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 8002a6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a72:	ee17 2a90 	vmov	r2, s15
 8002a76:	4b38      	ldr	r3, [pc, #224]	; (8002b58 <motor_esc__control_speed+0x520>)
 8002a78:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_10;
 8002a7a:	4b3c      	ldr	r3, [pc, #240]	; (8002b6c <motor_esc__control_speed+0x534>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a38      	ldr	r2, [pc, #224]	; (8002b60 <motor_esc__control_speed+0x528>)
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e05b      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 10 && motor_speed < 11) {
 8002a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a94:	db18      	blt.n	8002ac8 <motor_esc__control_speed+0x490>
 8002a96:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a9a:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8002a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa6:	d50f      	bpl.n	8002ac8 <motor_esc__control_speed+0x490>
    hard_brake = false;
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <motor_esc__control_speed+0x51c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 8002aae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab6:	ee17 2a90 	vmov	r2, s15
 8002aba:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <motor_esc__control_speed+0x520>)
 8002abc:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_11;
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <motor_esc__control_speed+0x538>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <motor_esc__control_speed+0x528>)
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e039      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 11 && motor_speed < 12) {
 8002ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002acc:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8002ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	db18      	blt.n	8002b0c <motor_esc__control_speed+0x4d4>
 8002ada:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ade:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	d50f      	bpl.n	8002b0c <motor_esc__control_speed+0x4d4>
    hard_brake = false;
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <motor_esc__control_speed+0x51c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L2;
 8002af2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002af6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002afa:	ee17 2a90 	vmov	r2, s15
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <motor_esc__control_speed+0x520>)
 8002b00:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_12;
 8002b02:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <motor_esc__control_speed+0x53c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <motor_esc__control_speed+0x528>)
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e017      	b.n	8002b3c <motor_esc__control_speed+0x504>
  } else if (motor_speed >= 12) {
 8002b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b10:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	db0e      	blt.n	8002b3c <motor_esc__control_speed+0x504>
    hard_brake = false;
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <motor_esc__control_speed+0x51c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
    received_speed = SPEED_L3;
 8002b24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b2c:	ee17 2a90 	vmov	r2, s15
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <motor_esc__control_speed+0x520>)
 8002b32:	601a      	str	r2, [r3, #0]
    calculated_pwm_dc = PWM_SPEED_13;
 8002b34:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <motor_esc__control_speed+0x540>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <motor_esc__control_speed+0x528>)
 8002b3a:	6013      	str	r3, [r2, #0]
    // calculated_pwm_dc = 15;
  }
  // }
  //  }

  motor_esc__set_motor_speed(calculated_pwm_dc);
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <motor_esc__control_speed+0x528>)
 8002b3e:	edd3 7a00 	vldr	s15, [r3]
 8002b42:	eeb0 0a67 	vmov.f32	s0, s15
 8002b46:	f000 f9e7 	bl	8002f18 <motor_esc__set_motor_speed>
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200003ae 	.word	0x200003ae
 8002b58:	200003b0 	.word	0x200003b0
 8002b5c:	20000028 	.word	0x20000028
 8002b60:	2000004c 	.word	0x2000004c
 8002b64:	2000002c 	.word	0x2000002c
 8002b68:	20000030 	.word	0x20000030
 8002b6c:	20000034 	.word	0x20000034
 8002b70:	20000038 	.word	0x20000038
 8002b74:	2000003c 	.word	0x2000003c
 8002b78:	20000040 	.word	0x20000040

08002b7c <motor_esc__steer_handler>:
  }
}

void motor_esc__stop_motor() { motor_esc__set_motor_speed(PWM_NEUTRAL); }

void motor_esc__steer_handler(int8_t angle) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  uint8_t calculated_angle = PWM_STRAIGHT;
 8002b86:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8002b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b8e:	edc7 7a00 	vstr	s15, [r7]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	73fb      	strb	r3, [r7, #15]

  if (angle >= (-45) && angle <= (-40))
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 8002b9e:	db07      	blt.n	8002bb0 <motor_esc__steer_handler+0x34>
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8002ba8:	da02      	bge.n	8002bb0 <motor_esc__steer_handler+0x34>
    calculated_angle = RIGHT_1;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	e0cf      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle > (-40) && angle < (-35))
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8002bb8:	db07      	blt.n	8002bca <motor_esc__steer_handler+0x4e>
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	f113 0f23 	cmn.w	r3, #35	; 0x23
 8002bc2:	da02      	bge.n	8002bca <motor_esc__steer_handler+0x4e>
    calculated_angle = RIGHT_2;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
 8002bc8:	e0c2      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-35) && angle < (-30))
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	f113 0f23 	cmn.w	r3, #35	; 0x23
 8002bd2:	db07      	blt.n	8002be4 <motor_esc__steer_handler+0x68>
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	f113 0f1e 	cmn.w	r3, #30
 8002bdc:	da02      	bge.n	8002be4 <motor_esc__steer_handler+0x68>
    calculated_angle = RIGHT_3;
 8002bde:	2302      	movs	r3, #2
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	e0b5      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-30) && angle < (-25))
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	f113 0f1e 	cmn.w	r3, #30
 8002bec:	db07      	blt.n	8002bfe <motor_esc__steer_handler+0x82>
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	f113 0f19 	cmn.w	r3, #25
 8002bf6:	da02      	bge.n	8002bfe <motor_esc__steer_handler+0x82>
    calculated_angle = RIGHT_4;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	e0a8      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-25) && angle < (-20))
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	f113 0f19 	cmn.w	r3, #25
 8002c06:	db07      	blt.n	8002c18 <motor_esc__steer_handler+0x9c>
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	f113 0f14 	cmn.w	r3, #20
 8002c10:	da02      	bge.n	8002c18 <motor_esc__steer_handler+0x9c>
    calculated_angle = RIGHT_5;
 8002c12:	2304      	movs	r3, #4
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	e09b      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-20) && angle < (-15))
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	f113 0f14 	cmn.w	r3, #20
 8002c20:	db07      	blt.n	8002c32 <motor_esc__steer_handler+0xb6>
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	f113 0f0f 	cmn.w	r3, #15
 8002c2a:	da02      	bge.n	8002c32 <motor_esc__steer_handler+0xb6>
    calculated_angle = RIGHT_6;
 8002c2c:	2305      	movs	r3, #5
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e08e      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-15) && angle < (-10))
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	f113 0f0f 	cmn.w	r3, #15
 8002c3a:	db07      	blt.n	8002c4c <motor_esc__steer_handler+0xd0>
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	f113 0f0a 	cmn.w	r3, #10
 8002c44:	da02      	bge.n	8002c4c <motor_esc__steer_handler+0xd0>
    calculated_angle = RIGHT_7;
 8002c46:	2306      	movs	r3, #6
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	e081      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-10) && angle < (-5))
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	f113 0f0a 	cmn.w	r3, #10
 8002c54:	db07      	blt.n	8002c66 <motor_esc__steer_handler+0xea>
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	f113 0f05 	cmn.w	r3, #5
 8002c5e:	da02      	bge.n	8002c66 <motor_esc__steer_handler+0xea>
    calculated_angle = RIGHT_8;
 8002c60:	2307      	movs	r3, #7
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e074      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= (-5) && angle < (0))
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	f113 0f05 	cmn.w	r3, #5
 8002c6e:	db06      	blt.n	8002c7e <motor_esc__steer_handler+0x102>
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	da02      	bge.n	8002c7e <motor_esc__steer_handler+0x102>
    calculated_angle = RIGHT_9;
 8002c78:	2308      	movs	r3, #8
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e068      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle == 0)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <motor_esc__steer_handler+0x110>
    calculated_angle = STRAIGHT;
 8002c86:	2312      	movs	r3, #18
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	e061      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle > 0 && angle < 5)
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	dd06      	ble.n	8002ca2 <motor_esc__steer_handler+0x126>
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	dc02      	bgt.n	8002ca2 <motor_esc__steer_handler+0x126>
    calculated_angle = LEFT_9;
 8002c9c:	2311      	movs	r3, #17
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e056      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 5 && angle < 10)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	dd06      	ble.n	8002cb8 <motor_esc__steer_handler+0x13c>
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	2b09      	cmp	r3, #9
 8002cb0:	dc02      	bgt.n	8002cb8 <motor_esc__steer_handler+0x13c>
    calculated_angle = LEFT_8;
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e04b      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 10 && angle < 15)
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	dd06      	ble.n	8002cce <motor_esc__steer_handler+0x152>
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	2b0e      	cmp	r3, #14
 8002cc6:	dc02      	bgt.n	8002cce <motor_esc__steer_handler+0x152>
    calculated_angle = LEFT_7;
 8002cc8:	230f      	movs	r3, #15
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e040      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 15 && angle < 20)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b0e      	cmp	r3, #14
 8002cd4:	dd06      	ble.n	8002ce4 <motor_esc__steer_handler+0x168>
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b13      	cmp	r3, #19
 8002cdc:	dc02      	bgt.n	8002ce4 <motor_esc__steer_handler+0x168>
    calculated_angle = LEFT_6;
 8002cde:	230e      	movs	r3, #14
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e035      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 20 && angle < 25)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b13      	cmp	r3, #19
 8002cea:	dd06      	ble.n	8002cfa <motor_esc__steer_handler+0x17e>
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	2b18      	cmp	r3, #24
 8002cf2:	dc02      	bgt.n	8002cfa <motor_esc__steer_handler+0x17e>
    calculated_angle = LEFT_5;
 8002cf4:	230d      	movs	r3, #13
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	e02a      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 25 && angle < 30)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	2b18      	cmp	r3, #24
 8002d00:	dd06      	ble.n	8002d10 <motor_esc__steer_handler+0x194>
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	2b1d      	cmp	r3, #29
 8002d08:	dc02      	bgt.n	8002d10 <motor_esc__steer_handler+0x194>
    calculated_angle = LEFT_4;
 8002d0a:	230c      	movs	r3, #12
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	e01f      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 30 && angle < 35)
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	2b1d      	cmp	r3, #29
 8002d16:	dd06      	ble.n	8002d26 <motor_esc__steer_handler+0x1aa>
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b22      	cmp	r3, #34	; 0x22
 8002d1e:	dc02      	bgt.n	8002d26 <motor_esc__steer_handler+0x1aa>
    calculated_angle = LEFT_3;
 8002d20:	230b      	movs	r3, #11
 8002d22:	73fb      	strb	r3, [r7, #15]
 8002d24:	e014      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 35 && angle < 40)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	2b22      	cmp	r3, #34	; 0x22
 8002d2c:	dd06      	ble.n	8002d3c <motor_esc__steer_handler+0x1c0>
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	2b27      	cmp	r3, #39	; 0x27
 8002d34:	dc02      	bgt.n	8002d3c <motor_esc__steer_handler+0x1c0>
    calculated_angle = LEFT_2;
 8002d36:	230a      	movs	r3, #10
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e009      	b.n	8002d50 <motor_esc__steer_handler+0x1d4>
  else if (angle >= 40 && angle <= 45)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b27      	cmp	r3, #39	; 0x27
 8002d42:	dd05      	ble.n	8002d50 <motor_esc__steer_handler+0x1d4>
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	2b2d      	cmp	r3, #45	; 0x2d
 8002d4a:	dc01      	bgt.n	8002d50 <motor_esc__steer_handler+0x1d4>
    calculated_angle = LEFT_1;
 8002d4c:	2309      	movs	r3, #9
 8002d4e:	73fb      	strb	r3, [r7, #15]

  switch (calculated_angle) {
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b12      	cmp	r3, #18
 8002d54:	f200 80af 	bhi.w	8002eb6 <motor_esc__steer_handler+0x33a>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <motor_esc__steer_handler+0x1e4>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002e2b 	.word	0x08002e2b
 8002d64:	08002e39 	.word	0x08002e39
 8002d68:	08002e47 	.word	0x08002e47
 8002d6c:	08002e55 	.word	0x08002e55
 8002d70:	08002e63 	.word	0x08002e63
 8002d74:	08002e71 	.word	0x08002e71
 8002d78:	08002e7f 	.word	0x08002e7f
 8002d7c:	08002e8d 	.word	0x08002e8d
 8002d80:	08002e9b 	.word	0x08002e9b
 8002d84:	08002dad 	.word	0x08002dad
 8002d88:	08002dbb 	.word	0x08002dbb
 8002d8c:	08002dc9 	.word	0x08002dc9
 8002d90:	08002dd7 	.word	0x08002dd7
 8002d94:	08002de5 	.word	0x08002de5
 8002d98:	08002df3 	.word	0x08002df3
 8002d9c:	08002e01 	.word	0x08002e01
 8002da0:	08002e0f 	.word	0x08002e0f
 8002da4:	08002e1d 	.word	0x08002e1d
 8002da8:	08002ea9 	.word	0x08002ea9
  case LEFT_1:
    motor_esc__set_steer_angle(PWM_LEFT_1);
 8002dac:	eef2 7a06 	vmov.f32	s15, #38	; 0x41300000  11.0
 8002db0:	eeb0 0a67 	vmov.f32	s0, s15
 8002db4:	f000 f88e 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002db8:	e07e      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>

  case LEFT_2:
    motor_esc__set_steer_angle(PWM_LEFT_2);
 8002dba:	eef2 7a07 	vmov.f32	s15, #39	; 0x41380000  11.5
 8002dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc2:	f000 f887 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002dc6:	e077      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>

  case LEFT_3:
    motor_esc__set_steer_angle(PWM_LEFT_3);
 8002dc8:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 8002dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd0:	f000 f880 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002dd4:	e070      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>

  case LEFT_4:
    motor_esc__set_steer_angle(PWM_LEFT_4);
 8002dd6:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8002dda:	eeb0 0a67 	vmov.f32	s0, s15
 8002dde:	f000 f879 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002de2:	e069      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case LEFT_5:
    motor_esc__set_steer_angle(PWM_LEFT_5);
 8002de4:	eef2 7a0a 	vmov.f32	s15, #42	; 0x41500000  13.0
 8002de8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dec:	f000 f872 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002df0:	e062      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case LEFT_6:
    motor_esc__set_steer_angle(PWM_LEFT_6);
 8002df2:	eef2 7a0b 	vmov.f32	s15, #43	; 0x41580000  13.5
 8002df6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfa:	f000 f86b 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002dfe:	e05b      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case LEFT_7:
    motor_esc__set_steer_angle(PWM_LEFT_7);
 8002e00:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
 8002e04:	eeb0 0a67 	vmov.f32	s0, s15
 8002e08:	f000 f864 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002e0c:	e054      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case LEFT_8:
    motor_esc__set_steer_angle(PWM_LEFT_8);
 8002e0e:	eef2 7a0d 	vmov.f32	s15, #45	; 0x41680000  14.5
 8002e12:	eeb0 0a67 	vmov.f32	s0, s15
 8002e16:	f000 f85d 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002e1a:	e04d      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case LEFT_9:
    motor_esc__set_steer_angle(PWM_LEFT_9);
 8002e1c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002ec0 <motor_esc__steer_handler+0x344>
 8002e20:	eeb0 0a67 	vmov.f32	s0, s15
 8002e24:	f000 f856 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002e28:	e046      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case RIGHT_1:
    motor_esc__set_steer_angle(PWM_RIGHT_1);
 8002e2a:	eef3 7a03 	vmov.f32	s15, #51	; 0x41980000  19.0
 8002e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e32:	f000 f84f 	bl	8002ed4 <motor_esc__set_steer_angle>

    break;
 8002e36:	e03f      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>

  case RIGHT_2:
    motor_esc__set_steer_angle(PWM_RIGHT_2);
 8002e38:	eddf 7a22 	vldr	s15, [pc, #136]	; 8002ec4 <motor_esc__steer_handler+0x348>
 8002e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e40:	f000 f848 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002e44:	e038      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>

  case RIGHT_3:
    motor_esc__set_steer_angle(PWM_RIGHT_3);
 8002e46:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8002e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4e:	f000 f841 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002e52:	e031      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>

  case RIGHT_4:
    motor_esc__set_steer_angle(PWM_RIGHT_4);
 8002e54:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002ec8 <motor_esc__steer_handler+0x34c>
 8002e58:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5c:	f000 f83a 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002e60:	e02a      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case RIGHT_5:
    motor_esc__set_steer_angle(PWM_RIGHT_5);
 8002e62:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 8002e66:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6a:	f000 f833 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002e6e:	e023      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case RIGHT_6:
    motor_esc__set_steer_angle(PWM_RIGHT_6);
 8002e70:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002ecc <motor_esc__steer_handler+0x350>
 8002e74:	eeb0 0a67 	vmov.f32	s0, s15
 8002e78:	f000 f82c 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002e7c:	e01c      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case RIGHT_7:
    motor_esc__set_steer_angle(PWM_RIGHT_7);
 8002e7e:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8002e82:	eeb0 0a67 	vmov.f32	s0, s15
 8002e86:	f000 f825 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002e8a:	e015      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case RIGHT_8:
    motor_esc__set_steer_angle(PWM_RIGHT_8);
 8002e8c:	eef2 7a0f 	vmov.f32	s15, #47	; 0x41780000  15.5
 8002e90:	eeb0 0a67 	vmov.f32	s0, s15
 8002e94:	f000 f81e 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002e98:	e00e      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>
  case RIGHT_9:
    motor_esc__set_steer_angle(PWM_RIGHT_9);
 8002e9a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002ed0 <motor_esc__steer_handler+0x354>
 8002e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea2:	f000 f817 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002ea6:	e007      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>

  case STRAIGHT:
    motor_esc__set_steer_angle(PWM_STRAIGHT);
 8002ea8:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8002eac:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb0:	f000 f810 	bl	8002ed4 <motor_esc__set_steer_angle>
    break;
 8002eb4:	e000      	b.n	8002eb8 <motor_esc__steer_handler+0x33c>

  default:
    break;
 8002eb6:	bf00      	nop
  }
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	416ccccd 	.word	0x416ccccd
 8002ec4:	41940000 	.word	0x41940000
 8002ec8:	418c0000 	.word	0x418c0000
 8002ecc:	41840000 	.word	0x41840000
 8002ed0:	41733333 	.word	0x41733333

08002ed4 <motor_esc__set_steer_angle>:
float get_dc_motor_pwm() { return calculated_pwm_dc; }

float get_servo_motor_pwm() { return steer_pwm_val; }

// Private Functions
static void motor_esc__set_steer_angle(float servo_pwm_val) {
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	ed87 0a01 	vstr	s0, [r7, #4]
  //  fprintf(stderr, " Current pwm val on servo : %f", steer_pwm_val);
  steer_pwm_val = servo_pwm_val;
 8002ede:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <motor_esc__set_steer_angle+0x38>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 100*servo_pwm_val);  //Set Servo Duty cycle
 8002ee4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002f10 <motor_esc__set_steer_angle+0x3c>
 8002eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <motor_esc__set_steer_angle+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef8:	ee17 2a90 	vmov	r2, s15
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200003a8 	.word	0x200003a8
 8002f10:	42c80000 	.word	0x42c80000
 8002f14:	200088b8 	.word	0x200088b8

08002f18 <motor_esc__set_motor_speed>:

static void motor_esc__set_motor_speed(float motor_speed) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	ed87 0a01 	vstr	s0, [r7, #4]
  calculated_pwm_dc = motor_speed;
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <motor_esc__set_motor_speed+0x38>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6013      	str	r3, [r2, #0]
//  if (boost_pwm && (motor_speed > 15.7f)) {
//    motor_speed = motor_speed + 0.25;
//    boost_pwm = false;
//  }
  // Pin Congiguration: PA 6
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100*motor_speed);  //Set DC motor Duty cycle
 8002f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f2c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002f54 <motor_esc__set_motor_speed+0x3c>
 8002f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <motor_esc__set_motor_speed+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f3c:	ee17 2a90 	vmov	r2, s15
 8002f40:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	2000004c 	.word	0x2000004c
 8002f54:	42c80000 	.word	0x42c80000
 8002f58:	20008680 	.word	0x20008680

08002f5c <periodic_callbacks__initialize>:
/******************************************************************************
 * Your board will reset if the periodic function does not return within its deadline
 * For 1Hz, the function must return within 1000ms
 * For 1000Hz, the function must return within 1ms
 */
void periodic_callbacks__initialize(void) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  // This method is invoked once when the periodic tasks are created
	motor_esc__control_speed(5);
 8002f60:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002f64:	f7ff fb68 	bl	8002638 <motor_esc__control_speed>
	motor_esc__steer_handler(43);
 8002f68:	202b      	movs	r0, #43	; 0x2b
 8002f6a:	f7ff fe07 	bl	8002b7c <motor_esc__steer_handler>
	sens_val_conv__buffer_init();
 8002f6e:	f000 fa49 	bl	8003404 <sens_val_conv__buffer_init>
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <periodic_callbacks__1Hz>:

bool flag = true;
void periodic_callbacks__1Hz(uint32_t callback_count) {
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
//	flag = false;
//	}else {
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
//	flag = true;
//	}
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <periodic_callbacks__10Hz>:

void periodic_callbacks__10Hz(uint32_t callback_count) {
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
//
//    // DRIVER ---> MOTOR
//    driver_to_motor_data motor_data = driver_process_geo_data__get_motor_data();
//    motor_esc__control_speed(motor_data.MOTOR_speed);
//    motor_esc__steer_handler(motor_data.MOTOR_direction);
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <periodic_callbacks__100Hz>:

char buff[100] = "";
void periodic_callbacks__100Hz(uint32_t callback_count) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

	  volatile static int chance = 0;
	  uint16_t current_adc_value_front = 0, current_adc_value_left = 0, current_adc_value_right = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	82fb      	strh	r3, [r7, #22]
 8002fac:	2300      	movs	r3, #0
 8002fae:	82bb      	strh	r3, [r7, #20]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	827b      	strh	r3, [r7, #18]
	  uint16_t SENSOR_SONARS_left = 0, SENSOR_SONARS_middle = 0, SENSOR_SONARS_right = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	823b      	strh	r3, [r7, #16]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	81fb      	strh	r3, [r7, #14]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	81bb      	strh	r3, [r7, #12]
	  if (callback_count % 5 == 0) {
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4b34      	ldr	r3, [pc, #208]	; (8003094 <periodic_callbacks__100Hz+0xf4>)
 8002fc4:	fba3 2301 	umull	r2, r3, r3, r1
 8002fc8:	089a      	lsrs	r2, r3, #2
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	1aca      	subs	r2, r1, r3
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	d10f      	bne.n	8002ff6 <periodic_callbacks__100Hz+0x56>
	    if (chance == 0) {
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <periodic_callbacks__100Hz+0xf8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <periodic_callbacks__100Hz+0x44>

	      sensor_node__trigger_Front_ultrasonic();
 8002fde:	f000 f98d 	bl	80032fc <sensor_node__trigger_Front_ultrasonic>
//		sprintf(buff, "front ADC value %d   left ADC value %d   Right ADC value %d\r\n", SENSOR_SONARS_middle, SENSOR_SONARS_left, SENSOR_SONARS_right);
//		HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);


	  }
}
 8002fe2:	e053      	b.n	800308c <periodic_callbacks__100Hz+0xec>
	    } else if (chance == 1) {
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <periodic_callbacks__100Hz+0xf8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d14f      	bne.n	800308c <periodic_callbacks__100Hz+0xec>
	      sensor_node__trigger_Left_ultrasonic();
 8002fec:	f000 f99c 	bl	8003328 <sensor_node__trigger_Left_ultrasonic>
	      sensor_node__trigger_Right_ultrasonic();
 8002ff0:	f000 f9b0 	bl	8003354 <sensor_node__trigger_Right_ultrasonic>
}
 8002ff4:	e04a      	b.n	800308c <periodic_callbacks__100Hz+0xec>
	  } else if (callback_count % 5 == 4) {
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4b26      	ldr	r3, [pc, #152]	; (8003094 <periodic_callbacks__100Hz+0xf4>)
 8002ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8002ffe:	089a      	lsrs	r2, r3, #2
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	1aca      	subs	r2, r1, r3
 8003008:	2a04      	cmp	r2, #4
 800300a:	d13f      	bne.n	800308c <periodic_callbacks__100Hz+0xec>
	    if (chance == 0) {
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <periodic_callbacks__100Hz+0xf8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d120      	bne.n	8003056 <periodic_callbacks__100Hz+0xb6>
	    	current_adc_value_front = sens_val_conv__get_sens_val_in_cm(FRONT_SENSOR);
 8003014:	2000      	movs	r0, #0
 8003016:	f000 fa47 	bl	80034a8 <sens_val_conv__get_sens_val_in_cm>
 800301a:	4603      	mov	r3, r0
 800301c:	82fb      	strh	r3, [r7, #22]
	      sens_val_conv__update_buffer(FRONT_SENSOR, current_adc_value_front);
 800301e:	8afb      	ldrh	r3, [r7, #22]
 8003020:	4619      	mov	r1, r3
 8003022:	2000      	movs	r0, #0
 8003024:	f000 fa12 	bl	800344c <sens_val_conv__update_buffer>
	      chance++;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <periodic_callbacks__100Hz+0xf8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	4a1a      	ldr	r2, [pc, #104]	; (8003098 <periodic_callbacks__100Hz+0xf8>)
 8003030:	6013      	str	r3, [r2, #0]
	     sprintf(buff, "hello %d  \r\n", current_adc_value_front);
 8003032:	8afb      	ldrh	r3, [r7, #22]
 8003034:	461a      	mov	r2, r3
 8003036:	4919      	ldr	r1, [pc, #100]	; (800309c <periodic_callbacks__100Hz+0xfc>)
 8003038:	4819      	ldr	r0, [pc, #100]	; (80030a0 <periodic_callbacks__100Hz+0x100>)
 800303a:	f00c f959 	bl	800f2f0 <siprintf>
	     HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
 800303e:	4818      	ldr	r0, [pc, #96]	; (80030a0 <periodic_callbacks__100Hz+0x100>)
 8003040:	f7fd f8d6 	bl	80001f0 <strlen>
 8003044:	4603      	mov	r3, r0
 8003046:	b29a      	uxth	r2, r3
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
 800304c:	4914      	ldr	r1, [pc, #80]	; (80030a0 <periodic_callbacks__100Hz+0x100>)
 800304e:	4815      	ldr	r0, [pc, #84]	; (80030a4 <periodic_callbacks__100Hz+0x104>)
 8003050:	f005 fc15 	bl	800887e <HAL_UART_Transmit>
}
 8003054:	e01a      	b.n	800308c <periodic_callbacks__100Hz+0xec>
	    } else if (chance == 1) {
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <periodic_callbacks__100Hz+0xf8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d116      	bne.n	800308c <periodic_callbacks__100Hz+0xec>
	      current_adc_value_left = sens_val_conv__get_sens_val_in_cm(LEFT_SENSOR);
 800305e:	2001      	movs	r0, #1
 8003060:	f000 fa22 	bl	80034a8 <sens_val_conv__get_sens_val_in_cm>
 8003064:	4603      	mov	r3, r0
 8003066:	82bb      	strh	r3, [r7, #20]
	      sens_val_conv__update_buffer(LEFT_SENSOR, current_adc_value_left);
 8003068:	8abb      	ldrh	r3, [r7, #20]
 800306a:	4619      	mov	r1, r3
 800306c:	2001      	movs	r0, #1
 800306e:	f000 f9ed 	bl	800344c <sens_val_conv__update_buffer>
	      current_adc_value_right = sens_val_conv__get_sens_val_in_cm(RIGHT_SENSOR);
 8003072:	2002      	movs	r0, #2
 8003074:	f000 fa18 	bl	80034a8 <sens_val_conv__get_sens_val_in_cm>
 8003078:	4603      	mov	r3, r0
 800307a:	827b      	strh	r3, [r7, #18]
	      sens_val_conv__update_buffer(RIGHT_SENSOR, current_adc_value_right);
 800307c:	8a7b      	ldrh	r3, [r7, #18]
 800307e:	4619      	mov	r1, r3
 8003080:	2002      	movs	r0, #2
 8003082:	f000 f9e3 	bl	800344c <sens_val_conv__update_buffer>
	      chance = 0;
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <periodic_callbacks__100Hz+0xf8>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
}
 800308c:	bf00      	nop
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	cccccccd 	.word	0xcccccccd
 8003098:	2000041c 	.word	0x2000041c
 800309c:	0800f9fc 	.word	0x0800f9fc
 80030a0:	200003b8 	.word	0x200003b8
 80030a4:	200087f8 	.word	0x200087f8

080030a8 <periodic_callbacks__1000Hz>:
/**
 * @warning
 * This is a very fast 1ms task and care must be taken to use this
 * This may be disabled based on intialization of periodic_scheduler__initialize()
 */
void periodic_callbacks__1000Hz(uint32_t callback_count) {}
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <periodic_scheduler__run>:
static periodic_scheduler_s periodic_scheduler__1000Hz = {1, periodic_callbacks__1000Hz};

static bool periodic_scheduler__run_1000hz;

/// Common task runner for each periodic task
static void periodic_scheduler__run(periodic_scheduler_s *periodic) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  TickType_t previous_tick = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  uint32_t callback_counter = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]

  // Note: the order of the while loop's logic is critical; change with care
  while (true) {
    periodic->callback(callback_counter);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	4798      	blx	r3
    ++callback_counter;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3301      	adds	r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
    periodic->task_finished_flag = true;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	731a      	strb	r2, [r3, #12]

    vTaskDelayUntil(&previous_tick, periodic->task_delay_in_ticks);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	f107 0308 	add.w	r3, r7, #8
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f00a fac8 	bl	800d680 <vTaskDelayUntil>
    periodic->callback(callback_counter);
 80030f0:	e7ec      	b.n	80030cc <periodic_scheduler__run+0x10>
	...

080030f4 <periodic_scheduler__1Hz_task>:
  }
}

static void periodic_scheduler__1Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__1Hz); }
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	4803      	ldr	r0, [pc, #12]	; (800310c <periodic_scheduler__1Hz_task+0x18>)
 80030fe:	f7ff ffdd 	bl	80030bc <periodic_scheduler__run>
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000050 	.word	0x20000050

08003110 <periodic_scheduler__10Hz_task>:
static void periodic_scheduler__10Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__10Hz); }
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	4803      	ldr	r0, [pc, #12]	; (8003128 <periodic_scheduler__10Hz_task+0x18>)
 800311a:	f7ff ffcf 	bl	80030bc <periodic_scheduler__run>
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000060 	.word	0x20000060

0800312c <periodic_scheduler__100Hz_task>:
static void periodic_scheduler__100Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__100Hz); }
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	4803      	ldr	r0, [pc, #12]	; (8003144 <periodic_scheduler__100Hz_task+0x18>)
 8003136:	f7ff ffc1 	bl	80030bc <periodic_scheduler__run>
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000070 	.word	0x20000070

08003148 <periodic_scheduler__1000Hz_task>:
static void periodic_scheduler__1000Hz_task(void *param) { periodic_scheduler__run(&periodic_scheduler__1000Hz); }
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	4803      	ldr	r0, [pc, #12]	; (8003160 <periodic_scheduler__1000Hz_task+0x18>)
 8003152:	f7ff ffb3 	bl	80030bc <periodic_scheduler__run>
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000080 	.word	0x20000080

08003164 <periodic_scheduler__check_flag>:

static void periodic_scheduler__check_flag(periodic_scheduler_s *periodic_task, TickType_t tick_delay) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  periodic_task->ticks_elapsed += tick_delay;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	441a      	add	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	609a      	str	r2, [r3, #8]

  if (periodic_task->ticks_elapsed >= periodic_task->task_delay_in_ticks) {
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d30d      	bcc.n	80031a2 <periodic_scheduler__check_flag+0x3e>
    periodic_task->ticks_elapsed = 0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]

    if (periodic_task->task_finished_flag) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7b1b      	ldrb	r3, [r3, #12]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <periodic_scheduler__check_flag+0x3a>
      periodic_task->task_finished_flag = false;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	731a      	strb	r2, [r3, #12]
    } else {
      HAL_NVIC_SystemReset();
    }
  }
}
 800319c:	e001      	b.n	80031a2 <periodic_scheduler__check_flag+0x3e>
      HAL_NVIC_SystemReset();
 800319e:	f000 fef2 	bl	8003f86 <HAL_NVIC_SystemReset>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <periodic_scheduler__task_monitor>:
static void periodic_scheduler__task_monitor(void *param) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  const TickType_t tick_delay = periodic_scheduler__run_1000hz ? 1 : 10;
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <periodic_scheduler__task_monitor+0x48>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <periodic_scheduler__task_monitor+0x14>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <periodic_scheduler__task_monitor+0x16>
 80031c0:	230a      	movs	r3, #10
 80031c2:	60fb      	str	r3, [r7, #12]

  // We let all the other tasks run first, and then check their flags
  while (true) {
    vTaskDelay(tick_delay);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f00a fad9 	bl	800d77c <vTaskDelay>

    if (periodic_scheduler__run_1000hz) {
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <periodic_scheduler__task_monitor+0x48>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <periodic_scheduler__task_monitor+0x2e>
      periodic_scheduler__check_flag(&periodic_scheduler__1000Hz, tick_delay);
 80031d2:	68f9      	ldr	r1, [r7, #12]
 80031d4:	4808      	ldr	r0, [pc, #32]	; (80031f8 <periodic_scheduler__task_monitor+0x4c>)
 80031d6:	f7ff ffc5 	bl	8003164 <periodic_scheduler__check_flag>
    }

    periodic_scheduler__check_flag(&periodic_scheduler__100Hz, tick_delay);
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	4807      	ldr	r0, [pc, #28]	; (80031fc <periodic_scheduler__task_monitor+0x50>)
 80031de:	f7ff ffc1 	bl	8003164 <periodic_scheduler__check_flag>
    periodic_scheduler__check_flag(&periodic_scheduler__10Hz, tick_delay);
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	4806      	ldr	r0, [pc, #24]	; (8003200 <periodic_scheduler__task_monitor+0x54>)
 80031e6:	f7ff ffbd 	bl	8003164 <periodic_scheduler__check_flag>
    periodic_scheduler__check_flag(&periodic_scheduler__1Hz, tick_delay);
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	4805      	ldr	r0, [pc, #20]	; (8003204 <periodic_scheduler__task_monitor+0x58>)
 80031ee:	f7ff ffb9 	bl	8003164 <periodic_scheduler__check_flag>
    vTaskDelay(tick_delay);
 80031f2:	e7e7      	b.n	80031c4 <periodic_scheduler__task_monitor+0x18>
 80031f4:	20000420 	.word	0x20000420
 80031f8:	20000080 	.word	0x20000080
 80031fc:	20000070 	.word	0x20000070
 8003200:	20000060 	.word	0x20000060
 8003204:	20000050 	.word	0x20000050

08003208 <periodic_scheduler__initialize>:
  }
}

void periodic_scheduler__initialize(uint32_t task_stack_size, bool run_1000hz) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af02      	add	r7, sp, #8
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	70fb      	strb	r3, [r7, #3]
  xTaskCreate(periodic_scheduler__1Hz_task, "1Hz", task_stack_size, NULL, PRIORITY_PERIODIC_1HZ, NULL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	b29a      	uxth	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	2305      	movs	r3, #5
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2300      	movs	r3, #0
 8003222:	491e      	ldr	r1, [pc, #120]	; (800329c <periodic_scheduler__initialize+0x94>)
 8003224:	481e      	ldr	r0, [pc, #120]	; (80032a0 <periodic_scheduler__initialize+0x98>)
 8003226:	f00a f8ea 	bl	800d3fe <xTaskCreate>
  xTaskCreate(periodic_scheduler__10Hz_task, "10Hz", task_stack_size, NULL, PRIORITY_PERIODIC_10HZ, NULL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	b29a      	uxth	r2, r3
 800322e:	2300      	movs	r3, #0
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	2306      	movs	r3, #6
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2300      	movs	r3, #0
 8003238:	491a      	ldr	r1, [pc, #104]	; (80032a4 <periodic_scheduler__initialize+0x9c>)
 800323a:	481b      	ldr	r0, [pc, #108]	; (80032a8 <periodic_scheduler__initialize+0xa0>)
 800323c:	f00a f8df 	bl	800d3fe <xTaskCreate>
  xTaskCreate(periodic_scheduler__100Hz_task, "100Hz", task_stack_size, NULL, PRIORITY_PERIODIC_100HZ, NULL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	b29a      	uxth	r2, r3
 8003244:	2300      	movs	r3, #0
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	2307      	movs	r3, #7
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2300      	movs	r3, #0
 800324e:	4917      	ldr	r1, [pc, #92]	; (80032ac <periodic_scheduler__initialize+0xa4>)
 8003250:	4817      	ldr	r0, [pc, #92]	; (80032b0 <periodic_scheduler__initialize+0xa8>)
 8003252:	f00a f8d4 	bl	800d3fe <xTaskCreate>

  // Only create the 1Khz task if enabled
  periodic_scheduler__run_1000hz = run_1000hz;
 8003256:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <periodic_scheduler__initialize+0xac>)
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	7013      	strb	r3, [r2, #0]
  if (periodic_scheduler__run_1000hz) {
 800325c:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <periodic_scheduler__initialize+0xac>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <periodic_scheduler__initialize+0x72>
    xTaskCreate(periodic_scheduler__1000Hz_task, "1000Hz", task_stack_size, NULL, PRIORITY_PERIODIC_1000HZ, NULL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	b29a      	uxth	r2, r3
 8003268:	2300      	movs	r3, #0
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	2308      	movs	r3, #8
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2300      	movs	r3, #0
 8003272:	4911      	ldr	r1, [pc, #68]	; (80032b8 <periodic_scheduler__initialize+0xb0>)
 8003274:	4811      	ldr	r0, [pc, #68]	; (80032bc <periodic_scheduler__initialize+0xb4>)
 8003276:	f00a f8c2 	bl	800d3fe <xTaskCreate>
  }

  xTaskCreate(periodic_scheduler__task_monitor, "Hz_wdt", task_stack_size, NULL, PRIORITY_PERIODIC_MONITOR, NULL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	b29a      	uxth	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	2309      	movs	r3, #9
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	2300      	movs	r3, #0
 8003288:	490d      	ldr	r1, [pc, #52]	; (80032c0 <periodic_scheduler__initialize+0xb8>)
 800328a:	480e      	ldr	r0, [pc, #56]	; (80032c4 <periodic_scheduler__initialize+0xbc>)
 800328c:	f00a f8b7 	bl	800d3fe <xTaskCreate>

  periodic_callbacks__initialize();
 8003290:	f7ff fe64 	bl	8002f5c <periodic_callbacks__initialize>
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	0800fa0c 	.word	0x0800fa0c
 80032a0:	080030f5 	.word	0x080030f5
 80032a4:	0800fa10 	.word	0x0800fa10
 80032a8:	08003111 	.word	0x08003111
 80032ac:	0800fa18 	.word	0x0800fa18
 80032b0:	0800312d 	.word	0x0800312d
 80032b4:	20000420 	.word	0x20000420
 80032b8:	0800fa20 	.word	0x0800fa20
 80032bc:	08003149 	.word	0x08003149
 80032c0:	0800fa28 	.word	0x0800fa28
 80032c4:	080031ad 	.word	0x080031ad

080032c8 <delay__us>:
/****************************************************************************************
 **************************** P U B L I C    F U N C T I O N S **************************
 ****************************************************************************************/

void delay__us (uint16_t us)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <delay__us+0x30>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80032da:	bf00      	nop
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <delay__us+0x30>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d3f9      	bcc.n	80032dc <delay__us+0x14>
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20008838 	.word	0x20008838

080032fc <sensor_node__trigger_Front_ultrasonic>:

bool toggle = true;
void sensor_node__trigger_Front_ultrasonic(void) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	2104      	movs	r1, #4
 8003304:	4807      	ldr	r0, [pc, #28]	; (8003324 <sensor_node__trigger_Front_ultrasonic+0x28>)
 8003306:	f001 f9f5 	bl	80046f4 <HAL_GPIO_WritePin>
	delay__us(trigger_delay_time);
 800330a:	231e      	movs	r3, #30
 800330c:	b29b      	uxth	r3, r3
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ffda 	bl	80032c8 <delay__us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8003314:	2201      	movs	r2, #1
 8003316:	2104      	movs	r1, #4
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <sensor_node__trigger_Front_ultrasonic+0x28>)
 800331a:	f001 f9eb 	bl	80046f4 <HAL_GPIO_WritePin>
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000

08003328 <sensor_node__trigger_Left_ultrasonic>:

void sensor_node__trigger_Left_ultrasonic(void) {
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800332c:	2200      	movs	r2, #0
 800332e:	2108      	movs	r1, #8
 8003330:	4807      	ldr	r0, [pc, #28]	; (8003350 <sensor_node__trigger_Left_ultrasonic+0x28>)
 8003332:	f001 f9df 	bl	80046f4 <HAL_GPIO_WritePin>
	delay__us(trigger_delay_time);
 8003336:	231e      	movs	r3, #30
 8003338:	b29b      	uxth	r3, r3
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ffc4 	bl	80032c8 <delay__us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8003340:	2201      	movs	r2, #1
 8003342:	2108      	movs	r1, #8
 8003344:	4802      	ldr	r0, [pc, #8]	; (8003350 <sensor_node__trigger_Left_ultrasonic+0x28>)
 8003346:	f001 f9d5 	bl	80046f4 <HAL_GPIO_WritePin>
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000

08003354 <sensor_node__trigger_Right_ultrasonic>:

void sensor_node__trigger_Right_ultrasonic(void) {
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8003358:	2200      	movs	r2, #0
 800335a:	2110      	movs	r1, #16
 800335c:	4807      	ldr	r0, [pc, #28]	; (800337c <sensor_node__trigger_Right_ultrasonic+0x28>)
 800335e:	f001 f9c9 	bl	80046f4 <HAL_GPIO_WritePin>
	delay__us(trigger_delay_time);
 8003362:	231e      	movs	r3, #30
 8003364:	b29b      	uxth	r3, r3
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ffae 	bl	80032c8 <delay__us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 800336c:	2201      	movs	r2, #1
 800336e:	2110      	movs	r1, #16
 8003370:	4802      	ldr	r0, [pc, #8]	; (800337c <sensor_node__trigger_Right_ultrasonic+0x28>)
 8003372:	f001 f9bf 	bl	80046f4 <HAL_GPIO_WritePin>
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000

08003380 <sensor_config__read_sens_raw_value>:
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
//	delay__us(trigger_delay_time);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
}

uint32_t sensor_config__read_sens_raw_value(sensor_index current_sensor) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
  switch (current_sensor) {
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d020      	beq.n	80033d2 <sensor_config__read_sens_raw_value+0x52>
 8003390:	2b02      	cmp	r3, #2
 8003392:	dc2b      	bgt.n	80033ec <sensor_config__read_sens_raw_value+0x6c>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <sensor_config__read_sens_raw_value+0x1e>
 8003398:	2b01      	cmp	r3, #1
 800339a:	d00d      	beq.n	80033b8 <sensor_config__read_sens_raw_value+0x38>
 800339c:	e026      	b.n	80033ec <sensor_config__read_sens_raw_value+0x6c>
  case FRONT_SENSOR:
	  HAL_ADC_Start(&hadc1);
 800339e:	4816      	ldr	r0, [pc, #88]	; (80033f8 <sensor_config__read_sens_raw_value+0x78>)
 80033a0:	f000 f972 	bl	8003688 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80033a4:	f04f 31ff 	mov.w	r1, #4294967295
 80033a8:	4813      	ldr	r0, [pc, #76]	; (80033f8 <sensor_config__read_sens_raw_value+0x78>)
 80033aa:	f000 fa33 	bl	8003814 <HAL_ADC_PollForConversion>
	  return HAL_ADC_GetValue(&hadc1);
 80033ae:	4812      	ldr	r0, [pc, #72]	; (80033f8 <sensor_config__read_sens_raw_value+0x78>)
 80033b0:	f000 fab4 	bl	800391c <HAL_ADC_GetValue>
 80033b4:	4603      	mov	r3, r0
 80033b6:	e01b      	b.n	80033f0 <sensor_config__read_sens_raw_value+0x70>

  case LEFT_SENSOR:
	  HAL_ADC_Start(&hadc2);
 80033b8:	4810      	ldr	r0, [pc, #64]	; (80033fc <sensor_config__read_sens_raw_value+0x7c>)
 80033ba:	f000 f965 	bl	8003688 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80033be:	f04f 31ff 	mov.w	r1, #4294967295
 80033c2:	480e      	ldr	r0, [pc, #56]	; (80033fc <sensor_config__read_sens_raw_value+0x7c>)
 80033c4:	f000 fa26 	bl	8003814 <HAL_ADC_PollForConversion>
	  return HAL_ADC_GetValue(&hadc2);
 80033c8:	480c      	ldr	r0, [pc, #48]	; (80033fc <sensor_config__read_sens_raw_value+0x7c>)
 80033ca:	f000 faa7 	bl	800391c <HAL_ADC_GetValue>
 80033ce:	4603      	mov	r3, r0
 80033d0:	e00e      	b.n	80033f0 <sensor_config__read_sens_raw_value+0x70>

  case RIGHT_SENSOR:
	  HAL_ADC_Start(&hadc3);
 80033d2:	480b      	ldr	r0, [pc, #44]	; (8003400 <sensor_config__read_sens_raw_value+0x80>)
 80033d4:	f000 f958 	bl	8003688 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80033d8:	f04f 31ff 	mov.w	r1, #4294967295
 80033dc:	4808      	ldr	r0, [pc, #32]	; (8003400 <sensor_config__read_sens_raw_value+0x80>)
 80033de:	f000 fa19 	bl	8003814 <HAL_ADC_PollForConversion>
	  return HAL_ADC_GetValue(&hadc3);
 80033e2:	4807      	ldr	r0, [pc, #28]	; (8003400 <sensor_config__read_sens_raw_value+0x80>)
 80033e4:	f000 fa9a 	bl	800391c <HAL_ADC_GetValue>
 80033e8:	4603      	mov	r3, r0
 80033ea:	e001      	b.n	80033f0 <sensor_config__read_sens_raw_value+0x70>

//  case REAR_SENSOR:
//    return adc__get_adc_value(rear_sensor_adc_channel);

  default:
    return -1;
 80033ec:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20008768 	.word	0x20008768
 80033fc:	20008630 	.word	0x20008630
 8003400:	200087b0 	.word	0x200087b0

08003404 <sens_val_conv__buffer_init>:
    result += arr[i];
  }
  return result / odd_sample_count;
}

void sens_val_conv__buffer_init(void) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  for (int i = 0; i < MAX_SENSOR; i++) {
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	e013      	b.n	8003438 <sens_val_conv__buffer_init+0x34>
    sens_data_buff[i].buff = calloc(buffer_size, sizeof(sensValType_t));
 8003410:	230a      	movs	r3, #10
 8003412:	2102      	movs	r1, #2
 8003414:	4618      	mov	r0, r3
 8003416:	f00b fe49 	bl	800f0ac <calloc>
 800341a:	4603      	mov	r3, r0
 800341c:	4619      	mov	r1, r3
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <sens_val_conv__buffer_init+0x44>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    sens_data_buff[i].current_pointer = 0;
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <sens_val_conv__buffer_init+0x44>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	2200      	movs	r2, #0
 8003430:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < MAX_SENSOR; i++) {
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3301      	adds	r3, #1
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b03      	cmp	r3, #3
 800343c:	dde8      	ble.n	8003410 <sens_val_conv__buffer_init+0xc>
  }
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	2000896c 	.word	0x2000896c

0800344c <sens_val_conv__update_buffer>:

void sens_val_conv__update_buffer(sensor_index current_sen, const sensValType_t current_val) {
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	460a      	mov	r2, r1
 8003456:	71fb      	strb	r3, [r7, #7]
 8003458:	4613      	mov	r3, r2
 800345a:	80bb      	strh	r3, [r7, #4]
  sens_data_buff[current_sen].buff[sens_data_buff[current_sen].current_pointer] = current_val;
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <sens_val_conv__update_buffer+0x58>)
 8003460:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	490f      	ldr	r1, [pc, #60]	; (80034a4 <sens_val_conv__update_buffer+0x58>)
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	88ba      	ldrh	r2, [r7, #4]
 8003474:	801a      	strh	r2, [r3, #0]

  sens_data_buff[current_sen].current_pointer = (sens_data_buff[current_sen].current_pointer + 1) % buffer_size;
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <sens_val_conv__update_buffer+0x58>)
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	3301      	adds	r3, #1
 8003482:	220a      	movs	r2, #10
 8003484:	79f9      	ldrb	r1, [r7, #7]
 8003486:	fb93 f0f2 	sdiv	r0, r3, r2
 800348a:	fb02 f200 	mul.w	r2, r2, r0
 800348e:	1a9a      	subs	r2, r3, r2
 8003490:	4804      	ldr	r0, [pc, #16]	; (80034a4 <sens_val_conv__update_buffer+0x58>)
 8003492:	00cb      	lsls	r3, r1, #3
 8003494:	4403      	add	r3, r0
 8003496:	605a      	str	r2, [r3, #4]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	2000896c 	.word	0x2000896c

080034a8 <sens_val_conv__get_sens_val_in_cm>:
 * This is MB1000-00 LV-EZ0 ultrasonic sensor. Max range is 254 inches. (645 cm).
 * Precision => (Vcc/512) = 1 inch = 25 mm.  Our ADC is 12 bit, so our precision is 8 times higher.
 * Each ADC value = 25 / 8 = 3 mm. or 0.38
 */

uint16_t sens_val_conv__get_sens_val_in_cm(sensor_index current_sens) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  uint16_t conv_val = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	81fb      	strh	r3, [r7, #14]
  uint32_t raw_val = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]

  raw_val = sensor_config__read_sens_raw_value(current_sens);
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff5f 	bl	8003380 <sensor_config__read_sens_raw_value>
 80034c2:	60b8      	str	r0, [r7, #8]

  if (current_sens != REAR_SENSOR) {
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d019      	beq.n	80034fe <sens_val_conv__get_sens_val_in_cm+0x56>
    // This calculation is for LV EZ sensors
    conv_val = (raw_val * 0.3182) - 0.3959;
 80034ca:	68b8      	ldr	r0, [r7, #8]
 80034cc:	f7fd f82a 	bl	8000524 <__aeabi_ui2d>
 80034d0:	a314      	add	r3, pc, #80	; (adr r3, 8003524 <sens_val_conv__get_sens_val_in_cm+0x7c>)
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f7fd f89f 	bl	8000618 <__aeabi_dmul>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4610      	mov	r0, r2
 80034e0:	4619      	mov	r1, r3
 80034e2:	a312      	add	r3, pc, #72	; (adr r3, 800352c <sens_val_conv__get_sens_val_in_cm+0x84>)
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	f7fc fede 	bl	80002a8 <__aeabi_dsub>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	f7fd faa2 	bl	8000a3c <__aeabi_d2uiz>
 80034f8:	4603      	mov	r3, r0
 80034fa:	81fb      	strh	r3, [r7, #14]
 80034fc:	e00b      	b.n	8003516 <sens_val_conv__get_sens_val_in_cm+0x6e>
  } else {
    // NOTE: HRLV0 EZ0 max range is 500 cm
    conv_val = (raw_val * 5) / 4;
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	81fb      	strh	r3, [r7, #14]
    conv_val /= 10;
 800350a:	89fb      	ldrh	r3, [r7, #14]
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <sens_val_conv__get_sens_val_in_cm+0x78>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	08db      	lsrs	r3, r3, #3
 8003514:	81fb      	strh	r3, [r7, #14]
  }

  return conv_val;
 8003516:	89fb      	ldrh	r3, [r7, #14]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	cccccccd 	.word	0xcccccccd
 8003524:	886594af 	.word	0x886594af
 8003528:	3fd45d63 	.word	0x3fd45d63
 800352c:	f41f212d 	.word	0xf41f212d
 8003530:	3fd9566c 	.word	0x3fd9566c

08003534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003538:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <HAL_Init+0x40>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0d      	ldr	r2, [pc, #52]	; (8003574 <HAL_Init+0x40>)
 800353e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_Init+0x40>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <HAL_Init+0x40>)
 800354a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800354e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_Init+0x40>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a07      	ldr	r2, [pc, #28]	; (8003574 <HAL_Init+0x40>)
 8003556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800355c:	2003      	movs	r0, #3
 800355e:	f000 fcdd 	bl	8003f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003562:	2000      	movs	r0, #0
 8003564:	f7fe feee 	bl	8002344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003568:	f7fe fa6c 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023c00 	.word	0x40023c00

08003578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_IncTick+0x20>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_IncTick+0x24>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4413      	add	r3, r2
 8003588:	4a04      	ldr	r2, [pc, #16]	; (800359c <HAL_IncTick+0x24>)
 800358a:	6013      	str	r3, [r2, #0]
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000094 	.word	0x20000094
 800359c:	2000898c 	.word	0x2000898c

080035a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return uwTick;
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_GetTick+0x14>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	2000898c 	.word	0x2000898c

080035b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035c0:	f7ff ffee 	bl	80035a0 <HAL_GetTick>
 80035c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d005      	beq.n	80035de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_Delay+0x44>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035de:	bf00      	nop
 80035e0:	f7ff ffde 	bl	80035a0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d8f7      	bhi.n	80035e0 <HAL_Delay+0x28>
  {
  }
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000094 	.word	0x20000094

08003600 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e033      	b.n	800367e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe fa3c 	bl	8001a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	d118      	bne.n	8003670 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003646:	f023 0302 	bic.w	r3, r3, #2
 800364a:	f043 0202 	orr.w	r2, r3, #2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 faa2 	bl	8003b9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
 800366e:	e001      	b.n	8003674 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_Start+0x1a>
 800369e:	2302      	movs	r3, #2
 80036a0:	e0a5      	b.n	80037ee <HAL_ADC_Start+0x166>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d018      	beq.n	80036ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036c8:	4b4c      	ldr	r3, [pc, #304]	; (80037fc <HAL_ADC_Start+0x174>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a4c      	ldr	r2, [pc, #304]	; (8003800 <HAL_ADC_Start+0x178>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0c9a      	lsrs	r2, r3, #18
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80036dc:	e002      	b.n	80036e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d179      	bne.n	80037ec <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003722:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d106      	bne.n	8003746 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	f023 0206 	bic.w	r2, r3, #6
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	645a      	str	r2, [r3, #68]	; 0x44
 8003744:	e002      	b.n	800374c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_ADC_Start+0x17c>)
 8003756:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003760:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2b00      	cmp	r3, #0
 800376c:	d12a      	bne.n	80037c4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a25      	ldr	r2, [pc, #148]	; (8003808 <HAL_ADC_Start+0x180>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d015      	beq.n	80037a4 <HAL_ADC_Start+0x11c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a23      	ldr	r2, [pc, #140]	; (800380c <HAL_ADC_Start+0x184>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d105      	bne.n	800378e <HAL_ADC_Start+0x106>
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_ADC_Start+0x17c>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <HAL_ADC_Start+0x188>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d129      	bne.n	80037ec <HAL_ADC_Start+0x164>
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <HAL_ADC_Start+0x17c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d123      	bne.n	80037ec <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d11c      	bne.n	80037ec <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	e013      	b.n	80037ec <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <HAL_ADC_Start+0x180>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10e      	bne.n	80037ec <HAL_ADC_Start+0x164>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d107      	bne.n	80037ec <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037ea:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000000 	.word	0x20000000
 8003800:	431bde83 	.word	0x431bde83
 8003804:	40012300 	.word	0x40012300
 8003808:	40012000 	.word	0x40012000
 800380c:	40012100 	.word	0x40012100
 8003810:	40012200 	.word	0x40012200

08003814 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003830:	d113      	bne.n	800385a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800383c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003840:	d10b      	bne.n	800385a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e05c      	b.n	8003914 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800385a:	f7ff fea1 	bl	80035a0 <HAL_GetTick>
 800385e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003860:	e01a      	b.n	8003898 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d016      	beq.n	8003898 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <HAL_ADC_PollForConversion+0x6c>
 8003870:	f7ff fe96 	bl	80035a0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d20b      	bcs.n	8003898 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e03d      	b.n	8003914 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d1dd      	bne.n	8003862 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f06f 0212 	mvn.w	r2, #18
 80038ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d123      	bne.n	8003912 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11f      	bne.n	8003912 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d006      	beq.n	80038ee <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d111      	bne.n	8003912 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d105      	bne.n	8003912 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f043 0201 	orr.w	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x1c>
 8003950:	2302      	movs	r3, #2
 8003952:	e113      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x244>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b09      	cmp	r3, #9
 8003962:	d925      	bls.n	80039b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68d9      	ldr	r1, [r3, #12]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	3b1e      	subs	r3, #30
 800397a:	2207      	movs	r2, #7
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43da      	mvns	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	400a      	ands	r2, r1
 8003988:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68d9      	ldr	r1, [r3, #12]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	4618      	mov	r0, r3
 800399c:	4603      	mov	r3, r0
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4403      	add	r3, r0
 80039a2:	3b1e      	subs	r3, #30
 80039a4:	409a      	lsls	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	e022      	b.n	80039f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6919      	ldr	r1, [r3, #16]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	2207      	movs	r2, #7
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	400a      	ands	r2, r1
 80039d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6919      	ldr	r1, [r3, #16]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	4618      	mov	r0, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	4403      	add	r3, r0
 80039ec:	409a      	lsls	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d824      	bhi.n	8003a48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3b05      	subs	r3, #5
 8003a10:	221f      	movs	r2, #31
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	3b05      	subs	r3, #5
 8003a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	635a      	str	r2, [r3, #52]	; 0x34
 8003a46:	e04c      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d824      	bhi.n	8003a9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	3b23      	subs	r3, #35	; 0x23
 8003a62:	221f      	movs	r2, #31
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	400a      	ands	r2, r1
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4618      	mov	r0, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	3b23      	subs	r3, #35	; 0x23
 8003a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
 8003a98:	e023      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3b41      	subs	r3, #65	; 0x41
 8003aac:	221f      	movs	r2, #31
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	400a      	ands	r2, r1
 8003aba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	4618      	mov	r0, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3b41      	subs	r3, #65	; 0x41
 8003ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ae2:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <HAL_ADC_ConfigChannel+0x250>)
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <HAL_ADC_ConfigChannel+0x254>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10f      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x1d8>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b12      	cmp	r3, #18
 8003af6:	d10b      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <HAL_ADC_ConfigChannel+0x254>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d12b      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x23a>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <HAL_ADC_ConfigChannel+0x258>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <HAL_ADC_ConfigChannel+0x1f4>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b11      	cmp	r3, #17
 8003b2a:	d122      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a11      	ldr	r2, [pc, #68]	; (8003b90 <HAL_ADC_ConfigChannel+0x258>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d111      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_ADC_ConfigChannel+0x25c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <HAL_ADC_ConfigChannel+0x260>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	0c9a      	lsrs	r2, r3, #18
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b64:	e002      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f9      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40012300 	.word	0x40012300
 8003b8c:	40012000 	.word	0x40012000
 8003b90:	10000012 	.word	0x10000012
 8003b94:	20000000 	.word	0x20000000
 8003b98:	431bde83 	.word	0x431bde83

08003b9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ba4:	4b79      	ldr	r3, [pc, #484]	; (8003d8c <ADC_Init+0x1f0>)
 8003ba6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6899      	ldr	r1, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <ADC_Init+0x1f4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6899      	ldr	r1, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6899      	ldr	r1, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	e00f      	b.n	8003c9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0202 	bic.w	r2, r2, #2
 8003ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6899      	ldr	r1, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7e1b      	ldrb	r3, [r3, #24]
 8003cb4:	005a      	lsls	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01b      	beq.n	8003d00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ce6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	035a      	lsls	r2, r3, #13
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	e007      	b.n	8003d10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	051a      	lsls	r2, r3, #20
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6899      	ldr	r1, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d52:	025a      	lsls	r2, r3, #9
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6899      	ldr	r1, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	029a      	lsls	r2, r3, #10
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	40012300 	.word	0x40012300
 8003d90:	0f000001 	.word	0x0f000001

08003d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003db0:	4013      	ands	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dc6:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	60d3      	str	r3, [r2, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <__NVIC_GetPriorityGrouping+0x18>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	f003 0307 	and.w	r3, r3, #7
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	db0b      	blt.n	8003e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	f003 021f 	and.w	r2, r3, #31
 8003e10:	4907      	ldr	r1, [pc, #28]	; (8003e30 <__NVIC_EnableIRQ+0x38>)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2001      	movs	r0, #1
 8003e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000e100 	.word	0xe000e100

08003e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	db0a      	blt.n	8003e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	490c      	ldr	r1, [pc, #48]	; (8003e80 <__NVIC_SetPriority+0x4c>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	0112      	lsls	r2, r2, #4
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	440b      	add	r3, r1
 8003e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e5c:	e00a      	b.n	8003e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	4908      	ldr	r1, [pc, #32]	; (8003e84 <__NVIC_SetPriority+0x50>)
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	0112      	lsls	r2, r2, #4
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	440b      	add	r3, r1
 8003e72:	761a      	strb	r2, [r3, #24]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000e100 	.word	0xe000e100
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	bf28      	it	cs
 8003ea6:	2304      	movcs	r3, #4
 8003ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d902      	bls.n	8003eb8 <NVIC_EncodePriority+0x30>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3b03      	subs	r3, #3
 8003eb6:	e000      	b.n	8003eba <NVIC_EncodePriority+0x32>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	401a      	ands	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eda:	43d9      	mvns	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	4313      	orrs	r3, r2
         );
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3724      	adds	r7, #36	; 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ef4:	f3bf 8f4f 	dsb	sy
}
 8003ef8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <__NVIC_SystemReset+0x24>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003f02:	4904      	ldr	r1, [pc, #16]	; (8003f14 <__NVIC_SystemReset+0x24>)
 8003f04:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <__NVIC_SystemReset+0x28>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f0a:	f3bf 8f4f 	dsb	sy
}
 8003f0e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003f10:	bf00      	nop
 8003f12:	e7fd      	b.n	8003f10 <__NVIC_SystemReset+0x20>
 8003f14:	e000ed00 	.word	0xe000ed00
 8003f18:	05fa0004 	.word	0x05fa0004

08003f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff35 	bl	8003d94 <__NVIC_SetPriorityGrouping>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f44:	f7ff ff4a 	bl	8003ddc <__NVIC_GetPriorityGrouping>
 8003f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff9a 	bl	8003e88 <NVIC_EncodePriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff69 	bl	8003e34 <__NVIC_SetPriority>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff3d 	bl	8003df8 <__NVIC_EnableIRQ>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003f8a:	f7ff ffb1 	bl	8003ef0 <__NVIC_SystemReset>

08003f8e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e00e      	b.n	8003fbe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	795b      	ldrb	r3, [r3, #5]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fd fe1b 	bl	8001bec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e03b      	b.n	8004050 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fd fe1f 	bl	8001c30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	f023 0107 	bic.w	r1, r3, #7
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68d1      	ldr	r1, [r2, #12]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	430b      	orrs	r3, r1
 800403e:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d026      	beq.n	80040c8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d021      	beq.n	80040c8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004092:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2201      	movs	r2, #1
 80040a6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2204      	movs	r2, #4
 80040ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d026      	beq.n	8004120 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d021      	beq.n	8004120 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ea:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2220      	movs	r2, #32
 80040f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	f043 0202 	orr.w	r2, r3, #2
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2204      	movs	r2, #4
 8004104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d026      	beq.n	8004178 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004130:	2b00      	cmp	r3, #0
 8004132:	d021      	beq.n	8004178 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004142:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2208      	movs	r2, #8
 800414a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	f043 0204 	orr.w	r2, r3, #4
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2204      	movs	r2, #4
 800415c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d013      	beq.n	80041aa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2204      	movs	r2, #4
 80041a2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f853 	bl	8004250 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d024      	beq.n	80041fe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01f      	beq.n	80041fe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041cc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2202      	movs	r2, #2
 80041d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01f      	beq.n	8004248 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01a      	beq.n	8004248 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004220:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2210      	movs	r2, #16
 8004228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f80e 	bl	8004264 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_DMA2D_ConfigLayer+0x20>
 8004294:	2302      	movs	r3, #2
 8004296:	e079      	b.n	800438c <HAL_DMA2D_ConfigLayer+0x114>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	3318      	adds	r3, #24
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80042c2:	4b35      	ldr	r3, [pc, #212]	; (8004398 <HAL_DMA2D_ConfigLayer+0x120>)
 80042c4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b0a      	cmp	r3, #10
 80042cc:	d003      	beq.n	80042d6 <HAL_DMA2D_ConfigLayer+0x5e>
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b09      	cmp	r3, #9
 80042d4:	d107      	bne.n	80042e6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	e005      	b.n	80042f2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	061b      	lsls	r3, r3, #24
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d120      	bne.n	800433a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	43db      	mvns	r3, r3
 8004302:	ea02 0103 	and.w	r1, r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	430a      	orrs	r2, r1
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b0a      	cmp	r3, #10
 8004320:	d003      	beq.n	800432a <HAL_DMA2D_ConfigLayer+0xb2>
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b09      	cmp	r3, #9
 8004328:	d127      	bne.n	800437a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
 8004338:	e01f      	b.n	800437a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	43db      	mvns	r3, r3
 8004344:	ea02 0103 	and.w	r1, r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	430a      	orrs	r2, r1
 8004350:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b0a      	cmp	r3, #10
 8004362:	d003      	beq.n	800436c <HAL_DMA2D_ConfigLayer+0xf4>
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b09      	cmp	r3, #9
 800436a:	d106      	bne.n	800437a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004378:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	ff03000f 	.word	0xff03000f

0800439c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800439c:	b480      	push	{r7}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	e177      	b.n	80046a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043b8:	2201      	movs	r2, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	f040 8166 	bne.w	80046a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d00b      	beq.n	80043f6 <HAL_GPIO_Init+0x5a>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d007      	beq.n	80043f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043ea:	2b11      	cmp	r3, #17
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b12      	cmp	r3, #18
 80043f4:	d130      	bne.n	8004458 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	2203      	movs	r2, #3
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4013      	ands	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800442c:	2201      	movs	r2, #1
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 0201 	and.w	r2, r3, #1
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	2203      	movs	r2, #3
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d003      	beq.n	8004498 <HAL_GPIO_Init+0xfc>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b12      	cmp	r3, #18
 8004496:	d123      	bne.n	80044e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	08da      	lsrs	r2, r3, #3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3208      	adds	r2, #8
 80044a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	220f      	movs	r2, #15
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	08da      	lsrs	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3208      	adds	r2, #8
 80044da:	69b9      	ldr	r1, [r7, #24]
 80044dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	2203      	movs	r2, #3
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0203 	and.w	r2, r3, #3
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80c0 	beq.w	80046a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	4b66      	ldr	r3, [pc, #408]	; (80046c0 <HAL_GPIO_Init+0x324>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	4a65      	ldr	r2, [pc, #404]	; (80046c0 <HAL_GPIO_Init+0x324>)
 800452c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004530:	6453      	str	r3, [r2, #68]	; 0x44
 8004532:	4b63      	ldr	r3, [pc, #396]	; (80046c0 <HAL_GPIO_Init+0x324>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800453e:	4a61      	ldr	r2, [pc, #388]	; (80046c4 <HAL_GPIO_Init+0x328>)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	3302      	adds	r3, #2
 8004546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	220f      	movs	r2, #15
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a58      	ldr	r2, [pc, #352]	; (80046c8 <HAL_GPIO_Init+0x32c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d037      	beq.n	80045da <HAL_GPIO_Init+0x23e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a57      	ldr	r2, [pc, #348]	; (80046cc <HAL_GPIO_Init+0x330>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d031      	beq.n	80045d6 <HAL_GPIO_Init+0x23a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a56      	ldr	r2, [pc, #344]	; (80046d0 <HAL_GPIO_Init+0x334>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02b      	beq.n	80045d2 <HAL_GPIO_Init+0x236>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a55      	ldr	r2, [pc, #340]	; (80046d4 <HAL_GPIO_Init+0x338>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d025      	beq.n	80045ce <HAL_GPIO_Init+0x232>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a54      	ldr	r2, [pc, #336]	; (80046d8 <HAL_GPIO_Init+0x33c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01f      	beq.n	80045ca <HAL_GPIO_Init+0x22e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a53      	ldr	r2, [pc, #332]	; (80046dc <HAL_GPIO_Init+0x340>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d019      	beq.n	80045c6 <HAL_GPIO_Init+0x22a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <HAL_GPIO_Init+0x344>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <HAL_GPIO_Init+0x226>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a51      	ldr	r2, [pc, #324]	; (80046e4 <HAL_GPIO_Init+0x348>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00d      	beq.n	80045be <HAL_GPIO_Init+0x222>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a50      	ldr	r2, [pc, #320]	; (80046e8 <HAL_GPIO_Init+0x34c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <HAL_GPIO_Init+0x21e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a4f      	ldr	r2, [pc, #316]	; (80046ec <HAL_GPIO_Init+0x350>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <HAL_GPIO_Init+0x21a>
 80045b2:	2309      	movs	r3, #9
 80045b4:	e012      	b.n	80045dc <HAL_GPIO_Init+0x240>
 80045b6:	230a      	movs	r3, #10
 80045b8:	e010      	b.n	80045dc <HAL_GPIO_Init+0x240>
 80045ba:	2308      	movs	r3, #8
 80045bc:	e00e      	b.n	80045dc <HAL_GPIO_Init+0x240>
 80045be:	2307      	movs	r3, #7
 80045c0:	e00c      	b.n	80045dc <HAL_GPIO_Init+0x240>
 80045c2:	2306      	movs	r3, #6
 80045c4:	e00a      	b.n	80045dc <HAL_GPIO_Init+0x240>
 80045c6:	2305      	movs	r3, #5
 80045c8:	e008      	b.n	80045dc <HAL_GPIO_Init+0x240>
 80045ca:	2304      	movs	r3, #4
 80045cc:	e006      	b.n	80045dc <HAL_GPIO_Init+0x240>
 80045ce:	2303      	movs	r3, #3
 80045d0:	e004      	b.n	80045dc <HAL_GPIO_Init+0x240>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e002      	b.n	80045dc <HAL_GPIO_Init+0x240>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_GPIO_Init+0x240>
 80045da:	2300      	movs	r3, #0
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	f002 0203 	and.w	r2, r2, #3
 80045e2:	0092      	lsls	r2, r2, #2
 80045e4:	4093      	lsls	r3, r2
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045ec:	4935      	ldr	r1, [pc, #212]	; (80046c4 <HAL_GPIO_Init+0x328>)
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	089b      	lsrs	r3, r3, #2
 80045f2:	3302      	adds	r3, #2
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045fa:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <HAL_GPIO_Init+0x354>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800461e:	4a34      	ldr	r2, [pc, #208]	; (80046f0 <HAL_GPIO_Init+0x354>)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004624:	4b32      	ldr	r3, [pc, #200]	; (80046f0 <HAL_GPIO_Init+0x354>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004648:	4a29      	ldr	r2, [pc, #164]	; (80046f0 <HAL_GPIO_Init+0x354>)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800464e:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <HAL_GPIO_Init+0x354>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004672:	4a1f      	ldr	r2, [pc, #124]	; (80046f0 <HAL_GPIO_Init+0x354>)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_GPIO_Init+0x354>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <HAL_GPIO_Init+0x354>)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3301      	adds	r3, #1
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b0f      	cmp	r3, #15
 80046ac:	f67f ae84 	bls.w	80043b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	3724      	adds	r7, #36	; 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800
 80046c4:	40013800 	.word	0x40013800
 80046c8:	40020000 	.word	0x40020000
 80046cc:	40020400 	.word	0x40020400
 80046d0:	40020800 	.word	0x40020800
 80046d4:	40020c00 	.word	0x40020c00
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40021400 	.word	0x40021400
 80046e0:	40021800 	.word	0x40021800
 80046e4:	40021c00 	.word	0x40021c00
 80046e8:	40022000 	.word	0x40022000
 80046ec:	40022400 	.word	0x40022400
 80046f0:	40013c00 	.word	0x40013c00

080046f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	807b      	strh	r3, [r7, #2]
 8004700:	4613      	mov	r3, r2
 8004702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004704:	787b      	ldrb	r3, [r7, #1]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800470a:	887a      	ldrh	r2, [r7, #2]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004710:	e003      	b.n	800471a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004712:	887b      	ldrh	r3, [r7, #2]
 8004714:	041a      	lsls	r2, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	619a      	str	r2, [r3, #24]
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004732:	4b08      	ldr	r3, [pc, #32]	; (8004754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d006      	beq.n	800474c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fd ff64 	bl	8002614 <HAL_GPIO_EXTI_Callback>
  }
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40013c00 	.word	0x40013c00

08004758 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475a:	b08f      	sub	sp, #60	; 0x3c
 800475c:	af0a      	add	r7, sp, #40	; 0x28
 800475e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e054      	b.n	8004814 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f00a f9db 	bl	800eb40 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2203      	movs	r2, #3
 800478e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f004 fe4b 	bl	8009444 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	687e      	ldr	r6, [r7, #4]
 80047b6:	466d      	mov	r5, sp
 80047b8:	f106 0410 	add.w	r4, r6, #16
 80047bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80047cc:	1d33      	adds	r3, r6, #4
 80047ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047d0:	6838      	ldr	r0, [r7, #0]
 80047d2:	f004 fdc5 	bl	8009360 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2101      	movs	r1, #1
 80047dc:	4618      	mov	r0, r3
 80047de:	f004 fe42 	bl	8009466 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	687e      	ldr	r6, [r7, #4]
 80047ea:	466d      	mov	r5, sp
 80047ec:	f106 0410 	add.w	r4, r6, #16
 80047f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004800:	1d33      	adds	r3, r6, #4
 8004802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004804:	6838      	ldr	r0, [r7, #0]
 8004806:	f004 ff55 	bl	80096b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800481c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b089      	sub	sp, #36	; 0x24
 8004820:	af04      	add	r7, sp, #16
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	4608      	mov	r0, r1
 8004826:	4611      	mov	r1, r2
 8004828:	461a      	mov	r2, r3
 800482a:	4603      	mov	r3, r0
 800482c:	70fb      	strb	r3, [r7, #3]
 800482e:	460b      	mov	r3, r1
 8004830:	70bb      	strb	r3, [r7, #2]
 8004832:	4613      	mov	r3, r2
 8004834:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_HCD_HC_Init+0x28>
 8004840:	2302      	movs	r3, #2
 8004842:	e07f      	b.n	8004944 <HAL_HCD_HC_Init+0x128>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	440b      	add	r3, r1
 800485a:	333d      	adds	r3, #61	; 0x3d
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	440b      	add	r3, r1
 800486e:	3338      	adds	r3, #56	; 0x38
 8004870:	787a      	ldrb	r2, [r7, #1]
 8004872:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	440b      	add	r3, r1
 8004882:	3340      	adds	r3, #64	; 0x40
 8004884:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004886:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	440b      	add	r3, r1
 8004896:	3339      	adds	r3, #57	; 0x39
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	440b      	add	r3, r1
 80048aa:	333f      	adds	r3, #63	; 0x3f
 80048ac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80048b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	78bb      	ldrb	r3, [r7, #2]
 80048b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ba:	b2d8      	uxtb	r0, r3
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	440b      	add	r3, r1
 80048c8:	333a      	adds	r3, #58	; 0x3a
 80048ca:	4602      	mov	r2, r0
 80048cc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80048ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da0a      	bge.n	80048ec <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	440b      	add	r3, r1
 80048e4:	333b      	adds	r3, #59	; 0x3b
 80048e6:	2201      	movs	r2, #1
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	e009      	b.n	8004900 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	440b      	add	r3, r1
 80048fa:	333b      	adds	r3, #59	; 0x3b
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	440b      	add	r3, r1
 800490e:	333c      	adds	r3, #60	; 0x3c
 8004910:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004914:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	787c      	ldrb	r4, [r7, #1]
 800491c:	78ba      	ldrb	r2, [r7, #2]
 800491e:	78f9      	ldrb	r1, [r7, #3]
 8004920:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004922:	9302      	str	r3, [sp, #8]
 8004924:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4623      	mov	r3, r4
 8004932:	f005 f841 	bl	80099b8 <USB_HC_Init>
 8004936:	4603      	mov	r3, r0
 8004938:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004942:	7bfb      	ldrb	r3, [r7, #15]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	bd90      	pop	{r4, r7, pc}

0800494c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_HCD_HC_Halt+0x1e>
 8004966:	2302      	movs	r3, #2
 8004968:	e00f      	b.n	800498a <HAL_HCD_HC_Halt+0x3e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	4611      	mov	r1, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f005 fa7b 	bl	8009e76 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	4608      	mov	r0, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	461a      	mov	r2, r3
 80049a2:	4603      	mov	r3, r0
 80049a4:	70fb      	strb	r3, [r7, #3]
 80049a6:	460b      	mov	r3, r1
 80049a8:	70bb      	strb	r3, [r7, #2]
 80049aa:	4613      	mov	r3, r2
 80049ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	440b      	add	r3, r1
 80049bc:	333b      	adds	r3, #59	; 0x3b
 80049be:	78ba      	ldrb	r2, [r7, #2]
 80049c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	440b      	add	r3, r1
 80049d0:	333f      	adds	r3, #63	; 0x3f
 80049d2:	787a      	ldrb	r2, [r7, #1]
 80049d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80049d6:	7c3b      	ldrb	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d114      	bne.n	8004a06 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	440b      	add	r3, r1
 80049ea:	3342      	adds	r3, #66	; 0x42
 80049ec:	2203      	movs	r2, #3
 80049ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80049f0:	78fa      	ldrb	r2, [r7, #3]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	440b      	add	r3, r1
 80049fe:	333d      	adds	r3, #61	; 0x3d
 8004a00:	7f3a      	ldrb	r2, [r7, #28]
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e009      	b.n	8004a1a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	440b      	add	r3, r1
 8004a14:	3342      	adds	r3, #66	; 0x42
 8004a16:	2202      	movs	r2, #2
 8004a18:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004a1a:	787b      	ldrb	r3, [r7, #1]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	f200 80d6 	bhi.w	8004bce <HAL_HCD_HC_SubmitRequest+0x23a>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004bb9 	.word	0x08004bb9
 8004a30:	08004aa5 	.word	0x08004aa5
 8004a34:	08004b2f 	.word	0x08004b2f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004a38:	7c3b      	ldrb	r3, [r7, #16]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	f040 80c9 	bne.w	8004bd2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004a40:	78bb      	ldrb	r3, [r7, #2]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f040 80c5 	bne.w	8004bd2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004a48:	8b3b      	ldrh	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3351      	adds	r3, #81	; 0x51
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	440b      	add	r3, r1
 8004a70:	3351      	adds	r3, #81	; 0x51
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	440b      	add	r3, r1
 8004a86:	3342      	adds	r3, #66	; 0x42
 8004a88:	2200      	movs	r2, #0
 8004a8a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004a8c:	e0a1      	b.n	8004bd2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a8e:	78fa      	ldrb	r2, [r7, #3]
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	440b      	add	r3, r1
 8004a9c:	3342      	adds	r3, #66	; 0x42
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	701a      	strb	r2, [r3, #0]
      break;
 8004aa2:	e096      	b.n	8004bd2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004aa4:	78bb      	ldrb	r3, [r7, #2]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d120      	bne.n	8004aec <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	440b      	add	r3, r1
 8004ab8:	3351      	adds	r3, #81	; 0x51
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	440b      	add	r3, r1
 8004ace:	3342      	adds	r3, #66	; 0x42
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004ad4:	e07e      	b.n	8004bd4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	440b      	add	r3, r1
 8004ae4:	3342      	adds	r3, #66	; 0x42
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	701a      	strb	r2, [r3, #0]
      break;
 8004aea:	e073      	b.n	8004bd4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	440b      	add	r3, r1
 8004afa:	3350      	adds	r3, #80	; 0x50
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	440b      	add	r3, r1
 8004b10:	3342      	adds	r3, #66	; 0x42
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
      break;
 8004b16:	e05d      	b.n	8004bd4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	440b      	add	r3, r1
 8004b26:	3342      	adds	r3, #66	; 0x42
 8004b28:	2202      	movs	r2, #2
 8004b2a:	701a      	strb	r2, [r3, #0]
      break;
 8004b2c:	e052      	b.n	8004bd4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004b2e:	78bb      	ldrb	r3, [r7, #2]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d120      	bne.n	8004b76 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	440b      	add	r3, r1
 8004b42:	3351      	adds	r3, #81	; 0x51
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	440b      	add	r3, r1
 8004b58:	3342      	adds	r3, #66	; 0x42
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004b5e:	e039      	b.n	8004bd4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3342      	adds	r3, #66	; 0x42
 8004b70:	2202      	movs	r2, #2
 8004b72:	701a      	strb	r2, [r3, #0]
      break;
 8004b74:	e02e      	b.n	8004bd4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	440b      	add	r3, r1
 8004b84:	3350      	adds	r3, #80	; 0x50
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	440b      	add	r3, r1
 8004b9a:	3342      	adds	r3, #66	; 0x42
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
      break;
 8004ba0:	e018      	b.n	8004bd4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	440b      	add	r3, r1
 8004bb0:	3342      	adds	r3, #66	; 0x42
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	701a      	strb	r2, [r3, #0]
      break;
 8004bb6:	e00d      	b.n	8004bd4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3342      	adds	r3, #66	; 0x42
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
      break;
 8004bcc:	e002      	b.n	8004bd4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004bd2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	440b      	add	r3, r1
 8004be2:	3344      	adds	r3, #68	; 0x44
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	8b39      	ldrh	r1, [r7, #24]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4403      	add	r3, r0
 8004bf8:	3348      	adds	r3, #72	; 0x48
 8004bfa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	440b      	add	r3, r1
 8004c0a:	335c      	adds	r3, #92	; 0x5c
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	440b      	add	r3, r1
 8004c1e:	334c      	adds	r3, #76	; 0x4c
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004c24:	78fa      	ldrb	r2, [r7, #3]
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	440b      	add	r3, r1
 8004c32:	3339      	adds	r3, #57	; 0x39
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	440b      	add	r3, r1
 8004c46:	335d      	adds	r3, #93	; 0x5d
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	3338      	adds	r3, #56	; 0x38
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	18d1      	adds	r1, r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	f004 ffb0 	bl	8009bcc <USB_HC_StartXfer>
 8004c6c:	4603      	mov	r3, r0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop

08004c78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f004 fccd 	bl	800962e <USB_GetMode>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	f040 80ef 	bne.w	8004e7a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f004 fcb1 	bl	8009608 <USB_ReadInterrupts>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80e5 	beq.w	8004e78 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f004 fca8 	bl	8009608 <USB_ReadInterrupts>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc2:	d104      	bne.n	8004cce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ccc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f004 fc98 	bl	8009608 <USB_ReadInterrupts>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce2:	d104      	bne.n	8004cee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004cec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f004 fc88 	bl	8009608 <USB_ReadInterrupts>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d02:	d104      	bne.n	8004d0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004d0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f004 fc78 	bl	8009608 <USB_ReadInterrupts>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d103      	bne.n	8004d2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2202      	movs	r2, #2
 8004d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f004 fc6a 	bl	8009608 <USB_ReadInterrupts>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d3e:	d115      	bne.n	8004d6c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d108      	bne.n	8004d6c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f009 ff6a 	bl	800ec34 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2101      	movs	r1, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f004 fd60 	bl	800982c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f004 fc49 	bl	8009608 <USB_ReadInterrupts>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d80:	d102      	bne.n	8004d88 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f001 f968 	bl	8006058 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f004 fc3b 	bl	8009608 <USB_ReadInterrupts>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d106      	bne.n	8004daa <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f009 ff2d 	bl	800ebfc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2208      	movs	r2, #8
 8004da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f004 fc2a 	bl	8009608 <USB_ReadInterrupts>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dbe:	d138      	bne.n	8004e32 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f005 f845 	bl	8009e54 <USB_HC_ReadInterrupt>
 8004dca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e025      	b.n	8004e1e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	fa22 f303 	lsr.w	r3, r2, r3
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d018      	beq.n	8004e18 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfc:	d106      	bne.n	8004e0c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f8cf 	bl	8004fa8 <HCD_HC_IN_IRQHandler>
 8004e0a:	e005      	b.n	8004e18 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fcfd 	bl	8005812 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d3d4      	bcc.n	8004dd2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f004 fbe6 	bl	8009608 <USB_ReadInterrupts>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d101      	bne.n	8004e4a <HAL_HCD_IRQHandler+0x1d2>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <HAL_HCD_IRQHandler+0x1d4>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d014      	beq.n	8004e7a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0210 	bic.w	r2, r2, #16
 8004e5e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f001 f84b 	bl	8005efc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699a      	ldr	r2, [r3, #24]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0210 	orr.w	r2, r2, #16
 8004e74:	619a      	str	r2, [r3, #24]
 8004e76:	e000      	b.n	8004e7a <HAL_HCD_IRQHandler+0x202>
      return;
 8004e78:	bf00      	nop
    }
  }
}
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_HCD_Start+0x16>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e013      	b.n	8004ebe <HAL_HCD_Start+0x3e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f004 fabd 	bl	8009422 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2101      	movs	r1, #1
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f004 fd20 	bl	80098f4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_HCD_Stop+0x16>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e00d      	b.n	8004ef8 <HAL_HCD_Stop+0x32>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f005 f8ff 	bl	800a0ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f004 fcc7 	bl	80098a0 <USB_ResetPort>
 8004f12:	4603      	mov	r3, r0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	440b      	add	r3, r1
 8004f36:	335c      	adds	r3, #92	; 0x5c
 8004f38:	781b      	ldrb	r3, [r3, #0]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	440b      	add	r3, r1
 8004f60:	334c      	adds	r3, #76	; 0x4c
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f004 fd09 	bl	8009994 <USB_GetCurrentFrame>
 8004f82:	4603      	mov	r3, r0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f004 fce4 	bl	8009966 <USB_GetHostSpeed>
 8004f9e:	4603      	mov	r3, r0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d119      	bne.n	800500c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	60d3      	str	r3, [r2, #12]
 800500a:	e0ce      	b.n	80051aa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4413      	add	r3, r2
 8005014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005022:	d12c      	bne.n	800507e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	461a      	mov	r2, r3
 8005032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005036:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	440b      	add	r3, r1
 8005046:	335d      	adds	r3, #93	; 0x5d
 8005048:	2207      	movs	r2, #7
 800504a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	440a      	add	r2, r1
 8005062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005066:	f043 0302 	orr.w	r3, r3, #2
 800506a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	4611      	mov	r1, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f004 fefd 	bl	8009e76 <USB_HC_Halt>
 800507c:	e095      	b.n	80051aa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	4413      	add	r3, r2
 8005086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b20      	cmp	r3, #32
 8005092:	d109      	bne.n	80050a8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a0:	461a      	mov	r2, r3
 80050a2:	2320      	movs	r3, #32
 80050a4:	6093      	str	r3, [r2, #8]
 80050a6:	e080      	b.n	80051aa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d134      	bne.n	8005128 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	335d      	adds	r3, #93	; 0x5d
 80050ee:	2205      	movs	r2, #5
 80050f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fe:	461a      	mov	r2, r3
 8005100:	2310      	movs	r3, #16
 8005102:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005110:	461a      	mov	r2, r3
 8005112:	2308      	movs	r3, #8
 8005114:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f004 fea8 	bl	8009e76 <USB_HC_Halt>
 8005126:	e040      	b.n	80051aa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513e:	d134      	bne.n	80051aa <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4413      	add	r3, r2
 8005148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	0151      	lsls	r1, r2, #5
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	440a      	add	r2, r1
 8005156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800515a:	f043 0302 	orr.w	r3, r3, #2
 800515e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f004 fe83 	bl	8009e76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517c:	461a      	mov	r2, r3
 800517e:	2310      	movs	r3, #16
 8005180:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	440b      	add	r3, r1
 8005190:	335d      	adds	r3, #93	; 0x5d
 8005192:	2208      	movs	r2, #8
 8005194:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a2:	461a      	mov	r2, r3
 80051a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c0:	d122      	bne.n	8005208 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051dc:	f043 0302 	orr.w	r3, r3, #2
 80051e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	4611      	mov	r1, r2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f004 fe42 	bl	8009e76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	461a      	mov	r2, r3
 8005200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005204:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005206:	e300      	b.n	800580a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	f040 80fd 	bne.w	800541a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01b      	beq.n	8005260 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	440b      	add	r3, r1
 8005236:	3348      	adds	r3, #72	; 0x48
 8005238:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	0159      	lsls	r1, r3, #5
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	440b      	add	r3, r1
 8005242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800524c:	1ad1      	subs	r1, r2, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4403      	add	r3, r0
 800525c:	334c      	adds	r3, #76	; 0x4c
 800525e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	440b      	add	r3, r1
 800526e:	335d      	adds	r3, #93	; 0x5d
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	440b      	add	r3, r1
 8005282:	3358      	adds	r3, #88	; 0x58
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4413      	add	r3, r2
 8005290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005294:	461a      	mov	r2, r3
 8005296:	2301      	movs	r3, #1
 8005298:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	440b      	add	r3, r1
 80052a8:	333f      	adds	r3, #63	; 0x3f
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	440b      	add	r3, r1
 80052be:	333f      	adds	r3, #63	; 0x3f
 80052c0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d121      	bne.n	800530a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e0:	f043 0302 	orr.w	r3, r3, #2
 80052e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f004 fdc0 	bl	8009e76 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	461a      	mov	r2, r3
 8005304:	2310      	movs	r3, #16
 8005306:	6093      	str	r3, [r2, #8]
 8005308:	e070      	b.n	80053ec <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	440b      	add	r3, r1
 8005318:	333f      	adds	r3, #63	; 0x3f
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b03      	cmp	r3, #3
 800531e:	d12a      	bne.n	8005376 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	440a      	add	r2, r1
 8005336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800533a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800533e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	440b      	add	r3, r1
 800534e:	335c      	adds	r3, #92	; 0x5c
 8005350:	2201      	movs	r2, #1
 8005352:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	b2d8      	uxtb	r0, r3
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	335c      	adds	r3, #92	; 0x5c
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	4601      	mov	r1, r0
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f009 fc6e 	bl	800ec50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005374:	e03a      	b.n	80053ec <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	440b      	add	r3, r1
 8005384:	333f      	adds	r3, #63	; 0x3f
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d12f      	bne.n	80053ec <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	440b      	add	r3, r1
 800539a:	335c      	adds	r3, #92	; 0x5c
 800539c:	2201      	movs	r2, #1
 800539e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	440b      	add	r3, r1
 80053ae:	3350      	adds	r3, #80	; 0x50
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	f083 0301 	eor.w	r3, r3, #1
 80053b6:	b2d8      	uxtb	r0, r3
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	440b      	add	r3, r1
 80053c6:	3350      	adds	r3, #80	; 0x50
 80053c8:	4602      	mov	r2, r0
 80053ca:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	b2d8      	uxtb	r0, r3
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	440b      	add	r3, r1
 80053de:	335c      	adds	r3, #92	; 0x5c
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	4601      	mov	r1, r0
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f009 fc32 	bl	800ec50 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	440b      	add	r3, r1
 80053fa:	3350      	adds	r3, #80	; 0x50
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	f083 0301 	eor.w	r3, r3, #1
 8005402:	b2d8      	uxtb	r0, r3
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	440b      	add	r3, r1
 8005412:	3350      	adds	r3, #80	; 0x50
 8005414:	4602      	mov	r2, r0
 8005416:	701a      	strb	r2, [r3, #0]
}
 8005418:	e1f7      	b.n	800580a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b02      	cmp	r3, #2
 800542e:	f040 811a 	bne.w	8005666 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4413      	add	r3, r2
 800543a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	440a      	add	r2, r1
 8005448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800544c:	f023 0302 	bic.w	r3, r3, #2
 8005450:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	440b      	add	r3, r1
 8005460:	335d      	adds	r3, #93	; 0x5d
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d10a      	bne.n	800547e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	440b      	add	r3, r1
 8005476:	335c      	adds	r3, #92	; 0x5c
 8005478:	2201      	movs	r2, #1
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	e0d9      	b.n	8005632 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	440b      	add	r3, r1
 800548c:	335d      	adds	r3, #93	; 0x5d
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b05      	cmp	r3, #5
 8005492:	d10a      	bne.n	80054aa <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	335c      	adds	r3, #92	; 0x5c
 80054a4:	2205      	movs	r2, #5
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e0c3      	b.n	8005632 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	335d      	adds	r3, #93	; 0x5d
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b06      	cmp	r3, #6
 80054be:	d00a      	beq.n	80054d6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	440b      	add	r3, r1
 80054ce:	335d      	adds	r3, #93	; 0x5d
 80054d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d156      	bne.n	8005584 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	440b      	add	r3, r1
 80054e4:	3358      	adds	r3, #88	; 0x58
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	1c59      	adds	r1, r3, #1
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4403      	add	r3, r0
 80054f8:	3358      	adds	r3, #88	; 0x58
 80054fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	3358      	adds	r3, #88	; 0x58
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b03      	cmp	r3, #3
 8005510:	d914      	bls.n	800553c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	440b      	add	r3, r1
 8005520:	3358      	adds	r3, #88	; 0x58
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	440b      	add	r3, r1
 8005534:	335c      	adds	r3, #92	; 0x5c
 8005536:	2204      	movs	r2, #4
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e009      	b.n	8005550 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	440b      	add	r3, r1
 800554a:	335c      	adds	r3, #92	; 0x5c
 800554c:	2202      	movs	r2, #2
 800554e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4413      	add	r3, r2
 8005558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005566:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800556e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557c:	461a      	mov	r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e056      	b.n	8005632 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	440b      	add	r3, r1
 8005592:	335d      	adds	r3, #93	; 0x5d
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d123      	bne.n	80055e2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	440b      	add	r3, r1
 80055a8:	335c      	adds	r3, #92	; 0x5c
 80055aa:	2202      	movs	r2, #2
 80055ac:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055c4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055cc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055da:	461a      	mov	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	e027      	b.n	8005632 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	440b      	add	r3, r1
 80055f0:	335d      	adds	r3, #93	; 0x5d
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b07      	cmp	r3, #7
 80055f6:	d11c      	bne.n	8005632 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	440b      	add	r3, r1
 8005606:	3358      	adds	r3, #88	; 0x58
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	1c59      	adds	r1, r3, #1
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	4403      	add	r3, r0
 800561a:	3358      	adds	r3, #88	; 0x58
 800561c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	440b      	add	r3, r1
 800562c:	335c      	adds	r3, #92	; 0x5c
 800562e:	2204      	movs	r2, #4
 8005630:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4413      	add	r3, r2
 800563a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563e:	461a      	mov	r2, r3
 8005640:	2302      	movs	r3, #2
 8005642:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	b2d8      	uxtb	r0, r3
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	440b      	add	r3, r1
 8005656:	335c      	adds	r3, #92	; 0x5c
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	4601      	mov	r1, r0
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f009 faf6 	bl	800ec50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005664:	e0d1      	b.n	800580a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005678:	2b80      	cmp	r3, #128	; 0x80
 800567a:	d13e      	bne.n	80056fa <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4413      	add	r3, r2
 8005684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	440a      	add	r2, r1
 8005692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005696:	f043 0302 	orr.w	r3, r3, #2
 800569a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	440b      	add	r3, r1
 80056aa:	3358      	adds	r3, #88	; 0x58
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	1c59      	adds	r1, r3, #1
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4403      	add	r3, r0
 80056be:	3358      	adds	r3, #88	; 0x58
 80056c0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	440b      	add	r3, r1
 80056d0:	335d      	adds	r3, #93	; 0x5d
 80056d2:	2206      	movs	r2, #6
 80056d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f004 fbc8 	bl	8009e76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f2:	461a      	mov	r2, r3
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	6093      	str	r3, [r2, #8]
}
 80056f8:	e087      	b.n	800580a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4413      	add	r3, r2
 8005702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b10      	cmp	r3, #16
 800570e:	d17c      	bne.n	800580a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	440b      	add	r3, r1
 800571e:	333f      	adds	r3, #63	; 0x3f
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d122      	bne.n	800576c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	440b      	add	r3, r1
 8005734:	3358      	adds	r3, #88	; 0x58
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	440a      	add	r2, r1
 8005750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005754:	f043 0302 	orr.w	r3, r3, #2
 8005758:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	4611      	mov	r1, r2
 8005764:	4618      	mov	r0, r3
 8005766:	f004 fb86 	bl	8009e76 <USB_HC_Halt>
 800576a:	e045      	b.n	80057f8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	440b      	add	r3, r1
 800577a:	333f      	adds	r3, #63	; 0x3f
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	440b      	add	r3, r1
 8005790:	333f      	adds	r3, #63	; 0x3f
 8005792:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005794:	2b02      	cmp	r3, #2
 8005796:	d12f      	bne.n	80057f8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	440b      	add	r3, r1
 80057a6:	3358      	adds	r3, #88	; 0x58
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d121      	bne.n	80057f8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	440b      	add	r3, r1
 80057c2:	335d      	adds	r3, #93	; 0x5d
 80057c4:	2203      	movs	r2, #3
 80057c6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e2:	f043 0302 	orr.w	r3, r3, #2
 80057e6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f004 fb3f 	bl	8009e76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005804:	461a      	mov	r2, r3
 8005806:	2310      	movs	r3, #16
 8005808:	6093      	str	r3, [r2, #8]
}
 800580a:	bf00      	nop
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b04      	cmp	r3, #4
 8005840:	d119      	bne.n	8005876 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4413      	add	r3, r2
 800584a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584e:	461a      	mov	r2, r3
 8005850:	2304      	movs	r3, #4
 8005852:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	440a      	add	r2, r1
 800586a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800586e:	f043 0302 	orr.w	r3, r3, #2
 8005872:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005874:	e33e      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4413      	add	r3, r2
 800587e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b20      	cmp	r3, #32
 800588a:	d141      	bne.n	8005910 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4413      	add	r3, r2
 8005894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005898:	461a      	mov	r2, r3
 800589a:	2320      	movs	r3, #32
 800589c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	333d      	adds	r3, #61	; 0x3d
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	f040 831f 	bne.w	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	440b      	add	r3, r1
 80058c4:	333d      	adds	r3, #61	; 0x3d
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	440b      	add	r3, r1
 80058d8:	335c      	adds	r3, #92	; 0x5c
 80058da:	2202      	movs	r2, #2
 80058dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f8:	f043 0302 	orr.w	r3, r3, #2
 80058fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f004 fab4 	bl	8009e76 <USB_HC_Halt>
}
 800590e:	e2f1      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	d13f      	bne.n	80059a6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	440b      	add	r3, r1
 8005934:	335d      	adds	r3, #93	; 0x5d
 8005936:	2204      	movs	r2, #4
 8005938:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	440b      	add	r3, r1
 8005948:	333d      	adds	r3, #61	; 0x3d
 800594a:	2201      	movs	r2, #1
 800594c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	440b      	add	r3, r1
 800595c:	3358      	adds	r3, #88	; 0x58
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	440a      	add	r2, r1
 8005978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800597c:	f043 0302 	orr.w	r3, r3, #2
 8005980:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	4611      	mov	r1, r2
 800598c:	4618      	mov	r0, r3
 800598e:	f004 fa72 	bl	8009e76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599e:	461a      	mov	r2, r3
 80059a0:	2340      	movs	r3, #64	; 0x40
 80059a2:	6093      	str	r3, [r2, #8]
}
 80059a4:	e2a6      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059bc:	d122      	bne.n	8005a04 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d8:	f043 0302 	orr.w	r3, r3, #2
 80059dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	4611      	mov	r1, r2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f004 fa44 	bl	8009e76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fa:	461a      	mov	r2, r3
 80059fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a00:	6093      	str	r3, [r2, #8]
}
 8005a02:	e277      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d135      	bne.n	8005a86 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	440b      	add	r3, r1
 8005a28:	3358      	adds	r3, #88	; 0x58
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	4611      	mov	r1, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f004 fa0c 	bl	8009e76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	440b      	add	r3, r1
 8005a7e:	335d      	adds	r3, #93	; 0x5d
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
}
 8005a84:	e236      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d12b      	bne.n	8005af4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2308      	movs	r3, #8
 8005aac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac8:	f043 0302 	orr.w	r3, r3, #2
 8005acc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f004 f9cc 	bl	8009e76 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	440b      	add	r3, r1
 8005aec:	335d      	adds	r3, #93	; 0x5d
 8005aee:	2205      	movs	r2, #5
 8005af0:	701a      	strb	r2, [r3, #0]
}
 8005af2:	e1ff      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d155      	bne.n	8005bb6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	440b      	add	r3, r1
 8005b18:	3358      	adds	r3, #88	; 0x58
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	335d      	adds	r3, #93	; 0x5d
 8005b2e:	2203      	movs	r2, #3
 8005b30:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	440b      	add	r3, r1
 8005b40:	333d      	adds	r3, #61	; 0x3d
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d114      	bne.n	8005b72 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	440b      	add	r3, r1
 8005b56:	333c      	adds	r3, #60	; 0x3c
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	440b      	add	r3, r1
 8005b6c:	333d      	adds	r3, #61	; 0x3d
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b8c:	f043 0302 	orr.w	r3, r3, #2
 8005b90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f004 f96a 	bl	8009e76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	6093      	str	r3, [r2, #8]
}
 8005bb4:	e19e      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc8:	2b80      	cmp	r3, #128	; 0x80
 8005bca:	d12b      	bne.n	8005c24 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be6:	f043 0302 	orr.w	r3, r3, #2
 8005bea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f004 f93d 	bl	8009e76 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	440b      	add	r3, r1
 8005c0a:	335d      	adds	r3, #93	; 0x5d
 8005c0c:	2206      	movs	r2, #6
 8005c0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	6093      	str	r3, [r2, #8]
}
 8005c22:	e167      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3a:	d135      	bne.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c56:	f043 0302 	orr.w	r3, r3, #2
 8005c5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	4611      	mov	r1, r2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f004 f905 	bl	8009e76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	440b      	add	r3, r1
 8005ca0:	335d      	adds	r3, #93	; 0x5d
 8005ca2:	2208      	movs	r2, #8
 8005ca4:	701a      	strb	r2, [r3, #0]
}
 8005ca6:	e125      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	f040 811a 	bne.w	8005ef4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cda:	f023 0302 	bic.w	r3, r3, #2
 8005cde:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	440b      	add	r3, r1
 8005cee:	335d      	adds	r3, #93	; 0x5d
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d137      	bne.n	8005d66 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	440b      	add	r3, r1
 8005d04:	335c      	adds	r3, #92	; 0x5c
 8005d06:	2201      	movs	r2, #1
 8005d08:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	440b      	add	r3, r1
 8005d18:	333f      	adds	r3, #63	; 0x3f
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d00b      	beq.n	8005d38 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	440b      	add	r3, r1
 8005d2e:	333f      	adds	r3, #63	; 0x3f
 8005d30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	f040 80c5 	bne.w	8005ec2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	440b      	add	r3, r1
 8005d46:	3351      	adds	r3, #81	; 0x51
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f083 0301 	eor.w	r3, r3, #1
 8005d4e:	b2d8      	uxtb	r0, r3
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	440b      	add	r3, r1
 8005d5e:	3351      	adds	r3, #81	; 0x51
 8005d60:	4602      	mov	r2, r0
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	e0ad      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	440b      	add	r3, r1
 8005d74:	335d      	adds	r3, #93	; 0x5d
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d10a      	bne.n	8005d92 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	440b      	add	r3, r1
 8005d8a:	335c      	adds	r3, #92	; 0x5c
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e097      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	440b      	add	r3, r1
 8005da0:	335d      	adds	r3, #93	; 0x5d
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d10a      	bne.n	8005dbe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	440b      	add	r3, r1
 8005db6:	335c      	adds	r3, #92	; 0x5c
 8005db8:	2202      	movs	r2, #2
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	e081      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	440b      	add	r3, r1
 8005dcc:	335d      	adds	r3, #93	; 0x5d
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b05      	cmp	r3, #5
 8005dd2:	d10a      	bne.n	8005dea <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	440b      	add	r3, r1
 8005de2:	335c      	adds	r3, #92	; 0x5c
 8005de4:	2205      	movs	r2, #5
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e06b      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	440b      	add	r3, r1
 8005df8:	335d      	adds	r3, #93	; 0x5d
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b06      	cmp	r3, #6
 8005dfe:	d00a      	beq.n	8005e16 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	440b      	add	r3, r1
 8005e0e:	335d      	adds	r3, #93	; 0x5d
 8005e10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d155      	bne.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	440b      	add	r3, r1
 8005e24:	3358      	adds	r3, #88	; 0x58
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	1c59      	adds	r1, r3, #1
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4403      	add	r3, r0
 8005e38:	3358      	adds	r3, #88	; 0x58
 8005e3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	440b      	add	r3, r1
 8005e4a:	3358      	adds	r3, #88	; 0x58
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d914      	bls.n	8005e7c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	440b      	add	r3, r1
 8005e60:	3358      	adds	r3, #88	; 0x58
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	440b      	add	r3, r1
 8005e74:	335c      	adds	r3, #92	; 0x5c
 8005e76:	2204      	movs	r2, #4
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	e009      	b.n	8005e90 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	440b      	add	r3, r1
 8005e8a:	335c      	adds	r3, #92	; 0x5c
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ea6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ece:	461a      	mov	r2, r3
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	b2d8      	uxtb	r0, r3
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	440b      	add	r3, r1
 8005ee6:	335c      	adds	r3, #92	; 0x5c
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	4601      	mov	r1, r0
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f008 feae 	bl	800ec50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005ef4:	bf00      	nop
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	0c5b      	lsrs	r3, r3, #17
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	091b      	lsrs	r3, r3, #4
 8005f2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f30:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d004      	beq.n	8005f42 <HCD_RXQLVL_IRQHandler+0x46>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	f000 8082 	beq.w	8006044 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005f40:	e083      	b.n	800604a <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d07f      	beq.n	8006048 <HCD_RXQLVL_IRQHandler+0x14c>
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	440b      	add	r3, r1
 8005f56:	3344      	adds	r3, #68	; 0x44
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d074      	beq.n	8006048 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	440b      	add	r3, r1
 8005f70:	3344      	adds	r3, #68	; 0x44
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	b292      	uxth	r2, r2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f003 fb1c 	bl	80095b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3344      	adds	r3, #68	; 0x44
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	18d1      	adds	r1, r2, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4403      	add	r3, r0
 8005fa2:	3344      	adds	r3, #68	; 0x44
 8005fa4:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	440b      	add	r3, r1
 8005fb4:	334c      	adds	r3, #76	; 0x4c
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	18d1      	adds	r1, r2, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	4403      	add	r3, r0
 8005fca:	334c      	adds	r3, #76	; 0x4c
 8005fcc:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <HCD_RXQLVL_IRQHandler+0x158>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d031      	beq.n	8006048 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ffa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006002:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	461a      	mov	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	440b      	add	r3, r1
 8006024:	3350      	adds	r3, #80	; 0x50
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f083 0301 	eor.w	r3, r3, #1
 800602c:	b2d8      	uxtb	r0, r3
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	440b      	add	r3, r1
 800603c:	3350      	adds	r3, #80	; 0x50
 800603e:	4602      	mov	r2, r0
 8006040:	701a      	strb	r2, [r3, #0]
      break;
 8006042:	e001      	b.n	8006048 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006044:	bf00      	nop
 8006046:	e000      	b.n	800604a <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8006048:	bf00      	nop
  }
}
 800604a:	bf00      	nop
 800604c:	3728      	adds	r7, #40	; 0x28
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	1ff80000 	.word	0x1ff80000

08006058 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006084:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	d10b      	bne.n	80060a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	d102      	bne.n	80060a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f008 fdbc 	bl	800ec18 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d132      	bne.n	8006118 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f043 0308 	orr.w	r3, r3, #8
 80060b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d126      	bne.n	8006112 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d113      	bne.n	80060f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060d6:	d106      	bne.n	80060e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2102      	movs	r1, #2
 80060de:	4618      	mov	r0, r3
 80060e0:	f003 fba4 	bl	800982c <USB_InitFSLSPClkSel>
 80060e4:	e011      	b.n	800610a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2101      	movs	r1, #1
 80060ec:	4618      	mov	r0, r3
 80060ee:	f003 fb9d 	bl	800982c <USB_InitFSLSPClkSel>
 80060f2:	e00a      	b.n	800610a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d106      	bne.n	800610a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006102:	461a      	mov	r2, r3
 8006104:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006108:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f008 fdb2 	bl	800ec74 <HAL_HCD_PortEnabled_Callback>
 8006110:	e002      	b.n	8006118 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f008 fdbc 	bl	800ec90 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b20      	cmp	r3, #32
 8006120:	d103      	bne.n	800612a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f043 0320 	orr.w	r3, r3, #32
 8006128:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6013      	str	r3, [r2, #0]
}
 8006136:	bf00      	nop
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e12b      	b.n	80063aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fb fd8a 	bl	8001c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2224      	movs	r2, #36	; 0x24
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0201 	bic.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061a4:	f001 f938 	bl	8007418 <HAL_RCC_GetPCLK1Freq>
 80061a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	4a81      	ldr	r2, [pc, #516]	; (80063b4 <HAL_I2C_Init+0x274>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d807      	bhi.n	80061c4 <HAL_I2C_Init+0x84>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4a80      	ldr	r2, [pc, #512]	; (80063b8 <HAL_I2C_Init+0x278>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	bf94      	ite	ls
 80061bc:	2301      	movls	r3, #1
 80061be:	2300      	movhi	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	e006      	b.n	80061d2 <HAL_I2C_Init+0x92>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4a7d      	ldr	r2, [pc, #500]	; (80063bc <HAL_I2C_Init+0x27c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	bf94      	ite	ls
 80061cc:	2301      	movls	r3, #1
 80061ce:	2300      	movhi	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e0e7      	b.n	80063aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4a78      	ldr	r2, [pc, #480]	; (80063c0 <HAL_I2C_Init+0x280>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	0c9b      	lsrs	r3, r3, #18
 80061e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	4a6a      	ldr	r2, [pc, #424]	; (80063b4 <HAL_I2C_Init+0x274>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d802      	bhi.n	8006214 <HAL_I2C_Init+0xd4>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	3301      	adds	r3, #1
 8006212:	e009      	b.n	8006228 <HAL_I2C_Init+0xe8>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800621a:	fb02 f303 	mul.w	r3, r2, r3
 800621e:	4a69      	ldr	r2, [pc, #420]	; (80063c4 <HAL_I2C_Init+0x284>)
 8006220:	fba2 2303 	umull	r2, r3, r2, r3
 8006224:	099b      	lsrs	r3, r3, #6
 8006226:	3301      	adds	r3, #1
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6812      	ldr	r2, [r2, #0]
 800622c:	430b      	orrs	r3, r1
 800622e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800623a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	495c      	ldr	r1, [pc, #368]	; (80063b4 <HAL_I2C_Init+0x274>)
 8006244:	428b      	cmp	r3, r1
 8006246:	d819      	bhi.n	800627c <HAL_I2C_Init+0x13c>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	1e59      	subs	r1, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	fbb1 f3f3 	udiv	r3, r1, r3
 8006256:	1c59      	adds	r1, r3, #1
 8006258:	f640 73fc 	movw	r3, #4092	; 0xffc
 800625c:	400b      	ands	r3, r1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_I2C_Init+0x138>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1e59      	subs	r1, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006270:	3301      	adds	r3, #1
 8006272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006276:	e051      	b.n	800631c <HAL_I2C_Init+0x1dc>
 8006278:	2304      	movs	r3, #4
 800627a:	e04f      	b.n	800631c <HAL_I2C_Init+0x1dc>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d111      	bne.n	80062a8 <HAL_I2C_Init+0x168>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	1e58      	subs	r0, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6859      	ldr	r1, [r3, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	440b      	add	r3, r1
 8006292:	fbb0 f3f3 	udiv	r3, r0, r3
 8006296:	3301      	adds	r3, #1
 8006298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629c:	2b00      	cmp	r3, #0
 800629e:	bf0c      	ite	eq
 80062a0:	2301      	moveq	r3, #1
 80062a2:	2300      	movne	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	e012      	b.n	80062ce <HAL_I2C_Init+0x18e>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	1e58      	subs	r0, r3, #1
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6859      	ldr	r1, [r3, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	0099      	lsls	r1, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80062be:	3301      	adds	r3, #1
 80062c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bf0c      	ite	eq
 80062c8:	2301      	moveq	r3, #1
 80062ca:	2300      	movne	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_I2C_Init+0x196>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e022      	b.n	800631c <HAL_I2C_Init+0x1dc>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10e      	bne.n	80062fc <HAL_I2C_Init+0x1bc>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1e58      	subs	r0, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6859      	ldr	r1, [r3, #4]
 80062e6:	460b      	mov	r3, r1
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	440b      	add	r3, r1
 80062ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f0:	3301      	adds	r3, #1
 80062f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fa:	e00f      	b.n	800631c <HAL_I2C_Init+0x1dc>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	1e58      	subs	r0, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6859      	ldr	r1, [r3, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	0099      	lsls	r1, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006312:	3301      	adds	r3, #1
 8006314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	6809      	ldr	r1, [r1, #0]
 8006320:	4313      	orrs	r3, r2
 8006322:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800634a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6911      	ldr	r1, [r2, #16]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	68d2      	ldr	r2, [r2, #12]
 8006356:	4311      	orrs	r1, r2
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	430b      	orrs	r3, r1
 800635e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695a      	ldr	r2, [r3, #20]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	000186a0 	.word	0x000186a0
 80063b8:	001e847f 	.word	0x001e847f
 80063bc:	003d08ff 	.word	0x003d08ff
 80063c0:	431bde83 	.word	0x431bde83
 80063c4:	10624dd3 	.word	0x10624dd3

080063c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d129      	bne.n	8006432 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2224      	movs	r2, #36	; 0x24
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0201 	bic.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0210 	bic.w	r2, r2, #16
 8006404:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 0201 	orr.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e000      	b.n	8006434 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006432:	2302      	movs	r3, #2
  }
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b20      	cmp	r3, #32
 8006458:	d12a      	bne.n	80064b0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2224      	movs	r2, #36	; 0x24
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0201 	bic.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800647a:	89fb      	ldrh	r3, [r7, #14]
 800647c:	f023 030f 	bic.w	r3, r3, #15
 8006480:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	b29a      	uxth	r2, r3
 8006486:	89fb      	ldrh	r3, [r7, #14]
 8006488:	4313      	orrs	r3, r2
 800648a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	89fa      	ldrh	r2, [r7, #14]
 8006492:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e0bf      	b.n	8006652 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fb fc34 	bl	8001d54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006502:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6999      	ldr	r1, [r3, #24]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006518:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6899      	ldr	r1, [r3, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b4a      	ldr	r3, [pc, #296]	; (800665c <HAL_LTDC_Init+0x19c>)
 8006534:	400b      	ands	r3, r1
 8006536:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	041b      	lsls	r3, r3, #16
 800653e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6899      	ldr	r1, [r3, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68d9      	ldr	r1, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	4b3e      	ldr	r3, [pc, #248]	; (800665c <HAL_LTDC_Init+0x19c>)
 8006562:	400b      	ands	r3, r1
 8006564:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68d9      	ldr	r1, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1a      	ldr	r2, [r3, #32]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6919      	ldr	r1, [r3, #16]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b33      	ldr	r3, [pc, #204]	; (800665c <HAL_LTDC_Init+0x19c>)
 8006590:	400b      	ands	r3, r1
 8006592:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	041b      	lsls	r3, r3, #16
 800659a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6919      	ldr	r1, [r3, #16]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6959      	ldr	r1, [r3, #20]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4b27      	ldr	r3, [pc, #156]	; (800665c <HAL_LTDC_Init+0x19c>)
 80065be:	400b      	ands	r3, r1
 80065c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6959      	ldr	r1, [r3, #20]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0206 	orr.w	r2, r2, #6
 800662e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	f000f800 	.word	0xf000f800

08006660 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	d023      	beq.n	80066ca <HAL_LTDC_IRQHandler+0x6a>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01e      	beq.n	80066ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0204 	bic.w	r2, r2, #4
 800669a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2204      	movs	r2, #4
 80066a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066aa:	f043 0201 	orr.w	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2204      	movs	r2, #4
 80066b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f86f 	bl	80067a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d023      	beq.n	800671c <HAL_LTDC_IRQHandler+0xbc>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01e      	beq.n	800671c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0202 	bic.w	r2, r2, #2
 80066ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2202      	movs	r2, #2
 80066f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066fc:	f043 0202 	orr.w	r2, r3, #2
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2204      	movs	r2, #4
 800670a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f846 	bl	80067a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01b      	beq.n	800675e <HAL_LTDC_IRQHandler+0xfe>
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d016      	beq.n	800675e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f82f 	bl	80067bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01b      	beq.n	80067a0 <HAL_LTDC_IRQHandler+0x140>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f003 0308 	and.w	r3, r3, #8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d016      	beq.n	80067a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0208 	bic.w	r2, r2, #8
 8006780:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2208      	movs	r2, #8
 8006788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f818 	bl	80067d0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80067e4:	b5b0      	push	{r4, r5, r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_LTDC_ConfigLayer+0x1a>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e02c      	b.n	8006858 <HAL_LTDC_ConfigLayer+0x74>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2134      	movs	r1, #52	; 0x34
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	4413      	add	r3, r2
 800681a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4614      	mov	r4, r2
 8006822:	461d      	mov	r5, r3
 8006824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800682a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800682c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800682e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f811 	bl	8006860 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2201      	movs	r2, #1
 8006844:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bdb0      	pop	{r4, r5, r7, pc}

08006860 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006860:	b480      	push	{r7}
 8006862:	b089      	sub	sp, #36	; 0x24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	0c1b      	lsrs	r3, r3, #16
 8006878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800687c:	4413      	add	r3, r2
 800687e:	041b      	lsls	r3, r3, #16
 8006880:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	01db      	lsls	r3, r3, #7
 800688c:	4413      	add	r3, r2
 800688e:	3384      	adds	r3, #132	; 0x84
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	6812      	ldr	r2, [r2, #0]
 8006896:	4611      	mov	r1, r2
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	01d2      	lsls	r2, r2, #7
 800689c:	440a      	add	r2, r1
 800689e:	3284      	adds	r2, #132	; 0x84
 80068a0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80068a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	0c1b      	lsrs	r3, r3, #16
 80068b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068b6:	4413      	add	r3, r2
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4619      	mov	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	01db      	lsls	r3, r3, #7
 80068c4:	440b      	add	r3, r1
 80068c6:	3384      	adds	r3, #132	; 0x84
 80068c8:	4619      	mov	r1, r3
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068de:	4413      	add	r3, r2
 80068e0:	041b      	lsls	r3, r3, #16
 80068e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	01db      	lsls	r3, r3, #7
 80068ee:	4413      	add	r3, r2
 80068f0:	3384      	adds	r3, #132	; 0x84
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	4611      	mov	r1, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	01d2      	lsls	r2, r2, #7
 80068fe:	440a      	add	r2, r1
 8006900:	3284      	adds	r2, #132	; 0x84
 8006902:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006906:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006916:	4413      	add	r3, r2
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4619      	mov	r1, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	01db      	lsls	r3, r3, #7
 8006924:	440b      	add	r3, r1
 8006926:	3384      	adds	r3, #132	; 0x84
 8006928:	4619      	mov	r1, r3
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	4313      	orrs	r3, r2
 800692e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	01db      	lsls	r3, r3, #7
 800693a:	4413      	add	r3, r2
 800693c:	3384      	adds	r3, #132	; 0x84
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	4611      	mov	r1, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	01d2      	lsls	r2, r2, #7
 800694a:	440a      	add	r2, r1
 800694c:	3284      	adds	r2, #132	; 0x84
 800694e:	f023 0307 	bic.w	r3, r3, #7
 8006952:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	01db      	lsls	r3, r3, #7
 800695e:	4413      	add	r3, r2
 8006960:	3384      	adds	r3, #132	; 0x84
 8006962:	461a      	mov	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800697a:	041b      	lsls	r3, r3, #16
 800697c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	061b      	lsls	r3, r3, #24
 8006984:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	01db      	lsls	r3, r3, #7
 8006990:	4413      	add	r3, r2
 8006992:	3384      	adds	r3, #132	; 0x84
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	01db      	lsls	r3, r3, #7
 80069a0:	4413      	add	r3, r2
 80069a2:	3384      	adds	r3, #132	; 0x84
 80069a4:	461a      	mov	r2, r3
 80069a6:	2300      	movs	r3, #0
 80069a8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069b0:	461a      	mov	r2, r3
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4619      	mov	r1, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	01db      	lsls	r3, r3, #7
 80069c4:	440b      	add	r3, r1
 80069c6:	3384      	adds	r3, #132	; 0x84
 80069c8:	4619      	mov	r1, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	01db      	lsls	r3, r3, #7
 80069da:	4413      	add	r3, r2
 80069dc:	3384      	adds	r3, #132	; 0x84
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	6812      	ldr	r2, [r2, #0]
 80069e4:	4611      	mov	r1, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	01d2      	lsls	r2, r2, #7
 80069ea:	440a      	add	r2, r1
 80069ec:	3284      	adds	r2, #132	; 0x84
 80069ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	01db      	lsls	r3, r3, #7
 80069fe:	4413      	add	r3, r2
 8006a00:	3384      	adds	r3, #132	; 0x84
 8006a02:	461a      	mov	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	01db      	lsls	r3, r3, #7
 8006a14:	4413      	add	r3, r2
 8006a16:	3384      	adds	r3, #132	; 0x84
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	4611      	mov	r1, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	01d2      	lsls	r2, r2, #7
 8006a24:	440a      	add	r2, r1
 8006a26:	3284      	adds	r2, #132	; 0x84
 8006a28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a2c:	f023 0307 	bic.w	r3, r3, #7
 8006a30:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	69da      	ldr	r2, [r3, #28]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	68f9      	ldr	r1, [r7, #12]
 8006a3c:	6809      	ldr	r1, [r1, #0]
 8006a3e:	4608      	mov	r0, r1
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	01c9      	lsls	r1, r1, #7
 8006a44:	4401      	add	r1, r0
 8006a46:	3184      	adds	r1, #132	; 0x84
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	01db      	lsls	r3, r3, #7
 8006a56:	4413      	add	r3, r2
 8006a58:	3384      	adds	r3, #132	; 0x84
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	01db      	lsls	r3, r3, #7
 8006a66:	4413      	add	r3, r2
 8006a68:	3384      	adds	r3, #132	; 0x84
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	01db      	lsls	r3, r3, #7
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3384      	adds	r3, #132	; 0x84
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006a8e:	2304      	movs	r3, #4
 8006a90:	61fb      	str	r3, [r7, #28]
 8006a92:	e01b      	b.n	8006acc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d102      	bne.n	8006aa2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	61fb      	str	r3, [r7, #28]
 8006aa0:	e014      	b.n	8006acc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d00b      	beq.n	8006ac2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d007      	beq.n	8006ac2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d003      	beq.n	8006ac2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006abe:	2b07      	cmp	r3, #7
 8006ac0:	d102      	bne.n	8006ac8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	e001      	b.n	8006acc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	01db      	lsls	r3, r3, #7
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3384      	adds	r3, #132	; 0x84
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	01d2      	lsls	r2, r2, #7
 8006ae6:	440a      	add	r2, r1
 8006ae8:	3284      	adds	r2, #132	; 0x84
 8006aea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006aee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	041a      	lsls	r2, r3, #16
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	6859      	ldr	r1, [r3, #4]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	1acb      	subs	r3, r1, r3
 8006b06:	69f9      	ldr	r1, [r7, #28]
 8006b08:	fb01 f303 	mul.w	r3, r1, r3
 8006b0c:	3303      	adds	r3, #3
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	6809      	ldr	r1, [r1, #0]
 8006b12:	4608      	mov	r0, r1
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	01c9      	lsls	r1, r1, #7
 8006b18:	4401      	add	r1, r0
 8006b1a:	3184      	adds	r1, #132	; 0x84
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	01db      	lsls	r3, r3, #7
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3384      	adds	r3, #132	; 0x84
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	6812      	ldr	r2, [r2, #0]
 8006b34:	4611      	mov	r1, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	01d2      	lsls	r2, r2, #7
 8006b3a:	440a      	add	r2, r1
 8006b3c:	3284      	adds	r2, #132	; 0x84
 8006b3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b42:	f023 0307 	bic.w	r3, r3, #7
 8006b46:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	01db      	lsls	r3, r3, #7
 8006b52:	4413      	add	r3, r2
 8006b54:	3384      	adds	r3, #132	; 0x84
 8006b56:	461a      	mov	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	01db      	lsls	r3, r3, #7
 8006b68:	4413      	add	r3, r2
 8006b6a:	3384      	adds	r3, #132	; 0x84
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	4611      	mov	r1, r2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	01d2      	lsls	r2, r2, #7
 8006b78:	440a      	add	r2, r1
 8006b7a:	3284      	adds	r2, #132	; 0x84
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	6013      	str	r3, [r2, #0]
}
 8006b82:	bf00      	nop
 8006b84:	3724      	adds	r7, #36	; 0x24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
	...

08006b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e25b      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d075      	beq.n	8006c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bae:	4ba3      	ldr	r3, [pc, #652]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d00c      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bba:	4ba0      	ldr	r3, [pc, #640]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d112      	bne.n	8006bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bc6:	4b9d      	ldr	r3, [pc, #628]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd2:	d10b      	bne.n	8006bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd4:	4b99      	ldr	r3, [pc, #612]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d05b      	beq.n	8006c98 <HAL_RCC_OscConfig+0x108>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d157      	bne.n	8006c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e236      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf4:	d106      	bne.n	8006c04 <HAL_RCC_OscConfig+0x74>
 8006bf6:	4b91      	ldr	r3, [pc, #580]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a90      	ldr	r2, [pc, #576]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e01d      	b.n	8006c40 <HAL_RCC_OscConfig+0xb0>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c0c:	d10c      	bne.n	8006c28 <HAL_RCC_OscConfig+0x98>
 8006c0e:	4b8b      	ldr	r3, [pc, #556]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a8a      	ldr	r2, [pc, #552]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	4b88      	ldr	r3, [pc, #544]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a87      	ldr	r2, [pc, #540]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e00b      	b.n	8006c40 <HAL_RCC_OscConfig+0xb0>
 8006c28:	4b84      	ldr	r3, [pc, #528]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a83      	ldr	r2, [pc, #524]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	4b81      	ldr	r3, [pc, #516]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a80      	ldr	r2, [pc, #512]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d013      	beq.n	8006c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c48:	f7fc fcaa 	bl	80035a0 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c50:	f7fc fca6 	bl	80035a0 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b64      	cmp	r3, #100	; 0x64
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e1fb      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c62:	4b76      	ldr	r3, [pc, #472]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0xc0>
 8006c6e:	e014      	b.n	8006c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c70:	f7fc fc96 	bl	80035a0 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c78:	f7fc fc92 	bl	80035a0 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b64      	cmp	r3, #100	; 0x64
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e1e7      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8a:	4b6c      	ldr	r3, [pc, #432]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0xe8>
 8006c96:	e000      	b.n	8006c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d063      	beq.n	8006d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ca6:	4b65      	ldr	r3, [pc, #404]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cb2:	4b62      	ldr	r3, [pc, #392]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d11c      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cbe:	4b5f      	ldr	r3, [pc, #380]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d116      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cca:	4b5c      	ldr	r3, [pc, #368]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x152>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d001      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e1bb      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce2:	4b56      	ldr	r3, [pc, #344]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	4952      	ldr	r1, [pc, #328]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cf6:	e03a      	b.n	8006d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d020      	beq.n	8006d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d00:	4b4f      	ldr	r3, [pc, #316]	; (8006e40 <HAL_RCC_OscConfig+0x2b0>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d06:	f7fc fc4b 	bl	80035a0 <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d0e:	f7fc fc47 	bl	80035a0 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e19c      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d20:	4b46      	ldr	r3, [pc, #280]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d2c:	4b43      	ldr	r3, [pc, #268]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4940      	ldr	r1, [pc, #256]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	600b      	str	r3, [r1, #0]
 8006d40:	e015      	b.n	8006d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d42:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <HAL_RCC_OscConfig+0x2b0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d48:	f7fc fc2a 	bl	80035a0 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d50:	f7fc fc26 	bl	80035a0 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e17b      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d62:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f0      	bne.n	8006d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d030      	beq.n	8006ddc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d016      	beq.n	8006db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d82:	4b30      	ldr	r3, [pc, #192]	; (8006e44 <HAL_RCC_OscConfig+0x2b4>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d88:	f7fc fc0a 	bl	80035a0 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d90:	f7fc fc06 	bl	80035a0 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e15b      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da2:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0f0      	beq.n	8006d90 <HAL_RCC_OscConfig+0x200>
 8006dae:	e015      	b.n	8006ddc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006db0:	4b24      	ldr	r3, [pc, #144]	; (8006e44 <HAL_RCC_OscConfig+0x2b4>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db6:	f7fc fbf3 	bl	80035a0 <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dbe:	f7fc fbef 	bl	80035a0 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e144      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f0      	bne.n	8006dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80a0 	beq.w	8006f2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dea:	2300      	movs	r3, #0
 8006dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dee:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10f      	bne.n	8006e1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	4a0e      	ldr	r2, [pc, #56]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e08:	6413      	str	r3, [r2, #64]	; 0x40
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <HAL_RCC_OscConfig+0x2ac>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e12:	60bb      	str	r3, [r7, #8]
 8006e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e16:	2301      	movs	r3, #1
 8006e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <HAL_RCC_OscConfig+0x2b8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d121      	bne.n	8006e6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e26:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <HAL_RCC_OscConfig+0x2b8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a07      	ldr	r2, [pc, #28]	; (8006e48 <HAL_RCC_OscConfig+0x2b8>)
 8006e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e32:	f7fc fbb5 	bl	80035a0 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e38:	e011      	b.n	8006e5e <HAL_RCC_OscConfig+0x2ce>
 8006e3a:	bf00      	nop
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	42470000 	.word	0x42470000
 8006e44:	42470e80 	.word	0x42470e80
 8006e48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4c:	f7fc fba8 	bl	80035a0 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e0fd      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5e:	4b81      	ldr	r3, [pc, #516]	; (8007064 <HAL_RCC_OscConfig+0x4d4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f0      	beq.n	8006e4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d106      	bne.n	8006e80 <HAL_RCC_OscConfig+0x2f0>
 8006e72:	4b7d      	ldr	r3, [pc, #500]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	4a7c      	ldr	r2, [pc, #496]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7e:	e01c      	b.n	8006eba <HAL_RCC_OscConfig+0x32a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2b05      	cmp	r3, #5
 8006e86:	d10c      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x312>
 8006e88:	4b77      	ldr	r3, [pc, #476]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	4a76      	ldr	r2, [pc, #472]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006e8e:	f043 0304 	orr.w	r3, r3, #4
 8006e92:	6713      	str	r3, [r2, #112]	; 0x70
 8006e94:	4b74      	ldr	r3, [pc, #464]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	4a73      	ldr	r2, [pc, #460]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006e9a:	f043 0301 	orr.w	r3, r3, #1
 8006e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea0:	e00b      	b.n	8006eba <HAL_RCC_OscConfig+0x32a>
 8006ea2:	4b71      	ldr	r3, [pc, #452]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	4a70      	ldr	r2, [pc, #448]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	6713      	str	r3, [r2, #112]	; 0x70
 8006eae:	4b6e      	ldr	r3, [pc, #440]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb2:	4a6d      	ldr	r2, [pc, #436]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006eb4:	f023 0304 	bic.w	r3, r3, #4
 8006eb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d015      	beq.n	8006eee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec2:	f7fc fb6d 	bl	80035a0 <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec8:	e00a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eca:	f7fc fb69 	bl	80035a0 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e0bc      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee0:	4b61      	ldr	r3, [pc, #388]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0ee      	beq.n	8006eca <HAL_RCC_OscConfig+0x33a>
 8006eec:	e014      	b.n	8006f18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eee:	f7fc fb57 	bl	80035a0 <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ef4:	e00a      	b.n	8006f0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ef6:	f7fc fb53 	bl	80035a0 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e0a6      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f0c:	4b56      	ldr	r3, [pc, #344]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1ee      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d105      	bne.n	8006f2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f1e:	4b52      	ldr	r3, [pc, #328]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	4a51      	ldr	r2, [pc, #324]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8092 	beq.w	8007058 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f34:	4b4c      	ldr	r3, [pc, #304]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d05c      	beq.n	8006ffa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d141      	bne.n	8006fcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f48:	4b48      	ldr	r3, [pc, #288]	; (800706c <HAL_RCC_OscConfig+0x4dc>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f4e:	f7fc fb27 	bl	80035a0 <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f54:	e008      	b.n	8006f68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f56:	f7fc fb23 	bl	80035a0 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e078      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f68:	4b3f      	ldr	r3, [pc, #252]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1f0      	bne.n	8006f56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	019b      	lsls	r3, r3, #6
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	061b      	lsls	r3, r3, #24
 8006f98:	4933      	ldr	r1, [pc, #204]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f9e:	4b33      	ldr	r3, [pc, #204]	; (800706c <HAL_RCC_OscConfig+0x4dc>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa4:	f7fc fafc 	bl	80035a0 <HAL_GetTick>
 8006fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fac:	f7fc faf8 	bl	80035a0 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e04d      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fbe:	4b2a      	ldr	r3, [pc, #168]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0f0      	beq.n	8006fac <HAL_RCC_OscConfig+0x41c>
 8006fca:	e045      	b.n	8007058 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fcc:	4b27      	ldr	r3, [pc, #156]	; (800706c <HAL_RCC_OscConfig+0x4dc>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd2:	f7fc fae5 	bl	80035a0 <HAL_GetTick>
 8006fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fd8:	e008      	b.n	8006fec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fda:	f7fc fae1 	bl	80035a0 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e036      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fec:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1f0      	bne.n	8006fda <HAL_RCC_OscConfig+0x44a>
 8006ff8:	e02e      	b.n	8007058 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e029      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007006:	4b18      	ldr	r3, [pc, #96]	; (8007068 <HAL_RCC_OscConfig+0x4d8>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	429a      	cmp	r2, r3
 8007018:	d11c      	bne.n	8007054 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007024:	429a      	cmp	r2, r3
 8007026:	d115      	bne.n	8007054 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800702e:	4013      	ands	r3, r2
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007034:	4293      	cmp	r3, r2
 8007036:	d10d      	bne.n	8007054 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d106      	bne.n	8007054 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007050:	429a      	cmp	r2, r3
 8007052:	d001      	beq.n	8007058 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40007000 	.word	0x40007000
 8007068:	40023800 	.word	0x40023800
 800706c:	42470060 	.word	0x42470060

08007070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e0cc      	b.n	800721e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007084:	4b68      	ldr	r3, [pc, #416]	; (8007228 <HAL_RCC_ClockConfig+0x1b8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d90c      	bls.n	80070ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007092:	4b65      	ldr	r3, [pc, #404]	; (8007228 <HAL_RCC_ClockConfig+0x1b8>)
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800709a:	4b63      	ldr	r3, [pc, #396]	; (8007228 <HAL_RCC_ClockConfig+0x1b8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d001      	beq.n	80070ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e0b8      	b.n	800721e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d020      	beq.n	80070fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070c4:	4b59      	ldr	r3, [pc, #356]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4a58      	ldr	r2, [pc, #352]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070dc:	4b53      	ldr	r3, [pc, #332]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	4a52      	ldr	r2, [pc, #328]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80070e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070e8:	4b50      	ldr	r3, [pc, #320]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	494d      	ldr	r1, [pc, #308]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d044      	beq.n	8007190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d107      	bne.n	800711e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800710e:	4b47      	ldr	r3, [pc, #284]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d119      	bne.n	800714e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e07f      	b.n	800721e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d003      	beq.n	800712e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800712a:	2b03      	cmp	r3, #3
 800712c:	d107      	bne.n	800713e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800712e:	4b3f      	ldr	r3, [pc, #252]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d109      	bne.n	800714e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e06f      	b.n	800721e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800713e:	4b3b      	ldr	r3, [pc, #236]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e067      	b.n	800721e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800714e:	4b37      	ldr	r3, [pc, #220]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f023 0203 	bic.w	r2, r3, #3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	4934      	ldr	r1, [pc, #208]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 800715c:	4313      	orrs	r3, r2
 800715e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007160:	f7fc fa1e 	bl	80035a0 <HAL_GetTick>
 8007164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007166:	e00a      	b.n	800717e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007168:	f7fc fa1a 	bl	80035a0 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	f241 3288 	movw	r2, #5000	; 0x1388
 8007176:	4293      	cmp	r3, r2
 8007178:	d901      	bls.n	800717e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e04f      	b.n	800721e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800717e:	4b2b      	ldr	r3, [pc, #172]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 020c 	and.w	r2, r3, #12
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	429a      	cmp	r2, r3
 800718e:	d1eb      	bne.n	8007168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007190:	4b25      	ldr	r3, [pc, #148]	; (8007228 <HAL_RCC_ClockConfig+0x1b8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d20c      	bcs.n	80071b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719e:	4b22      	ldr	r3, [pc, #136]	; (8007228 <HAL_RCC_ClockConfig+0x1b8>)
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071a6:	4b20      	ldr	r3, [pc, #128]	; (8007228 <HAL_RCC_ClockConfig+0x1b8>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d001      	beq.n	80071b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e032      	b.n	800721e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d008      	beq.n	80071d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071c4:	4b19      	ldr	r3, [pc, #100]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	4916      	ldr	r1, [pc, #88]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	490e      	ldr	r1, [pc, #56]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071f6:	f000 f821 	bl	800723c <HAL_RCC_GetSysClockFreq>
 80071fa:	4602      	mov	r2, r0
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <HAL_RCC_ClockConfig+0x1bc>)
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	091b      	lsrs	r3, r3, #4
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	490a      	ldr	r1, [pc, #40]	; (8007230 <HAL_RCC_ClockConfig+0x1c0>)
 8007208:	5ccb      	ldrb	r3, [r1, r3]
 800720a:	fa22 f303 	lsr.w	r3, r2, r3
 800720e:	4a09      	ldr	r2, [pc, #36]	; (8007234 <HAL_RCC_ClockConfig+0x1c4>)
 8007210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <HAL_RCC_ClockConfig+0x1c8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f7fb f894 	bl	8002344 <HAL_InitTick>

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40023c00 	.word	0x40023c00
 800722c:	40023800 	.word	0x40023800
 8007230:	0800fa74 	.word	0x0800fa74
 8007234:	20000000 	.word	0x20000000
 8007238:	20000090 	.word	0x20000090

0800723c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800723c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	607b      	str	r3, [r7, #4]
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	2300      	movs	r3, #0
 800724e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007254:	4b67      	ldr	r3, [pc, #412]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f003 030c 	and.w	r3, r3, #12
 800725c:	2b08      	cmp	r3, #8
 800725e:	d00d      	beq.n	800727c <HAL_RCC_GetSysClockFreq+0x40>
 8007260:	2b08      	cmp	r3, #8
 8007262:	f200 80bd 	bhi.w	80073e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <HAL_RCC_GetSysClockFreq+0x34>
 800726a:	2b04      	cmp	r3, #4
 800726c:	d003      	beq.n	8007276 <HAL_RCC_GetSysClockFreq+0x3a>
 800726e:	e0b7      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007270:	4b61      	ldr	r3, [pc, #388]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007272:	60bb      	str	r3, [r7, #8]
       break;
 8007274:	e0b7      	b.n	80073e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007276:	4b61      	ldr	r3, [pc, #388]	; (80073fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007278:	60bb      	str	r3, [r7, #8]
      break;
 800727a:	e0b4      	b.n	80073e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800727c:	4b5d      	ldr	r3, [pc, #372]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007284:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007286:	4b5b      	ldr	r3, [pc, #364]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d04d      	beq.n	800732e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007292:	4b58      	ldr	r3, [pc, #352]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	461a      	mov	r2, r3
 800729a:	f04f 0300 	mov.w	r3, #0
 800729e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072a2:	f04f 0100 	mov.w	r1, #0
 80072a6:	ea02 0800 	and.w	r8, r2, r0
 80072aa:	ea03 0901 	and.w	r9, r3, r1
 80072ae:	4640      	mov	r0, r8
 80072b0:	4649      	mov	r1, r9
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	014b      	lsls	r3, r1, #5
 80072bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072c0:	0142      	lsls	r2, r0, #5
 80072c2:	4610      	mov	r0, r2
 80072c4:	4619      	mov	r1, r3
 80072c6:	ebb0 0008 	subs.w	r0, r0, r8
 80072ca:	eb61 0109 	sbc.w	r1, r1, r9
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	018b      	lsls	r3, r1, #6
 80072d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072dc:	0182      	lsls	r2, r0, #6
 80072de:	1a12      	subs	r2, r2, r0
 80072e0:	eb63 0301 	sbc.w	r3, r3, r1
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f04f 0100 	mov.w	r1, #0
 80072ec:	00d9      	lsls	r1, r3, #3
 80072ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072f2:	00d0      	lsls	r0, r2, #3
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	eb12 0208 	adds.w	r2, r2, r8
 80072fc:	eb43 0309 	adc.w	r3, r3, r9
 8007300:	f04f 0000 	mov.w	r0, #0
 8007304:	f04f 0100 	mov.w	r1, #0
 8007308:	0259      	lsls	r1, r3, #9
 800730a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800730e:	0250      	lsls	r0, r2, #9
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4610      	mov	r0, r2
 8007316:	4619      	mov	r1, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	461a      	mov	r2, r3
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	f7f9 fbfc 	bl	8000b1c <__aeabi_uldivmod>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4613      	mov	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	e04a      	b.n	80073c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800732e:	4b31      	ldr	r3, [pc, #196]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	099b      	lsrs	r3, r3, #6
 8007334:	461a      	mov	r2, r3
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800733e:	f04f 0100 	mov.w	r1, #0
 8007342:	ea02 0400 	and.w	r4, r2, r0
 8007346:	ea03 0501 	and.w	r5, r3, r1
 800734a:	4620      	mov	r0, r4
 800734c:	4629      	mov	r1, r5
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	014b      	lsls	r3, r1, #5
 8007358:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800735c:	0142      	lsls	r2, r0, #5
 800735e:	4610      	mov	r0, r2
 8007360:	4619      	mov	r1, r3
 8007362:	1b00      	subs	r0, r0, r4
 8007364:	eb61 0105 	sbc.w	r1, r1, r5
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	018b      	lsls	r3, r1, #6
 8007372:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007376:	0182      	lsls	r2, r0, #6
 8007378:	1a12      	subs	r2, r2, r0
 800737a:	eb63 0301 	sbc.w	r3, r3, r1
 800737e:	f04f 0000 	mov.w	r0, #0
 8007382:	f04f 0100 	mov.w	r1, #0
 8007386:	00d9      	lsls	r1, r3, #3
 8007388:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800738c:	00d0      	lsls	r0, r2, #3
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	1912      	adds	r2, r2, r4
 8007394:	eb45 0303 	adc.w	r3, r5, r3
 8007398:	f04f 0000 	mov.w	r0, #0
 800739c:	f04f 0100 	mov.w	r1, #0
 80073a0:	0299      	lsls	r1, r3, #10
 80073a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80073a6:	0290      	lsls	r0, r2, #10
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4610      	mov	r0, r2
 80073ae:	4619      	mov	r1, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f04f 0300 	mov.w	r3, #0
 80073b8:	f7f9 fbb0 	bl	8000b1c <__aeabi_uldivmod>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4613      	mov	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073c4:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	3301      	adds	r3, #1
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073dc:	60bb      	str	r3, [r7, #8]
      break;
 80073de:	e002      	b.n	80073e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073e0:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073e2:	60bb      	str	r3, [r7, #8]
      break;
 80073e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073e6:	68bb      	ldr	r3, [r7, #8]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80073f2:	bf00      	nop
 80073f4:	40023800 	.word	0x40023800
 80073f8:	00f42400 	.word	0x00f42400
 80073fc:	007a1200 	.word	0x007a1200

08007400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007404:	4b03      	ldr	r3, [pc, #12]	; (8007414 <HAL_RCC_GetHCLKFreq+0x14>)
 8007406:	681b      	ldr	r3, [r3, #0]
}
 8007408:	4618      	mov	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20000000 	.word	0x20000000

08007418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800741c:	f7ff fff0 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 8007420:	4602      	mov	r2, r0
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	0a9b      	lsrs	r3, r3, #10
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	4903      	ldr	r1, [pc, #12]	; (800743c <HAL_RCC_GetPCLK1Freq+0x24>)
 800742e:	5ccb      	ldrb	r3, [r1, r3]
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007434:	4618      	mov	r0, r3
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40023800 	.word	0x40023800
 800743c:	0800fa84 	.word	0x0800fa84

08007440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007444:	f7ff ffdc 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 8007448:	4602      	mov	r2, r0
 800744a:	4b05      	ldr	r3, [pc, #20]	; (8007460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	0b5b      	lsrs	r3, r3, #13
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	4903      	ldr	r1, [pc, #12]	; (8007464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007456:	5ccb      	ldrb	r3, [r1, r3]
 8007458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800745c:	4618      	mov	r0, r3
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40023800 	.word	0x40023800
 8007464:	0800fa84 	.word	0x0800fa84

08007468 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	220f      	movs	r2, #15
 8007476:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007478:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <HAL_RCC_GetClockConfig+0x5c>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 0203 	and.w	r2, r3, #3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007484:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <HAL_RCC_GetClockConfig+0x5c>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007490:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <HAL_RCC_GetClockConfig+0x5c>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <HAL_RCC_GetClockConfig+0x5c>)
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	08db      	lsrs	r3, r3, #3
 80074a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074aa:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <HAL_RCC_GetClockConfig+0x60>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 020f 	and.w	r2, r3, #15
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	601a      	str	r2, [r3, #0]
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40023800 	.word	0x40023800
 80074c8:	40023c00 	.word	0x40023c00

080074cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d105      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d075      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007500:	4bad      	ldr	r3, [pc, #692]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007506:	f7fc f84b 	bl	80035a0 <HAL_GetTick>
 800750a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800750c:	e008      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800750e:	f7fc f847 	bl	80035a0 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e18b      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007520:	4ba6      	ldr	r3, [pc, #664]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f0      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d009      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	019a      	lsls	r2, r3, #6
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	071b      	lsls	r3, r3, #28
 8007544:	499d      	ldr	r1, [pc, #628]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01f      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007558:	4b98      	ldr	r3, [pc, #608]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800755a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800755e:	0f1b      	lsrs	r3, r3, #28
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	019a      	lsls	r2, r3, #6
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	061b      	lsls	r3, r3, #24
 8007572:	431a      	orrs	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	071b      	lsls	r3, r3, #28
 8007578:	4990      	ldr	r1, [pc, #576]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007580:	4b8e      	ldr	r3, [pc, #568]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007586:	f023 021f 	bic.w	r2, r3, #31
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	3b01      	subs	r3, #1
 8007590:	498a      	ldr	r1, [pc, #552]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00d      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	019a      	lsls	r2, r3, #6
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	061b      	lsls	r3, r3, #24
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	071b      	lsls	r3, r3, #28
 80075b8:	4980      	ldr	r1, [pc, #512]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075c0:	4b7d      	ldr	r3, [pc, #500]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80075c2:	2201      	movs	r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075c6:	f7fb ffeb 	bl	80035a0 <HAL_GetTick>
 80075ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075cc:	e008      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075ce:	f7fb ffe7 	bl	80035a0 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d901      	bls.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e12b      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075e0:	4b76      	ldr	r3, [pc, #472]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0f0      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007600:	2b00      	cmp	r3, #0
 8007602:	d079      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007604:	4b6e      	ldr	r3, [pc, #440]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800760a:	f7fb ffc9 	bl	80035a0 <HAL_GetTick>
 800760e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007610:	e008      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007612:	f7fb ffc5 	bl	80035a0 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e109      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007624:	4b65      	ldr	r3, [pc, #404]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800762c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007630:	d0ef      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d020      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800763e:	4b5f      	ldr	r3, [pc, #380]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007644:	0f1b      	lsrs	r3, r3, #28
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	019a      	lsls	r2, r3, #6
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	061b      	lsls	r3, r3, #24
 8007658:	431a      	orrs	r2, r3
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	071b      	lsls	r3, r3, #28
 800765e:	4957      	ldr	r1, [pc, #348]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007660:	4313      	orrs	r3, r2
 8007662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007666:	4b55      	ldr	r3, [pc, #340]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800766c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	3b01      	subs	r3, #1
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	4950      	ldr	r1, [pc, #320]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01e      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800768c:	4b4b      	ldr	r3, [pc, #300]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007692:	0e1b      	lsrs	r3, r3, #24
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	019a      	lsls	r2, r3, #6
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	061b      	lsls	r3, r3, #24
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	071b      	lsls	r3, r3, #28
 80076ac:	4943      	ldr	r1, [pc, #268]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80076b4:	4b41      	ldr	r3, [pc, #260]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	493e      	ldr	r1, [pc, #248]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076ca:	4b3d      	ldr	r3, [pc, #244]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076d0:	f7fb ff66 	bl	80035a0 <HAL_GetTick>
 80076d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80076d8:	f7fb ff62 	bl	80035a0 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e0a6      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076ea:	4b34      	ldr	r3, [pc, #208]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076f6:	d1ef      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 808d 	beq.w	8007820 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007706:	2300      	movs	r3, #0
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	4b2c      	ldr	r3, [pc, #176]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	4a2b      	ldr	r2, [pc, #172]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007714:	6413      	str	r3, [r2, #64]	; 0x40
 8007716:	4b29      	ldr	r3, [pc, #164]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007722:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a27      	ldr	r2, [pc, #156]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800772e:	f7fb ff37 	bl	80035a0 <HAL_GetTick>
 8007732:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007734:	e008      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007736:	f7fb ff33 	bl	80035a0 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d901      	bls.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e077      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007748:	4b1e      	ldr	r3, [pc, #120]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0f0      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007754:	4b19      	ldr	r3, [pc, #100]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800775c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d039      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	429a      	cmp	r2, r3
 8007770:	d032      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007772:	4b12      	ldr	r3, [pc, #72]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800777a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800777c:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800777e:	2201      	movs	r2, #1
 8007780:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007782:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007788:	4a0c      	ldr	r2, [pc, #48]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800778e:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b01      	cmp	r3, #1
 8007798:	d11e      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800779a:	f7fb ff01 	bl	80035a0 <HAL_GetTick>
 800779e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a0:	e014      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077a2:	f7fb fefd 	bl	80035a0 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d90b      	bls.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e03f      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80077b8:	42470068 	.word	0x42470068
 80077bc:	40023800 	.word	0x40023800
 80077c0:	42470070 	.word	0x42470070
 80077c4:	40007000 	.word	0x40007000
 80077c8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077cc:	4b1c      	ldr	r3, [pc, #112]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80077ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0e4      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077e4:	d10d      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80077e6:	4b16      	ldr	r3, [pc, #88]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80077f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077fa:	4911      	ldr	r1, [pc, #68]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	608b      	str	r3, [r1, #8]
 8007800:	e005      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007802:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	4a0e      	ldr	r2, [pc, #56]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007808:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800780c:	6093      	str	r3, [r2, #8]
 800780e:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007810:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800781a:	4909      	ldr	r1, [pc, #36]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800781c:	4313      	orrs	r3, r2
 800781e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007832:	4b04      	ldr	r3, [pc, #16]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007834:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	40023800 	.word	0x40023800
 8007844:	424711e0 	.word	0x424711e0

08007848 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e025      	b.n	80078a8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d106      	bne.n	8007876 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7fa fd5d 	bl	8002330 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3304      	adds	r3, #4
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f001 fc77 	bl	800917c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	461a      	mov	r2, r3
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	f001 fce2 	bl	8009262 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e056      	b.n	8007970 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7fa fb4f 	bl	8001f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	431a      	orrs	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800791e:	431a      	orrs	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	ea42 0103 	orr.w	r1, r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	0c1b      	lsrs	r3, r3, #16
 8007940:	f003 0104 	and.w	r1, r3, #4
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69da      	ldr	r2, [r3, #28]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800795e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e01d      	b.n	80079c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7fa fb36 	bl	8002010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4619      	mov	r1, r3
 80079b6:	4610      	mov	r0, r2
 80079b8:	f000 fb74 	bl	80080a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b085      	sub	sp, #20
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b06      	cmp	r3, #6
 80079ee:	d007      	beq.n	8007a00 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f042 0201 	orr.w	r2, r2, #1
 8007a2c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b06      	cmp	r3, #6
 8007a3e:	d007      	beq.n	8007a50 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0201 	orr.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e01d      	b.n	8007aac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d106      	bne.n	8007a8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7fa fae5 	bl	8002054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	f000 fb01 	bl	80080a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fdd6 	bl	8008678 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a15      	ldr	r2, [pc, #84]	; (8007b28 <HAL_TIM_PWM_Start+0x74>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d004      	beq.n	8007ae0 <HAL_TIM_PWM_Start+0x2c>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a14      	ldr	r2, [pc, #80]	; (8007b2c <HAL_TIM_PWM_Start+0x78>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d101      	bne.n	8007ae4 <HAL_TIM_PWM_Start+0x30>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e000      	b.n	8007ae6 <HAL_TIM_PWM_Start+0x32>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d007      	beq.n	8007afa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007af8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b06      	cmp	r3, #6
 8007b0a:	d007      	beq.n	8007b1c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0201 	orr.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	40010000 	.word	0x40010000
 8007b2c:	40010400 	.word	0x40010400

08007b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d122      	bne.n	8007b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d11b      	bne.n	8007b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f06f 0202 	mvn.w	r2, #2
 8007b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa78 	bl	8008068 <HAL_TIM_IC_CaptureCallback>
 8007b78:	e005      	b.n	8007b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fa6a 	bl	8008054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fa7b 	bl	800807c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d122      	bne.n	8007be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d11b      	bne.n	8007be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f06f 0204 	mvn.w	r2, #4
 8007bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa4e 	bl	8008068 <HAL_TIM_IC_CaptureCallback>
 8007bcc:	e005      	b.n	8007bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa40 	bl	8008054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fa51 	bl	800807c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d122      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d11b      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0208 	mvn.w	r2, #8
 8007c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2204      	movs	r2, #4
 8007c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fa24 	bl	8008068 <HAL_TIM_IC_CaptureCallback>
 8007c20:	e005      	b.n	8007c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa16 	bl	8008054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa27 	bl	800807c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0310 	and.w	r3, r3, #16
 8007c3e:	2b10      	cmp	r3, #16
 8007c40:	d122      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b10      	cmp	r3, #16
 8007c4e:	d11b      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0210 	mvn.w	r2, #16
 8007c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2208      	movs	r2, #8
 8007c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f9fa 	bl	8008068 <HAL_TIM_IC_CaptureCallback>
 8007c74:	e005      	b.n	8007c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9ec 	bl	8008054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f9fd 	bl	800807c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d10e      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d107      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0201 	mvn.w	r2, #1
 8007cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7f9 feae 	bl	8001a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbe:	2b80      	cmp	r3, #128	; 0x80
 8007cc0:	d10e      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ccc:	2b80      	cmp	r3, #128	; 0x80
 8007cce:	d107      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fd78 	bl	80087d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d10e      	bne.n	8007d0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf8:	2b40      	cmp	r3, #64	; 0x40
 8007cfa:	d107      	bne.n	8007d0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9c2 	bl	8008090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b20      	cmp	r3, #32
 8007d18:	d10e      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b20      	cmp	r3, #32
 8007d26:	d107      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f06f 0220 	mvn.w	r2, #32
 8007d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fd42 	bl	80087bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e0b4      	b.n	8007ec4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2202      	movs	r2, #2
 8007d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b0c      	cmp	r3, #12
 8007d6e:	f200 809f 	bhi.w	8007eb0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007d72:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d78:	08007dad 	.word	0x08007dad
 8007d7c:	08007eb1 	.word	0x08007eb1
 8007d80:	08007eb1 	.word	0x08007eb1
 8007d84:	08007eb1 	.word	0x08007eb1
 8007d88:	08007ded 	.word	0x08007ded
 8007d8c:	08007eb1 	.word	0x08007eb1
 8007d90:	08007eb1 	.word	0x08007eb1
 8007d94:	08007eb1 	.word	0x08007eb1
 8007d98:	08007e2f 	.word	0x08007e2f
 8007d9c:	08007eb1 	.word	0x08007eb1
 8007da0:	08007eb1 	.word	0x08007eb1
 8007da4:	08007eb1 	.word	0x08007eb1
 8007da8:	08007e6f 	.word	0x08007e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68b9      	ldr	r1, [r7, #8]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fa16 	bl	80081e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0208 	orr.w	r2, r2, #8
 8007dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	699a      	ldr	r2, [r3, #24]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0204 	bic.w	r2, r2, #4
 8007dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6999      	ldr	r1, [r3, #24]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	619a      	str	r2, [r3, #24]
      break;
 8007dea:	e062      	b.n	8007eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68b9      	ldr	r1, [r7, #8]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fa66 	bl	80082c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6999      	ldr	r1, [r3, #24]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	021a      	lsls	r2, r3, #8
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	619a      	str	r2, [r3, #24]
      break;
 8007e2c:	e041      	b.n	8007eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fabb 	bl	80083b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0208 	orr.w	r2, r2, #8
 8007e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69da      	ldr	r2, [r3, #28]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0204 	bic.w	r2, r2, #4
 8007e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69d9      	ldr	r1, [r3, #28]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	691a      	ldr	r2, [r3, #16]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	61da      	str	r2, [r3, #28]
      break;
 8007e6c:	e021      	b.n	8007eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 fb0f 	bl	8008498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69da      	ldr	r2, [r3, #28]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69da      	ldr	r2, [r3, #28]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69d9      	ldr	r1, [r3, #28]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	021a      	lsls	r2, r3, #8
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	61da      	str	r2, [r3, #28]
      break;
 8007eae:	e000      	b.n	8007eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007eb0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_TIM_ConfigClockSource+0x18>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e0b3      	b.n	800804c <HAL_TIM_ConfigClockSource+0x180>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f1c:	d03e      	beq.n	8007f9c <HAL_TIM_ConfigClockSource+0xd0>
 8007f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f22:	f200 8087 	bhi.w	8008034 <HAL_TIM_ConfigClockSource+0x168>
 8007f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2a:	f000 8085 	beq.w	8008038 <HAL_TIM_ConfigClockSource+0x16c>
 8007f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f32:	d87f      	bhi.n	8008034 <HAL_TIM_ConfigClockSource+0x168>
 8007f34:	2b70      	cmp	r3, #112	; 0x70
 8007f36:	d01a      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0xa2>
 8007f38:	2b70      	cmp	r3, #112	; 0x70
 8007f3a:	d87b      	bhi.n	8008034 <HAL_TIM_ConfigClockSource+0x168>
 8007f3c:	2b60      	cmp	r3, #96	; 0x60
 8007f3e:	d050      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x116>
 8007f40:	2b60      	cmp	r3, #96	; 0x60
 8007f42:	d877      	bhi.n	8008034 <HAL_TIM_ConfigClockSource+0x168>
 8007f44:	2b50      	cmp	r3, #80	; 0x50
 8007f46:	d03c      	beq.n	8007fc2 <HAL_TIM_ConfigClockSource+0xf6>
 8007f48:	2b50      	cmp	r3, #80	; 0x50
 8007f4a:	d873      	bhi.n	8008034 <HAL_TIM_ConfigClockSource+0x168>
 8007f4c:	2b40      	cmp	r3, #64	; 0x40
 8007f4e:	d058      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x136>
 8007f50:	2b40      	cmp	r3, #64	; 0x40
 8007f52:	d86f      	bhi.n	8008034 <HAL_TIM_ConfigClockSource+0x168>
 8007f54:	2b30      	cmp	r3, #48	; 0x30
 8007f56:	d064      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0x156>
 8007f58:	2b30      	cmp	r3, #48	; 0x30
 8007f5a:	d86b      	bhi.n	8008034 <HAL_TIM_ConfigClockSource+0x168>
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d060      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0x156>
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	d867      	bhi.n	8008034 <HAL_TIM_ConfigClockSource+0x168>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d05c      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0x156>
 8007f68:	2b10      	cmp	r3, #16
 8007f6a:	d05a      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f6c:	e062      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	6899      	ldr	r1, [r3, #8]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f000 fb5b 	bl	8008638 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	609a      	str	r2, [r3, #8]
      break;
 8007f9a:	e04e      	b.n	800803a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	6899      	ldr	r1, [r3, #8]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f000 fb44 	bl	8008638 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fbe:	609a      	str	r2, [r3, #8]
      break;
 8007fc0:	e03b      	b.n	800803a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6859      	ldr	r1, [r3, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f000 fab8 	bl	8008544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2150      	movs	r1, #80	; 0x50
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fb11 	bl	8008602 <TIM_ITRx_SetConfig>
      break;
 8007fe0:	e02b      	b.n	800803a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6859      	ldr	r1, [r3, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f000 fad7 	bl	80085a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2160      	movs	r1, #96	; 0x60
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fb01 	bl	8008602 <TIM_ITRx_SetConfig>
      break;
 8008000:	e01b      	b.n	800803a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6859      	ldr	r1, [r3, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	461a      	mov	r2, r3
 8008010:	f000 fa98 	bl	8008544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2140      	movs	r1, #64	; 0x40
 800801a:	4618      	mov	r0, r3
 800801c:	f000 faf1 	bl	8008602 <TIM_ITRx_SetConfig>
      break;
 8008020:	e00b      	b.n	800803a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4619      	mov	r1, r3
 800802c:	4610      	mov	r0, r2
 800802e:	f000 fae8 	bl	8008602 <TIM_ITRx_SetConfig>
      break;
 8008032:	e002      	b.n	800803a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008034:	bf00      	nop
 8008036:	e000      	b.n	800803a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008038:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a40      	ldr	r2, [pc, #256]	; (80081b8 <TIM_Base_SetConfig+0x114>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d013      	beq.n	80080e4 <TIM_Base_SetConfig+0x40>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c2:	d00f      	beq.n	80080e4 <TIM_Base_SetConfig+0x40>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a3d      	ldr	r2, [pc, #244]	; (80081bc <TIM_Base_SetConfig+0x118>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00b      	beq.n	80080e4 <TIM_Base_SetConfig+0x40>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a3c      	ldr	r2, [pc, #240]	; (80081c0 <TIM_Base_SetConfig+0x11c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d007      	beq.n	80080e4 <TIM_Base_SetConfig+0x40>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a3b      	ldr	r2, [pc, #236]	; (80081c4 <TIM_Base_SetConfig+0x120>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d003      	beq.n	80080e4 <TIM_Base_SetConfig+0x40>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a3a      	ldr	r2, [pc, #232]	; (80081c8 <TIM_Base_SetConfig+0x124>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d108      	bne.n	80080f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a2f      	ldr	r2, [pc, #188]	; (80081b8 <TIM_Base_SetConfig+0x114>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d02b      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008104:	d027      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a2c      	ldr	r2, [pc, #176]	; (80081bc <TIM_Base_SetConfig+0x118>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d023      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a2b      	ldr	r2, [pc, #172]	; (80081c0 <TIM_Base_SetConfig+0x11c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d01f      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a2a      	ldr	r2, [pc, #168]	; (80081c4 <TIM_Base_SetConfig+0x120>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d01b      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a29      	ldr	r2, [pc, #164]	; (80081c8 <TIM_Base_SetConfig+0x124>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d017      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a28      	ldr	r2, [pc, #160]	; (80081cc <TIM_Base_SetConfig+0x128>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d013      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a27      	ldr	r2, [pc, #156]	; (80081d0 <TIM_Base_SetConfig+0x12c>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00f      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a26      	ldr	r2, [pc, #152]	; (80081d4 <TIM_Base_SetConfig+0x130>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d00b      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a25      	ldr	r2, [pc, #148]	; (80081d8 <TIM_Base_SetConfig+0x134>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d007      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a24      	ldr	r2, [pc, #144]	; (80081dc <TIM_Base_SetConfig+0x138>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d003      	beq.n	8008156 <TIM_Base_SetConfig+0xb2>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a23      	ldr	r2, [pc, #140]	; (80081e0 <TIM_Base_SetConfig+0x13c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d108      	bne.n	8008168 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800815c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4313      	orrs	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a0a      	ldr	r2, [pc, #40]	; (80081b8 <TIM_Base_SetConfig+0x114>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d003      	beq.n	800819c <TIM_Base_SetConfig+0xf8>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a0c      	ldr	r2, [pc, #48]	; (80081c8 <TIM_Base_SetConfig+0x124>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d103      	bne.n	80081a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	691a      	ldr	r2, [r3, #16]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	615a      	str	r2, [r3, #20]
}
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	40010000 	.word	0x40010000
 80081bc:	40000400 	.word	0x40000400
 80081c0:	40000800 	.word	0x40000800
 80081c4:	40000c00 	.word	0x40000c00
 80081c8:	40010400 	.word	0x40010400
 80081cc:	40014000 	.word	0x40014000
 80081d0:	40014400 	.word	0x40014400
 80081d4:	40014800 	.word	0x40014800
 80081d8:	40001800 	.word	0x40001800
 80081dc:	40001c00 	.word	0x40001c00
 80081e0:	40002000 	.word	0x40002000

080081e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	f023 0201 	bic.w	r2, r3, #1
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0303 	bic.w	r3, r3, #3
 800821a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f023 0302 	bic.w	r3, r3, #2
 800822c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a20      	ldr	r2, [pc, #128]	; (80082bc <TIM_OC1_SetConfig+0xd8>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_OC1_SetConfig+0x64>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a1f      	ldr	r2, [pc, #124]	; (80082c0 <TIM_OC1_SetConfig+0xdc>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d10c      	bne.n	8008262 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f023 0308 	bic.w	r3, r3, #8
 800824e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f023 0304 	bic.w	r3, r3, #4
 8008260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a15      	ldr	r2, [pc, #84]	; (80082bc <TIM_OC1_SetConfig+0xd8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d003      	beq.n	8008272 <TIM_OC1_SetConfig+0x8e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a14      	ldr	r2, [pc, #80]	; (80082c0 <TIM_OC1_SetConfig+0xdc>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d111      	bne.n	8008296 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	4313      	orrs	r3, r2
 800828a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	621a      	str	r2, [r3, #32]
}
 80082b0:	bf00      	nop
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	40010000 	.word	0x40010000
 80082c0:	40010400 	.word	0x40010400

080082c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	f023 0210 	bic.w	r2, r3, #16
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4313      	orrs	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 0320 	bic.w	r3, r3, #32
 800830e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	4313      	orrs	r3, r2
 800831a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a22      	ldr	r2, [pc, #136]	; (80083a8 <TIM_OC2_SetConfig+0xe4>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d003      	beq.n	800832c <TIM_OC2_SetConfig+0x68>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a21      	ldr	r2, [pc, #132]	; (80083ac <TIM_OC2_SetConfig+0xe8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d10d      	bne.n	8008348 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	011b      	lsls	r3, r3, #4
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a17      	ldr	r2, [pc, #92]	; (80083a8 <TIM_OC2_SetConfig+0xe4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <TIM_OC2_SetConfig+0x94>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a16      	ldr	r2, [pc, #88]	; (80083ac <TIM_OC2_SetConfig+0xe8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d113      	bne.n	8008380 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800835e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4313      	orrs	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	621a      	str	r2, [r3, #32]
}
 800839a:	bf00      	nop
 800839c:	371c      	adds	r7, #28
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	40010000 	.word	0x40010000
 80083ac:	40010400 	.word	0x40010400

080083b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 0303 	bic.w	r3, r3, #3
 80083e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a21      	ldr	r2, [pc, #132]	; (8008490 <TIM_OC3_SetConfig+0xe0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d003      	beq.n	8008416 <TIM_OC3_SetConfig+0x66>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a20      	ldr	r2, [pc, #128]	; (8008494 <TIM_OC3_SetConfig+0xe4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d10d      	bne.n	8008432 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800841c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a16      	ldr	r2, [pc, #88]	; (8008490 <TIM_OC3_SetConfig+0xe0>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d003      	beq.n	8008442 <TIM_OC3_SetConfig+0x92>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a15      	ldr	r2, [pc, #84]	; (8008494 <TIM_OC3_SetConfig+0xe4>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d113      	bne.n	800846a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	011b      	lsls	r3, r3, #4
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	011b      	lsls	r3, r3, #4
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4313      	orrs	r3, r2
 8008468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	621a      	str	r2, [r3, #32]
}
 8008484:	bf00      	nop
 8008486:	371c      	adds	r7, #28
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	40010000 	.word	0x40010000
 8008494:	40010400 	.word	0x40010400

08008498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	031b      	lsls	r3, r3, #12
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a12      	ldr	r2, [pc, #72]	; (800853c <TIM_OC4_SetConfig+0xa4>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_OC4_SetConfig+0x68>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a11      	ldr	r2, [pc, #68]	; (8008540 <TIM_OC4_SetConfig+0xa8>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d109      	bne.n	8008514 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	019b      	lsls	r3, r3, #6
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	4313      	orrs	r3, r2
 8008512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	621a      	str	r2, [r3, #32]
}
 800852e:	bf00      	nop
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	40010000 	.word	0x40010000
 8008540:	40010400 	.word	0x40010400

08008544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f023 0201 	bic.w	r2, r3, #1
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800856e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	4313      	orrs	r3, r2
 8008578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f023 030a 	bic.w	r3, r3, #10
 8008580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b087      	sub	sp, #28
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	f023 0210 	bic.w	r2, r3, #16
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	031b      	lsls	r3, r3, #12
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	621a      	str	r2, [r3, #32]
}
 80085f6:	bf00      	nop
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4313      	orrs	r3, r2
 8008620:	f043 0307 	orr.w	r3, r3, #7
 8008624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	609a      	str	r2, [r3, #8]
}
 800862c:	bf00      	nop
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	021a      	lsls	r2, r3, #8
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	431a      	orrs	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4313      	orrs	r3, r2
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	609a      	str	r2, [r3, #8]
}
 800866c:	bf00      	nop
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008678:	b480      	push	{r7}
 800867a:	b087      	sub	sp, #28
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f003 031f 	and.w	r3, r3, #31
 800868a:	2201      	movs	r2, #1
 800868c:	fa02 f303 	lsl.w	r3, r2, r3
 8008690:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a1a      	ldr	r2, [r3, #32]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	43db      	mvns	r3, r3
 800869a:	401a      	ands	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a1a      	ldr	r2, [r3, #32]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f003 031f 	and.w	r3, r3, #31
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	fa01 f303 	lsl.w	r3, r1, r3
 80086b0:	431a      	orrs	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	621a      	str	r2, [r3, #32]
}
 80086b6:	bf00      	nop
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
	...

080086c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086d8:	2302      	movs	r3, #2
 80086da:	e05a      	b.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a21      	ldr	r2, [pc, #132]	; (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d022      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008728:	d01d      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1d      	ldr	r2, [pc, #116]	; (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d018      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a1b      	ldr	r2, [pc, #108]	; (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d013      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a1a      	ldr	r2, [pc, #104]	; (80087ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00e      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a18      	ldr	r2, [pc, #96]	; (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d009      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a17      	ldr	r2, [pc, #92]	; (80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d004      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d10c      	bne.n	8008780 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800876c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	4313      	orrs	r3, r2
 8008776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	40010000 	.word	0x40010000
 80087a4:	40000400 	.word	0x40000400
 80087a8:	40000800 	.word	0x40000800
 80087ac:	40000c00 	.word	0x40000c00
 80087b0:	40010400 	.word	0x40010400
 80087b4:	40014000 	.word	0x40014000
 80087b8:	40001800 	.word	0x40001800

080087bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e03f      	b.n	8008876 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d106      	bne.n	8008810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7f9 fcb6 	bl	800217c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2224      	movs	r2, #36	; 0x24
 8008814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68da      	ldr	r2, [r3, #12]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f90b 	bl	8008a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	691a      	ldr	r2, [r3, #16]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800883c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695a      	ldr	r2, [r3, #20]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800884c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800885c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2220      	movs	r2, #32
 8008868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2220      	movs	r2, #32
 8008870:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b088      	sub	sp, #32
 8008882:	af02      	add	r7, sp, #8
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	603b      	str	r3, [r7, #0]
 800888a:	4613      	mov	r3, r2
 800888c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b20      	cmp	r3, #32
 800889c:	f040 8083 	bne.w	80089a6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <HAL_UART_Transmit+0x2e>
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e07b      	b.n	80089a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_UART_Transmit+0x40>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e074      	b.n	80089a8 <HAL_UART_Transmit+0x12a>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2221      	movs	r2, #33	; 0x21
 80088d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80088d4:	f7fa fe64 	bl	80035a0 <HAL_GetTick>
 80088d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	88fa      	ldrh	r2, [r7, #6]
 80088de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80088ee:	e042      	b.n	8008976 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008906:	d122      	bne.n	800894e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	2200      	movs	r2, #0
 8008910:	2180      	movs	r1, #128	; 0x80
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 f84c 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e042      	b.n	80089a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008934:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d103      	bne.n	8008946 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3302      	adds	r3, #2
 8008942:	60bb      	str	r3, [r7, #8]
 8008944:	e017      	b.n	8008976 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	3301      	adds	r3, #1
 800894a:	60bb      	str	r3, [r7, #8]
 800894c:	e013      	b.n	8008976 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2200      	movs	r2, #0
 8008956:	2180      	movs	r1, #128	; 0x80
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 f829 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e01f      	b.n	80089a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	60ba      	str	r2, [r7, #8]
 800896e:	781a      	ldrb	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800897a:	b29b      	uxth	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1b7      	bne.n	80088f0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2200      	movs	r2, #0
 8008988:	2140      	movs	r1, #64	; 0x40
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 f810 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e006      	b.n	80089a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2220      	movs	r2, #32
 800899e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	e000      	b.n	80089a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80089a6:	2302      	movs	r3, #2
  }
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	4613      	mov	r3, r2
 80089be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c0:	e02c      	b.n	8008a1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d028      	beq.n	8008a1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d007      	beq.n	80089e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089d0:	f7fa fde6 	bl	80035a0 <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d21d      	bcs.n	8008a1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	695a      	ldr	r2, [r3, #20]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 0201 	bic.w	r2, r2, #1
 80089fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2220      	movs	r2, #32
 8008a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e00f      	b.n	8008a3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	4013      	ands	r3, r2
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	bf0c      	ite	eq
 8008a2c:	2301      	moveq	r3, #1
 8008a2e:	2300      	movne	r3, #0
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	461a      	mov	r2, r3
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d0c3      	beq.n	80089c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	b0bd      	sub	sp, #244	; 0xf4
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a60:	68d9      	ldr	r1, [r3, #12]
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	ea40 0301 	orr.w	r3, r0, r1
 8008a6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	431a      	orrs	r2, r3
 8008a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a9c:	f021 010c 	bic.w	r1, r1, #12
 8008aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008aaa:	430b      	orrs	r3, r1
 8008aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008abe:	6999      	ldr	r1, [r3, #24]
 8008ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	ea40 0301 	orr.w	r3, r0, r1
 8008aca:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad6:	f040 81a5 	bne.w	8008e24 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	4bcd      	ldr	r3, [pc, #820]	; (8008e18 <UART_SetConfig+0x3d4>)
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d006      	beq.n	8008af4 <UART_SetConfig+0xb0>
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	4bcb      	ldr	r3, [pc, #812]	; (8008e1c <UART_SetConfig+0x3d8>)
 8008aee:	429a      	cmp	r2, r3
 8008af0:	f040 80cb 	bne.w	8008c8a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008af4:	f7fe fca4 	bl	8007440 <HAL_RCC_GetPCLK2Freq>
 8008af8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008afc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b00:	461c      	mov	r4, r3
 8008b02:	f04f 0500 	mov.w	r5, #0
 8008b06:	4622      	mov	r2, r4
 8008b08:	462b      	mov	r3, r5
 8008b0a:	1891      	adds	r1, r2, r2
 8008b0c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008b10:	415b      	adcs	r3, r3
 8008b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008b16:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008b1a:	1912      	adds	r2, r2, r4
 8008b1c:	eb45 0303 	adc.w	r3, r5, r3
 8008b20:	f04f 0000 	mov.w	r0, #0
 8008b24:	f04f 0100 	mov.w	r1, #0
 8008b28:	00d9      	lsls	r1, r3, #3
 8008b2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b2e:	00d0      	lsls	r0, r2, #3
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	1911      	adds	r1, r2, r4
 8008b36:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008b3a:	416b      	adcs	r3, r5
 8008b3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	461a      	mov	r2, r3
 8008b48:	f04f 0300 	mov.w	r3, #0
 8008b4c:	1891      	adds	r1, r2, r2
 8008b4e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008b52:	415b      	adcs	r3, r3
 8008b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b58:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008b5c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008b60:	f7f7 ffdc 	bl	8000b1c <__aeabi_uldivmod>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4bad      	ldr	r3, [pc, #692]	; (8008e20 <UART_SetConfig+0x3dc>)
 8008b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008b6e:	095b      	lsrs	r3, r3, #5
 8008b70:	011e      	lsls	r6, r3, #4
 8008b72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b76:	461c      	mov	r4, r3
 8008b78:	f04f 0500 	mov.w	r5, #0
 8008b7c:	4622      	mov	r2, r4
 8008b7e:	462b      	mov	r3, r5
 8008b80:	1891      	adds	r1, r2, r2
 8008b82:	67b9      	str	r1, [r7, #120]	; 0x78
 8008b84:	415b      	adcs	r3, r3
 8008b86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b88:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008b8c:	1912      	adds	r2, r2, r4
 8008b8e:	eb45 0303 	adc.w	r3, r5, r3
 8008b92:	f04f 0000 	mov.w	r0, #0
 8008b96:	f04f 0100 	mov.w	r1, #0
 8008b9a:	00d9      	lsls	r1, r3, #3
 8008b9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ba0:	00d0      	lsls	r0, r2, #3
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	1911      	adds	r1, r2, r4
 8008ba8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008bac:	416b      	adcs	r3, r5
 8008bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	f04f 0300 	mov.w	r3, #0
 8008bbe:	1891      	adds	r1, r2, r2
 8008bc0:	6739      	str	r1, [r7, #112]	; 0x70
 8008bc2:	415b      	adcs	r3, r3
 8008bc4:	677b      	str	r3, [r7, #116]	; 0x74
 8008bc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008bca:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008bce:	f7f7 ffa5 	bl	8000b1c <__aeabi_uldivmod>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4b92      	ldr	r3, [pc, #584]	; (8008e20 <UART_SetConfig+0x3dc>)
 8008bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8008bdc:	095b      	lsrs	r3, r3, #5
 8008bde:	2164      	movs	r1, #100	; 0x64
 8008be0:	fb01 f303 	mul.w	r3, r1, r3
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	3332      	adds	r3, #50	; 0x32
 8008bea:	4a8d      	ldr	r2, [pc, #564]	; (8008e20 <UART_SetConfig+0x3dc>)
 8008bec:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf0:	095b      	lsrs	r3, r3, #5
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bf8:	441e      	add	r6, r3
 8008bfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f04f 0100 	mov.w	r1, #0
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	1894      	adds	r4, r2, r2
 8008c0a:	66bc      	str	r4, [r7, #104]	; 0x68
 8008c0c:	415b      	adcs	r3, r3
 8008c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c10:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008c14:	1812      	adds	r2, r2, r0
 8008c16:	eb41 0303 	adc.w	r3, r1, r3
 8008c1a:	f04f 0400 	mov.w	r4, #0
 8008c1e:	f04f 0500 	mov.w	r5, #0
 8008c22:	00dd      	lsls	r5, r3, #3
 8008c24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c28:	00d4      	lsls	r4, r2, #3
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	1814      	adds	r4, r2, r0
 8008c30:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008c34:	414b      	adcs	r3, r1
 8008c36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	461a      	mov	r2, r3
 8008c42:	f04f 0300 	mov.w	r3, #0
 8008c46:	1891      	adds	r1, r2, r2
 8008c48:	6639      	str	r1, [r7, #96]	; 0x60
 8008c4a:	415b      	adcs	r3, r3
 8008c4c:	667b      	str	r3, [r7, #100]	; 0x64
 8008c4e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008c52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c56:	f7f7 ff61 	bl	8000b1c <__aeabi_uldivmod>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4b70      	ldr	r3, [pc, #448]	; (8008e20 <UART_SetConfig+0x3dc>)
 8008c60:	fba3 1302 	umull	r1, r3, r3, r2
 8008c64:	095b      	lsrs	r3, r3, #5
 8008c66:	2164      	movs	r1, #100	; 0x64
 8008c68:	fb01 f303 	mul.w	r3, r1, r3
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	3332      	adds	r3, #50	; 0x32
 8008c72:	4a6b      	ldr	r2, [pc, #428]	; (8008e20 <UART_SetConfig+0x3dc>)
 8008c74:	fba2 2303 	umull	r2, r3, r2, r3
 8008c78:	095b      	lsrs	r3, r3, #5
 8008c7a:	f003 0207 	and.w	r2, r3, #7
 8008c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4432      	add	r2, r6
 8008c86:	609a      	str	r2, [r3, #8]
 8008c88:	e26d      	b.n	8009166 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c8a:	f7fe fbc5 	bl	8007418 <HAL_RCC_GetPCLK1Freq>
 8008c8e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c96:	461c      	mov	r4, r3
 8008c98:	f04f 0500 	mov.w	r5, #0
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	462b      	mov	r3, r5
 8008ca0:	1891      	adds	r1, r2, r2
 8008ca2:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ca4:	415b      	adcs	r3, r3
 8008ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ca8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008cac:	1912      	adds	r2, r2, r4
 8008cae:	eb45 0303 	adc.w	r3, r5, r3
 8008cb2:	f04f 0000 	mov.w	r0, #0
 8008cb6:	f04f 0100 	mov.w	r1, #0
 8008cba:	00d9      	lsls	r1, r3, #3
 8008cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cc0:	00d0      	lsls	r0, r2, #3
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	1911      	adds	r1, r2, r4
 8008cc8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008ccc:	416b      	adcs	r3, r5
 8008cce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f04f 0300 	mov.w	r3, #0
 8008cde:	1891      	adds	r1, r2, r2
 8008ce0:	6539      	str	r1, [r7, #80]	; 0x50
 8008ce2:	415b      	adcs	r3, r3
 8008ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ce6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cea:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008cee:	f7f7 ff15 	bl	8000b1c <__aeabi_uldivmod>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4b4a      	ldr	r3, [pc, #296]	; (8008e20 <UART_SetConfig+0x3dc>)
 8008cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8008cfc:	095b      	lsrs	r3, r3, #5
 8008cfe:	011e      	lsls	r6, r3, #4
 8008d00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d04:	461c      	mov	r4, r3
 8008d06:	f04f 0500 	mov.w	r5, #0
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	1891      	adds	r1, r2, r2
 8008d10:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d12:	415b      	adcs	r3, r3
 8008d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d1a:	1912      	adds	r2, r2, r4
 8008d1c:	eb45 0303 	adc.w	r3, r5, r3
 8008d20:	f04f 0000 	mov.w	r0, #0
 8008d24:	f04f 0100 	mov.w	r1, #0
 8008d28:	00d9      	lsls	r1, r3, #3
 8008d2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d2e:	00d0      	lsls	r0, r2, #3
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	1911      	adds	r1, r2, r4
 8008d36:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008d3a:	416b      	adcs	r3, r5
 8008d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	461a      	mov	r2, r3
 8008d48:	f04f 0300 	mov.w	r3, #0
 8008d4c:	1891      	adds	r1, r2, r2
 8008d4e:	6439      	str	r1, [r7, #64]	; 0x40
 8008d50:	415b      	adcs	r3, r3
 8008d52:	647b      	str	r3, [r7, #68]	; 0x44
 8008d54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d58:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008d5c:	f7f7 fede 	bl	8000b1c <__aeabi_uldivmod>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4b2e      	ldr	r3, [pc, #184]	; (8008e20 <UART_SetConfig+0x3dc>)
 8008d66:	fba3 1302 	umull	r1, r3, r3, r2
 8008d6a:	095b      	lsrs	r3, r3, #5
 8008d6c:	2164      	movs	r1, #100	; 0x64
 8008d6e:	fb01 f303 	mul.w	r3, r1, r3
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	3332      	adds	r3, #50	; 0x32
 8008d78:	4a29      	ldr	r2, [pc, #164]	; (8008e20 <UART_SetConfig+0x3dc>)
 8008d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d7e:	095b      	lsrs	r3, r3, #5
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d86:	441e      	add	r6, r3
 8008d88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f04f 0100 	mov.w	r1, #0
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	1894      	adds	r4, r2, r2
 8008d98:	63bc      	str	r4, [r7, #56]	; 0x38
 8008d9a:	415b      	adcs	r3, r3
 8008d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d9e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008da2:	1812      	adds	r2, r2, r0
 8008da4:	eb41 0303 	adc.w	r3, r1, r3
 8008da8:	f04f 0400 	mov.w	r4, #0
 8008dac:	f04f 0500 	mov.w	r5, #0
 8008db0:	00dd      	lsls	r5, r3, #3
 8008db2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008db6:	00d4      	lsls	r4, r2, #3
 8008db8:	4622      	mov	r2, r4
 8008dba:	462b      	mov	r3, r5
 8008dbc:	1814      	adds	r4, r2, r0
 8008dbe:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008dc2:	414b      	adcs	r3, r1
 8008dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	1891      	adds	r1, r2, r2
 8008dd6:	6339      	str	r1, [r7, #48]	; 0x30
 8008dd8:	415b      	adcs	r3, r3
 8008dda:	637b      	str	r3, [r7, #52]	; 0x34
 8008ddc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008de0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008de4:	f7f7 fe9a 	bl	8000b1c <__aeabi_uldivmod>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <UART_SetConfig+0x3dc>)
 8008dee:	fba3 1302 	umull	r1, r3, r3, r2
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	2164      	movs	r1, #100	; 0x64
 8008df6:	fb01 f303 	mul.w	r3, r1, r3
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	3332      	adds	r3, #50	; 0x32
 8008e00:	4a07      	ldr	r2, [pc, #28]	; (8008e20 <UART_SetConfig+0x3dc>)
 8008e02:	fba2 2303 	umull	r2, r3, r2, r3
 8008e06:	095b      	lsrs	r3, r3, #5
 8008e08:	f003 0207 	and.w	r2, r3, #7
 8008e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4432      	add	r2, r6
 8008e14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008e16:	e1a6      	b.n	8009166 <UART_SetConfig+0x722>
 8008e18:	40011000 	.word	0x40011000
 8008e1c:	40011400 	.word	0x40011400
 8008e20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4bd1      	ldr	r3, [pc, #836]	; (8009170 <UART_SetConfig+0x72c>)
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d006      	beq.n	8008e3e <UART_SetConfig+0x3fa>
 8008e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	4bcf      	ldr	r3, [pc, #828]	; (8009174 <UART_SetConfig+0x730>)
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	f040 80ca 	bne.w	8008fd2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e3e:	f7fe faff 	bl	8007440 <HAL_RCC_GetPCLK2Freq>
 8008e42:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e4a:	461c      	mov	r4, r3
 8008e4c:	f04f 0500 	mov.w	r5, #0
 8008e50:	4622      	mov	r2, r4
 8008e52:	462b      	mov	r3, r5
 8008e54:	1891      	adds	r1, r2, r2
 8008e56:	62b9      	str	r1, [r7, #40]	; 0x28
 8008e58:	415b      	adcs	r3, r3
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e60:	1912      	adds	r2, r2, r4
 8008e62:	eb45 0303 	adc.w	r3, r5, r3
 8008e66:	f04f 0000 	mov.w	r0, #0
 8008e6a:	f04f 0100 	mov.w	r1, #0
 8008e6e:	00d9      	lsls	r1, r3, #3
 8008e70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e74:	00d0      	lsls	r0, r2, #3
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	eb12 0a04 	adds.w	sl, r2, r4
 8008e7e:	eb43 0b05 	adc.w	fp, r3, r5
 8008e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f04f 0100 	mov.w	r1, #0
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	f04f 0300 	mov.w	r3, #0
 8008e96:	008b      	lsls	r3, r1, #2
 8008e98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e9c:	0082      	lsls	r2, r0, #2
 8008e9e:	4650      	mov	r0, sl
 8008ea0:	4659      	mov	r1, fp
 8008ea2:	f7f7 fe3b 	bl	8000b1c <__aeabi_uldivmod>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4bb3      	ldr	r3, [pc, #716]	; (8009178 <UART_SetConfig+0x734>)
 8008eac:	fba3 2302 	umull	r2, r3, r3, r2
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	011e      	lsls	r6, r3, #4
 8008eb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f04f 0100 	mov.w	r1, #0
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	1894      	adds	r4, r2, r2
 8008ec4:	623c      	str	r4, [r7, #32]
 8008ec6:	415b      	adcs	r3, r3
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ece:	1812      	adds	r2, r2, r0
 8008ed0:	eb41 0303 	adc.w	r3, r1, r3
 8008ed4:	f04f 0400 	mov.w	r4, #0
 8008ed8:	f04f 0500 	mov.w	r5, #0
 8008edc:	00dd      	lsls	r5, r3, #3
 8008ede:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ee2:	00d4      	lsls	r4, r2, #3
 8008ee4:	4622      	mov	r2, r4
 8008ee6:	462b      	mov	r3, r5
 8008ee8:	1814      	adds	r4, r2, r0
 8008eea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008eee:	414b      	adcs	r3, r1
 8008ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f04f 0100 	mov.w	r1, #0
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	008b      	lsls	r3, r1, #2
 8008f0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f0e:	0082      	lsls	r2, r0, #2
 8008f10:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008f14:	f7f7 fe02 	bl	8000b1c <__aeabi_uldivmod>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4b96      	ldr	r3, [pc, #600]	; (8009178 <UART_SetConfig+0x734>)
 8008f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8008f22:	095b      	lsrs	r3, r3, #5
 8008f24:	2164      	movs	r1, #100	; 0x64
 8008f26:	fb01 f303 	mul.w	r3, r1, r3
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	011b      	lsls	r3, r3, #4
 8008f2e:	3332      	adds	r3, #50	; 0x32
 8008f30:	4a91      	ldr	r2, [pc, #580]	; (8009178 <UART_SetConfig+0x734>)
 8008f32:	fba2 2303 	umull	r2, r3, r2, r3
 8008f36:	095b      	lsrs	r3, r3, #5
 8008f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f3c:	441e      	add	r6, r3
 8008f3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f42:	4618      	mov	r0, r3
 8008f44:	f04f 0100 	mov.w	r1, #0
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	1894      	adds	r4, r2, r2
 8008f4e:	61bc      	str	r4, [r7, #24]
 8008f50:	415b      	adcs	r3, r3
 8008f52:	61fb      	str	r3, [r7, #28]
 8008f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f58:	1812      	adds	r2, r2, r0
 8008f5a:	eb41 0303 	adc.w	r3, r1, r3
 8008f5e:	f04f 0400 	mov.w	r4, #0
 8008f62:	f04f 0500 	mov.w	r5, #0
 8008f66:	00dd      	lsls	r5, r3, #3
 8008f68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f6c:	00d4      	lsls	r4, r2, #3
 8008f6e:	4622      	mov	r2, r4
 8008f70:	462b      	mov	r3, r5
 8008f72:	1814      	adds	r4, r2, r0
 8008f74:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008f78:	414b      	adcs	r3, r1
 8008f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f04f 0100 	mov.w	r1, #0
 8008f8a:	f04f 0200 	mov.w	r2, #0
 8008f8e:	f04f 0300 	mov.w	r3, #0
 8008f92:	008b      	lsls	r3, r1, #2
 8008f94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f98:	0082      	lsls	r2, r0, #2
 8008f9a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008f9e:	f7f7 fdbd 	bl	8000b1c <__aeabi_uldivmod>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4b74      	ldr	r3, [pc, #464]	; (8009178 <UART_SetConfig+0x734>)
 8008fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fac:	095b      	lsrs	r3, r3, #5
 8008fae:	2164      	movs	r1, #100	; 0x64
 8008fb0:	fb01 f303 	mul.w	r3, r1, r3
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	011b      	lsls	r3, r3, #4
 8008fb8:	3332      	adds	r3, #50	; 0x32
 8008fba:	4a6f      	ldr	r2, [pc, #444]	; (8009178 <UART_SetConfig+0x734>)
 8008fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc0:	095b      	lsrs	r3, r3, #5
 8008fc2:	f003 020f 	and.w	r2, r3, #15
 8008fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4432      	add	r2, r6
 8008fce:	609a      	str	r2, [r3, #8]
 8008fd0:	e0c9      	b.n	8009166 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fd2:	f7fe fa21 	bl	8007418 <HAL_RCC_GetPCLK1Freq>
 8008fd6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fde:	461c      	mov	r4, r3
 8008fe0:	f04f 0500 	mov.w	r5, #0
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	1891      	adds	r1, r2, r2
 8008fea:	6139      	str	r1, [r7, #16]
 8008fec:	415b      	adcs	r3, r3
 8008fee:	617b      	str	r3, [r7, #20]
 8008ff0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ff4:	1912      	adds	r2, r2, r4
 8008ff6:	eb45 0303 	adc.w	r3, r5, r3
 8008ffa:	f04f 0000 	mov.w	r0, #0
 8008ffe:	f04f 0100 	mov.w	r1, #0
 8009002:	00d9      	lsls	r1, r3, #3
 8009004:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009008:	00d0      	lsls	r0, r2, #3
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	eb12 0804 	adds.w	r8, r2, r4
 8009012:	eb43 0905 	adc.w	r9, r3, r5
 8009016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4618      	mov	r0, r3
 800901e:	f04f 0100 	mov.w	r1, #0
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	f04f 0300 	mov.w	r3, #0
 800902a:	008b      	lsls	r3, r1, #2
 800902c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009030:	0082      	lsls	r2, r0, #2
 8009032:	4640      	mov	r0, r8
 8009034:	4649      	mov	r1, r9
 8009036:	f7f7 fd71 	bl	8000b1c <__aeabi_uldivmod>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4b4e      	ldr	r3, [pc, #312]	; (8009178 <UART_SetConfig+0x734>)
 8009040:	fba3 2302 	umull	r2, r3, r3, r2
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	011e      	lsls	r6, r3, #4
 8009048:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800904c:	4618      	mov	r0, r3
 800904e:	f04f 0100 	mov.w	r1, #0
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	1894      	adds	r4, r2, r2
 8009058:	60bc      	str	r4, [r7, #8]
 800905a:	415b      	adcs	r3, r3
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009062:	1812      	adds	r2, r2, r0
 8009064:	eb41 0303 	adc.w	r3, r1, r3
 8009068:	f04f 0400 	mov.w	r4, #0
 800906c:	f04f 0500 	mov.w	r5, #0
 8009070:	00dd      	lsls	r5, r3, #3
 8009072:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009076:	00d4      	lsls	r4, r2, #3
 8009078:	4622      	mov	r2, r4
 800907a:	462b      	mov	r3, r5
 800907c:	1814      	adds	r4, r2, r0
 800907e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009082:	414b      	adcs	r3, r1
 8009084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	4618      	mov	r0, r3
 8009090:	f04f 0100 	mov.w	r1, #0
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	f04f 0300 	mov.w	r3, #0
 800909c:	008b      	lsls	r3, r1, #2
 800909e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80090a2:	0082      	lsls	r2, r0, #2
 80090a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090a8:	f7f7 fd38 	bl	8000b1c <__aeabi_uldivmod>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4b31      	ldr	r3, [pc, #196]	; (8009178 <UART_SetConfig+0x734>)
 80090b2:	fba3 1302 	umull	r1, r3, r3, r2
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	2164      	movs	r1, #100	; 0x64
 80090ba:	fb01 f303 	mul.w	r3, r1, r3
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	011b      	lsls	r3, r3, #4
 80090c2:	3332      	adds	r3, #50	; 0x32
 80090c4:	4a2c      	ldr	r2, [pc, #176]	; (8009178 <UART_SetConfig+0x734>)
 80090c6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090d0:	441e      	add	r6, r3
 80090d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090d6:	4618      	mov	r0, r3
 80090d8:	f04f 0100 	mov.w	r1, #0
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	1894      	adds	r4, r2, r2
 80090e2:	603c      	str	r4, [r7, #0]
 80090e4:	415b      	adcs	r3, r3
 80090e6:	607b      	str	r3, [r7, #4]
 80090e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ec:	1812      	adds	r2, r2, r0
 80090ee:	eb41 0303 	adc.w	r3, r1, r3
 80090f2:	f04f 0400 	mov.w	r4, #0
 80090f6:	f04f 0500 	mov.w	r5, #0
 80090fa:	00dd      	lsls	r5, r3, #3
 80090fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009100:	00d4      	lsls	r4, r2, #3
 8009102:	4622      	mov	r2, r4
 8009104:	462b      	mov	r3, r5
 8009106:	1814      	adds	r4, r2, r0
 8009108:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800910c:	414b      	adcs	r3, r1
 800910e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4618      	mov	r0, r3
 800911a:	f04f 0100 	mov.w	r1, #0
 800911e:	f04f 0200 	mov.w	r2, #0
 8009122:	f04f 0300 	mov.w	r3, #0
 8009126:	008b      	lsls	r3, r1, #2
 8009128:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800912c:	0082      	lsls	r2, r0, #2
 800912e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009132:	f7f7 fcf3 	bl	8000b1c <__aeabi_uldivmod>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <UART_SetConfig+0x734>)
 800913c:	fba3 1302 	umull	r1, r3, r3, r2
 8009140:	095b      	lsrs	r3, r3, #5
 8009142:	2164      	movs	r1, #100	; 0x64
 8009144:	fb01 f303 	mul.w	r3, r1, r3
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	011b      	lsls	r3, r3, #4
 800914c:	3332      	adds	r3, #50	; 0x32
 800914e:	4a0a      	ldr	r2, [pc, #40]	; (8009178 <UART_SetConfig+0x734>)
 8009150:	fba2 2303 	umull	r2, r3, r2, r3
 8009154:	095b      	lsrs	r3, r3, #5
 8009156:	f003 020f 	and.w	r2, r3, #15
 800915a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4432      	add	r2, r6
 8009162:	609a      	str	r2, [r3, #8]
}
 8009164:	e7ff      	b.n	8009166 <UART_SetConfig+0x722>
 8009166:	bf00      	nop
 8009168:	37f4      	adds	r7, #244	; 0xf4
 800916a:	46bd      	mov	sp, r7
 800916c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009170:	40011000 	.word	0x40011000
 8009174:	40011400 	.word	0x40011400
 8009178:	51eb851f 	.word	0x51eb851f

0800917c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800918a:	2300      	movs	r3, #0
 800918c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d029      	beq.n	80091ea <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80091a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091a6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80091b0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80091b6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80091bc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80091c2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80091c8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80091ce:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80091d4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80091da:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	e034      	b.n	8009254 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091f6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009200:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009206:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4313      	orrs	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800921a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800921e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009228:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800922e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009234:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800923a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009240:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	4313      	orrs	r3, r2
 8009246:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009262:	b480      	push	{r7}
 8009264:	b087      	sub	sp, #28
 8009266:	af00      	add	r7, sp, #0
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009272:	2300      	movs	r3, #0
 8009274:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d02e      	beq.n	80092da <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009288:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	3b01      	subs	r3, #1
 8009296:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009298:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	3b01      	subs	r3, #1
 80092a0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80092a2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	3b01      	subs	r3, #1
 80092aa:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80092ac:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80092b6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	3b01      	subs	r3, #1
 80092be:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80092c0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80092ca:	4313      	orrs	r3, r2
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	609a      	str	r2, [r3, #8]
 80092d8:	e03b      	b.n	8009352 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092ea:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	3b01      	subs	r3, #1
 80092f2:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80092fc:	4313      	orrs	r3, r2
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	4313      	orrs	r3, r2
 8009302:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009310:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	3b01      	subs	r3, #1
 800931e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009320:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	3b01      	subs	r3, #1
 8009328:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800932a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	3b01      	subs	r3, #1
 8009332:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009334:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	3b01      	subs	r3, #1
 800933c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800933e:	4313      	orrs	r3, r2
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	4313      	orrs	r3, r2
 8009344:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	371c      	adds	r7, #28
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009360:	b084      	sub	sp, #16
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	f107 001c 	add.w	r0, r7, #28
 800936e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	2b01      	cmp	r3, #1
 8009376:	d122      	bne.n	80093be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800938c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80093a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d105      	bne.n	80093b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f94a 	bl	800964c <USB_CoreReset>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73fb      	strb	r3, [r7, #15]
 80093bc:	e01a      	b.n	80093f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f93e 	bl	800964c <USB_CoreReset>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80093d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	639a      	str	r2, [r3, #56]	; 0x38
 80093e6:	e005      	b.n	80093f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d10b      	bne.n	8009412 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f043 0206 	orr.w	r2, r3, #6
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f043 0220 	orr.w	r2, r3, #32
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009412:	7bfb      	ldrb	r3, [r7, #15]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800941e:	b004      	add	sp, #16
 8009420:	4770      	bx	lr

08009422 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f043 0201 	orr.w	r2, r3, #1
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f023 0201 	bic.w	r2, r3, #1
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d106      	bne.n	8009492 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	60da      	str	r2, [r3, #12]
 8009490:	e00b      	b.n	80094aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009492:	78fb      	ldrb	r3, [r7, #3]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	60da      	str	r2, [r3, #12]
 80094a4:	e001      	b.n	80094aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e003      	b.n	80094b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80094aa:	2032      	movs	r0, #50	; 0x32
 80094ac:	f7fa f884 	bl	80035b8 <HAL_Delay>

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	019b      	lsls	r3, r3, #6
 80094ce:	f043 0220 	orr.w	r2, r3, #32
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3301      	adds	r3, #1
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4a09      	ldr	r2, [pc, #36]	; (8009504 <USB_FlushTxFifo+0x48>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d901      	bls.n	80094e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e006      	b.n	80094f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f003 0320 	and.w	r3, r3, #32
 80094f0:	2b20      	cmp	r3, #32
 80094f2:	d0f0      	beq.n	80094d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	00030d40 	.word	0x00030d40

08009508 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2210      	movs	r2, #16
 8009518:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3301      	adds	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a09      	ldr	r2, [pc, #36]	; (8009548 <USB_FlushRxFifo+0x40>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d901      	bls.n	800952c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e006      	b.n	800953a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	f003 0310 	and.w	r3, r3, #16
 8009534:	2b10      	cmp	r3, #16
 8009536:	d0f0      	beq.n	800951a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	00030d40 	.word	0x00030d40

0800954c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800954c:	b480      	push	{r7}
 800954e:	b089      	sub	sp, #36	; 0x24
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	4611      	mov	r1, r2
 8009558:	461a      	mov	r2, r3
 800955a:	460b      	mov	r3, r1
 800955c:	71fb      	strb	r3, [r7, #7]
 800955e:	4613      	mov	r3, r2
 8009560:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800956a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800956e:	2b00      	cmp	r3, #0
 8009570:	d11a      	bne.n	80095a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009572:	88bb      	ldrh	r3, [r7, #4]
 8009574:	3303      	adds	r3, #3
 8009576:	089b      	lsrs	r3, r3, #2
 8009578:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800957a:	2300      	movs	r3, #0
 800957c:	61bb      	str	r3, [r7, #24]
 800957e:	e00f      	b.n	80095a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009580:	79fb      	ldrb	r3, [r7, #7]
 8009582:	031a      	lsls	r2, r3, #12
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	4413      	add	r3, r2
 8009588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800958c:	461a      	mov	r2, r3
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	3304      	adds	r3, #4
 8009598:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	3301      	adds	r3, #1
 800959e:	61bb      	str	r3, [r7, #24]
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d3eb      	bcc.n	8009580 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3724      	adds	r7, #36	; 0x24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b089      	sub	sp, #36	; 0x24
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	4613      	mov	r3, r2
 80095c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80095cc:	88fb      	ldrh	r3, [r7, #6]
 80095ce:	3303      	adds	r3, #3
 80095d0:	089b      	lsrs	r3, r3, #2
 80095d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80095d4:	2300      	movs	r3, #0
 80095d6:	61bb      	str	r3, [r7, #24]
 80095d8:	e00b      	b.n	80095f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	3304      	adds	r3, #4
 80095ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	3301      	adds	r3, #1
 80095f0:	61bb      	str	r3, [r7, #24]
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d3ef      	bcc.n	80095da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80095fa:	69fb      	ldr	r3, [r7, #28]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3724      	adds	r7, #36	; 0x24
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	4013      	ands	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009620:	68fb      	ldr	r3, [r7, #12]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	f003 0301 	and.w	r3, r3, #1
}
 800963e:	4618      	mov	r0, r3
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
	...

0800964c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3301      	adds	r3, #1
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4a13      	ldr	r2, [pc, #76]	; (80096b0 <USB_CoreReset+0x64>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d901      	bls.n	800966a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e01b      	b.n	80096a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	daf2      	bge.n	8009658 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	f043 0201 	orr.w	r2, r3, #1
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3301      	adds	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4a09      	ldr	r2, [pc, #36]	; (80096b0 <USB_CoreReset+0x64>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d901      	bls.n	8009694 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e006      	b.n	80096a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b01      	cmp	r3, #1
 800969e:	d0f0      	beq.n	8009682 <USB_CoreReset+0x36>

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	00030d40 	.word	0x00030d40

080096b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096b4:	b084      	sub	sp, #16
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	f107 001c 	add.w	r0, r7, #28
 80096c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096d0:	461a      	mov	r2, r3
 80096d2:	2300      	movs	r3, #0
 80096d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009702:	2b00      	cmp	r3, #0
 8009704:	d018      	beq.n	8009738 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	2b01      	cmp	r3, #1
 800970a:	d10a      	bne.n	8009722 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800971a:	f043 0304 	orr.w	r3, r3, #4
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	e014      	b.n	800974c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009730:	f023 0304 	bic.w	r3, r3, #4
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	e009      	b.n	800974c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009746:	f023 0304 	bic.w	r3, r3, #4
 800974a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800974c:	2110      	movs	r1, #16
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff feb4 	bl	80094bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7ff fed7 	bl	8009508 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800975a:	2300      	movs	r3, #0
 800975c:	60fb      	str	r3, [r7, #12]
 800975e:	e015      	b.n	800978c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	4413      	add	r3, r2
 8009768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800976c:	461a      	mov	r2, r3
 800976e:	f04f 33ff 	mov.w	r3, #4294967295
 8009772:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4413      	add	r3, r2
 800977c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009780:	461a      	mov	r2, r3
 8009782:	2300      	movs	r3, #0
 8009784:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3301      	adds	r3, #1
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	429a      	cmp	r2, r3
 8009792:	d3e5      	bcc.n	8009760 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009794:	2101      	movs	r1, #1
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f8ac 	bl	80098f4 <USB_DriveVbus>

  HAL_Delay(200U);
 800979c:	20c8      	movs	r0, #200	; 0xc8
 800979e:	f7f9 ff0b 	bl	80035b8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295
 80097ae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00b      	beq.n	80097d4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a14      	ldr	r2, [pc, #80]	; (8009818 <USB_HostInit+0x164>)
 80097c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a13      	ldr	r2, [pc, #76]	; (800981c <USB_HostInit+0x168>)
 80097ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80097d2:	e009      	b.n	80097e8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2280      	movs	r2, #128	; 0x80
 80097d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a10      	ldr	r2, [pc, #64]	; (8009820 <USB_HostInit+0x16c>)
 80097de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a10      	ldr	r2, [pc, #64]	; (8009824 <USB_HostInit+0x170>)
 80097e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d105      	bne.n	80097fa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	f043 0210 	orr.w	r2, r3, #16
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	699a      	ldr	r2, [r3, #24]
 80097fe:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <USB_HostInit+0x174>)
 8009800:	4313      	orrs	r3, r2
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009812:	b004      	add	sp, #16
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	01000200 	.word	0x01000200
 800981c:	00e00300 	.word	0x00e00300
 8009820:	00600080 	.word	0x00600080
 8009824:	004000e0 	.word	0x004000e0
 8009828:	a3200008 	.word	0xa3200008

0800982c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800984a:	f023 0303 	bic.w	r3, r3, #3
 800984e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	f003 0303 	and.w	r3, r3, #3
 800985e:	68f9      	ldr	r1, [r7, #12]
 8009860:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009864:	4313      	orrs	r3, r2
 8009866:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d107      	bne.n	800987e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009874:	461a      	mov	r2, r3
 8009876:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800987a:	6053      	str	r3, [r2, #4]
 800987c:	e009      	b.n	8009892 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800987e:	78fb      	ldrb	r3, [r7, #3]
 8009880:	2b02      	cmp	r3, #2
 8009882:	d106      	bne.n	8009892 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800988a:	461a      	mov	r2, r3
 800988c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009890:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80098c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80098ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80098d0:	2064      	movs	r0, #100	; 0x64
 80098d2:	f7f9 fe71 	bl	80035b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80098de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80098e4:	200a      	movs	r0, #10
 80098e6:	f7f9 fe67 	bl	80035b8 <HAL_Delay>

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009918:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d109      	bne.n	8009938 <USB_DriveVbus+0x44>
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d106      	bne.n	8009938 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009932:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009936:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800993e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009942:	d109      	bne.n	8009958 <USB_DriveVbus+0x64>
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d106      	bne.n	8009958 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009956:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009966:	b480      	push	{r7}
 8009968:	b085      	sub	sp, #20
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009972:	2300      	movs	r3, #0
 8009974:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	0c5b      	lsrs	r3, r3, #17
 8009984:	f003 0303 	and.w	r3, r3, #3
}
 8009988:	4618      	mov	r0, r3
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	b29b      	uxth	r3, r3
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
	...

080099b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	4608      	mov	r0, r1
 80099c2:	4611      	mov	r1, r2
 80099c4:	461a      	mov	r2, r3
 80099c6:	4603      	mov	r3, r0
 80099c8:	70fb      	strb	r3, [r7, #3]
 80099ca:	460b      	mov	r3, r1
 80099cc:	70bb      	strb	r3, [r7, #2]
 80099ce:	4613      	mov	r3, r2
 80099d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099e6:	461a      	mov	r2, r3
 80099e8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80099ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d87e      	bhi.n	8009af4 <USB_HC_Init+0x13c>
 80099f6:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <USB_HC_Init+0x44>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009ab7 	.word	0x08009ab7
 8009a04:	08009a0d 	.word	0x08009a0d
 8009a08:	08009a79 	.word	0x08009a79
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a18:	461a      	mov	r2, r3
 8009a1a:	f240 439d 	movw	r3, #1181	; 0x49d
 8009a1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009a20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	da10      	bge.n	8009a4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a28:	78fb      	ldrb	r3, [r7, #3]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	78fa      	ldrb	r2, [r7, #3]
 8009a38:	0151      	lsls	r1, r2, #5
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	440a      	add	r2, r1
 8009a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a46:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009a48:	e057      	b.n	8009afa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d051      	beq.n	8009afa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009a56:	78fb      	ldrb	r3, [r7, #3]
 8009a58:	015a      	lsls	r2, r3, #5
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	0151      	lsls	r1, r2, #5
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	440a      	add	r2, r1
 8009a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009a74:	60d3      	str	r3, [r2, #12]
      break;
 8009a76:	e040      	b.n	8009afa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a84:	461a      	mov	r2, r3
 8009a86:	f240 639d 	movw	r3, #1693	; 0x69d
 8009a8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009a8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da34      	bge.n	8009afe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	78fa      	ldrb	r2, [r7, #3]
 8009aa4:	0151      	lsls	r1, r2, #5
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	440a      	add	r2, r1
 8009aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ab2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009ab4:	e023      	b.n	8009afe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f240 2325 	movw	r3, #549	; 0x225
 8009ac8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009aca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	da17      	bge.n	8009b02 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009ad2:	78fb      	ldrb	r3, [r7, #3]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	78fa      	ldrb	r2, [r7, #3]
 8009ae2:	0151      	lsls	r1, r2, #5
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	440a      	add	r2, r1
 8009ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009af0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009af2:	e006      	b.n	8009b02 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	75fb      	strb	r3, [r7, #23]
      break;
 8009af8:	e004      	b.n	8009b04 <USB_HC_Init+0x14c>
      break;
 8009afa:	bf00      	nop
 8009afc:	e002      	b.n	8009b04 <USB_HC_Init+0x14c>
      break;
 8009afe:	bf00      	nop
 8009b00:	e000      	b.n	8009b04 <USB_HC_Init+0x14c>
      break;
 8009b02:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b0a:	699a      	ldr	r2, [r3, #24]
 8009b0c:	78fb      	ldrb	r3, [r7, #3]
 8009b0e:	f003 030f 	and.w	r3, r3, #15
 8009b12:	2101      	movs	r1, #1
 8009b14:	fa01 f303 	lsl.w	r3, r1, r3
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009b2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	da03      	bge.n	8009b3e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	e001      	b.n	8009b42 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d103      	bne.n	8009b52 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	e001      	b.n	8009b56 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b56:	787b      	ldrb	r3, [r7, #1]
 8009b58:	059b      	lsls	r3, r3, #22
 8009b5a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009b5e:	78bb      	ldrb	r3, [r7, #2]
 8009b60:	02db      	lsls	r3, r3, #11
 8009b62:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b66:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009b68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b6c:	049b      	lsls	r3, r3, #18
 8009b6e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009b72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009b74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009b7a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	0159      	lsls	r1, r3, #5
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	440b      	add	r3, r1
 8009b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b8c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009b92:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009b94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d10f      	bne.n	8009bbc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009b9c:	78fb      	ldrb	r3, [r7, #3]
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	78fa      	ldrb	r2, [r7, #3]
 8009bac:	0151      	lsls	r1, r2, #5
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	440a      	add	r2, r1
 8009bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop

08009bcc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08c      	sub	sp, #48	; 0x30
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	785b      	ldrb	r3, [r3, #1]
 8009be2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d028      	beq.n	8009c48 <USB_HC_StartXfer+0x7c>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	791b      	ldrb	r3, [r3, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d124      	bne.n	8009c48 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8009bfe:	79fb      	ldrb	r3, [r7, #7]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10b      	bne.n	8009c1c <USB_HC_StartXfer+0x50>
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	795b      	ldrb	r3, [r3, #5]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d107      	bne.n	8009c1c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	785b      	ldrb	r3, [r3, #1]
 8009c10:	4619      	mov	r1, r3
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 fa2e 	bl	800a074 <USB_DoPing>
      return HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	e113      	b.n	8009e44 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d112      	bne.n	8009c48 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	69fa      	ldr	r2, [r7, #28]
 8009c32:	0151      	lsls	r1, r2, #5
 8009c34:	6a3a      	ldr	r2, [r7, #32]
 8009c36:	440a      	add	r2, r1
 8009c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c3c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009c40:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2200      	movs	r2, #0
 8009c46:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d018      	beq.n	8009c82 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	8912      	ldrh	r2, [r2, #8]
 8009c58:	4413      	add	r3, r2
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	8912      	ldrh	r2, [r2, #8]
 8009c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c64:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009c66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009c68:	8b7b      	ldrh	r3, [r7, #26]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d90b      	bls.n	8009c86 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8009c6e:	8b7b      	ldrh	r3, [r7, #26]
 8009c70:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009c72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	8912      	ldrh	r2, [r2, #8]
 8009c78:	fb02 f203 	mul.w	r2, r2, r3
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	611a      	str	r2, [r3, #16]
 8009c80:	e001      	b.n	8009c86 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8009c82:	2301      	movs	r3, #1
 8009c84:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	78db      	ldrb	r3, [r3, #3]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d006      	beq.n	8009c9c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009c8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	8912      	ldrh	r2, [r2, #8]
 8009c94:	fb02 f203 	mul.w	r2, r2, r3
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009ca4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ca6:	04d9      	lsls	r1, r3, #19
 8009ca8:	4b68      	ldr	r3, [pc, #416]	; (8009e4c <USB_HC_StartXfer+0x280>)
 8009caa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	7a9b      	ldrb	r3, [r3, #10]
 8009cb2:	075b      	lsls	r3, r3, #29
 8009cb4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cb8:	69f9      	ldr	r1, [r7, #28]
 8009cba:	0148      	lsls	r0, r1, #5
 8009cbc:	6a39      	ldr	r1, [r7, #32]
 8009cbe:	4401      	add	r1, r0
 8009cc0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009cc4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009cc6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009cc8:	79fb      	ldrb	r3, [r7, #7]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d009      	beq.n	8009ce2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	68d9      	ldr	r1, [r3, #12]
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cde:	460a      	mov	r2, r1
 8009ce0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	bf0c      	ite	eq
 8009cf2:	2301      	moveq	r3, #1
 8009cf4:	2300      	movne	r3, #0
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69fa      	ldr	r2, [r7, #28]
 8009d0a:	0151      	lsls	r1, r2, #5
 8009d0c:	6a3a      	ldr	r2, [r7, #32]
 8009d0e:	440a      	add	r2, r1
 8009d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	7e7b      	ldrb	r3, [r7, #25]
 8009d2a:	075b      	lsls	r3, r3, #29
 8009d2c:	69f9      	ldr	r1, [r7, #28]
 8009d2e:	0148      	lsls	r0, r1, #5
 8009d30:	6a39      	ldr	r1, [r7, #32]
 8009d32:	4401      	add	r1, r0
 8009d34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a41      	ldr	r2, [pc, #260]	; (8009e50 <USB_HC_StartXfer+0x284>)
 8009d4c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009d4e:	4b40      	ldr	r3, [pc, #256]	; (8009e50 <USB_HC_StartXfer+0x284>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d56:	4a3e      	ldr	r2, [pc, #248]	; (8009e50 <USB_HC_StartXfer+0x284>)
 8009d58:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	78db      	ldrb	r3, [r3, #3]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d006      	beq.n	8009d70 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009d62:	4b3b      	ldr	r3, [pc, #236]	; (8009e50 <USB_HC_StartXfer+0x284>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d6a:	4a39      	ldr	r2, [pc, #228]	; (8009e50 <USB_HC_StartXfer+0x284>)
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	e005      	b.n	8009d7c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009d70:	4b37      	ldr	r3, [pc, #220]	; (8009e50 <USB_HC_StartXfer+0x284>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d78:	4a35      	ldr	r2, [pc, #212]	; (8009e50 <USB_HC_StartXfer+0x284>)
 8009d7a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009d7c:	4b34      	ldr	r3, [pc, #208]	; (8009e50 <USB_HC_StartXfer+0x284>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d84:	4a32      	ldr	r2, [pc, #200]	; (8009e50 <USB_HC_StartXfer+0x284>)
 8009d86:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d94:	461a      	mov	r2, r3
 8009d96:	4b2e      	ldr	r3, [pc, #184]	; (8009e50 <USB_HC_StartXfer+0x284>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	e04e      	b.n	8009e44 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	78db      	ldrb	r3, [r3, #3]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d149      	bne.n	8009e42 <USB_HC_StartXfer+0x276>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d045      	beq.n	8009e42 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	79db      	ldrb	r3, [r3, #7]
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d830      	bhi.n	8009e20 <USB_HC_StartXfer+0x254>
 8009dbe:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <USB_HC_StartXfer+0x1f8>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009dd5 	.word	0x08009dd5
 8009dc8:	08009df9 	.word	0x08009df9
 8009dcc:	08009dd5 	.word	0x08009dd5
 8009dd0:	08009df9 	.word	0x08009df9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	3303      	adds	r3, #3
 8009dda:	089b      	lsrs	r3, r3, #2
 8009ddc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009dde:	8afa      	ldrh	r2, [r7, #22]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d91c      	bls.n	8009e24 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	f043 0220 	orr.w	r2, r3, #32
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	619a      	str	r2, [r3, #24]
        }
        break;
 8009df6:	e015      	b.n	8009e24 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	3303      	adds	r3, #3
 8009dfe:	089b      	lsrs	r3, r3, #2
 8009e00:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009e02:	8afa      	ldrh	r2, [r7, #22]
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d90a      	bls.n	8009e28 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e1e:	e003      	b.n	8009e28 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009e20:	bf00      	nop
 8009e22:	e002      	b.n	8009e2a <USB_HC_StartXfer+0x25e>
        break;
 8009e24:	bf00      	nop
 8009e26:	e000      	b.n	8009e2a <USB_HC_StartXfer+0x25e>
        break;
 8009e28:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	68d9      	ldr	r1, [r3, #12]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	785a      	ldrb	r2, [r3, #1]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	2000      	movs	r0, #0
 8009e3a:	9000      	str	r0, [sp, #0]
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7ff fb85 	bl	800954c <USB_WritePacket>
  }

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3728      	adds	r7, #40	; 0x28
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	1ff80000 	.word	0x1ff80000
 8009e50:	20000424 	.word	0x20000424

08009e54 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	b29b      	uxth	r3, r3
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b087      	sub	sp, #28
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009e86:	78fb      	ldrb	r3, [r7, #3]
 8009e88:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	0c9b      	lsrs	r3, r3, #18
 8009e9e:	f003 0303 	and.w	r3, r3, #3
 8009ea2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <USB_HC_Halt+0x3a>
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d16c      	bne.n	8009f8a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	015a      	lsls	r2, r3, #5
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	0151      	lsls	r1, r2, #5
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	440a      	add	r2, r1
 8009ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ece:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d143      	bne.n	8009f64 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	0151      	lsls	r1, r2, #5
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	440a      	add	r2, r1
 8009ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009efa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	0151      	lsls	r1, r2, #5
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	440a      	add	r2, r1
 8009f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f1a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	0151      	lsls	r1, r2, #5
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	440a      	add	r2, r1
 8009f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f3a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f48:	d81d      	bhi.n	8009f86 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f60:	d0ec      	beq.n	8009f3c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009f62:	e080      	b.n	800a066 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	0151      	lsls	r1, r2, #5
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	440a      	add	r2, r1
 8009f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f82:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009f84:	e06f      	b.n	800a066 <USB_HC_Halt+0x1f0>
          break;
 8009f86:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009f88:	e06d      	b.n	800a066 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fa8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d143      	bne.n	800a042 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	0151      	lsls	r1, r2, #5
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	440a      	add	r2, r1
 8009fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fd8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	0151      	lsls	r1, r2, #5
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	440a      	add	r2, r1
 8009ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ff8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	4413      	add	r3, r2
 800a002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	0151      	lsls	r1, r2, #5
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	440a      	add	r2, r1
 800a010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a014:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a018:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	3301      	adds	r3, #1
 800a01e:	617b      	str	r3, [r7, #20]
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a026:	d81d      	bhi.n	800a064 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a03a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a03e:	d0ec      	beq.n	800a01a <USB_HC_Halt+0x1a4>
 800a040:	e011      	b.n	800a066 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	015a      	lsls	r2, r3, #5
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	4413      	add	r3, r2
 800a04a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	0151      	lsls	r1, r2, #5
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	440a      	add	r2, r1
 800a058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a05c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a060:	6013      	str	r3, [r2, #0]
 800a062:	e000      	b.n	800a066 <USB_HC_Halt+0x1f0>
          break;
 800a064:	bf00      	nop
    }
  }

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	371c      	adds	r7, #28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a088:	2301      	movs	r3, #1
 800a08a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	04da      	lsls	r2, r3, #19
 800a090:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <USB_DoPing+0x74>)
 800a092:	4013      	ands	r3, r2
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	0151      	lsls	r1, r2, #5
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	440a      	add	r2, r1
 800a09c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	015a      	lsls	r2, r3, #5
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	1ff80000 	.word	0x1ff80000

0800a0ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7ff f9a1 	bl	8009444 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a102:	2110      	movs	r1, #16
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7ff f9d9 	bl	80094bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7ff f9fc 	bl	8009508 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a110:	2300      	movs	r3, #0
 800a112:	613b      	str	r3, [r7, #16]
 800a114:	e01f      	b.n	800a156 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	015a      	lsls	r2, r3, #5
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a12c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a134:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a13c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	4413      	add	r3, r2
 800a146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a14a:	461a      	mov	r2, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	3301      	adds	r3, #1
 800a154:	613b      	str	r3, [r7, #16]
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	2b0f      	cmp	r3, #15
 800a15a:	d9dc      	bls.n	800a116 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a15c:	2300      	movs	r3, #0
 800a15e:	613b      	str	r3, [r7, #16]
 800a160:	e034      	b.n	800a1cc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a178:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a180:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a188:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	015a      	lsls	r2, r3, #5
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4413      	add	r3, r2
 800a192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a196:	461a      	mov	r2, r3
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	617b      	str	r3, [r7, #20]
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1a8:	d80c      	bhi.n	800a1c4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1c0:	d0ec      	beq.n	800a19c <USB_StopHost+0xb0>
 800a1c2:	e000      	b.n	800a1c6 <USB_StopHost+0xda>
        break;
 800a1c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	613b      	str	r3, [r7, #16]
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	2b0f      	cmp	r3, #15
 800a1d0:	d9c7      	bls.n	800a162 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1d8:	461a      	mov	r2, r3
 800a1da:	f04f 33ff 	mov.w	r3, #4294967295
 800a1de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff f91a 	bl	8009422 <USB_EnableGlobalInt>

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a1f8:	b590      	push	{r4, r7, lr}
 800a1fa:	b089      	sub	sp, #36	; 0x24
 800a1fc:	af04      	add	r7, sp, #16
 800a1fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a200:	2301      	movs	r3, #1
 800a202:	2202      	movs	r2, #2
 800a204:	2102      	movs	r1, #2
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fcb8 	bl	800ab7c <USBH_FindInterface>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	2bff      	cmp	r3, #255	; 0xff
 800a214:	d002      	beq.n	800a21c <USBH_CDC_InterfaceInit+0x24>
 800a216:	7bfb      	ldrb	r3, [r7, #15]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d901      	bls.n	800a220 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a21c:	2302      	movs	r3, #2
 800a21e:	e13d      	b.n	800a49c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fc8d 	bl	800ab44 <USBH_SelectInterface>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a22e:	7bbb      	ldrb	r3, [r7, #14]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a234:	2302      	movs	r3, #2
 800a236:	e131      	b.n	800a49c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a23e:	2050      	movs	r0, #80	; 0x50
 800a240:	f004 ff66 	bl	800f110 <malloc>
 800a244:	4603      	mov	r3, r0
 800a246:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a258:	2302      	movs	r3, #2
 800a25a:	e11f      	b.n	800a49c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a25c:	2250      	movs	r2, #80	; 0x50
 800a25e:	2100      	movs	r1, #0
 800a260:	68b8      	ldr	r0, [r7, #8]
 800a262:	f004 ff73 	bl	800f14c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	211a      	movs	r1, #26
 800a26c:	fb01 f303 	mul.w	r3, r1, r3
 800a270:	4413      	add	r3, r2
 800a272:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	b25b      	sxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	da15      	bge.n	800a2aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	211a      	movs	r1, #26
 800a284:	fb01 f303 	mul.w	r3, r1, r3
 800a288:	4413      	add	r3, r2
 800a28a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a28e:	781a      	ldrb	r2, [r3, #0]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	211a      	movs	r1, #26
 800a29a:	fb01 f303 	mul.w	r3, r1, r3
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a2a4:	881a      	ldrh	r2, [r3, #0]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	785b      	ldrb	r3, [r3, #1]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f002 f890 	bl	800c3d6 <USBH_AllocPipe>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	7819      	ldrb	r1, [r3, #0]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	7858      	ldrb	r0, [r3, #1]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	8952      	ldrh	r2, [r2, #10]
 800a2d6:	9202      	str	r2, [sp, #8]
 800a2d8:	2203      	movs	r2, #3
 800a2da:	9201      	str	r2, [sp, #4]
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	4623      	mov	r3, r4
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f002 f848 	bl	800c378 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f004 fe55 	bl	800efa0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	210a      	movs	r1, #10
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fc3d 	bl	800ab7c <USBH_FindInterface>
 800a302:	4603      	mov	r3, r0
 800a304:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	2bff      	cmp	r3, #255	; 0xff
 800a30a:	d002      	beq.n	800a312 <USBH_CDC_InterfaceInit+0x11a>
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d901      	bls.n	800a316 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a312:	2302      	movs	r3, #2
 800a314:	e0c2      	b.n	800a49c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	211a      	movs	r1, #26
 800a31c:	fb01 f303 	mul.w	r3, r1, r3
 800a320:	4413      	add	r3, r2
 800a322:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	b25b      	sxtb	r3, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	da16      	bge.n	800a35c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	211a      	movs	r1, #26
 800a334:	fb01 f303 	mul.w	r3, r1, r3
 800a338:	4413      	add	r3, r2
 800a33a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a33e:	781a      	ldrb	r2, [r3, #0]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	211a      	movs	r1, #26
 800a34a:	fb01 f303 	mul.w	r3, r1, r3
 800a34e:	4413      	add	r3, r2
 800a350:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a354:	881a      	ldrh	r2, [r3, #0]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	835a      	strh	r2, [r3, #26]
 800a35a:	e015      	b.n	800a388 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	211a      	movs	r1, #26
 800a362:	fb01 f303 	mul.w	r3, r1, r3
 800a366:	4413      	add	r3, r2
 800a368:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a36c:	781a      	ldrb	r2, [r3, #0]
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a372:	7bfb      	ldrb	r3, [r7, #15]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	211a      	movs	r1, #26
 800a378:	fb01 f303 	mul.w	r3, r1, r3
 800a37c:	4413      	add	r3, r2
 800a37e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a382:	881a      	ldrh	r2, [r3, #0]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	211a      	movs	r1, #26
 800a38e:	fb01 f303 	mul.w	r3, r1, r3
 800a392:	4413      	add	r3, r2
 800a394:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b25b      	sxtb	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	da16      	bge.n	800a3ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	211a      	movs	r1, #26
 800a3a6:	fb01 f303 	mul.w	r3, r1, r3
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a3b0:	781a      	ldrb	r2, [r3, #0]
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	211a      	movs	r1, #26
 800a3bc:	fb01 f303 	mul.w	r3, r1, r3
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a3c6:	881a      	ldrh	r2, [r3, #0]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	835a      	strh	r2, [r3, #26]
 800a3cc:	e015      	b.n	800a3fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	211a      	movs	r1, #26
 800a3d4:	fb01 f303 	mul.w	r3, r1, r3
 800a3d8:	4413      	add	r3, r2
 800a3da:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a3de:	781a      	ldrb	r2, [r3, #0]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	211a      	movs	r1, #26
 800a3ea:	fb01 f303 	mul.w	r3, r1, r3
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a3f4:	881a      	ldrh	r2, [r3, #0]
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	7b9b      	ldrb	r3, [r3, #14]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 ffe8 	bl	800c3d6 <USBH_AllocPipe>
 800a406:	4603      	mov	r3, r0
 800a408:	461a      	mov	r2, r3
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	7bdb      	ldrb	r3, [r3, #15]
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f001 ffde 	bl	800c3d6 <USBH_AllocPipe>
 800a41a:	4603      	mov	r3, r0
 800a41c:	461a      	mov	r2, r3
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	7b59      	ldrb	r1, [r3, #13]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	7b98      	ldrb	r0, [r3, #14]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	8b12      	ldrh	r2, [r2, #24]
 800a43a:	9202      	str	r2, [sp, #8]
 800a43c:	2202      	movs	r2, #2
 800a43e:	9201      	str	r2, [sp, #4]
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	4623      	mov	r3, r4
 800a444:	4602      	mov	r2, r0
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f001 ff96 	bl	800c378 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	7b19      	ldrb	r1, [r3, #12]
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	7bd8      	ldrb	r0, [r3, #15]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	8b52      	ldrh	r2, [r2, #26]
 800a464:	9202      	str	r2, [sp, #8]
 800a466:	2202      	movs	r2, #2
 800a468:	9201      	str	r2, [sp, #4]
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	4623      	mov	r3, r4
 800a46e:	4602      	mov	r2, r0
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 ff81 	bl	800c378 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	7b5b      	ldrb	r3, [r3, #13]
 800a482:	2200      	movs	r2, #0
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f004 fd8a 	bl	800efa0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	7b1b      	ldrb	r3, [r3, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f004 fd83 	bl	800efa0 <USBH_LL_SetToggle>

  return USBH_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd90      	pop	{r4, r7, pc}

0800a4a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4b2:	69db      	ldr	r3, [r3, #28]
 800a4b4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00e      	beq.n	800a4dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f001 ff76 	bl	800c3b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 ffa1 	bl	800c418 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	7b1b      	ldrb	r3, [r3, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00e      	beq.n	800a502 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	7b1b      	ldrb	r3, [r3, #12]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f001 ff63 	bl	800c3b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	7b1b      	ldrb	r3, [r3, #12]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f001 ff8e 	bl	800c418 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	7b5b      	ldrb	r3, [r3, #13]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00e      	beq.n	800a528 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	7b5b      	ldrb	r3, [r3, #13]
 800a50e:	4619      	mov	r1, r3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f001 ff50 	bl	800c3b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	7b5b      	ldrb	r3, [r3, #13]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 ff7b 	bl	800c418 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00b      	beq.n	800a54c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f004 fdef 	bl	800f120 <free>
    phost->pActiveClass->pData = 0U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a548:	2200      	movs	r2, #0
 800a54a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	3340      	adds	r3, #64	; 0x40
 800a56c:	4619      	mov	r1, r3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f8b1 	bl	800a6d6 <GetLineCoding>
 800a574:	4603      	mov	r3, r0
 800a576:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a578:	7afb      	ldrb	r3, [r7, #11]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d105      	bne.n	800a58a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a584:	2102      	movs	r1, #2
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a58a:	7afb      	ldrb	r3, [r7, #11]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a59c:	2301      	movs	r3, #1
 800a59e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5aa:	69db      	ldr	r3, [r3, #28]
 800a5ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	d877      	bhi.n	800a6a8 <USBH_CDC_Process+0x114>
 800a5b8:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <USBH_CDC_Process+0x2c>)
 800a5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5be:	bf00      	nop
 800a5c0:	0800a5d5 	.word	0x0800a5d5
 800a5c4:	0800a5db 	.word	0x0800a5db
 800a5c8:	0800a60b 	.word	0x0800a60b
 800a5cc:	0800a67f 	.word	0x0800a67f
 800a5d0:	0800a68d 	.word	0x0800a68d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d8:	e06d      	b.n	800a6b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f897 	bl	800a714 <SetLineCoding>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a5ea:	7bbb      	ldrb	r3, [r7, #14]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d104      	bne.n	800a5fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a5f8:	e058      	b.n	800a6ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d055      	beq.n	800a6ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2204      	movs	r2, #4
 800a604:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a608:	e050      	b.n	800a6ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	3340      	adds	r3, #64	; 0x40
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f860 	bl	800a6d6 <GetLineCoding>
 800a616:	4603      	mov	r3, r0
 800a618:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d126      	bne.n	800a66e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a632:	791b      	ldrb	r3, [r3, #4]
 800a634:	429a      	cmp	r2, r3
 800a636:	d13b      	bne.n	800a6b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a642:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a644:	429a      	cmp	r2, r3
 800a646:	d133      	bne.n	800a6b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a652:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a654:	429a      	cmp	r2, r3
 800a656:	d12b      	bne.n	800a6b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a660:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a662:	429a      	cmp	r2, r3
 800a664:	d124      	bne.n	800a6b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f982 	bl	800a970 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a66c:	e020      	b.n	800a6b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d01d      	beq.n	800a6b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2204      	movs	r2, #4
 800a678:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a67c:	e018      	b.n	800a6b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f867 	bl	800a752 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f8f6 	bl	800a876 <CDC_ProcessReception>
      break;
 800a68a:	e014      	b.n	800a6b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a68c:	2100      	movs	r1, #0
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f001 f951 	bl	800b936 <USBH_ClrFeature>
 800a694:	4603      	mov	r3, r0
 800a696:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a698:	7bbb      	ldrb	r3, [r7, #14]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a6a6:	e005      	b.n	800a6b4 <USBH_CDC_Process+0x120>

    default:
      break;
 800a6a8:	bf00      	nop
 800a6aa:	e004      	b.n	800a6b6 <USBH_CDC_Process+0x122>
      break;
 800a6ac:	bf00      	nop
 800a6ae:	e002      	b.n	800a6b6 <USBH_CDC_Process+0x122>
      break;
 800a6b0:	bf00      	nop
 800a6b2:	e000      	b.n	800a6b6 <USBH_CDC_Process+0x122>
      break;
 800a6b4:	bf00      	nop

  }

  return status;
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	22a1      	movs	r2, #161	; 0xa1
 800a6e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2221      	movs	r2, #33	; 0x21
 800a6ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2207      	movs	r2, #7
 800a6fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2207      	movs	r2, #7
 800a702:	4619      	mov	r1, r3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f001 faf6 	bl	800bcf6 <USBH_CtlReq>
 800a70a:	4603      	mov	r3, r0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2221      	movs	r2, #33	; 0x21
 800a722:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2220      	movs	r2, #32
 800a728:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2207      	movs	r2, #7
 800a73a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2207      	movs	r2, #7
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f001 fad7 	bl	800bcf6 <USBH_CtlReq>
 800a748:	4603      	mov	r3, r0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b086      	sub	sp, #24
 800a756:	af02      	add	r7, sp, #8
 800a758:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a764:	2300      	movs	r3, #0
 800a766:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d002      	beq.n	800a778 <CDC_ProcessTransmission+0x26>
 800a772:	2b02      	cmp	r3, #2
 800a774:	d023      	beq.n	800a7be <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a776:	e07a      	b.n	800a86e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	8b12      	ldrh	r2, [r2, #24]
 800a780:	4293      	cmp	r3, r2
 800a782:	d90b      	bls.n	800a79c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	69d9      	ldr	r1, [r3, #28]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	8b1a      	ldrh	r2, [r3, #24]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	7b5b      	ldrb	r3, [r3, #13]
 800a790:	2001      	movs	r0, #1
 800a792:	9000      	str	r0, [sp, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 fdac 	bl	800c2f2 <USBH_BulkSendData>
 800a79a:	e00b      	b.n	800a7b4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	7b5b      	ldrb	r3, [r3, #13]
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	9000      	str	r0, [sp, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f001 fd9f 	bl	800c2f2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a7bc:	e057      	b.n	800a86e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	7b5b      	ldrb	r3, [r3, #13]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f004 fbc1 	bl	800ef4c <USBH_LL_GetURBState>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a7ce:	7afb      	ldrb	r3, [r7, #11]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d136      	bne.n	800a842 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	8b12      	ldrh	r2, [r2, #24]
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d90e      	bls.n	800a7fe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	8b12      	ldrh	r2, [r2, #24]
 800a7e8:	1a9a      	subs	r2, r3, r2
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	8b12      	ldrh	r2, [r2, #24]
 800a7f6:	441a      	add	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	61da      	str	r2, [r3, #28]
 800a7fc:	e002      	b.n	800a804 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a814:	e006      	b.n	800a824 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f892 	bl	800a948 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2204      	movs	r2, #4
 800a828:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a838:	2200      	movs	r2, #0
 800a83a:	4619      	mov	r1, r3
 800a83c:	f001 fed4 	bl	800c5e8 <osMessagePut>
      break;
 800a840:	e014      	b.n	800a86c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	2b02      	cmp	r3, #2
 800a846:	d111      	bne.n	800a86c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2204      	movs	r2, #4
 800a854:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a864:	2200      	movs	r2, #0
 800a866:	4619      	mov	r1, r3
 800a868:	f001 febe 	bl	800c5e8 <osMessagePut>
      break;
 800a86c:	bf00      	nop
  }
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b086      	sub	sp, #24
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a884:	69db      	ldr	r3, [r3, #28]
 800a886:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a888:	2300      	movs	r3, #0
 800a88a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a892:	2b03      	cmp	r3, #3
 800a894:	d002      	beq.n	800a89c <CDC_ProcessReception+0x26>
 800a896:	2b04      	cmp	r3, #4
 800a898:	d00e      	beq.n	800a8b8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a89a:	e051      	b.n	800a940 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	6a19      	ldr	r1, [r3, #32]
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	8b5a      	ldrh	r2, [r3, #26]
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	7b1b      	ldrb	r3, [r3, #12]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f001 fd47 	bl	800c33c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2204      	movs	r2, #4
 800a8b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a8b6:	e043      	b.n	800a940 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	7b1b      	ldrb	r3, [r3, #12]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f004 fb44 	bl	800ef4c <USBH_LL_GetURBState>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a8c8:	7cfb      	ldrb	r3, [r7, #19]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d137      	bne.n	800a93e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	7b1b      	ldrb	r3, [r3, #12]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f004 faa7 	bl	800ee28 <USBH_LL_GetLastXferSize>
 800a8da:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d016      	beq.n	800a914 <CDC_ProcessReception+0x9e>
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	8b5b      	ldrh	r3, [r3, #26]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d910      	bls.n	800a914 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	1ad2      	subs	r2, r2, r3
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	6a1a      	ldr	r2, [r3, #32]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	441a      	add	r2, r3
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	2203      	movs	r2, #3
 800a90e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a912:	e006      	b.n	800a922 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f81d 	bl	800a95c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2204      	movs	r2, #4
 800a926:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a936:	2200      	movs	r2, #0
 800a938:	4619      	mov	r1, r3
 800a93a:	f001 fe55 	bl	800c5e8 <osMessagePut>
      break;
 800a93e:	bf00      	nop
  }
}
 800a940:	bf00      	nop
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a984:	b5b0      	push	{r4, r5, r7, lr}
 800a986:	b090      	sub	sp, #64	; 0x40
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	4613      	mov	r3, r2
 800a990:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a998:	2302      	movs	r3, #2
 800a99a:	e04d      	b.n	800aa38 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	79fa      	ldrb	r2, [r7, #7]
 800a9a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 f847 	bl	800aa48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d003      	beq.n	800a9e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800a9e8:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <USBH_Init+0xbc>)
 800a9ea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a9ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a9f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800a9f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f001 fdcb 	bl	800c596 <osMessageCreate>
 800aa00:	4602      	mov	r2, r0
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800aa08:	4b0e      	ldr	r3, [pc, #56]	; (800aa44 <USBH_Init+0xc0>)
 800aa0a:	f107 0414 	add.w	r4, r7, #20
 800aa0e:	461d      	mov	r5, r3
 800aa10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aa18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800aa1c:	f107 0314 	add.w	r3, r7, #20
 800aa20:	68f9      	ldr	r1, [r7, #12]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f001 fd6b 	bl	800c4fe <osThreadCreate>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f004 f93b 	bl	800ecac <USBH_LL_Init>

  return USBH_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3740      	adds	r7, #64	; 0x40
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bdb0      	pop	{r4, r5, r7, pc}
 800aa40:	0800fa40 	.word	0x0800fa40
 800aa44:	0800fa50 	.word	0x0800fa50

0800aa48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa54:	2300      	movs	r3, #0
 800aa56:	60fb      	str	r3, [r7, #12]
 800aa58:	e009      	b.n	800aa6e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	33e0      	adds	r3, #224	; 0xe0
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4413      	add	r3, r2
 800aa64:	2200      	movs	r2, #0
 800aa66:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b0e      	cmp	r3, #14
 800aa72:	d9f2      	bls.n	800aa5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa74:	2300      	movs	r3, #0
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	e009      	b.n	800aa8e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa84:	2200      	movs	r2, #0
 800aa86:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa94:	d3f1      	bcc.n	800aa7a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2240      	movs	r2, #64	; 0x40
 800aaba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d016      	beq.n	800ab32 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10e      	bne.n	800ab2c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab14:	1c59      	adds	r1, r3, #1
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	33de      	adds	r3, #222	; 0xde
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	73fb      	strb	r3, [r7, #15]
 800ab2a:	e004      	b.n	800ab36 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	73fb      	strb	r3, [r7, #15]
 800ab30:	e001      	b.n	800ab36 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ab32:	2302      	movs	r3, #2
 800ab34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3714      	adds	r7, #20
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ab5a:	78fa      	ldrb	r2, [r7, #3]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d204      	bcs.n	800ab6a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	78fa      	ldrb	r2, [r7, #3]
 800ab64:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ab68:	e001      	b.n	800ab6e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	4608      	mov	r0, r1
 800ab86:	4611      	mov	r1, r2
 800ab88:	461a      	mov	r2, r3
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	70fb      	strb	r3, [r7, #3]
 800ab8e:	460b      	mov	r3, r1
 800ab90:	70bb      	strb	r3, [r7, #2]
 800ab92:	4613      	mov	r3, r2
 800ab94:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ab96:	2300      	movs	r3, #0
 800ab98:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aba4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aba6:	e025      	b.n	800abf4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800aba8:	7dfb      	ldrb	r3, [r7, #23]
 800abaa:	221a      	movs	r2, #26
 800abac:	fb02 f303 	mul.w	r3, r2, r3
 800abb0:	3308      	adds	r3, #8
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	4413      	add	r3, r2
 800abb6:	3302      	adds	r3, #2
 800abb8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	795b      	ldrb	r3, [r3, #5]
 800abbe:	78fa      	ldrb	r2, [r7, #3]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d002      	beq.n	800abca <USBH_FindInterface+0x4e>
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	2bff      	cmp	r3, #255	; 0xff
 800abc8:	d111      	bne.n	800abee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800abce:	78ba      	ldrb	r2, [r7, #2]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d002      	beq.n	800abda <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abd4:	78bb      	ldrb	r3, [r7, #2]
 800abd6:	2bff      	cmp	r3, #255	; 0xff
 800abd8:	d109      	bne.n	800abee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abde:	787a      	ldrb	r2, [r7, #1]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d002      	beq.n	800abea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abe4:	787b      	ldrb	r3, [r7, #1]
 800abe6:	2bff      	cmp	r3, #255	; 0xff
 800abe8:	d101      	bne.n	800abee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800abea:	7dfb      	ldrb	r3, [r7, #23]
 800abec:	e006      	b.n	800abfc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	3301      	adds	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800abf4:	7dfb      	ldrb	r3, [r7, #23]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d9d6      	bls.n	800aba8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800abfa:	23ff      	movs	r3, #255	; 0xff
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	371c      	adds	r7, #28
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f004 f891 	bl	800ed38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ac16:	2101      	movs	r1, #1
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f004 f9aa 	bl	800ef72 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b088      	sub	sp, #32
 800ac2c:	af04      	add	r7, sp, #16
 800ac2e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ac30:	2302      	movs	r3, #2
 800ac32:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ac34:	2300      	movs	r3, #0
 800ac36:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d102      	bne.n	800ac4a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2203      	movs	r2, #3
 800ac48:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	2b0b      	cmp	r3, #11
 800ac52:	f200 823c 	bhi.w	800b0ce <USBH_Process+0x4a6>
 800ac56:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <USBH_Process+0x34>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800ac8d 	.word	0x0800ac8d
 800ac60:	0800acdb 	.word	0x0800acdb
 800ac64:	0800ad5f 	.word	0x0800ad5f
 800ac68:	0800b04d 	.word	0x0800b04d
 800ac6c:	0800b0cf 	.word	0x0800b0cf
 800ac70:	0800ae1f 	.word	0x0800ae1f
 800ac74:	0800afd7 	.word	0x0800afd7
 800ac78:	0800ae71 	.word	0x0800ae71
 800ac7c:	0800aead 	.word	0x0800aead
 800ac80:	0800aee7 	.word	0x0800aee7
 800ac84:	0800af2f 	.word	0x0800af2f
 800ac88:	0800b035 	.word	0x0800b035
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 821c 	beq.w	800b0d2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aca0:	20c8      	movs	r0, #200	; 0xc8
 800aca2:	f004 f9b0 	bl	800f006 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f004 f8a3 	bl	800edf2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acd0:	2200      	movs	r2, #0
 800acd2:	4619      	mov	r1, r3
 800acd4:	f001 fc88 	bl	800c5e8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800acd8:	e1fb      	b.n	800b0d2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d107      	bne.n	800acf4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2202      	movs	r2, #2
 800acf0:	701a      	strb	r2, [r3, #0]
 800acf2:	e025      	b.n	800ad40 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800acfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acfe:	d914      	bls.n	800ad2a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad06:	3301      	adds	r3, #1
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d903      	bls.n	800ad22 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	220d      	movs	r2, #13
 800ad1e:	701a      	strb	r2, [r3, #0]
 800ad20:	e00e      	b.n	800ad40 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	701a      	strb	r2, [r3, #0]
 800ad28:	e00a      	b.n	800ad40 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ad30:	f103 020a 	add.w	r2, r3, #10
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ad3a:	200a      	movs	r0, #10
 800ad3c:	f004 f963 	bl	800f006 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad54:	2200      	movs	r2, #0
 800ad56:	4619      	mov	r1, r3
 800ad58:	f001 fc46 	bl	800c5e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad5c:	e1c0      	b.n	800b0e0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d005      	beq.n	800ad74 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad6e:	2104      	movs	r1, #4
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ad74:	2064      	movs	r0, #100	; 0x64
 800ad76:	f004 f946 	bl	800f006 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f004 f812 	bl	800eda4 <USBH_LL_GetSpeed>
 800ad80:	4603      	mov	r3, r0
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2205      	movs	r2, #5
 800ad8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ad90:	2100      	movs	r1, #0
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f001 fb1f 	bl	800c3d6 <USBH_AllocPipe>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ada0:	2180      	movs	r1, #128	; 0x80
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f001 fb17 	bl	800c3d6 <USBH_AllocPipe>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	7919      	ldrb	r1, [r3, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800adc4:	b292      	uxth	r2, r2
 800adc6:	9202      	str	r2, [sp, #8]
 800adc8:	2200      	movs	r2, #0
 800adca:	9201      	str	r2, [sp, #4]
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	4603      	mov	r3, r0
 800add0:	2280      	movs	r2, #128	; 0x80
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f001 fad0 	bl	800c378 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7959      	ldrb	r1, [r3, #5]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800adec:	b292      	uxth	r2, r2
 800adee:	9202      	str	r2, [sp, #8]
 800adf0:	2200      	movs	r2, #0
 800adf2:	9201      	str	r2, [sp, #4]
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	4603      	mov	r3, r0
 800adf8:	2200      	movs	r2, #0
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 fabc 	bl	800c378 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae14:	2200      	movs	r2, #0
 800ae16:	4619      	mov	r1, r3
 800ae18:	f001 fbe6 	bl	800c5e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ae1c:	e160      	b.n	800b0e0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 f964 	bl	800b0ec <USBH_HandleEnum>
 800ae24:	4603      	mov	r3, r0
 800ae26:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 8152 	bne.w	800b0d6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d103      	bne.n	800ae4c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2208      	movs	r2, #8
 800ae48:	701a      	strb	r2, [r3, #0]
 800ae4a:	e002      	b.n	800ae52 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2207      	movs	r2, #7
 800ae50:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2205      	movs	r2, #5
 800ae56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae66:	2200      	movs	r2, #0
 800ae68:	4619      	mov	r1, r3
 800ae6a:	f001 fbbd 	bl	800c5e8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae6e:	e132      	b.n	800b0d6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f000 812f 	beq.w	800b0da <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae82:	2101      	movs	r1, #1
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2208      	movs	r2, #8
 800ae8c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2205      	movs	r2, #5
 800ae92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aea2:	2200      	movs	r2, #0
 800aea4:	4619      	mov	r1, r3
 800aea6:	f001 fb9f 	bl	800c5e8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800aeaa:	e116      	b.n	800b0da <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fcf6 	bl	800b8a8 <USBH_SetCfg>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2209      	movs	r2, #9
 800aec6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aedc:	2200      	movs	r2, #0
 800aede:	4619      	mov	r1, r3
 800aee0:	f001 fb82 	bl	800c5e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aee4:	e0fc      	b.n	800b0e0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800aeec:	f003 0320 	and.w	r3, r3, #32
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00a      	beq.n	800af0a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800aef4:	2101      	movs	r1, #1
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fcf9 	bl	800b8ee <USBH_SetFeature>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	220a      	movs	r2, #10
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	e002      	b.n	800af10 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	220a      	movs	r2, #10
 800af0e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af24:	2200      	movs	r2, #0
 800af26:	4619      	mov	r1, r3
 800af28:	f001 fb5e 	bl	800c5e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800af2c:	e0d8      	b.n	800b0e0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800af34:	2b00      	cmp	r3, #0
 800af36:	d03f      	beq.n	800afb8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800af40:	2300      	movs	r3, #0
 800af42:	73fb      	strb	r3, [r7, #15]
 800af44:	e016      	b.n	800af74 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800af46:	7bfa      	ldrb	r2, [r7, #15]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	32de      	adds	r2, #222	; 0xde
 800af4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af50:	791a      	ldrb	r2, [r3, #4]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800af58:	429a      	cmp	r2, r3
 800af5a:	d108      	bne.n	800af6e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800af5c:	7bfa      	ldrb	r2, [r7, #15]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	32de      	adds	r2, #222	; 0xde
 800af62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800af6c:	e005      	b.n	800af7a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	3301      	adds	r3, #1
 800af72:	73fb      	strb	r3, [r7, #15]
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0e5      	beq.n	800af46 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d016      	beq.n	800afb2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	4798      	blx	r3
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d109      	bne.n	800afaa <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2206      	movs	r2, #6
 800af9a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afa2:	2103      	movs	r1, #3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	4798      	blx	r3
 800afa8:	e006      	b.n	800afb8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	220d      	movs	r2, #13
 800afae:	701a      	strb	r2, [r3, #0]
 800afb0:	e002      	b.n	800afb8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	220d      	movs	r2, #13
 800afb6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2205      	movs	r2, #5
 800afbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800afcc:	2200      	movs	r2, #0
 800afce:	4619      	mov	r1, r3
 800afd0:	f001 fb0a 	bl	800c5e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800afd4:	e084      	b.n	800b0e0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d017      	beq.n	800b010 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	4798      	blx	r3
 800afec:	4603      	mov	r3, r0
 800afee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d103      	bne.n	800b000 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	220b      	movs	r2, #11
 800affc:	701a      	strb	r2, [r3, #0]
 800affe:	e00a      	b.n	800b016 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	2b02      	cmp	r3, #2
 800b006:	d106      	bne.n	800b016 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	220d      	movs	r2, #13
 800b00c:	701a      	strb	r2, [r3, #0]
 800b00e:	e002      	b.n	800b016 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	220d      	movs	r2, #13
 800b014:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2205      	movs	r2, #5
 800b01a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b02a:	2200      	movs	r2, #0
 800b02c:	4619      	mov	r1, r3
 800b02e:	f001 fadb 	bl	800c5e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b032:	e055      	b.n	800b0e0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d04f      	beq.n	800b0de <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	4798      	blx	r3
      }
      break;
 800b04a:	e048      	b.n	800b0de <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff fcf7 	bl	800aa48 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d009      	beq.n	800b078 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d005      	beq.n	800b08e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b088:	2105      	movs	r1, #5
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b01      	cmp	r3, #1
 800b098:	d107      	bne.n	800b0aa <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7ff fdb0 	bl	800ac08 <USBH_Start>
 800b0a8:	e002      	b.n	800b0b0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f003 fe44 	bl	800ed38 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	f001 fa8e 	bl	800c5e8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b0cc:	e008      	b.n	800b0e0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800b0ce:	bf00      	nop
 800b0d0:	e006      	b.n	800b0e0 <USBH_Process+0x4b8>
      break;
 800b0d2:	bf00      	nop
 800b0d4:	e004      	b.n	800b0e0 <USBH_Process+0x4b8>
      break;
 800b0d6:	bf00      	nop
 800b0d8:	e002      	b.n	800b0e0 <USBH_Process+0x4b8>
    break;
 800b0da:	bf00      	nop
 800b0dc:	e000      	b.n	800b0e0 <USBH_Process+0x4b8>
      break;
 800b0de:	bf00      	nop
  }
  return USBH_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop

0800b0ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af04      	add	r7, sp, #16
 800b0f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	785b      	ldrb	r3, [r3, #1]
 800b100:	2b07      	cmp	r3, #7
 800b102:	f200 8208 	bhi.w	800b516 <USBH_HandleEnum+0x42a>
 800b106:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <USBH_HandleEnum+0x20>)
 800b108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10c:	0800b12d 	.word	0x0800b12d
 800b110:	0800b1eb 	.word	0x0800b1eb
 800b114:	0800b255 	.word	0x0800b255
 800b118:	0800b2e3 	.word	0x0800b2e3
 800b11c:	0800b34d 	.word	0x0800b34d
 800b120:	0800b3bd 	.word	0x0800b3bd
 800b124:	0800b459 	.word	0x0800b459
 800b128:	0800b4d7 	.word	0x0800b4d7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b12c:	2108      	movs	r1, #8
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 faea 	bl	800b708 <USBH_Get_DevDesc>
 800b134:	4603      	mov	r3, r0
 800b136:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d130      	bne.n	800b1a0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	7919      	ldrb	r1, [r3, #4]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b162:	b292      	uxth	r2, r2
 800b164:	9202      	str	r2, [sp, #8]
 800b166:	2200      	movs	r2, #0
 800b168:	9201      	str	r2, [sp, #4]
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	4603      	mov	r3, r0
 800b16e:	2280      	movs	r2, #128	; 0x80
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f001 f901 	bl	800c378 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	7959      	ldrb	r1, [r3, #5]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b18a:	b292      	uxth	r2, r2
 800b18c:	9202      	str	r2, [sp, #8]
 800b18e:	2200      	movs	r2, #0
 800b190:	9201      	str	r2, [sp, #4]
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	4603      	mov	r3, r0
 800b196:	2200      	movs	r2, #0
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f001 f8ed 	bl	800c378 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b19e:	e1bc      	b.n	800b51a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	f040 81b9 	bne.w	800b51a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d903      	bls.n	800b1ca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	220d      	movs	r2, #13
 800b1c6:	701a      	strb	r2, [r3, #0]
      break;
 800b1c8:	e1a7      	b.n	800b51a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	795b      	ldrb	r3, [r3, #5]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f001 f921 	bl	800c418 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	791b      	ldrb	r3, [r3, #4]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f001 f91b 	bl	800c418 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	701a      	strb	r2, [r3, #0]
      break;
 800b1e8:	e197      	b.n	800b51a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b1ea:	2112      	movs	r1, #18
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fa8b 	bl	800b708 <USBH_Get_DevDesc>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1f6:	7bbb      	ldrb	r3, [r7, #14]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d103      	bne.n	800b204 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2202      	movs	r2, #2
 800b200:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b202:	e18c      	b.n	800b51e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	2b03      	cmp	r3, #3
 800b208:	f040 8189 	bne.w	800b51e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b212:	3301      	adds	r3, #1
 800b214:	b2da      	uxtb	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b222:	2b03      	cmp	r3, #3
 800b224:	d903      	bls.n	800b22e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	220d      	movs	r2, #13
 800b22a:	701a      	strb	r2, [r3, #0]
      break;
 800b22c:	e177      	b.n	800b51e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	795b      	ldrb	r3, [r3, #5]
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f001 f8ef 	bl	800c418 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	791b      	ldrb	r3, [r3, #4]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 f8e9 	bl	800c418 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]
      break;
 800b252:	e164      	b.n	800b51e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b254:	2101      	movs	r1, #1
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fb02 	bl	800b860 <USBH_SetAddress>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b260:	7bbb      	ldrb	r3, [r7, #14]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d132      	bne.n	800b2cc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b266:	2002      	movs	r0, #2
 800b268:	f003 fecd 	bl	800f006 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2203      	movs	r2, #3
 800b278:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	7919      	ldrb	r1, [r3, #4]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b28e:	b292      	uxth	r2, r2
 800b290:	9202      	str	r2, [sp, #8]
 800b292:	2200      	movs	r2, #0
 800b294:	9201      	str	r2, [sp, #4]
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	4603      	mov	r3, r0
 800b29a:	2280      	movs	r2, #128	; 0x80
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 f86b 	bl	800c378 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	7959      	ldrb	r1, [r3, #5]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b2b6:	b292      	uxth	r2, r2
 800b2b8:	9202      	str	r2, [sp, #8]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	9201      	str	r2, [sp, #4]
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f001 f857 	bl	800c378 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b2ca:	e12a      	b.n	800b522 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	f040 8127 	bne.w	800b522 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	220d      	movs	r2, #13
 800b2d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	705a      	strb	r2, [r3, #1]
      break;
 800b2e0:	e11f      	b.n	800b522 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b2e2:	2109      	movs	r1, #9
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fa37 	bl	800b758 <USBH_Get_CfgDesc>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d103      	bne.n	800b2fc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2204      	movs	r2, #4
 800b2f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b2fa:	e114      	b.n	800b526 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	f040 8111 	bne.w	800b526 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b30a:	3301      	adds	r3, #1
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d903      	bls.n	800b326 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	220d      	movs	r2, #13
 800b322:	701a      	strb	r2, [r3, #0]
      break;
 800b324:	e0ff      	b.n	800b526 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	795b      	ldrb	r3, [r3, #5]
 800b32a:	4619      	mov	r1, r3
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f001 f873 	bl	800c418 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	791b      	ldrb	r3, [r3, #4]
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f001 f86d 	bl	800c418 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	701a      	strb	r2, [r3, #0]
      break;
 800b34a:	e0ec      	b.n	800b526 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b352:	4619      	mov	r1, r3
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f9ff 	bl	800b758 <USBH_Get_CfgDesc>
 800b35a:	4603      	mov	r3, r0
 800b35c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b35e:	7bbb      	ldrb	r3, [r7, #14]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d103      	bne.n	800b36c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2205      	movs	r2, #5
 800b368:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b36a:	e0de      	b.n	800b52a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b36c:	7bbb      	ldrb	r3, [r7, #14]
 800b36e:	2b03      	cmp	r3, #3
 800b370:	f040 80db 	bne.w	800b52a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b37a:	3301      	adds	r3, #1
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	d903      	bls.n	800b396 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	220d      	movs	r2, #13
 800b392:	701a      	strb	r2, [r3, #0]
      break;
 800b394:	e0c9      	b.n	800b52a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	795b      	ldrb	r3, [r3, #5]
 800b39a:	4619      	mov	r1, r3
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f001 f83b 	bl	800c418 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	791b      	ldrb	r3, [r3, #4]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f001 f835 	bl	800c418 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	701a      	strb	r2, [r3, #0]
      break;
 800b3ba:	e0b6      	b.n	800b52a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d036      	beq.n	800b434 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b3d2:	23ff      	movs	r3, #255	; 0xff
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f9e3 	bl	800b7a0 <USBH_Get_StringDesc>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b3de:	7bbb      	ldrb	r3, [r7, #14]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d111      	bne.n	800b408 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2206      	movs	r2, #6
 800b3e8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2205      	movs	r2, #5
 800b3ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b3fe:	2200      	movs	r2, #0
 800b400:	4619      	mov	r1, r3
 800b402:	f001 f8f1 	bl	800c5e8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b406:	e092      	b.n	800b52e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b408:	7bbb      	ldrb	r3, [r7, #14]
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	f040 808f 	bne.w	800b52e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2206      	movs	r2, #6
 800b414:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2205      	movs	r2, #5
 800b41a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b42a:	2200      	movs	r2, #0
 800b42c:	4619      	mov	r1, r3
 800b42e:	f001 f8db 	bl	800c5e8 <osMessagePut>
      break;
 800b432:	e07c      	b.n	800b52e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2206      	movs	r2, #6
 800b438:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2205      	movs	r2, #5
 800b43e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b44e:	2200      	movs	r2, #0
 800b450:	4619      	mov	r1, r3
 800b452:	f001 f8c9 	bl	800c5e8 <osMessagePut>
      break;
 800b456:	e06a      	b.n	800b52e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d027      	beq.n	800b4b2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b46e:	23ff      	movs	r3, #255	; 0xff
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f995 	bl	800b7a0 <USBH_Get_StringDesc>
 800b476:	4603      	mov	r3, r0
 800b478:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b47a:	7bbb      	ldrb	r3, [r7, #14]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d103      	bne.n	800b488 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2207      	movs	r2, #7
 800b484:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b486:	e054      	b.n	800b532 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b488:	7bbb      	ldrb	r3, [r7, #14]
 800b48a:	2b03      	cmp	r3, #3
 800b48c:	d151      	bne.n	800b532 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2207      	movs	r2, #7
 800b492:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2205      	movs	r2, #5
 800b498:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	f001 f89c 	bl	800c5e8 <osMessagePut>
      break;
 800b4b0:	e03f      	b.n	800b532 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2207      	movs	r2, #7
 800b4b6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2205      	movs	r2, #5
 800b4bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f001 f88a 	bl	800c5e8 <osMessagePut>
      break;
 800b4d4:	e02d      	b.n	800b532 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d017      	beq.n	800b510 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b4ec:	23ff      	movs	r3, #255	; 0xff
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f956 	bl	800b7a0 <USBH_Get_StringDesc>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b4f8:	7bbb      	ldrb	r3, [r7, #14]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d102      	bne.n	800b504 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b502:	e018      	b.n	800b536 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b504:	7bbb      	ldrb	r3, [r7, #14]
 800b506:	2b03      	cmp	r3, #3
 800b508:	d115      	bne.n	800b536 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	73fb      	strb	r3, [r7, #15]
      break;
 800b50e:	e012      	b.n	800b536 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]
      break;
 800b514:	e00f      	b.n	800b536 <USBH_HandleEnum+0x44a>

    default:
      break;
 800b516:	bf00      	nop
 800b518:	e00e      	b.n	800b538 <USBH_HandleEnum+0x44c>
      break;
 800b51a:	bf00      	nop
 800b51c:	e00c      	b.n	800b538 <USBH_HandleEnum+0x44c>
      break;
 800b51e:	bf00      	nop
 800b520:	e00a      	b.n	800b538 <USBH_HandleEnum+0x44c>
      break;
 800b522:	bf00      	nop
 800b524:	e008      	b.n	800b538 <USBH_HandleEnum+0x44c>
      break;
 800b526:	bf00      	nop
 800b528:	e006      	b.n	800b538 <USBH_HandleEnum+0x44c>
      break;
 800b52a:	bf00      	nop
 800b52c:	e004      	b.n	800b538 <USBH_HandleEnum+0x44c>
      break;
 800b52e:	bf00      	nop
 800b530:	e002      	b.n	800b538 <USBH_HandleEnum+0x44c>
      break;
 800b532:	bf00      	nop
 800b534:	e000      	b.n	800b538 <USBH_HandleEnum+0x44c>
      break;
 800b536:	bf00      	nop
  }
  return Status;
 800b538:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop

0800b544 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b556:	bf00      	nop
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b082      	sub	sp, #8
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f804 	bl	800b586 <USBH_HandleSof>
}
 800b57e:	bf00      	nop
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b082      	sub	sp, #8
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b0b      	cmp	r3, #11
 800b596:	d10a      	bne.n	800b5ae <USBH_HandleSof+0x28>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d005      	beq.n	800b5ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	4798      	blx	r3
  }
}
 800b5ae:	bf00      	nop
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b082      	sub	sp, #8
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5da:	2200      	movs	r2, #0
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f001 f803 	bl	800c5e8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b5e2:	bf00      	nop
}
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b5fa:	bf00      	nop
}
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b082      	sub	sp, #8
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2201      	movs	r2, #1
 800b612:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b63a:	2200      	movs	r2, #0
 800b63c:	4619      	mov	r1, r3
 800b63e:	f000 ffd3 	bl	800c5e8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f003 fb7e 	bl	800ed6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	791b      	ldrb	r3, [r3, #4]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fecd 	bl	800c418 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	795b      	ldrb	r3, [r3, #5]
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fec7 	bl	800c418 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b69e:	2200      	movs	r2, #0
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	f000 ffa1 	bl	800c5e8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800b6be:	f107 030c 	add.w	r3, r7, #12
 800b6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f000 ffce 	bl	800c668 <osMessageGet>
    if (event.status == osEventMessage)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b10      	cmp	r3, #16
 800b6d0:	d1f2      	bne.n	800b6b8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff faa8 	bl	800ac28 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b6d8:	e7ee      	b.n	800b6b8 <USBH_Process_OS+0x8>

0800b6da <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	f000 ff75 	bl	800c5e8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af02      	add	r7, sp, #8
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b71a:	78fb      	ldrb	r3, [r7, #3]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	4613      	mov	r3, r2
 800b722:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b726:	2100      	movs	r1, #0
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f864 	bl	800b7f6 <USBH_GetDescriptor>
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]
 800b732:	7bfb      	ldrb	r3, [r7, #15]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10a      	bne.n	800b74e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b744:	78fa      	ldrb	r2, [r7, #3]
 800b746:	b292      	uxth	r2, r2
 800b748:	4619      	mov	r1, r3
 800b74a:	f000 f918 	bl	800b97e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	331c      	adds	r3, #28
 800b768:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b76a:	887b      	ldrh	r3, [r7, #2]
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b774:	2100      	movs	r1, #0
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f83d 	bl	800b7f6 <USBH_GetDescriptor>
 800b77c:	4603      	mov	r3, r0
 800b77e:	72fb      	strb	r3, [r7, #11]
 800b780:	7afb      	ldrb	r3, [r7, #11]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d107      	bne.n	800b796 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b78c:	887a      	ldrh	r2, [r7, #2]
 800b78e:	68f9      	ldr	r1, [r7, #12]
 800b790:	4618      	mov	r0, r3
 800b792:	f000 f964 	bl	800ba5e <USBH_ParseCfgDesc>
  }

  return status;
 800b796:	7afb      	ldrb	r3, [r7, #11]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af02      	add	r7, sp, #8
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	607a      	str	r2, [r7, #4]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	72fb      	strb	r3, [r7, #11]
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b7b4:	7afb      	ldrb	r3, [r7, #11]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b7bc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b7c4:	893b      	ldrh	r3, [r7, #8]
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f000 f812 	bl	800b7f6 <USBH_GetDescriptor>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	75fb      	strb	r3, [r7, #23]
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d107      	bne.n	800b7ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b7e2:	893a      	ldrh	r2, [r7, #8]
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 fa37 	bl	800bc5a <USBH_ParseStringDesc>
  }

  return status;
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b084      	sub	sp, #16
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	607b      	str	r3, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	72fb      	strb	r3, [r7, #11]
 800b804:	4613      	mov	r3, r2
 800b806:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	789b      	ldrb	r3, [r3, #2]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d11c      	bne.n	800b84a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b810:	7afb      	ldrb	r3, [r7, #11]
 800b812:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b816:	b2da      	uxtb	r2, r3
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2206      	movs	r2, #6
 800b820:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	893a      	ldrh	r2, [r7, #8]
 800b826:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b828:	893b      	ldrh	r3, [r7, #8]
 800b82a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b82e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b832:	d104      	bne.n	800b83e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f240 4209 	movw	r2, #1033	; 0x409
 800b83a:	829a      	strh	r2, [r3, #20]
 800b83c:	e002      	b.n	800b844 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	8b3a      	ldrh	r2, [r7, #24]
 800b848:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b84a:	8b3b      	ldrh	r3, [r7, #24]
 800b84c:	461a      	mov	r2, r3
 800b84e:	6879      	ldr	r1, [r7, #4]
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 fa50 	bl	800bcf6 <USBH_CtlReq>
 800b856:	4603      	mov	r3, r0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	789b      	ldrb	r3, [r3, #2]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d10f      	bne.n	800b894 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2205      	movs	r2, #5
 800b87e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b880:	78fb      	ldrb	r3, [r7, #3]
 800b882:	b29a      	uxth	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b894:	2200      	movs	r2, #0
 800b896:	2100      	movs	r1, #0
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fa2c 	bl	800bcf6 <USBH_CtlReq>
 800b89e:	4603      	mov	r3, r0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	789b      	ldrb	r3, [r3, #2]
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d10e      	bne.n	800b8da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2209      	movs	r2, #9
 800b8c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	887a      	ldrh	r2, [r7, #2]
 800b8cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2100      	movs	r1, #0
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fa09 	bl	800bcf6 <USBH_CtlReq>
 800b8e4:	4603      	mov	r3, r0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b082      	sub	sp, #8
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	789b      	ldrb	r3, [r3, #2]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d10f      	bne.n	800b922 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2203      	movs	r2, #3
 800b90c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b90e:	78fb      	ldrb	r3, [r7, #3]
 800b910:	b29a      	uxth	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b922:	2200      	movs	r2, #0
 800b924:	2100      	movs	r1, #0
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f9e5 	bl	800bcf6 <USBH_CtlReq>
 800b92c:	4603      	mov	r3, r0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	460b      	mov	r3, r1
 800b940:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	789b      	ldrb	r3, [r3, #2]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d10f      	bne.n	800b96a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2202      	movs	r2, #2
 800b94e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b95c:	78fb      	ldrb	r3, [r7, #3]
 800b95e:	b29a      	uxth	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b96a:	2200      	movs	r2, #0
 800b96c:	2100      	movs	r1, #0
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f9c1 	bl	800bcf6 <USBH_CtlReq>
 800b974:	4603      	mov	r3, r0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b97e:	b480      	push	{r7}
 800b980:	b085      	sub	sp, #20
 800b982:	af00      	add	r7, sp, #0
 800b984:	60f8      	str	r0, [r7, #12]
 800b986:	60b9      	str	r1, [r7, #8]
 800b988:	4613      	mov	r3, r2
 800b98a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	781a      	ldrb	r2, [r3, #0]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	785a      	ldrb	r2, [r3, #1]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	3302      	adds	r3, #2
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	3303      	adds	r3, #3
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	021b      	lsls	r3, r3, #8
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	791a      	ldrb	r2, [r3, #4]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	795a      	ldrb	r2, [r3, #5]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	799a      	ldrb	r2, [r3, #6]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	79da      	ldrb	r2, [r3, #7]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b9d8:	88fb      	ldrh	r3, [r7, #6]
 800b9da:	2b08      	cmp	r3, #8
 800b9dc:	d939      	bls.n	800ba52 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	3309      	adds	r3, #9
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	330a      	adds	r3, #10
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	330b      	adds	r3, #11
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	021b      	lsls	r3, r3, #8
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	330c      	adds	r3, #12
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	330d      	adds	r3, #13
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	021b      	lsls	r3, r3, #8
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	7b9a      	ldrb	r2, [r3, #14]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	7bda      	ldrb	r2, [r3, #15]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	7c1a      	ldrb	r2, [r3, #16]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	7c5a      	ldrb	r2, [r3, #17]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	745a      	strb	r2, [r3, #17]
  }
}
 800ba52:	bf00      	nop
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b08a      	sub	sp, #40	; 0x28
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	60b9      	str	r1, [r7, #8]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ba70:	2300      	movs	r3, #0
 800ba72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ba76:	2300      	movs	r3, #0
 800ba78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	781a      	ldrb	r2, [r3, #0]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	785a      	ldrb	r2, [r3, #1]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	3302      	adds	r3, #2
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	3303      	adds	r3, #3
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	021b      	lsls	r3, r3, #8
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	4313      	orrs	r3, r2
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	791a      	ldrb	r2, [r3, #4]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	795a      	ldrb	r2, [r3, #5]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	799a      	ldrb	r2, [r3, #6]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	79da      	ldrb	r2, [r3, #7]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	7a1a      	ldrb	r2, [r3, #8]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bad4:	88fb      	ldrh	r3, [r7, #6]
 800bad6:	2b09      	cmp	r3, #9
 800bad8:	d95f      	bls.n	800bb9a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bada:	2309      	movs	r3, #9
 800badc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bade:	2300      	movs	r3, #0
 800bae0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bae2:	e051      	b.n	800bb88 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bae4:	f107 0316 	add.w	r3, r7, #22
 800bae8:	4619      	mov	r1, r3
 800baea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baec:	f000 f8e8 	bl	800bcc0 <USBH_GetNextDesc>
 800baf0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	785b      	ldrb	r3, [r3, #1]
 800baf6:	2b04      	cmp	r3, #4
 800baf8:	d146      	bne.n	800bb88 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bafa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bafe:	221a      	movs	r2, #26
 800bb00:	fb02 f303 	mul.w	r3, r2, r3
 800bb04:	3308      	adds	r3, #8
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	4413      	add	r3, r2
 800bb0a:	3302      	adds	r3, #2
 800bb0c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bb0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb10:	69f8      	ldr	r0, [r7, #28]
 800bb12:	f000 f846 	bl	800bba2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bb16:	2300      	movs	r3, #0
 800bb18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bb20:	e022      	b.n	800bb68 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bb22:	f107 0316 	add.w	r3, r7, #22
 800bb26:	4619      	mov	r1, r3
 800bb28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb2a:	f000 f8c9 	bl	800bcc0 <USBH_GetNextDesc>
 800bb2e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb32:	785b      	ldrb	r3, [r3, #1]
 800bb34:	2b05      	cmp	r3, #5
 800bb36:	d117      	bne.n	800bb68 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bb38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bb3c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bb40:	3201      	adds	r2, #1
 800bb42:	00d2      	lsls	r2, r2, #3
 800bb44:	211a      	movs	r1, #26
 800bb46:	fb01 f303 	mul.w	r3, r1, r3
 800bb4a:	4413      	add	r3, r2
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	4413      	add	r3, r2
 800bb52:	3304      	adds	r3, #4
 800bb54:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bb56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb58:	69b8      	ldr	r0, [r7, #24]
 800bb5a:	f000 f851 	bl	800bc00 <USBH_ParseEPDesc>
            ep_ix++;
 800bb5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bb62:	3301      	adds	r3, #1
 800bb64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	791b      	ldrb	r3, [r3, #4]
 800bb6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d204      	bcs.n	800bb7e <USBH_ParseCfgDesc+0x120>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	885a      	ldrh	r2, [r3, #2]
 800bb78:	8afb      	ldrh	r3, [r7, #22]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d8d1      	bhi.n	800bb22 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bb7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bb82:	3301      	adds	r3, #1
 800bb84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bb88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d804      	bhi.n	800bb9a <USBH_ParseCfgDesc+0x13c>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	885a      	ldrh	r2, [r3, #2]
 800bb94:	8afb      	ldrh	r3, [r7, #22]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d8a4      	bhi.n	800bae4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bb9a:	bf00      	nop
 800bb9c:	3728      	adds	r7, #40	; 0x28
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b083      	sub	sp, #12
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	781a      	ldrb	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	785a      	ldrb	r2, [r3, #1]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	789a      	ldrb	r2, [r3, #2]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	78da      	ldrb	r2, [r3, #3]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	791a      	ldrb	r2, [r3, #4]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	795a      	ldrb	r2, [r3, #5]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	799a      	ldrb	r2, [r3, #6]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	79da      	ldrb	r2, [r3, #7]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	7a1a      	ldrb	r2, [r3, #8]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	721a      	strb	r2, [r3, #8]
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	781a      	ldrb	r2, [r3, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	785a      	ldrb	r2, [r3, #1]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	789a      	ldrb	r2, [r3, #2]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	78da      	ldrb	r2, [r3, #3]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	3304      	adds	r3, #4
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	3305      	adds	r3, #5
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	021b      	lsls	r3, r3, #8
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	799a      	ldrb	r2, [r3, #6]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	719a      	strb	r2, [r3, #6]
}
 800bc4e:	bf00      	nop
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b087      	sub	sp, #28
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	60f8      	str	r0, [r7, #12]
 800bc62:	60b9      	str	r1, [r7, #8]
 800bc64:	4613      	mov	r3, r2
 800bc66:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d120      	bne.n	800bcb4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	1e9a      	subs	r2, r3, #2
 800bc78:	88fb      	ldrh	r3, [r7, #6]
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	bf28      	it	cs
 800bc7e:	4613      	movcs	r3, r2
 800bc80:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	3302      	adds	r3, #2
 800bc86:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bc88:	2300      	movs	r3, #0
 800bc8a:	82fb      	strh	r3, [r7, #22]
 800bc8c:	e00b      	b.n	800bca6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bc8e:	8afb      	ldrh	r3, [r7, #22]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	4413      	add	r3, r2
 800bc94:	781a      	ldrb	r2, [r3, #0]
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bca0:	8afb      	ldrh	r3, [r7, #22]
 800bca2:	3302      	adds	r3, #2
 800bca4:	82fb      	strh	r3, [r7, #22]
 800bca6:	8afa      	ldrh	r2, [r7, #22]
 800bca8:	8abb      	ldrh	r3, [r7, #20]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d3ef      	bcc.n	800bc8e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]
  }
}
 800bcb4:	bf00      	nop
 800bcb6:	371c      	adds	r7, #28
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	881a      	ldrh	r2, [r3, #0]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	4413      	add	r3, r2
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4413      	add	r3, r2
 800bce6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bce8:	68fb      	ldr	r3, [r7, #12]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b086      	sub	sp, #24
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	60f8      	str	r0, [r7, #12]
 800bcfe:	60b9      	str	r1, [r7, #8]
 800bd00:	4613      	mov	r3, r2
 800bd02:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bd04:	2301      	movs	r3, #1
 800bd06:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	789b      	ldrb	r3, [r3, #2]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d002      	beq.n	800bd16 <USBH_CtlReq+0x20>
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d01d      	beq.n	800bd50 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800bd14:	e043      	b.n	800bd9e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	88fa      	ldrh	r2, [r7, #6]
 800bd20:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2201      	movs	r2, #1
 800bd26:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2203      	movs	r2, #3
 800bd36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd46:	2200      	movs	r2, #0
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f000 fc4d 	bl	800c5e8 <osMessagePut>
      break;
 800bd4e:	e026      	b.n	800bd9e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 f829 	bl	800bda8 <USBH_HandleControl>
 800bd56:	4603      	mov	r3, r0
 800bd58:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d002      	beq.n	800bd66 <USBH_CtlReq+0x70>
 800bd60:	7dfb      	ldrb	r3, [r7, #23]
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	d106      	bne.n	800bd74 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	761a      	strb	r2, [r3, #24]
 800bd72:	e005      	b.n	800bd80 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800bd74:	7dfb      	ldrb	r3, [r7, #23]
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d102      	bne.n	800bd80 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2203      	movs	r2, #3
 800bd84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd94:	2200      	movs	r2, #0
 800bd96:	4619      	mov	r1, r3
 800bd98:	f000 fc26 	bl	800c5e8 <osMessagePut>
      break;
 800bd9c:	bf00      	nop
  }
  return status;
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af02      	add	r7, sp, #8
 800bdae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	7e1b      	ldrb	r3, [r3, #24]
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	2b0a      	cmp	r3, #10
 800bdc0:	f200 8229 	bhi.w	800c216 <USBH_HandleControl+0x46e>
 800bdc4:	a201      	add	r2, pc, #4	; (adr r2, 800bdcc <USBH_HandleControl+0x24>)
 800bdc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdca:	bf00      	nop
 800bdcc:	0800bdf9 	.word	0x0800bdf9
 800bdd0:	0800be13 	.word	0x0800be13
 800bdd4:	0800beb5 	.word	0x0800beb5
 800bdd8:	0800bedb 	.word	0x0800bedb
 800bddc:	0800bf67 	.word	0x0800bf67
 800bde0:	0800bf91 	.word	0x0800bf91
 800bde4:	0800c053 	.word	0x0800c053
 800bde8:	0800c075 	.word	0x0800c075
 800bdec:	0800c107 	.word	0x0800c107
 800bdf0:	0800c12d 	.word	0x0800c12d
 800bdf4:	0800c1bf 	.word	0x0800c1bf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f103 0110 	add.w	r1, r3, #16
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	795b      	ldrb	r3, [r3, #5]
 800be02:	461a      	mov	r2, r3
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fa17 	bl	800c238 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2202      	movs	r2, #2
 800be0e:	761a      	strb	r2, [r3, #24]
      break;
 800be10:	e20c      	b.n	800c22c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	795b      	ldrb	r3, [r3, #5]
 800be16:	4619      	mov	r1, r3
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f003 f897 	bl	800ef4c <USBH_LL_GetURBState>
 800be1e:	4603      	mov	r3, r0
 800be20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800be22:	7bbb      	ldrb	r3, [r7, #14]
 800be24:	2b01      	cmp	r3, #1
 800be26:	d12c      	bne.n	800be82 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	7c1b      	ldrb	r3, [r3, #16]
 800be2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	8adb      	ldrh	r3, [r3, #22]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800be3a:	7b7b      	ldrb	r3, [r7, #13]
 800be3c:	2b80      	cmp	r3, #128	; 0x80
 800be3e:	d103      	bne.n	800be48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2203      	movs	r2, #3
 800be44:	761a      	strb	r2, [r3, #24]
 800be46:	e00d      	b.n	800be64 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2205      	movs	r2, #5
 800be4c:	761a      	strb	r2, [r3, #24]
 800be4e:	e009      	b.n	800be64 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800be50:	7b7b      	ldrb	r3, [r7, #13]
 800be52:	2b80      	cmp	r3, #128	; 0x80
 800be54:	d103      	bne.n	800be5e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2209      	movs	r2, #9
 800be5a:	761a      	strb	r2, [r3, #24]
 800be5c:	e002      	b.n	800be64 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2207      	movs	r2, #7
 800be62:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2203      	movs	r2, #3
 800be68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800be78:	2200      	movs	r2, #0
 800be7a:	4619      	mov	r1, r3
 800be7c:	f000 fbb4 	bl	800c5e8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800be80:	e1cb      	b.n	800c21a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	2b04      	cmp	r3, #4
 800be86:	d003      	beq.n	800be90 <USBH_HandleControl+0xe8>
 800be88:	7bbb      	ldrb	r3, [r7, #14]
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	f040 81c5 	bne.w	800c21a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	220b      	movs	r2, #11
 800be94:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2203      	movs	r2, #3
 800be9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800beaa:	2200      	movs	r2, #0
 800beac:	4619      	mov	r1, r3
 800beae:	f000 fb9b 	bl	800c5e8 <osMessagePut>
      break;
 800beb2:	e1b2      	b.n	800c21a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800beba:	b29a      	uxth	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6899      	ldr	r1, [r3, #8]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	899a      	ldrh	r2, [r3, #12]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	791b      	ldrb	r3, [r3, #4]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f9f2 	bl	800c2b6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2204      	movs	r2, #4
 800bed6:	761a      	strb	r2, [r3, #24]
      break;
 800bed8:	e1a8      	b.n	800c22c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	791b      	ldrb	r3, [r3, #4]
 800bede:	4619      	mov	r1, r3
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f003 f833 	bl	800ef4c <USBH_LL_GetURBState>
 800bee6:	4603      	mov	r3, r0
 800bee8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800beea:	7bbb      	ldrb	r3, [r7, #14]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d110      	bne.n	800bf12 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2209      	movs	r2, #9
 800bef4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2203      	movs	r2, #3
 800befa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	f000 fb6b 	bl	800c5e8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bf12:	7bbb      	ldrb	r3, [r7, #14]
 800bf14:	2b05      	cmp	r3, #5
 800bf16:	d110      	bne.n	800bf3a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2203      	movs	r2, #3
 800bf20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf30:	2200      	movs	r2, #0
 800bf32:	4619      	mov	r1, r3
 800bf34:	f000 fb58 	bl	800c5e8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bf38:	e171      	b.n	800c21e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800bf3a:	7bbb      	ldrb	r3, [r7, #14]
 800bf3c:	2b04      	cmp	r3, #4
 800bf3e:	f040 816e 	bne.w	800c21e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	220b      	movs	r2, #11
 800bf46:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2203      	movs	r2, #3
 800bf4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	4619      	mov	r1, r3
 800bf60:	f000 fb42 	bl	800c5e8 <osMessagePut>
      break;
 800bf64:	e15b      	b.n	800c21e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6899      	ldr	r1, [r3, #8]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	899a      	ldrh	r2, [r3, #12]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	795b      	ldrb	r3, [r3, #5]
 800bf72:	2001      	movs	r0, #1
 800bf74:	9000      	str	r0, [sp, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f978 	bl	800c26c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2206      	movs	r2, #6
 800bf8c:	761a      	strb	r2, [r3, #24]
      break;
 800bf8e:	e14d      	b.n	800c22c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	795b      	ldrb	r3, [r3, #5]
 800bf94:	4619      	mov	r1, r3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f002 ffd8 	bl	800ef4c <USBH_LL_GetURBState>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bfa0:	7bbb      	ldrb	r3, [r7, #14]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d111      	bne.n	800bfca <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2207      	movs	r2, #7
 800bfaa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2203      	movs	r2, #3
 800bfb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	f000 fb10 	bl	800c5e8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bfc8:	e12b      	b.n	800c222 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800bfca:	7bbb      	ldrb	r3, [r7, #14]
 800bfcc:	2b05      	cmp	r3, #5
 800bfce:	d113      	bne.n	800bff8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	220c      	movs	r2, #12
 800bfd4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2203      	movs	r2, #3
 800bfde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bfee:	2200      	movs	r2, #0
 800bff0:	4619      	mov	r1, r3
 800bff2:	f000 faf9 	bl	800c5e8 <osMessagePut>
      break;
 800bff6:	e114      	b.n	800c222 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bff8:	7bbb      	ldrb	r3, [r7, #14]
 800bffa:	2b02      	cmp	r3, #2
 800bffc:	d111      	bne.n	800c022 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2205      	movs	r2, #5
 800c002:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2203      	movs	r2, #3
 800c008:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c018:	2200      	movs	r2, #0
 800c01a:	4619      	mov	r1, r3
 800c01c:	f000 fae4 	bl	800c5e8 <osMessagePut>
      break;
 800c020:	e0ff      	b.n	800c222 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800c022:	7bbb      	ldrb	r3, [r7, #14]
 800c024:	2b04      	cmp	r3, #4
 800c026:	f040 80fc 	bne.w	800c222 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	220b      	movs	r2, #11
 800c02e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c030:	2302      	movs	r3, #2
 800c032:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2203      	movs	r2, #3
 800c038:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c048:	2200      	movs	r2, #0
 800c04a:	4619      	mov	r1, r3
 800c04c:	f000 facc 	bl	800c5e8 <osMessagePut>
      break;
 800c050:	e0e7      	b.n	800c222 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	791b      	ldrb	r3, [r3, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	2100      	movs	r1, #0
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f92b 	bl	800c2b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c066:	b29a      	uxth	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2208      	movs	r2, #8
 800c070:	761a      	strb	r2, [r3, #24]

      break;
 800c072:	e0db      	b.n	800c22c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	791b      	ldrb	r3, [r3, #4]
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f002 ff66 	bl	800ef4c <USBH_LL_GetURBState>
 800c080:	4603      	mov	r3, r0
 800c082:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d113      	bne.n	800c0b2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	220d      	movs	r2, #13
 800c08e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2203      	movs	r2, #3
 800c098:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	f000 fa9c 	bl	800c5e8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c0b0:	e0b9      	b.n	800c226 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	2b04      	cmp	r3, #4
 800c0b6:	d111      	bne.n	800c0dc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	220b      	movs	r2, #11
 800c0bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2203      	movs	r2, #3
 800c0c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f000 fa87 	bl	800c5e8 <osMessagePut>
      break;
 800c0da:	e0a4      	b.n	800c226 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800c0dc:	7bbb      	ldrb	r3, [r7, #14]
 800c0de:	2b05      	cmp	r3, #5
 800c0e0:	f040 80a1 	bne.w	800c226 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2203      	movs	r2, #3
 800c0ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	4619      	mov	r1, r3
 800c100:	f000 fa72 	bl	800c5e8 <osMessagePut>
      break;
 800c104:	e08f      	b.n	800c226 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	795b      	ldrb	r3, [r3, #5]
 800c10a:	2201      	movs	r2, #1
 800c10c:	9200      	str	r2, [sp, #0]
 800c10e:	2200      	movs	r2, #0
 800c110:	2100      	movs	r1, #0
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f8aa 	bl	800c26c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c11e:	b29a      	uxth	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	220a      	movs	r2, #10
 800c128:	761a      	strb	r2, [r3, #24]
      break;
 800c12a:	e07f      	b.n	800c22c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	795b      	ldrb	r3, [r3, #5]
 800c130:	4619      	mov	r1, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f002 ff0a 	bl	800ef4c <USBH_LL_GetURBState>
 800c138:	4603      	mov	r3, r0
 800c13a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d113      	bne.n	800c16a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	220d      	movs	r2, #13
 800c14a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2203      	movs	r2, #3
 800c150:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c160:	2200      	movs	r2, #0
 800c162:	4619      	mov	r1, r3
 800c164:	f000 fa40 	bl	800c5e8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c168:	e05f      	b.n	800c22a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d111      	bne.n	800c194 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2209      	movs	r2, #9
 800c174:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2203      	movs	r2, #3
 800c17a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c18a:	2200      	movs	r2, #0
 800c18c:	4619      	mov	r1, r3
 800c18e:	f000 fa2b 	bl	800c5e8 <osMessagePut>
      break;
 800c192:	e04a      	b.n	800c22a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800c194:	7bbb      	ldrb	r3, [r7, #14]
 800c196:	2b04      	cmp	r3, #4
 800c198:	d147      	bne.n	800c22a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	220b      	movs	r2, #11
 800c19e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2203      	movs	r2, #3
 800c1a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	f000 fa16 	bl	800c5e8 <osMessagePut>
      break;
 800c1bc:	e035      	b.n	800c22a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	7e5b      	ldrb	r3, [r3, #25]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	765a      	strb	r2, [r3, #25]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	7e5b      	ldrb	r3, [r3, #25]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d806      	bhi.n	800c1e0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c1de:	e025      	b.n	800c22c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c1e6:	2106      	movs	r1, #6
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	795b      	ldrb	r3, [r3, #5]
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f90d 	bl	800c418 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	791b      	ldrb	r3, [r3, #4]
 800c202:	4619      	mov	r1, r3
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f907 	bl	800c418 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c210:	2302      	movs	r3, #2
 800c212:	73fb      	strb	r3, [r7, #15]
      break;
 800c214:	e00a      	b.n	800c22c <USBH_HandleControl+0x484>

    default:
      break;
 800c216:	bf00      	nop
 800c218:	e008      	b.n	800c22c <USBH_HandleControl+0x484>
      break;
 800c21a:	bf00      	nop
 800c21c:	e006      	b.n	800c22c <USBH_HandleControl+0x484>
      break;
 800c21e:	bf00      	nop
 800c220:	e004      	b.n	800c22c <USBH_HandleControl+0x484>
      break;
 800c222:	bf00      	nop
 800c224:	e002      	b.n	800c22c <USBH_HandleControl+0x484>
      break;
 800c226:	bf00      	nop
 800c228:	e000      	b.n	800c22c <USBH_HandleControl+0x484>
      break;
 800c22a:	bf00      	nop
  }

  return status;
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop

0800c238 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b088      	sub	sp, #32
 800c23c:	af04      	add	r7, sp, #16
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	4613      	mov	r3, r2
 800c244:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c246:	79f9      	ldrb	r1, [r7, #7]
 800c248:	2300      	movs	r3, #0
 800c24a:	9303      	str	r3, [sp, #12]
 800c24c:	2308      	movs	r3, #8
 800c24e:	9302      	str	r3, [sp, #8]
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	2300      	movs	r3, #0
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	2300      	movs	r3, #0
 800c25a:	2200      	movs	r2, #0
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f002 fe44 	bl	800eeea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af04      	add	r7, sp, #16
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	4611      	mov	r1, r2
 800c278:	461a      	mov	r2, r3
 800c27a:	460b      	mov	r3, r1
 800c27c:	80fb      	strh	r3, [r7, #6]
 800c27e:	4613      	mov	r3, r2
 800c280:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d001      	beq.n	800c290 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c28c:	2300      	movs	r3, #0
 800c28e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c290:	7979      	ldrb	r1, [r7, #5]
 800c292:	7e3b      	ldrb	r3, [r7, #24]
 800c294:	9303      	str	r3, [sp, #12]
 800c296:	88fb      	ldrh	r3, [r7, #6]
 800c298:	9302      	str	r3, [sp, #8]
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	9301      	str	r3, [sp, #4]
 800c29e:	2301      	movs	r3, #1
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f002 fe1f 	bl	800eeea <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b088      	sub	sp, #32
 800c2ba:	af04      	add	r7, sp, #16
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	80fb      	strh	r3, [r7, #6]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c2cc:	7979      	ldrb	r1, [r7, #5]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	9303      	str	r3, [sp, #12]
 800c2d2:	88fb      	ldrh	r3, [r7, #6]
 800c2d4:	9302      	str	r3, [sp, #8]
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	2301      	movs	r3, #1
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	2300      	movs	r3, #0
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f002 fe01 	bl	800eeea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c2e8:	2300      	movs	r3, #0

}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b088      	sub	sp, #32
 800c2f6:	af04      	add	r7, sp, #16
 800c2f8:	60f8      	str	r0, [r7, #12]
 800c2fa:	60b9      	str	r1, [r7, #8]
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	461a      	mov	r2, r3
 800c300:	460b      	mov	r3, r1
 800c302:	80fb      	strh	r3, [r7, #6]
 800c304:	4613      	mov	r3, r2
 800c306:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c312:	2300      	movs	r3, #0
 800c314:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c316:	7979      	ldrb	r1, [r7, #5]
 800c318:	7e3b      	ldrb	r3, [r7, #24]
 800c31a:	9303      	str	r3, [sp, #12]
 800c31c:	88fb      	ldrh	r3, [r7, #6]
 800c31e:	9302      	str	r3, [sp, #8]
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	9301      	str	r3, [sp, #4]
 800c324:	2301      	movs	r3, #1
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	2302      	movs	r3, #2
 800c32a:	2200      	movs	r2, #0
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f002 fddc 	bl	800eeea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b088      	sub	sp, #32
 800c340:	af04      	add	r7, sp, #16
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	4611      	mov	r1, r2
 800c348:	461a      	mov	r2, r3
 800c34a:	460b      	mov	r3, r1
 800c34c:	80fb      	strh	r3, [r7, #6]
 800c34e:	4613      	mov	r3, r2
 800c350:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c352:	7979      	ldrb	r1, [r7, #5]
 800c354:	2300      	movs	r3, #0
 800c356:	9303      	str	r3, [sp, #12]
 800c358:	88fb      	ldrh	r3, [r7, #6]
 800c35a:	9302      	str	r3, [sp, #8]
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	9301      	str	r3, [sp, #4]
 800c360:	2301      	movs	r3, #1
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	2302      	movs	r3, #2
 800c366:	2201      	movs	r2, #1
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f002 fdbe 	bl	800eeea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af04      	add	r7, sp, #16
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	4608      	mov	r0, r1
 800c382:	4611      	mov	r1, r2
 800c384:	461a      	mov	r2, r3
 800c386:	4603      	mov	r3, r0
 800c388:	70fb      	strb	r3, [r7, #3]
 800c38a:	460b      	mov	r3, r1
 800c38c:	70bb      	strb	r3, [r7, #2]
 800c38e:	4613      	mov	r3, r2
 800c390:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c392:	7878      	ldrb	r0, [r7, #1]
 800c394:	78ba      	ldrb	r2, [r7, #2]
 800c396:	78f9      	ldrb	r1, [r7, #3]
 800c398:	8b3b      	ldrh	r3, [r7, #24]
 800c39a:	9302      	str	r3, [sp, #8]
 800c39c:	7d3b      	ldrb	r3, [r7, #20]
 800c39e:	9301      	str	r3, [sp, #4]
 800c3a0:	7c3b      	ldrb	r3, [r7, #16]
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f002 fd51 	bl	800ee4e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b082      	sub	sp, #8
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	460b      	mov	r3, r1
 800c3c0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c3c2:	78fb      	ldrb	r3, [r7, #3]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f002 fd70 	bl	800eeac <USBH_LL_ClosePipe>

  return USBH_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b084      	sub	sp, #16
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	460b      	mov	r3, r1
 800c3e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f836 	bl	800c454 <USBH_GetFreePipe>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c3ec:	89fb      	ldrh	r3, [r7, #14]
 800c3ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d00a      	beq.n	800c40c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c3f6:	78fa      	ldrb	r2, [r7, #3]
 800c3f8:	89fb      	ldrh	r3, [r7, #14]
 800c3fa:	f003 030f 	and.w	r3, r3, #15
 800c3fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c402:	6879      	ldr	r1, [r7, #4]
 800c404:	33e0      	adds	r3, #224	; 0xe0
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	440b      	add	r3, r1
 800c40a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c40c:	89fb      	ldrh	r3, [r7, #14]
 800c40e:	b2db      	uxtb	r3, r3
}
 800c410:	4618      	mov	r0, r3
 800c412:	3710      	adds	r7, #16
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	2b0a      	cmp	r3, #10
 800c428:	d80d      	bhi.n	800c446 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c42a:	78fb      	ldrb	r3, [r7, #3]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	33e0      	adds	r3, #224	; 0xe0
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4413      	add	r3, r2
 800c434:	685a      	ldr	r2, [r3, #4]
 800c436:	78fb      	ldrb	r3, [r7, #3]
 800c438:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c43c:	6879      	ldr	r1, [r7, #4]
 800c43e:	33e0      	adds	r3, #224	; 0xe0
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	440b      	add	r3, r1
 800c444:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c45c:	2300      	movs	r3, #0
 800c45e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c460:	2300      	movs	r3, #0
 800c462:	73fb      	strb	r3, [r7, #15]
 800c464:	e00f      	b.n	800c486 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	33e0      	adds	r3, #224	; 0xe0
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4413      	add	r3, r2
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c476:	2b00      	cmp	r3, #0
 800c478:	d102      	bne.n	800c480 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c47a:	7bfb      	ldrb	r3, [r7, #15]
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	e007      	b.n	800c490 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c480:	7bfb      	ldrb	r3, [r7, #15]
 800c482:	3301      	adds	r3, #1
 800c484:	73fb      	strb	r3, [r7, #15]
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	2b0a      	cmp	r3, #10
 800c48a:	d9ec      	bls.n	800c466 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c48c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c490:	4618      	mov	r0, r3
 800c492:	3714      	adds	r7, #20
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c4aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4ae:	2b84      	cmp	r3, #132	; 0x84
 800c4b0:	d005      	beq.n	800c4be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c4b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	3303      	adds	r3, #3
 800c4bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c4be:	68fb      	ldr	r3, [r7, #12]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3714      	adds	r7, #20
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4d2:	f3ef 8305 	mrs	r3, IPSR
 800c4d6:	607b      	str	r3, [r7, #4]
  return(result);
 800c4d8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	bf14      	ite	ne
 800c4de:	2301      	movne	r3, #1
 800c4e0:	2300      	moveq	r3, #0
 800c4e2:	b2db      	uxtb	r3, r3
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c4f4:	f001 f976 	bl	800d7e4 <vTaskStartScheduler>
  
  return osOK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c4fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c500:	b089      	sub	sp, #36	; 0x24
 800c502:	af04      	add	r7, sp, #16
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	695b      	ldr	r3, [r3, #20]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d020      	beq.n	800c552 <osThreadCreate+0x54>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	699b      	ldr	r3, [r3, #24]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d01c      	beq.n	800c552 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	685c      	ldr	r4, [r3, #4]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681d      	ldr	r5, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	691e      	ldr	r6, [r3, #16]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7ff ffb6 	bl	800c49c <makeFreeRtosPriority>
 800c530:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c53a:	9202      	str	r2, [sp, #8]
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	9100      	str	r1, [sp, #0]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	4632      	mov	r2, r6
 800c544:	4629      	mov	r1, r5
 800c546:	4620      	mov	r0, r4
 800c548:	f000 fefc 	bl	800d344 <xTaskCreateStatic>
 800c54c:	4603      	mov	r3, r0
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	e01c      	b.n	800c58c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	685c      	ldr	r4, [r3, #4]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c55e:	b29e      	uxth	r6, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff ff98 	bl	800c49c <makeFreeRtosPriority>
 800c56c:	4602      	mov	r2, r0
 800c56e:	f107 030c 	add.w	r3, r7, #12
 800c572:	9301      	str	r3, [sp, #4]
 800c574:	9200      	str	r2, [sp, #0]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	4632      	mov	r2, r6
 800c57a:	4629      	mov	r1, r5
 800c57c:	4620      	mov	r0, r4
 800c57e:	f000 ff3e 	bl	800d3fe <xTaskCreate>
 800c582:	4603      	mov	r3, r0
 800c584:	2b01      	cmp	r3, #1
 800c586:	d001      	beq.n	800c58c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c588:	2300      	movs	r3, #0
 800c58a:	e000      	b.n	800c58e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c58c:	68fb      	ldr	r3, [r7, #12]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3714      	adds	r7, #20
 800c592:	46bd      	mov	sp, r7
 800c594:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c596 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c596:	b590      	push	{r4, r7, lr}
 800c598:	b085      	sub	sp, #20
 800c59a:	af02      	add	r7, sp, #8
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d011      	beq.n	800c5cc <osMessageCreate+0x36>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00d      	beq.n	800c5cc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6818      	ldr	r0, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6859      	ldr	r1, [r3, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689a      	ldr	r2, [r3, #8]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	2400      	movs	r4, #0
 800c5c2:	9400      	str	r4, [sp, #0]
 800c5c4:	f000 f9e0 	bl	800c988 <xQueueGenericCreateStatic>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	e008      	b.n	800c5de <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6818      	ldr	r0, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	f000 fa4e 	bl	800ca78 <xQueueGenericCreate>
 800c5dc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd90      	pop	{r4, r7, pc}
	...

0800c5e8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b086      	sub	sp, #24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d101      	bne.n	800c606 <osMessagePut+0x1e>
    ticks = 1;
 800c602:	2301      	movs	r3, #1
 800c604:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c606:	f7ff ff61 	bl	800c4cc <inHandlerMode>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d018      	beq.n	800c642 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c610:	f107 0210 	add.w	r2, r7, #16
 800c614:	f107 0108 	add.w	r1, r7, #8
 800c618:	2300      	movs	r3, #0
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f000 fb8a 	bl	800cd34 <xQueueGenericSendFromISR>
 800c620:	4603      	mov	r3, r0
 800c622:	2b01      	cmp	r3, #1
 800c624:	d001      	beq.n	800c62a <osMessagePut+0x42>
      return osErrorOS;
 800c626:	23ff      	movs	r3, #255	; 0xff
 800c628:	e018      	b.n	800c65c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d014      	beq.n	800c65a <osMessagePut+0x72>
 800c630:	4b0c      	ldr	r3, [pc, #48]	; (800c664 <osMessagePut+0x7c>)
 800c632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	e00b      	b.n	800c65a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c642:	f107 0108 	add.w	r1, r7, #8
 800c646:	2300      	movs	r3, #0
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f000 fa74 	bl	800cb38 <xQueueGenericSend>
 800c650:	4603      	mov	r3, r0
 800c652:	2b01      	cmp	r3, #1
 800c654:	d001      	beq.n	800c65a <osMessagePut+0x72>
      return osErrorOS;
 800c656:	23ff      	movs	r3, #255	; 0xff
 800c658:	e000      	b.n	800c65c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	e000ed04 	.word	0xe000ed04

0800c668 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c668:	b590      	push	{r4, r7, lr}
 800c66a:	b08b      	sub	sp, #44	; 0x2c
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10a      	bne.n	800c698 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c682:	2380      	movs	r3, #128	; 0x80
 800c684:	617b      	str	r3, [r7, #20]
    return event;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	461c      	mov	r4, r3
 800c68a:	f107 0314 	add.w	r3, r7, #20
 800c68e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c696:	e054      	b.n	800c742 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c698:	2300      	movs	r3, #0
 800c69a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a6:	d103      	bne.n	800c6b0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ae:	e009      	b.n	800c6c4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d006      	beq.n	800c6c4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <osMessageGet+0x5c>
      ticks = 1;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c6c4:	f7ff ff02 	bl	800c4cc <inHandlerMode>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d01c      	beq.n	800c708 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c6ce:	f107 0220 	add.w	r2, r7, #32
 800c6d2:	f107 0314 	add.w	r3, r7, #20
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	4619      	mov	r1, r3
 800c6da:	68b8      	ldr	r0, [r7, #8]
 800c6dc:	f000 fca2 	bl	800d024 <xQueueReceiveFromISR>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d102      	bne.n	800c6ec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c6e6:	2310      	movs	r3, #16
 800c6e8:	617b      	str	r3, [r7, #20]
 800c6ea:	e001      	b.n	800c6f0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d01d      	beq.n	800c732 <osMessageGet+0xca>
 800c6f6:	4b15      	ldr	r3, [pc, #84]	; (800c74c <osMessageGet+0xe4>)
 800c6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	e014      	b.n	800c732 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c708:	f107 0314 	add.w	r3, r7, #20
 800c70c:	3304      	adds	r3, #4
 800c70e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c710:	4619      	mov	r1, r3
 800c712:	68b8      	ldr	r0, [r7, #8]
 800c714:	f000 fba6 	bl	800ce64 <xQueueReceive>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d102      	bne.n	800c724 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c71e:	2310      	movs	r3, #16
 800c720:	617b      	str	r3, [r7, #20]
 800c722:	e006      	b.n	800c732 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <osMessageGet+0xc6>
 800c72a:	2300      	movs	r3, #0
 800c72c:	e000      	b.n	800c730 <osMessageGet+0xc8>
 800c72e:	2340      	movs	r3, #64	; 0x40
 800c730:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	461c      	mov	r4, r3
 800c736:	f107 0314 	add.w	r3, r7, #20
 800c73a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c73e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	372c      	adds	r7, #44	; 0x2c
 800c746:	46bd      	mov	sp, r7
 800c748:	bd90      	pop	{r4, r7, pc}
 800c74a:	bf00      	nop
 800c74c:	e000ed04 	.word	0xe000ed04

0800c750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f103 0208 	add.w	r2, r3, #8
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f04f 32ff 	mov.w	r2, #4294967295
 800c768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f103 0208 	add.w	r2, r3, #8
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f103 0208 	add.w	r2, r3, #8
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c784:	bf00      	nop
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c79e:	bf00      	nop
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7aa:	b480      	push	{r7}
 800c7ac:	b085      	sub	sp, #20
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	689a      	ldr	r2, [r3, #8]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	601a      	str	r2, [r3, #0]
}
 800c7e6:	bf00      	nop
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b085      	sub	sp, #20
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c808:	d103      	bne.n	800c812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	60fb      	str	r3, [r7, #12]
 800c810:	e00c      	b.n	800c82c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3308      	adds	r3, #8
 800c816:	60fb      	str	r3, [r7, #12]
 800c818:	e002      	b.n	800c820 <vListInsert+0x2e>
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	60fb      	str	r3, [r7, #12]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d2f6      	bcs.n	800c81a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	601a      	str	r2, [r3, #0]
}
 800c858:	bf00      	nop
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	6892      	ldr	r2, [r2, #8]
 800c87a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	6852      	ldr	r2, [r2, #4]
 800c884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d103      	bne.n	800c898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	689a      	ldr	r2, [r3, #8]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	1e5a      	subs	r2, r3, #1
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3714      	adds	r7, #20
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10a      	bne.n	800c8e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d0:	f383 8811 	msr	BASEPRI, r3
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8de:	bf00      	nop
 800c8e0:	e7fe      	b.n	800c8e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c8e2:	f001 fdd7 	bl	800e494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ee:	68f9      	ldr	r1, [r7, #12]
 800c8f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8f2:	fb01 f303 	mul.w	r3, r1, r3
 800c8f6:	441a      	add	r2, r3
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c912:	3b01      	subs	r3, #1
 800c914:	68f9      	ldr	r1, [r7, #12]
 800c916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c918:	fb01 f303 	mul.w	r3, r1, r3
 800c91c:	441a      	add	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	22ff      	movs	r2, #255	; 0xff
 800c926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	22ff      	movs	r2, #255	; 0xff
 800c92e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d114      	bne.n	800c962 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d01a      	beq.n	800c976 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	3310      	adds	r3, #16
 800c944:	4618      	mov	r0, r3
 800c946:	f001 f9b3 	bl	800dcb0 <xTaskRemoveFromEventList>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d012      	beq.n	800c976 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c950:	4b0c      	ldr	r3, [pc, #48]	; (800c984 <xQueueGenericReset+0xcc>)
 800c952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c956:	601a      	str	r2, [r3, #0]
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	e009      	b.n	800c976 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3310      	adds	r3, #16
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff fef2 	bl	800c750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3324      	adds	r3, #36	; 0x24
 800c970:	4618      	mov	r0, r3
 800c972:	f7ff feed 	bl	800c750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c976:	f001 fdbd 	bl	800e4f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c97a:	2301      	movs	r3, #1
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	e000ed04 	.word	0xe000ed04

0800c988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08e      	sub	sp, #56	; 0x38
 800c98c:	af02      	add	r7, sp, #8
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10a      	bne.n	800c9b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10a      	bne.n	800c9ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9ca:	bf00      	nop
 800c9cc:	e7fe      	b.n	800c9cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d002      	beq.n	800c9da <xQueueGenericCreateStatic+0x52>
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <xQueueGenericCreateStatic+0x56>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e000      	b.n	800c9e0 <xQueueGenericCreateStatic+0x58>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10a      	bne.n	800c9fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	623b      	str	r3, [r7, #32]
}
 800c9f6:	bf00      	nop
 800c9f8:	e7fe      	b.n	800c9f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d102      	bne.n	800ca06 <xQueueGenericCreateStatic+0x7e>
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d101      	bne.n	800ca0a <xQueueGenericCreateStatic+0x82>
 800ca06:	2301      	movs	r3, #1
 800ca08:	e000      	b.n	800ca0c <xQueueGenericCreateStatic+0x84>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10a      	bne.n	800ca26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	61fb      	str	r3, [r7, #28]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca26:	2348      	movs	r3, #72	; 0x48
 800ca28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2b48      	cmp	r3, #72	; 0x48
 800ca2e:	d00a      	beq.n	800ca46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	61bb      	str	r3, [r7, #24]
}
 800ca42:	bf00      	nop
 800ca44:	e7fe      	b.n	800ca44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00d      	beq.n	800ca6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca54:	2201      	movs	r2, #1
 800ca56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	4613      	mov	r3, r2
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	68b9      	ldr	r1, [r7, #8]
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f000 f845 	bl	800caf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3730      	adds	r7, #48	; 0x30
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b08a      	sub	sp, #40	; 0x28
 800ca7c:	af02      	add	r7, sp, #8
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	4613      	mov	r3, r2
 800ca84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10a      	bne.n	800caa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ca8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca90:	f383 8811 	msr	BASEPRI, r3
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	613b      	str	r3, [r7, #16]
}
 800ca9e:	bf00      	nop
 800caa0:	e7fe      	b.n	800caa0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d102      	bne.n	800caae <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800caa8:	2300      	movs	r3, #0
 800caaa:	61fb      	str	r3, [r7, #28]
 800caac:	e004      	b.n	800cab8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	fb02 f303 	mul.w	r3, r2, r3
 800cab6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	3348      	adds	r3, #72	; 0x48
 800cabc:	4618      	mov	r0, r3
 800cabe:	f001 fe0b 	bl	800e6d8 <pvPortMalloc>
 800cac2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d011      	beq.n	800caee <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	3348      	adds	r3, #72	; 0x48
 800cad2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cadc:	79fa      	ldrb	r2, [r7, #7]
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	4613      	mov	r3, r2
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	68b9      	ldr	r1, [r7, #8]
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f000 f805 	bl	800caf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800caee:	69bb      	ldr	r3, [r7, #24]
	}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3720      	adds	r7, #32
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
 800cb04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d103      	bne.n	800cb14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	69ba      	ldr	r2, [r7, #24]
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	e002      	b.n	800cb1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb26:	2101      	movs	r1, #1
 800cb28:	69b8      	ldr	r0, [r7, #24]
 800cb2a:	f7ff fec5 	bl	800c8b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb2e:	bf00      	nop
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
	...

0800cb38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b08e      	sub	sp, #56	; 0x38
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb46:	2300      	movs	r3, #0
 800cb48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d10a      	bne.n	800cb6a <xQueueGenericSend+0x32>
	__asm volatile
 800cb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb58:	f383 8811 	msr	BASEPRI, r3
 800cb5c:	f3bf 8f6f 	isb	sy
 800cb60:	f3bf 8f4f 	dsb	sy
 800cb64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb66:	bf00      	nop
 800cb68:	e7fe      	b.n	800cb68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d103      	bne.n	800cb78 <xQueueGenericSend+0x40>
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d101      	bne.n	800cb7c <xQueueGenericSend+0x44>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e000      	b.n	800cb7e <xQueueGenericSend+0x46>
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10a      	bne.n	800cb98 <xQueueGenericSend+0x60>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d103      	bne.n	800cba6 <xQueueGenericSend+0x6e>
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d101      	bne.n	800cbaa <xQueueGenericSend+0x72>
 800cba6:	2301      	movs	r3, #1
 800cba8:	e000      	b.n	800cbac <xQueueGenericSend+0x74>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10a      	bne.n	800cbc6 <xQueueGenericSend+0x8e>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	623b      	str	r3, [r7, #32]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbc6:	f001 fa31 	bl	800e02c <xTaskGetSchedulerState>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <xQueueGenericSend+0x9e>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <xQueueGenericSend+0xa2>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e000      	b.n	800cbdc <xQueueGenericSend+0xa4>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10a      	bne.n	800cbf6 <xQueueGenericSend+0xbe>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	61fb      	str	r3, [r7, #28]
}
 800cbf2:	bf00      	nop
 800cbf4:	e7fe      	b.n	800cbf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbf6:	f001 fc4d 	bl	800e494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d302      	bcc.n	800cc0c <xQueueGenericSend+0xd4>
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d129      	bne.n	800cc60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	68b9      	ldr	r1, [r7, #8]
 800cc10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc12:	f000 fa87 	bl	800d124 <prvCopyDataToQueue>
 800cc16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d010      	beq.n	800cc42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	3324      	adds	r3, #36	; 0x24
 800cc24:	4618      	mov	r0, r3
 800cc26:	f001 f843 	bl	800dcb0 <xTaskRemoveFromEventList>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d013      	beq.n	800cc58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc30:	4b3f      	ldr	r3, [pc, #252]	; (800cd30 <xQueueGenericSend+0x1f8>)
 800cc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	e00a      	b.n	800cc58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d007      	beq.n	800cc58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc48:	4b39      	ldr	r3, [pc, #228]	; (800cd30 <xQueueGenericSend+0x1f8>)
 800cc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc4e:	601a      	str	r2, [r3, #0]
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc58:	f001 fc4c 	bl	800e4f4 <vPortExitCritical>
				return pdPASS;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e063      	b.n	800cd28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d103      	bne.n	800cc6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc66:	f001 fc45 	bl	800e4f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	e05c      	b.n	800cd28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d106      	bne.n	800cc82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc74:	f107 0314 	add.w	r3, r7, #20
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f001 f87b 	bl	800dd74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc82:	f001 fc37 	bl	800e4f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc86:	f000 fe0d 	bl	800d8a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc8a:	f001 fc03 	bl	800e494 <vPortEnterCritical>
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc94:	b25b      	sxtb	r3, r3
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9a:	d103      	bne.n	800cca4 <xQueueGenericSend+0x16c>
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccaa:	b25b      	sxtb	r3, r3
 800ccac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb0:	d103      	bne.n	800ccba <xQueueGenericSend+0x182>
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccba:	f001 fc1b 	bl	800e4f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccbe:	1d3a      	adds	r2, r7, #4
 800ccc0:	f107 0314 	add.w	r3, r7, #20
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f001 f86a 	bl	800dda0 <xTaskCheckForTimeOut>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d124      	bne.n	800cd1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccd4:	f000 fb1e 	bl	800d314 <prvIsQueueFull>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d018      	beq.n	800cd10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	3310      	adds	r3, #16
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	4611      	mov	r1, r2
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 ffbe 	bl	800dc68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ccec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccee:	f000 faa9 	bl	800d244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccf2:	f000 fde5 	bl	800d8c0 <xTaskResumeAll>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f47f af7c 	bne.w	800cbf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ccfe:	4b0c      	ldr	r3, [pc, #48]	; (800cd30 <xQueueGenericSend+0x1f8>)
 800cd00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	f3bf 8f6f 	isb	sy
 800cd0e:	e772      	b.n	800cbf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd12:	f000 fa97 	bl	800d244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd16:	f000 fdd3 	bl	800d8c0 <xTaskResumeAll>
 800cd1a:	e76c      	b.n	800cbf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd1e:	f000 fa91 	bl	800d244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd22:	f000 fdcd 	bl	800d8c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3738      	adds	r7, #56	; 0x38
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	e000ed04 	.word	0xe000ed04

0800cd34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08e      	sub	sp, #56	; 0x38
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
 800cd40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d10a      	bne.n	800cd62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd5e:	bf00      	nop
 800cd60:	e7fe      	b.n	800cd60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d103      	bne.n	800cd70 <xQueueGenericSendFromISR+0x3c>
 800cd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <xQueueGenericSendFromISR+0x40>
 800cd70:	2301      	movs	r3, #1
 800cd72:	e000      	b.n	800cd76 <xQueueGenericSendFromISR+0x42>
 800cd74:	2300      	movs	r3, #0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10a      	bne.n	800cd90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7e:	f383 8811 	msr	BASEPRI, r3
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	623b      	str	r3, [r7, #32]
}
 800cd8c:	bf00      	nop
 800cd8e:	e7fe      	b.n	800cd8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d103      	bne.n	800cd9e <xQueueGenericSendFromISR+0x6a>
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d101      	bne.n	800cda2 <xQueueGenericSendFromISR+0x6e>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e000      	b.n	800cda4 <xQueueGenericSendFromISR+0x70>
 800cda2:	2300      	movs	r3, #0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d10a      	bne.n	800cdbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdac:	f383 8811 	msr	BASEPRI, r3
 800cdb0:	f3bf 8f6f 	isb	sy
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	61fb      	str	r3, [r7, #28]
}
 800cdba:	bf00      	nop
 800cdbc:	e7fe      	b.n	800cdbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdbe:	f001 fc4b 	bl	800e658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cdc2:	f3ef 8211 	mrs	r2, BASEPRI
 800cdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	61ba      	str	r2, [r7, #24]
 800cdd8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cdda:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d302      	bcc.n	800cdf0 <xQueueGenericSendFromISR+0xbc>
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d12c      	bne.n	800ce4a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdfa:	683a      	ldr	r2, [r7, #0]
 800cdfc:	68b9      	ldr	r1, [r7, #8]
 800cdfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce00:	f000 f990 	bl	800d124 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ce08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0c:	d112      	bne.n	800ce34 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d016      	beq.n	800ce44 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce18:	3324      	adds	r3, #36	; 0x24
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f000 ff48 	bl	800dcb0 <xTaskRemoveFromEventList>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00e      	beq.n	800ce44 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00b      	beq.n	800ce44 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	601a      	str	r2, [r3, #0]
 800ce32:	e007      	b.n	800ce44 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce38:	3301      	adds	r3, #1
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	b25a      	sxtb	r2, r3
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce44:	2301      	movs	r3, #1
 800ce46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ce48:	e001      	b.n	800ce4e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3738      	adds	r7, #56	; 0x38
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b08c      	sub	sp, #48	; 0x30
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce70:	2300      	movs	r3, #0
 800ce72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d10a      	bne.n	800ce94 <xQueueReceive+0x30>
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	623b      	str	r3, [r7, #32]
}
 800ce90:	bf00      	nop
 800ce92:	e7fe      	b.n	800ce92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d103      	bne.n	800cea2 <xQueueReceive+0x3e>
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d101      	bne.n	800cea6 <xQueueReceive+0x42>
 800cea2:	2301      	movs	r3, #1
 800cea4:	e000      	b.n	800cea8 <xQueueReceive+0x44>
 800cea6:	2300      	movs	r3, #0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10a      	bne.n	800cec2 <xQueueReceive+0x5e>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	61fb      	str	r3, [r7, #28]
}
 800cebe:	bf00      	nop
 800cec0:	e7fe      	b.n	800cec0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cec2:	f001 f8b3 	bl	800e02c <xTaskGetSchedulerState>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <xQueueReceive+0x6e>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <xQueueReceive+0x72>
 800ced2:	2301      	movs	r3, #1
 800ced4:	e000      	b.n	800ced8 <xQueueReceive+0x74>
 800ced6:	2300      	movs	r3, #0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10a      	bne.n	800cef2 <xQueueReceive+0x8e>
	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	61bb      	str	r3, [r7, #24]
}
 800ceee:	bf00      	nop
 800cef0:	e7fe      	b.n	800cef0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cef2:	f001 facf 	bl	800e494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d01f      	beq.n	800cf42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf02:	68b9      	ldr	r1, [r7, #8]
 800cf04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf06:	f000 f977 	bl	800d1f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	1e5a      	subs	r2, r3, #1
 800cf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf14:	691b      	ldr	r3, [r3, #16]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00f      	beq.n	800cf3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	3310      	adds	r3, #16
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 fec6 	bl	800dcb0 <xTaskRemoveFromEventList>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d007      	beq.n	800cf3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf2a:	4b3d      	ldr	r3, [pc, #244]	; (800d020 <xQueueReceive+0x1bc>)
 800cf2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf30:	601a      	str	r2, [r3, #0]
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf3a:	f001 fadb 	bl	800e4f4 <vPortExitCritical>
				return pdPASS;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e069      	b.n	800d016 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d103      	bne.n	800cf50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf48:	f001 fad4 	bl	800e4f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	e062      	b.n	800d016 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d106      	bne.n	800cf64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf56:	f107 0310 	add.w	r3, r7, #16
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 ff0a 	bl	800dd74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf60:	2301      	movs	r3, #1
 800cf62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf64:	f001 fac6 	bl	800e4f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf68:	f000 fc9c 	bl	800d8a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf6c:	f001 fa92 	bl	800e494 <vPortEnterCritical>
 800cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf76:	b25b      	sxtb	r3, r3
 800cf78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7c:	d103      	bne.n	800cf86 <xQueueReceive+0x122>
 800cf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf8c:	b25b      	sxtb	r3, r3
 800cf8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf92:	d103      	bne.n	800cf9c <xQueueReceive+0x138>
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	2200      	movs	r2, #0
 800cf98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf9c:	f001 faaa 	bl	800e4f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfa0:	1d3a      	adds	r2, r7, #4
 800cfa2:	f107 0310 	add.w	r3, r7, #16
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f000 fef9 	bl	800dda0 <xTaskCheckForTimeOut>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d123      	bne.n	800cffc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfb6:	f000 f997 	bl	800d2e8 <prvIsQueueEmpty>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d017      	beq.n	800cff0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc2:	3324      	adds	r3, #36	; 0x24
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 fe4d 	bl	800dc68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfd0:	f000 f938 	bl	800d244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfd4:	f000 fc74 	bl	800d8c0 <xTaskResumeAll>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d189      	bne.n	800cef2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cfde:	4b10      	ldr	r3, [pc, #64]	; (800d020 <xQueueReceive+0x1bc>)
 800cfe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	e780      	b.n	800cef2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cff2:	f000 f927 	bl	800d244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cff6:	f000 fc63 	bl	800d8c0 <xTaskResumeAll>
 800cffa:	e77a      	b.n	800cef2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cffe:	f000 f921 	bl	800d244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d002:	f000 fc5d 	bl	800d8c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d008:	f000 f96e 	bl	800d2e8 <prvIsQueueEmpty>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f43f af6f 	beq.w	800cef2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d014:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d016:	4618      	mov	r0, r3
 800d018:	3730      	adds	r7, #48	; 0x30
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	e000ed04 	.word	0xe000ed04

0800d024 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b08e      	sub	sp, #56	; 0x38
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10a      	bne.n	800d050 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03e:	f383 8811 	msr	BASEPRI, r3
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	f3bf 8f4f 	dsb	sy
 800d04a:	623b      	str	r3, [r7, #32]
}
 800d04c:	bf00      	nop
 800d04e:	e7fe      	b.n	800d04e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d103      	bne.n	800d05e <xQueueReceiveFromISR+0x3a>
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <xQueueReceiveFromISR+0x3e>
 800d05e:	2301      	movs	r3, #1
 800d060:	e000      	b.n	800d064 <xQueueReceiveFromISR+0x40>
 800d062:	2300      	movs	r3, #0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10a      	bne.n	800d07e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06c:	f383 8811 	msr	BASEPRI, r3
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	61fb      	str	r3, [r7, #28]
}
 800d07a:	bf00      	nop
 800d07c:	e7fe      	b.n	800d07c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d07e:	f001 faeb 	bl	800e658 <vPortValidateInterruptPriority>
	__asm volatile
 800d082:	f3ef 8211 	mrs	r2, BASEPRI
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	61ba      	str	r2, [r7, #24]
 800d098:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d09a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d09c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d02f      	beq.n	800d10a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0b4:	68b9      	ldr	r1, [r7, #8]
 800d0b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0b8:	f000 f89e 	bl	800d1f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	1e5a      	subs	r2, r3, #1
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d0c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0cc:	d112      	bne.n	800d0f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d016      	beq.n	800d104 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d8:	3310      	adds	r3, #16
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 fde8 	bl	800dcb0 <xTaskRemoveFromEventList>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00e      	beq.n	800d104 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00b      	beq.n	800d104 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	601a      	str	r2, [r3, #0]
 800d0f2:	e007      	b.n	800d104 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d0f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	b25a      	sxtb	r2, r3
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d104:	2301      	movs	r3, #1
 800d106:	637b      	str	r3, [r7, #52]	; 0x34
 800d108:	e001      	b.n	800d10e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d10a:	2300      	movs	r3, #0
 800d10c:	637b      	str	r3, [r7, #52]	; 0x34
 800d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d110:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	f383 8811 	msr	BASEPRI, r3
}
 800d118:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3738      	adds	r7, #56	; 0x38
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b086      	sub	sp, #24
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d130:	2300      	movs	r3, #0
 800d132:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d138:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10d      	bne.n	800d15e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d14d      	bne.n	800d1e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 ff8a 	bl	800e068 <xTaskPriorityDisinherit>
 800d154:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2200      	movs	r2, #0
 800d15a:	609a      	str	r2, [r3, #8]
 800d15c:	e043      	b.n	800d1e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d119      	bne.n	800d198 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6858      	ldr	r0, [r3, #4]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d16c:	461a      	mov	r2, r3
 800d16e:	68b9      	ldr	r1, [r7, #8]
 800d170:	f001 ffde 	bl	800f130 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d17c:	441a      	add	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d32b      	bcc.n	800d1e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	605a      	str	r2, [r3, #4]
 800d196:	e026      	b.n	800d1e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	68d8      	ldr	r0, [r3, #12]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	68b9      	ldr	r1, [r7, #8]
 800d1a4:	f001 ffc4 	bl	800f130 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	68da      	ldr	r2, [r3, #12]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b0:	425b      	negs	r3, r3
 800d1b2:	441a      	add	r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	68da      	ldr	r2, [r3, #12]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d207      	bcs.n	800d1d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	689a      	ldr	r2, [r3, #8]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1cc:	425b      	negs	r3, r3
 800d1ce:	441a      	add	r2, r3
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d105      	bne.n	800d1e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d1ee:	697b      	ldr	r3, [r7, #20]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d206:	2b00      	cmp	r3, #0
 800d208:	d018      	beq.n	800d23c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	68da      	ldr	r2, [r3, #12]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d212:	441a      	add	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	68da      	ldr	r2, [r3, #12]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	429a      	cmp	r2, r3
 800d222:	d303      	bcc.n	800d22c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	68d9      	ldr	r1, [r3, #12]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d234:	461a      	mov	r2, r3
 800d236:	6838      	ldr	r0, [r7, #0]
 800d238:	f001 ff7a 	bl	800f130 <memcpy>
	}
}
 800d23c:	bf00      	nop
 800d23e:	3708      	adds	r7, #8
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d24c:	f001 f922 	bl	800e494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d258:	e011      	b.n	800d27e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d012      	beq.n	800d288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	3324      	adds	r3, #36	; 0x24
 800d266:	4618      	mov	r0, r3
 800d268:	f000 fd22 	bl	800dcb0 <xTaskRemoveFromEventList>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d272:	f000 fdf7 	bl	800de64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	3b01      	subs	r3, #1
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d282:	2b00      	cmp	r3, #0
 800d284:	dce9      	bgt.n	800d25a <prvUnlockQueue+0x16>
 800d286:	e000      	b.n	800d28a <prvUnlockQueue+0x46>
					break;
 800d288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	22ff      	movs	r2, #255	; 0xff
 800d28e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d292:	f001 f92f 	bl	800e4f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d296:	f001 f8fd 	bl	800e494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2a2:	e011      	b.n	800d2c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d012      	beq.n	800d2d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	3310      	adds	r3, #16
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 fcfd 	bl	800dcb0 <xTaskRemoveFromEventList>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d2bc:	f000 fdd2 	bl	800de64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d2c0:	7bbb      	ldrb	r3, [r7, #14]
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	dce9      	bgt.n	800d2a4 <prvUnlockQueue+0x60>
 800d2d0:	e000      	b.n	800d2d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d2d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	22ff      	movs	r2, #255	; 0xff
 800d2d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d2dc:	f001 f90a 	bl	800e4f4 <vPortExitCritical>
}
 800d2e0:	bf00      	nop
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d2f0:	f001 f8d0 	bl	800e494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d102      	bne.n	800d302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	e001      	b.n	800d306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d302:	2300      	movs	r3, #0
 800d304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d306:	f001 f8f5 	bl	800e4f4 <vPortExitCritical>

	return xReturn;
 800d30a:	68fb      	ldr	r3, [r7, #12]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d31c:	f001 f8ba 	bl	800e494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d328:	429a      	cmp	r2, r3
 800d32a:	d102      	bne.n	800d332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d32c:	2301      	movs	r3, #1
 800d32e:	60fb      	str	r3, [r7, #12]
 800d330:	e001      	b.n	800d336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d332:	2300      	movs	r3, #0
 800d334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d336:	f001 f8dd 	bl	800e4f4 <vPortExitCritical>

	return xReturn;
 800d33a:	68fb      	ldr	r3, [r7, #12]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d344:	b580      	push	{r7, lr}
 800d346:	b08e      	sub	sp, #56	; 0x38
 800d348:	af04      	add	r7, sp, #16
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
 800d350:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10a      	bne.n	800d36e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	623b      	str	r3, [r7, #32]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10a      	bne.n	800d38a <xTaskCreateStatic+0x46>
	__asm volatile
 800d374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	61fb      	str	r3, [r7, #28]
}
 800d386:	bf00      	nop
 800d388:	e7fe      	b.n	800d388 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d38a:	2358      	movs	r3, #88	; 0x58
 800d38c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	2b58      	cmp	r3, #88	; 0x58
 800d392:	d00a      	beq.n	800d3aa <xTaskCreateStatic+0x66>
	__asm volatile
 800d394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	61bb      	str	r3, [r7, #24]
}
 800d3a6:	bf00      	nop
 800d3a8:	e7fe      	b.n	800d3a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d3aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d01e      	beq.n	800d3f0 <xTaskCreateStatic+0xac>
 800d3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d01b      	beq.n	800d3f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	9303      	str	r3, [sp, #12]
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	9302      	str	r3, [sp, #8]
 800d3d2:	f107 0314 	add.w	r3, r7, #20
 800d3d6:	9301      	str	r3, [sp, #4]
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	68b9      	ldr	r1, [r7, #8]
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f000 f850 	bl	800d488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3ea:	f000 f8df 	bl	800d5ac <prvAddNewTaskToReadyList>
 800d3ee:	e001      	b.n	800d3f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d3f4:	697b      	ldr	r3, [r7, #20]
	}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3728      	adds	r7, #40	; 0x28
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b08c      	sub	sp, #48	; 0x30
 800d402:	af04      	add	r7, sp, #16
 800d404:	60f8      	str	r0, [r7, #12]
 800d406:	60b9      	str	r1, [r7, #8]
 800d408:	603b      	str	r3, [r7, #0]
 800d40a:	4613      	mov	r3, r2
 800d40c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d40e:	88fb      	ldrh	r3, [r7, #6]
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	4618      	mov	r0, r3
 800d414:	f001 f960 	bl	800e6d8 <pvPortMalloc>
 800d418:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00e      	beq.n	800d43e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d420:	2058      	movs	r0, #88	; 0x58
 800d422:	f001 f959 	bl	800e6d8 <pvPortMalloc>
 800d426:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d003      	beq.n	800d436 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	631a      	str	r2, [r3, #48]	; 0x30
 800d434:	e005      	b.n	800d442 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d436:	6978      	ldr	r0, [r7, #20]
 800d438:	f001 fa18 	bl	800e86c <vPortFree>
 800d43c:	e001      	b.n	800d442 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d43e:	2300      	movs	r3, #0
 800d440:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d017      	beq.n	800d478 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d450:	88fa      	ldrh	r2, [r7, #6]
 800d452:	2300      	movs	r3, #0
 800d454:	9303      	str	r3, [sp, #12]
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	9302      	str	r3, [sp, #8]
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	9301      	str	r3, [sp, #4]
 800d45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	68b9      	ldr	r1, [r7, #8]
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f000 f80e 	bl	800d488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d46c:	69f8      	ldr	r0, [r7, #28]
 800d46e:	f000 f89d 	bl	800d5ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d472:	2301      	movs	r3, #1
 800d474:	61bb      	str	r3, [r7, #24]
 800d476:	e002      	b.n	800d47e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d478:	f04f 33ff 	mov.w	r3, #4294967295
 800d47c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d47e:	69bb      	ldr	r3, [r7, #24]
	}
 800d480:	4618      	mov	r0, r3
 800d482:	3720      	adds	r7, #32
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
 800d494:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d498:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	461a      	mov	r2, r3
 800d4a0:	21a5      	movs	r1, #165	; 0xa5
 800d4a2:	f001 fe53 	bl	800f14c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	4413      	add	r3, r2
 800d4b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	f023 0307 	bic.w	r3, r3, #7
 800d4be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	f003 0307 	and.w	r3, r3, #7
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00a      	beq.n	800d4e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	617b      	str	r3, [r7, #20]
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d01f      	beq.n	800d526 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	61fb      	str	r3, [r7, #28]
 800d4ea:	e012      	b.n	800d512 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	7819      	ldrb	r1, [r3, #0]
 800d4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	3334      	adds	r3, #52	; 0x34
 800d4fc:	460a      	mov	r2, r1
 800d4fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d500:	68ba      	ldr	r2, [r7, #8]
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	4413      	add	r3, r2
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d006      	beq.n	800d51a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	3301      	adds	r3, #1
 800d510:	61fb      	str	r3, [r7, #28]
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	2b0f      	cmp	r3, #15
 800d516:	d9e9      	bls.n	800d4ec <prvInitialiseNewTask+0x64>
 800d518:	e000      	b.n	800d51c <prvInitialiseNewTask+0x94>
			{
				break;
 800d51a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51e:	2200      	movs	r2, #0
 800d520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d524:	e003      	b.n	800d52e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d530:	2b06      	cmp	r3, #6
 800d532:	d901      	bls.n	800d538 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d534:	2306      	movs	r3, #6
 800d536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d53c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d542:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d546:	2200      	movs	r2, #0
 800d548:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	3304      	adds	r3, #4
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff f91e 	bl	800c790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d556:	3318      	adds	r3, #24
 800d558:	4618      	mov	r0, r3
 800d55a:	f7ff f919 	bl	800c790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d566:	f1c3 0207 	rsb	r2, r3, #7
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d576:	2200      	movs	r2, #0
 800d578:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57c:	2200      	movs	r2, #0
 800d57e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d582:	2200      	movs	r2, #0
 800d584:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d588:	683a      	ldr	r2, [r7, #0]
 800d58a:	68f9      	ldr	r1, [r7, #12]
 800d58c:	69b8      	ldr	r0, [r7, #24]
 800d58e:	f000 fe57 	bl	800e240 <pxPortInitialiseStack>
 800d592:	4602      	mov	r2, r0
 800d594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d596:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d002      	beq.n	800d5a4 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5a4:	bf00      	nop
 800d5a6:	3720      	adds	r7, #32
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d5b4:	f000 ff6e 	bl	800e494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d5b8:	4b2a      	ldr	r3, [pc, #168]	; (800d664 <prvAddNewTaskToReadyList+0xb8>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	4a29      	ldr	r2, [pc, #164]	; (800d664 <prvAddNewTaskToReadyList+0xb8>)
 800d5c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d5c2:	4b29      	ldr	r3, [pc, #164]	; (800d668 <prvAddNewTaskToReadyList+0xbc>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d109      	bne.n	800d5de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d5ca:	4a27      	ldr	r2, [pc, #156]	; (800d668 <prvAddNewTaskToReadyList+0xbc>)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d5d0:	4b24      	ldr	r3, [pc, #144]	; (800d664 <prvAddNewTaskToReadyList+0xb8>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d110      	bne.n	800d5fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d5d8:	f000 fc6a 	bl	800deb0 <prvInitialiseTaskLists>
 800d5dc:	e00d      	b.n	800d5fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d5de:	4b23      	ldr	r3, [pc, #140]	; (800d66c <prvAddNewTaskToReadyList+0xc0>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d109      	bne.n	800d5fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d5e6:	4b20      	ldr	r3, [pc, #128]	; (800d668 <prvAddNewTaskToReadyList+0xbc>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d802      	bhi.n	800d5fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d5f4:	4a1c      	ldr	r2, [pc, #112]	; (800d668 <prvAddNewTaskToReadyList+0xbc>)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d5fa:	4b1d      	ldr	r3, [pc, #116]	; (800d670 <prvAddNewTaskToReadyList+0xc4>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	3301      	adds	r3, #1
 800d600:	4a1b      	ldr	r2, [pc, #108]	; (800d670 <prvAddNewTaskToReadyList+0xc4>)
 800d602:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d608:	2201      	movs	r2, #1
 800d60a:	409a      	lsls	r2, r3
 800d60c:	4b19      	ldr	r3, [pc, #100]	; (800d674 <prvAddNewTaskToReadyList+0xc8>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4313      	orrs	r3, r2
 800d612:	4a18      	ldr	r2, [pc, #96]	; (800d674 <prvAddNewTaskToReadyList+0xc8>)
 800d614:	6013      	str	r3, [r2, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d61a:	4613      	mov	r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4413      	add	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	4a15      	ldr	r2, [pc, #84]	; (800d678 <prvAddNewTaskToReadyList+0xcc>)
 800d624:	441a      	add	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	3304      	adds	r3, #4
 800d62a:	4619      	mov	r1, r3
 800d62c:	4610      	mov	r0, r2
 800d62e:	f7ff f8bc 	bl	800c7aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d632:	f000 ff5f 	bl	800e4f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d636:	4b0d      	ldr	r3, [pc, #52]	; (800d66c <prvAddNewTaskToReadyList+0xc0>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00e      	beq.n	800d65c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d63e:	4b0a      	ldr	r3, [pc, #40]	; (800d668 <prvAddNewTaskToReadyList+0xbc>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d648:	429a      	cmp	r2, r3
 800d64a:	d207      	bcs.n	800d65c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d64c:	4b0b      	ldr	r3, [pc, #44]	; (800d67c <prvAddNewTaskToReadyList+0xd0>)
 800d64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d652:	601a      	str	r2, [r3, #0]
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d65c:	bf00      	nop
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	20000528 	.word	0x20000528
 800d668:	20000428 	.word	0x20000428
 800d66c:	20000534 	.word	0x20000534
 800d670:	20000544 	.word	0x20000544
 800d674:	20000530 	.word	0x20000530
 800d678:	2000042c 	.word	0x2000042c
 800d67c:	e000ed04 	.word	0xe000ed04

0800d680 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d680:	b580      	push	{r7, lr}
 800d682:	b08a      	sub	sp, #40	; 0x28
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d68a:	2300      	movs	r3, #0
 800d68c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10a      	bne.n	800d6aa <vTaskDelayUntil+0x2a>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	617b      	str	r3, [r7, #20]
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10a      	bne.n	800d6c6 <vTaskDelayUntil+0x46>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	613b      	str	r3, [r7, #16]
}
 800d6c2:	bf00      	nop
 800d6c4:	e7fe      	b.n	800d6c4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800d6c6:	4b2a      	ldr	r3, [pc, #168]	; (800d770 <vTaskDelayUntil+0xf0>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00a      	beq.n	800d6e4 <vTaskDelayUntil+0x64>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	60fb      	str	r3, [r7, #12]
}
 800d6e0:	bf00      	nop
 800d6e2:	e7fe      	b.n	800d6e2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800d6e4:	f000 f8de 	bl	800d8a4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d6e8:	4b22      	ldr	r3, [pc, #136]	; (800d774 <vTaskDelayUntil+0xf4>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6a3a      	ldr	r2, [r7, #32]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d20b      	bcs.n	800d71a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d211      	bcs.n	800d730 <vTaskDelayUntil+0xb0>
 800d70c:	69fa      	ldr	r2, [r7, #28]
 800d70e:	6a3b      	ldr	r3, [r7, #32]
 800d710:	429a      	cmp	r2, r3
 800d712:	d90d      	bls.n	800d730 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d714:	2301      	movs	r3, #1
 800d716:	627b      	str	r3, [r7, #36]	; 0x24
 800d718:	e00a      	b.n	800d730 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	69fa      	ldr	r2, [r7, #28]
 800d720:	429a      	cmp	r2, r3
 800d722:	d303      	bcc.n	800d72c <vTaskDelayUntil+0xac>
 800d724:	69fa      	ldr	r2, [r7, #28]
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d901      	bls.n	800d730 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d72c:	2301      	movs	r3, #1
 800d72e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	69fa      	ldr	r2, [r7, #28]
 800d734:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d006      	beq.n	800d74a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d73c:	69fa      	ldr	r2, [r7, #28]
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	2100      	movs	r1, #0
 800d744:	4618      	mov	r0, r3
 800d746:	f000 fd15 	bl	800e174 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d74a:	f000 f8b9 	bl	800d8c0 <xTaskResumeAll>
 800d74e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d107      	bne.n	800d766 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800d756:	4b08      	ldr	r3, [pc, #32]	; (800d778 <vTaskDelayUntil+0xf8>)
 800d758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d75c:	601a      	str	r2, [r3, #0]
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d766:	bf00      	nop
 800d768:	3728      	adds	r7, #40	; 0x28
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	20000550 	.word	0x20000550
 800d774:	2000052c 	.word	0x2000052c
 800d778:	e000ed04 	.word	0xe000ed04

0800d77c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d784:	2300      	movs	r3, #0
 800d786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d017      	beq.n	800d7be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d78e:	4b13      	ldr	r3, [pc, #76]	; (800d7dc <vTaskDelay+0x60>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d00a      	beq.n	800d7ac <vTaskDelay+0x30>
	__asm volatile
 800d796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79a:	f383 8811 	msr	BASEPRI, r3
 800d79e:	f3bf 8f6f 	isb	sy
 800d7a2:	f3bf 8f4f 	dsb	sy
 800d7a6:	60bb      	str	r3, [r7, #8]
}
 800d7a8:	bf00      	nop
 800d7aa:	e7fe      	b.n	800d7aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d7ac:	f000 f87a 	bl	800d8a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fcde 	bl	800e174 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d7b8:	f000 f882 	bl	800d8c0 <xTaskResumeAll>
 800d7bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d107      	bne.n	800d7d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d7c4:	4b06      	ldr	r3, [pc, #24]	; (800d7e0 <vTaskDelay+0x64>)
 800d7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ca:	601a      	str	r2, [r3, #0]
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7d4:	bf00      	nop
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	20000550 	.word	0x20000550
 800d7e0:	e000ed04 	.word	0xe000ed04

0800d7e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08a      	sub	sp, #40	; 0x28
 800d7e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d7f2:	463a      	mov	r2, r7
 800d7f4:	1d39      	adds	r1, r7, #4
 800d7f6:	f107 0308 	add.w	r3, r7, #8
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7f3 fb24 	bl	8000e48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d800:	6839      	ldr	r1, [r7, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	9202      	str	r2, [sp, #8]
 800d808:	9301      	str	r3, [sp, #4]
 800d80a:	2300      	movs	r3, #0
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	2300      	movs	r3, #0
 800d810:	460a      	mov	r2, r1
 800d812:	491e      	ldr	r1, [pc, #120]	; (800d88c <vTaskStartScheduler+0xa8>)
 800d814:	481e      	ldr	r0, [pc, #120]	; (800d890 <vTaskStartScheduler+0xac>)
 800d816:	f7ff fd95 	bl	800d344 <xTaskCreateStatic>
 800d81a:	4603      	mov	r3, r0
 800d81c:	4a1d      	ldr	r2, [pc, #116]	; (800d894 <vTaskStartScheduler+0xb0>)
 800d81e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d820:	4b1c      	ldr	r3, [pc, #112]	; (800d894 <vTaskStartScheduler+0xb0>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d828:	2301      	movs	r3, #1
 800d82a:	617b      	str	r3, [r7, #20]
 800d82c:	e001      	b.n	800d832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d82e:	2300      	movs	r3, #0
 800d830:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d116      	bne.n	800d866 <vTaskStartScheduler+0x82>
	__asm volatile
 800d838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83c:	f383 8811 	msr	BASEPRI, r3
 800d840:	f3bf 8f6f 	isb	sy
 800d844:	f3bf 8f4f 	dsb	sy
 800d848:	613b      	str	r3, [r7, #16]
}
 800d84a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d84c:	4b12      	ldr	r3, [pc, #72]	; (800d898 <vTaskStartScheduler+0xb4>)
 800d84e:	f04f 32ff 	mov.w	r2, #4294967295
 800d852:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d854:	4b11      	ldr	r3, [pc, #68]	; (800d89c <vTaskStartScheduler+0xb8>)
 800d856:	2201      	movs	r2, #1
 800d858:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d85a:	4b11      	ldr	r3, [pc, #68]	; (800d8a0 <vTaskStartScheduler+0xbc>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d860:	f000 fd76 	bl	800e350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d864:	e00e      	b.n	800d884 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d86c:	d10a      	bne.n	800d884 <vTaskStartScheduler+0xa0>
	__asm volatile
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	60fb      	str	r3, [r7, #12]
}
 800d880:	bf00      	nop
 800d882:	e7fe      	b.n	800d882 <vTaskStartScheduler+0x9e>
}
 800d884:	bf00      	nop
 800d886:	3718      	adds	r7, #24
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	0800fa6c 	.word	0x0800fa6c
 800d890:	0800de7d 	.word	0x0800de7d
 800d894:	2000054c 	.word	0x2000054c
 800d898:	20000548 	.word	0x20000548
 800d89c:	20000534 	.word	0x20000534
 800d8a0:	2000052c 	.word	0x2000052c

0800d8a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d8a8:	4b04      	ldr	r3, [pc, #16]	; (800d8bc <vTaskSuspendAll+0x18>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	4a03      	ldr	r2, [pc, #12]	; (800d8bc <vTaskSuspendAll+0x18>)
 800d8b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d8b2:	bf00      	nop
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	20000550 	.word	0x20000550

0800d8c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d8ce:	4b41      	ldr	r3, [pc, #260]	; (800d9d4 <xTaskResumeAll+0x114>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10a      	bne.n	800d8ec <xTaskResumeAll+0x2c>
	__asm volatile
 800d8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8da:	f383 8811 	msr	BASEPRI, r3
 800d8de:	f3bf 8f6f 	isb	sy
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	603b      	str	r3, [r7, #0]
}
 800d8e8:	bf00      	nop
 800d8ea:	e7fe      	b.n	800d8ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d8ec:	f000 fdd2 	bl	800e494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d8f0:	4b38      	ldr	r3, [pc, #224]	; (800d9d4 <xTaskResumeAll+0x114>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	4a37      	ldr	r2, [pc, #220]	; (800d9d4 <xTaskResumeAll+0x114>)
 800d8f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8fa:	4b36      	ldr	r3, [pc, #216]	; (800d9d4 <xTaskResumeAll+0x114>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d161      	bne.n	800d9c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d902:	4b35      	ldr	r3, [pc, #212]	; (800d9d8 <xTaskResumeAll+0x118>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d05d      	beq.n	800d9c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d90a:	e02e      	b.n	800d96a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d90c:	4b33      	ldr	r3, [pc, #204]	; (800d9dc <xTaskResumeAll+0x11c>)
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	3318      	adds	r3, #24
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fe ffa3 	bl	800c864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3304      	adds	r3, #4
 800d922:	4618      	mov	r0, r3
 800d924:	f7fe ff9e 	bl	800c864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92c:	2201      	movs	r2, #1
 800d92e:	409a      	lsls	r2, r3
 800d930:	4b2b      	ldr	r3, [pc, #172]	; (800d9e0 <xTaskResumeAll+0x120>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4313      	orrs	r3, r2
 800d936:	4a2a      	ldr	r2, [pc, #168]	; (800d9e0 <xTaskResumeAll+0x120>)
 800d938:	6013      	str	r3, [r2, #0]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d93e:	4613      	mov	r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	4413      	add	r3, r2
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	4a27      	ldr	r2, [pc, #156]	; (800d9e4 <xTaskResumeAll+0x124>)
 800d948:	441a      	add	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	3304      	adds	r3, #4
 800d94e:	4619      	mov	r1, r3
 800d950:	4610      	mov	r0, r2
 800d952:	f7fe ff2a 	bl	800c7aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d95a:	4b23      	ldr	r3, [pc, #140]	; (800d9e8 <xTaskResumeAll+0x128>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d960:	429a      	cmp	r2, r3
 800d962:	d302      	bcc.n	800d96a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d964:	4b21      	ldr	r3, [pc, #132]	; (800d9ec <xTaskResumeAll+0x12c>)
 800d966:	2201      	movs	r2, #1
 800d968:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d96a:	4b1c      	ldr	r3, [pc, #112]	; (800d9dc <xTaskResumeAll+0x11c>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1cc      	bne.n	800d90c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d978:	f000 fb38 	bl	800dfec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d97c:	4b1c      	ldr	r3, [pc, #112]	; (800d9f0 <xTaskResumeAll+0x130>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d010      	beq.n	800d9aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d988:	f000 f836 	bl	800d9f8 <xTaskIncrementTick>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d002      	beq.n	800d998 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d992:	4b16      	ldr	r3, [pc, #88]	; (800d9ec <xTaskResumeAll+0x12c>)
 800d994:	2201      	movs	r2, #1
 800d996:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1f1      	bne.n	800d988 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d9a4:	4b12      	ldr	r3, [pc, #72]	; (800d9f0 <xTaskResumeAll+0x130>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d9aa:	4b10      	ldr	r3, [pc, #64]	; (800d9ec <xTaskResumeAll+0x12c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d009      	beq.n	800d9c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d9b6:	4b0f      	ldr	r3, [pc, #60]	; (800d9f4 <xTaskResumeAll+0x134>)
 800d9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9c6:	f000 fd95 	bl	800e4f4 <vPortExitCritical>

	return xAlreadyYielded;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	20000550 	.word	0x20000550
 800d9d8:	20000528 	.word	0x20000528
 800d9dc:	200004e8 	.word	0x200004e8
 800d9e0:	20000530 	.word	0x20000530
 800d9e4:	2000042c 	.word	0x2000042c
 800d9e8:	20000428 	.word	0x20000428
 800d9ec:	2000053c 	.word	0x2000053c
 800d9f0:	20000538 	.word	0x20000538
 800d9f4:	e000ed04 	.word	0xe000ed04

0800d9f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d9fe:	2300      	movs	r3, #0
 800da00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da02:	4b4e      	ldr	r3, [pc, #312]	; (800db3c <xTaskIncrementTick+0x144>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f040 8088 	bne.w	800db1c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da0c:	4b4c      	ldr	r3, [pc, #304]	; (800db40 <xTaskIncrementTick+0x148>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3301      	adds	r3, #1
 800da12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da14:	4a4a      	ldr	r2, [pc, #296]	; (800db40 <xTaskIncrementTick+0x148>)
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d120      	bne.n	800da62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800da20:	4b48      	ldr	r3, [pc, #288]	; (800db44 <xTaskIncrementTick+0x14c>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d00a      	beq.n	800da40 <xTaskIncrementTick+0x48>
	__asm volatile
 800da2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	603b      	str	r3, [r7, #0]
}
 800da3c:	bf00      	nop
 800da3e:	e7fe      	b.n	800da3e <xTaskIncrementTick+0x46>
 800da40:	4b40      	ldr	r3, [pc, #256]	; (800db44 <xTaskIncrementTick+0x14c>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	60fb      	str	r3, [r7, #12]
 800da46:	4b40      	ldr	r3, [pc, #256]	; (800db48 <xTaskIncrementTick+0x150>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a3e      	ldr	r2, [pc, #248]	; (800db44 <xTaskIncrementTick+0x14c>)
 800da4c:	6013      	str	r3, [r2, #0]
 800da4e:	4a3e      	ldr	r2, [pc, #248]	; (800db48 <xTaskIncrementTick+0x150>)
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6013      	str	r3, [r2, #0]
 800da54:	4b3d      	ldr	r3, [pc, #244]	; (800db4c <xTaskIncrementTick+0x154>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	3301      	adds	r3, #1
 800da5a:	4a3c      	ldr	r2, [pc, #240]	; (800db4c <xTaskIncrementTick+0x154>)
 800da5c:	6013      	str	r3, [r2, #0]
 800da5e:	f000 fac5 	bl	800dfec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da62:	4b3b      	ldr	r3, [pc, #236]	; (800db50 <xTaskIncrementTick+0x158>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d348      	bcc.n	800dafe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da6c:	4b35      	ldr	r3, [pc, #212]	; (800db44 <xTaskIncrementTick+0x14c>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d104      	bne.n	800da80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da76:	4b36      	ldr	r3, [pc, #216]	; (800db50 <xTaskIncrementTick+0x158>)
 800da78:	f04f 32ff 	mov.w	r2, #4294967295
 800da7c:	601a      	str	r2, [r3, #0]
					break;
 800da7e:	e03e      	b.n	800dafe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da80:	4b30      	ldr	r3, [pc, #192]	; (800db44 <xTaskIncrementTick+0x14c>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800da90:	693a      	ldr	r2, [r7, #16]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	429a      	cmp	r2, r3
 800da96:	d203      	bcs.n	800daa0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800da98:	4a2d      	ldr	r2, [pc, #180]	; (800db50 <xTaskIncrementTick+0x158>)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800da9e:	e02e      	b.n	800dafe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	3304      	adds	r3, #4
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fe fedd 	bl	800c864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d004      	beq.n	800dabc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	3318      	adds	r3, #24
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fe fed4 	bl	800c864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac0:	2201      	movs	r2, #1
 800dac2:	409a      	lsls	r2, r3
 800dac4:	4b23      	ldr	r3, [pc, #140]	; (800db54 <xTaskIncrementTick+0x15c>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4313      	orrs	r3, r2
 800daca:	4a22      	ldr	r2, [pc, #136]	; (800db54 <xTaskIncrementTick+0x15c>)
 800dacc:	6013      	str	r3, [r2, #0]
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad2:	4613      	mov	r3, r2
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	4413      	add	r3, r2
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	4a1f      	ldr	r2, [pc, #124]	; (800db58 <xTaskIncrementTick+0x160>)
 800dadc:	441a      	add	r2, r3
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	3304      	adds	r3, #4
 800dae2:	4619      	mov	r1, r3
 800dae4:	4610      	mov	r0, r2
 800dae6:	f7fe fe60 	bl	800c7aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daee:	4b1b      	ldr	r3, [pc, #108]	; (800db5c <xTaskIncrementTick+0x164>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d3b9      	bcc.n	800da6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800daf8:	2301      	movs	r3, #1
 800dafa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dafc:	e7b6      	b.n	800da6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dafe:	4b17      	ldr	r3, [pc, #92]	; (800db5c <xTaskIncrementTick+0x164>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db04:	4914      	ldr	r1, [pc, #80]	; (800db58 <xTaskIncrementTick+0x160>)
 800db06:	4613      	mov	r3, r2
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	440b      	add	r3, r1
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b01      	cmp	r3, #1
 800db14:	d907      	bls.n	800db26 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800db16:	2301      	movs	r3, #1
 800db18:	617b      	str	r3, [r7, #20]
 800db1a:	e004      	b.n	800db26 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800db1c:	4b10      	ldr	r3, [pc, #64]	; (800db60 <xTaskIncrementTick+0x168>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3301      	adds	r3, #1
 800db22:	4a0f      	ldr	r2, [pc, #60]	; (800db60 <xTaskIncrementTick+0x168>)
 800db24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800db26:	4b0f      	ldr	r3, [pc, #60]	; (800db64 <xTaskIncrementTick+0x16c>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d001      	beq.n	800db32 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800db2e:	2301      	movs	r3, #1
 800db30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800db32:	697b      	ldr	r3, [r7, #20]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3718      	adds	r7, #24
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	20000550 	.word	0x20000550
 800db40:	2000052c 	.word	0x2000052c
 800db44:	200004e0 	.word	0x200004e0
 800db48:	200004e4 	.word	0x200004e4
 800db4c:	20000540 	.word	0x20000540
 800db50:	20000548 	.word	0x20000548
 800db54:	20000530 	.word	0x20000530
 800db58:	2000042c 	.word	0x2000042c
 800db5c:	20000428 	.word	0x20000428
 800db60:	20000538 	.word	0x20000538
 800db64:	2000053c 	.word	0x2000053c

0800db68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db6e:	4b39      	ldr	r3, [pc, #228]	; (800dc54 <vTaskSwitchContext+0xec>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d003      	beq.n	800db7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db76:	4b38      	ldr	r3, [pc, #224]	; (800dc58 <vTaskSwitchContext+0xf0>)
 800db78:	2201      	movs	r2, #1
 800db7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db7c:	e066      	b.n	800dc4c <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800db7e:	4b36      	ldr	r3, [pc, #216]	; (800dc58 <vTaskSwitchContext+0xf0>)
 800db80:	2200      	movs	r2, #0
 800db82:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800db84:	4b35      	ldr	r3, [pc, #212]	; (800dc5c <vTaskSwitchContext+0xf4>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db8a:	61fb      	str	r3, [r7, #28]
 800db8c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800db90:	61bb      	str	r3, [r7, #24]
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	69ba      	ldr	r2, [r7, #24]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d111      	bne.n	800dbc0 <vTaskSwitchContext+0x58>
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	3304      	adds	r3, #4
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	69ba      	ldr	r2, [r7, #24]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d10b      	bne.n	800dbc0 <vTaskSwitchContext+0x58>
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	3308      	adds	r3, #8
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69ba      	ldr	r2, [r7, #24]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d105      	bne.n	800dbc0 <vTaskSwitchContext+0x58>
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	330c      	adds	r3, #12
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d008      	beq.n	800dbd2 <vTaskSwitchContext+0x6a>
 800dbc0:	4b26      	ldr	r3, [pc, #152]	; (800dc5c <vTaskSwitchContext+0xf4>)
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	4b25      	ldr	r3, [pc, #148]	; (800dc5c <vTaskSwitchContext+0xf4>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3334      	adds	r3, #52	; 0x34
 800dbca:	4619      	mov	r1, r3
 800dbcc:	4610      	mov	r0, r2
 800dbce:	f7f3 f928 	bl	8000e22 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbd2:	4b23      	ldr	r3, [pc, #140]	; (800dc60 <vTaskSwitchContext+0xf8>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	fab3 f383 	clz	r3, r3
 800dbde:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dbe0:	7afb      	ldrb	r3, [r7, #11]
 800dbe2:	f1c3 031f 	rsb	r3, r3, #31
 800dbe6:	617b      	str	r3, [r7, #20]
 800dbe8:	491e      	ldr	r1, [pc, #120]	; (800dc64 <vTaskSwitchContext+0xfc>)
 800dbea:	697a      	ldr	r2, [r7, #20]
 800dbec:	4613      	mov	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	440b      	add	r3, r1
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10a      	bne.n	800dc12 <vTaskSwitchContext+0xaa>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	f383 8811 	msr	BASEPRI, r3
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	607b      	str	r3, [r7, #4]
}
 800dc0e:	bf00      	nop
 800dc10:	e7fe      	b.n	800dc10 <vTaskSwitchContext+0xa8>
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	4613      	mov	r3, r2
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4413      	add	r3, r2
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	4a11      	ldr	r2, [pc, #68]	; (800dc64 <vTaskSwitchContext+0xfc>)
 800dc1e:	4413      	add	r3, r2
 800dc20:	613b      	str	r3, [r7, #16]
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	685a      	ldr	r2, [r3, #4]
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	605a      	str	r2, [r3, #4]
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	685a      	ldr	r2, [r3, #4]
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	3308      	adds	r3, #8
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d104      	bne.n	800dc42 <vTaskSwitchContext+0xda>
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	685a      	ldr	r2, [r3, #4]
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	605a      	str	r2, [r3, #4]
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	4a04      	ldr	r2, [pc, #16]	; (800dc5c <vTaskSwitchContext+0xf4>)
 800dc4a:	6013      	str	r3, [r2, #0]
}
 800dc4c:	bf00      	nop
 800dc4e:	3720      	adds	r7, #32
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	20000550 	.word	0x20000550
 800dc58:	2000053c 	.word	0x2000053c
 800dc5c:	20000428 	.word	0x20000428
 800dc60:	20000530 	.word	0x20000530
 800dc64:	2000042c 	.word	0x2000042c

0800dc68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10a      	bne.n	800dc8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7c:	f383 8811 	msr	BASEPRI, r3
 800dc80:	f3bf 8f6f 	isb	sy
 800dc84:	f3bf 8f4f 	dsb	sy
 800dc88:	60fb      	str	r3, [r7, #12]
}
 800dc8a:	bf00      	nop
 800dc8c:	e7fe      	b.n	800dc8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc8e:	4b07      	ldr	r3, [pc, #28]	; (800dcac <vTaskPlaceOnEventList+0x44>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	3318      	adds	r3, #24
 800dc94:	4619      	mov	r1, r3
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7fe fdab 	bl	800c7f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc9c:	2101      	movs	r1, #1
 800dc9e:	6838      	ldr	r0, [r7, #0]
 800dca0:	f000 fa68 	bl	800e174 <prvAddCurrentTaskToDelayedList>
}
 800dca4:	bf00      	nop
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	20000428 	.word	0x20000428

0800dcb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b086      	sub	sp, #24
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10a      	bne.n	800dcdc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dcc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcca:	f383 8811 	msr	BASEPRI, r3
 800dcce:	f3bf 8f6f 	isb	sy
 800dcd2:	f3bf 8f4f 	dsb	sy
 800dcd6:	60fb      	str	r3, [r7, #12]
}
 800dcd8:	bf00      	nop
 800dcda:	e7fe      	b.n	800dcda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	3318      	adds	r3, #24
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fe fdbf 	bl	800c864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dce6:	4b1d      	ldr	r3, [pc, #116]	; (800dd5c <xTaskRemoveFromEventList+0xac>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d11c      	bne.n	800dd28 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7fe fdb6 	bl	800c864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	409a      	lsls	r2, r3
 800dd00:	4b17      	ldr	r3, [pc, #92]	; (800dd60 <xTaskRemoveFromEventList+0xb0>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4313      	orrs	r3, r2
 800dd06:	4a16      	ldr	r2, [pc, #88]	; (800dd60 <xTaskRemoveFromEventList+0xb0>)
 800dd08:	6013      	str	r3, [r2, #0]
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0e:	4613      	mov	r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4a13      	ldr	r2, [pc, #76]	; (800dd64 <xTaskRemoveFromEventList+0xb4>)
 800dd18:	441a      	add	r2, r3
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	4619      	mov	r1, r3
 800dd20:	4610      	mov	r0, r2
 800dd22:	f7fe fd42 	bl	800c7aa <vListInsertEnd>
 800dd26:	e005      	b.n	800dd34 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	3318      	adds	r3, #24
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	480e      	ldr	r0, [pc, #56]	; (800dd68 <xTaskRemoveFromEventList+0xb8>)
 800dd30:	f7fe fd3b 	bl	800c7aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd38:	4b0c      	ldr	r3, [pc, #48]	; (800dd6c <xTaskRemoveFromEventList+0xbc>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d905      	bls.n	800dd4e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd42:	2301      	movs	r3, #1
 800dd44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd46:	4b0a      	ldr	r3, [pc, #40]	; (800dd70 <xTaskRemoveFromEventList+0xc0>)
 800dd48:	2201      	movs	r2, #1
 800dd4a:	601a      	str	r2, [r3, #0]
 800dd4c:	e001      	b.n	800dd52 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dd52:	697b      	ldr	r3, [r7, #20]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3718      	adds	r7, #24
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	20000550 	.word	0x20000550
 800dd60:	20000530 	.word	0x20000530
 800dd64:	2000042c 	.word	0x2000042c
 800dd68:	200004e8 	.word	0x200004e8
 800dd6c:	20000428 	.word	0x20000428
 800dd70:	2000053c 	.word	0x2000053c

0800dd74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd7c:	4b06      	ldr	r3, [pc, #24]	; (800dd98 <vTaskInternalSetTimeOutState+0x24>)
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd84:	4b05      	ldr	r3, [pc, #20]	; (800dd9c <vTaskInternalSetTimeOutState+0x28>)
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	605a      	str	r2, [r3, #4]
}
 800dd8c:	bf00      	nop
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr
 800dd98:	20000540 	.word	0x20000540
 800dd9c:	2000052c 	.word	0x2000052c

0800dda0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d10a      	bne.n	800ddc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	613b      	str	r3, [r7, #16]
}
 800ddc2:	bf00      	nop
 800ddc4:	e7fe      	b.n	800ddc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10a      	bne.n	800dde2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	60fb      	str	r3, [r7, #12]
}
 800ddde:	bf00      	nop
 800dde0:	e7fe      	b.n	800dde0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dde2:	f000 fb57 	bl	800e494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dde6:	4b1d      	ldr	r3, [pc, #116]	; (800de5c <xTaskCheckForTimeOut+0xbc>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	69ba      	ldr	r2, [r7, #24]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddfe:	d102      	bne.n	800de06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de00:	2300      	movs	r3, #0
 800de02:	61fb      	str	r3, [r7, #28]
 800de04:	e023      	b.n	800de4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	4b15      	ldr	r3, [pc, #84]	; (800de60 <xTaskCheckForTimeOut+0xc0>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d007      	beq.n	800de22 <xTaskCheckForTimeOut+0x82>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	69ba      	ldr	r2, [r7, #24]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d302      	bcc.n	800de22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de1c:	2301      	movs	r3, #1
 800de1e:	61fb      	str	r3, [r7, #28]
 800de20:	e015      	b.n	800de4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	697a      	ldr	r2, [r7, #20]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d20b      	bcs.n	800de44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	681a      	ldr	r2, [r3, #0]
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	1ad2      	subs	r2, r2, r3
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7ff ff9b 	bl	800dd74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de3e:	2300      	movs	r3, #0
 800de40:	61fb      	str	r3, [r7, #28]
 800de42:	e004      	b.n	800de4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	2200      	movs	r2, #0
 800de48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de4a:	2301      	movs	r3, #1
 800de4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de4e:	f000 fb51 	bl	800e4f4 <vPortExitCritical>

	return xReturn;
 800de52:	69fb      	ldr	r3, [r7, #28]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3720      	adds	r7, #32
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	2000052c 	.word	0x2000052c
 800de60:	20000540 	.word	0x20000540

0800de64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de64:	b480      	push	{r7}
 800de66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de68:	4b03      	ldr	r3, [pc, #12]	; (800de78 <vTaskMissedYield+0x14>)
 800de6a:	2201      	movs	r2, #1
 800de6c:	601a      	str	r2, [r3, #0]
}
 800de6e:	bf00      	nop
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr
 800de78:	2000053c 	.word	0x2000053c

0800de7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de84:	f000 f854 	bl	800df30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de88:	4b07      	ldr	r3, [pc, #28]	; (800dea8 <prvIdleTask+0x2c>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d907      	bls.n	800dea0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800de90:	4b06      	ldr	r3, [pc, #24]	; (800deac <prvIdleTask+0x30>)
 800de92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de96:	601a      	str	r2, [r3, #0]
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800dea0:	f7f2 ffb8 	bl	8000e14 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800dea4:	e7ee      	b.n	800de84 <prvIdleTask+0x8>
 800dea6:	bf00      	nop
 800dea8:	2000042c 	.word	0x2000042c
 800deac:	e000ed04 	.word	0xe000ed04

0800deb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800deb6:	2300      	movs	r3, #0
 800deb8:	607b      	str	r3, [r7, #4]
 800deba:	e00c      	b.n	800ded6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	4613      	mov	r3, r2
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	4413      	add	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4a12      	ldr	r2, [pc, #72]	; (800df10 <prvInitialiseTaskLists+0x60>)
 800dec8:	4413      	add	r3, r2
 800deca:	4618      	mov	r0, r3
 800decc:	f7fe fc40 	bl	800c750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	3301      	adds	r3, #1
 800ded4:	607b      	str	r3, [r7, #4]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2b06      	cmp	r3, #6
 800deda:	d9ef      	bls.n	800debc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dedc:	480d      	ldr	r0, [pc, #52]	; (800df14 <prvInitialiseTaskLists+0x64>)
 800dede:	f7fe fc37 	bl	800c750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dee2:	480d      	ldr	r0, [pc, #52]	; (800df18 <prvInitialiseTaskLists+0x68>)
 800dee4:	f7fe fc34 	bl	800c750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dee8:	480c      	ldr	r0, [pc, #48]	; (800df1c <prvInitialiseTaskLists+0x6c>)
 800deea:	f7fe fc31 	bl	800c750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800deee:	480c      	ldr	r0, [pc, #48]	; (800df20 <prvInitialiseTaskLists+0x70>)
 800def0:	f7fe fc2e 	bl	800c750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800def4:	480b      	ldr	r0, [pc, #44]	; (800df24 <prvInitialiseTaskLists+0x74>)
 800def6:	f7fe fc2b 	bl	800c750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800defa:	4b0b      	ldr	r3, [pc, #44]	; (800df28 <prvInitialiseTaskLists+0x78>)
 800defc:	4a05      	ldr	r2, [pc, #20]	; (800df14 <prvInitialiseTaskLists+0x64>)
 800defe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df00:	4b0a      	ldr	r3, [pc, #40]	; (800df2c <prvInitialiseTaskLists+0x7c>)
 800df02:	4a05      	ldr	r2, [pc, #20]	; (800df18 <prvInitialiseTaskLists+0x68>)
 800df04:	601a      	str	r2, [r3, #0]
}
 800df06:	bf00      	nop
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	2000042c 	.word	0x2000042c
 800df14:	200004b8 	.word	0x200004b8
 800df18:	200004cc 	.word	0x200004cc
 800df1c:	200004e8 	.word	0x200004e8
 800df20:	200004fc 	.word	0x200004fc
 800df24:	20000514 	.word	0x20000514
 800df28:	200004e0 	.word	0x200004e0
 800df2c:	200004e4 	.word	0x200004e4

0800df30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df36:	e019      	b.n	800df6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df38:	f000 faac 	bl	800e494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df3c:	4b10      	ldr	r3, [pc, #64]	; (800df80 <prvCheckTasksWaitingTermination+0x50>)
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	3304      	adds	r3, #4
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fe fc8b 	bl	800c864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df4e:	4b0d      	ldr	r3, [pc, #52]	; (800df84 <prvCheckTasksWaitingTermination+0x54>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3b01      	subs	r3, #1
 800df54:	4a0b      	ldr	r2, [pc, #44]	; (800df84 <prvCheckTasksWaitingTermination+0x54>)
 800df56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df58:	4b0b      	ldr	r3, [pc, #44]	; (800df88 <prvCheckTasksWaitingTermination+0x58>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	3b01      	subs	r3, #1
 800df5e:	4a0a      	ldr	r2, [pc, #40]	; (800df88 <prvCheckTasksWaitingTermination+0x58>)
 800df60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df62:	f000 fac7 	bl	800e4f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 f810 	bl	800df8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df6c:	4b06      	ldr	r3, [pc, #24]	; (800df88 <prvCheckTasksWaitingTermination+0x58>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1e1      	bne.n	800df38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df74:	bf00      	nop
 800df76:	bf00      	nop
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	200004fc 	.word	0x200004fc
 800df84:	20000528 	.word	0x20000528
 800df88:	20000510 	.word	0x20000510

0800df8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d108      	bne.n	800dfb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f000 fc62 	bl	800e86c <vPortFree>
				vPortFree( pxTCB );
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 fc5f 	bl	800e86c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dfae:	e018      	b.n	800dfe2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d103      	bne.n	800dfc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 fc56 	bl	800e86c <vPortFree>
	}
 800dfc0:	e00f      	b.n	800dfe2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d00a      	beq.n	800dfe2 <prvDeleteTCB+0x56>
	__asm volatile
 800dfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd0:	f383 8811 	msr	BASEPRI, r3
 800dfd4:	f3bf 8f6f 	isb	sy
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	60fb      	str	r3, [r7, #12]
}
 800dfde:	bf00      	nop
 800dfe0:	e7fe      	b.n	800dfe0 <prvDeleteTCB+0x54>
	}
 800dfe2:	bf00      	nop
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dff2:	4b0c      	ldr	r3, [pc, #48]	; (800e024 <prvResetNextTaskUnblockTime+0x38>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d104      	bne.n	800e006 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dffc:	4b0a      	ldr	r3, [pc, #40]	; (800e028 <prvResetNextTaskUnblockTime+0x3c>)
 800dffe:	f04f 32ff 	mov.w	r2, #4294967295
 800e002:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e004:	e008      	b.n	800e018 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e006:	4b07      	ldr	r3, [pc, #28]	; (800e024 <prvResetNextTaskUnblockTime+0x38>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	68db      	ldr	r3, [r3, #12]
 800e00e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	4a04      	ldr	r2, [pc, #16]	; (800e028 <prvResetNextTaskUnblockTime+0x3c>)
 800e016:	6013      	str	r3, [r2, #0]
}
 800e018:	bf00      	nop
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr
 800e024:	200004e0 	.word	0x200004e0
 800e028:	20000548 	.word	0x20000548

0800e02c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e032:	4b0b      	ldr	r3, [pc, #44]	; (800e060 <xTaskGetSchedulerState+0x34>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d102      	bne.n	800e040 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e03a:	2301      	movs	r3, #1
 800e03c:	607b      	str	r3, [r7, #4]
 800e03e:	e008      	b.n	800e052 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e040:	4b08      	ldr	r3, [pc, #32]	; (800e064 <xTaskGetSchedulerState+0x38>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d102      	bne.n	800e04e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e048:	2302      	movs	r3, #2
 800e04a:	607b      	str	r3, [r7, #4]
 800e04c:	e001      	b.n	800e052 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e04e:	2300      	movs	r3, #0
 800e050:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e052:	687b      	ldr	r3, [r7, #4]
	}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	20000534 	.word	0x20000534
 800e064:	20000550 	.word	0x20000550

0800e068 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e074:	2300      	movs	r3, #0
 800e076:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d06e      	beq.n	800e15c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e07e:	4b3a      	ldr	r3, [pc, #232]	; (800e168 <xTaskPriorityDisinherit+0x100>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	693a      	ldr	r2, [r7, #16]
 800e084:	429a      	cmp	r2, r3
 800e086:	d00a      	beq.n	800e09e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08c:	f383 8811 	msr	BASEPRI, r3
 800e090:	f3bf 8f6f 	isb	sy
 800e094:	f3bf 8f4f 	dsb	sy
 800e098:	60fb      	str	r3, [r7, #12]
}
 800e09a:	bf00      	nop
 800e09c:	e7fe      	b.n	800e09c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10a      	bne.n	800e0bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	60bb      	str	r3, [r7, #8]
}
 800e0b8:	bf00      	nop
 800e0ba:	e7fe      	b.n	800e0ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0c0:	1e5a      	subs	r2, r3, #1
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d044      	beq.n	800e15c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d140      	bne.n	800e15c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	3304      	adds	r3, #4
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fe fbc0 	bl	800c864 <uxListRemove>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d115      	bne.n	800e116 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ee:	491f      	ldr	r1, [pc, #124]	; (800e16c <xTaskPriorityDisinherit+0x104>)
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	440b      	add	r3, r1
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10a      	bne.n	800e116 <xTaskPriorityDisinherit+0xae>
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e104:	2201      	movs	r2, #1
 800e106:	fa02 f303 	lsl.w	r3, r2, r3
 800e10a:	43da      	mvns	r2, r3
 800e10c:	4b18      	ldr	r3, [pc, #96]	; (800e170 <xTaskPriorityDisinherit+0x108>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4013      	ands	r3, r2
 800e112:	4a17      	ldr	r2, [pc, #92]	; (800e170 <xTaskPriorityDisinherit+0x108>)
 800e114:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e122:	f1c3 0207 	rsb	r2, r3, #7
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12e:	2201      	movs	r2, #1
 800e130:	409a      	lsls	r2, r3
 800e132:	4b0f      	ldr	r3, [pc, #60]	; (800e170 <xTaskPriorityDisinherit+0x108>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4313      	orrs	r3, r2
 800e138:	4a0d      	ldr	r2, [pc, #52]	; (800e170 <xTaskPriorityDisinherit+0x108>)
 800e13a:	6013      	str	r3, [r2, #0]
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e140:	4613      	mov	r3, r2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4413      	add	r3, r2
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	4a08      	ldr	r2, [pc, #32]	; (800e16c <xTaskPriorityDisinherit+0x104>)
 800e14a:	441a      	add	r2, r3
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	3304      	adds	r3, #4
 800e150:	4619      	mov	r1, r3
 800e152:	4610      	mov	r0, r2
 800e154:	f7fe fb29 	bl	800c7aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e158:	2301      	movs	r3, #1
 800e15a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e15c:	697b      	ldr	r3, [r7, #20]
	}
 800e15e:	4618      	mov	r0, r3
 800e160:	3718      	adds	r7, #24
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	20000428 	.word	0x20000428
 800e16c:	2000042c 	.word	0x2000042c
 800e170:	20000530 	.word	0x20000530

0800e174 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e17e:	4b29      	ldr	r3, [pc, #164]	; (800e224 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e184:	4b28      	ldr	r3, [pc, #160]	; (800e228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3304      	adds	r3, #4
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fe fb6a 	bl	800c864 <uxListRemove>
 800e190:	4603      	mov	r3, r0
 800e192:	2b00      	cmp	r3, #0
 800e194:	d10b      	bne.n	800e1ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e196:	4b24      	ldr	r3, [pc, #144]	; (800e228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19c:	2201      	movs	r2, #1
 800e19e:	fa02 f303 	lsl.w	r3, r2, r3
 800e1a2:	43da      	mvns	r2, r3
 800e1a4:	4b21      	ldr	r3, [pc, #132]	; (800e22c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4013      	ands	r3, r2
 800e1aa:	4a20      	ldr	r2, [pc, #128]	; (800e22c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e1ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1b4:	d10a      	bne.n	800e1cc <prvAddCurrentTaskToDelayedList+0x58>
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d007      	beq.n	800e1cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1bc:	4b1a      	ldr	r3, [pc, #104]	; (800e228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	3304      	adds	r3, #4
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	481a      	ldr	r0, [pc, #104]	; (800e230 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e1c6:	f7fe faf0 	bl	800c7aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e1ca:	e026      	b.n	800e21a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e1d4:	4b14      	ldr	r3, [pc, #80]	; (800e228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d209      	bcs.n	800e1f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1e4:	4b13      	ldr	r3, [pc, #76]	; (800e234 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	4b0f      	ldr	r3, [pc, #60]	; (800e228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	f7fe fafe 	bl	800c7f2 <vListInsert>
}
 800e1f6:	e010      	b.n	800e21a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1f8:	4b0f      	ldr	r3, [pc, #60]	; (800e238 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	4b0a      	ldr	r3, [pc, #40]	; (800e228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	3304      	adds	r3, #4
 800e202:	4619      	mov	r1, r3
 800e204:	4610      	mov	r0, r2
 800e206:	f7fe faf4 	bl	800c7f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e20a:	4b0c      	ldr	r3, [pc, #48]	; (800e23c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	429a      	cmp	r2, r3
 800e212:	d202      	bcs.n	800e21a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e214:	4a09      	ldr	r2, [pc, #36]	; (800e23c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	6013      	str	r3, [r2, #0]
}
 800e21a:	bf00      	nop
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	2000052c 	.word	0x2000052c
 800e228:	20000428 	.word	0x20000428
 800e22c:	20000530 	.word	0x20000530
 800e230:	20000514 	.word	0x20000514
 800e234:	200004e4 	.word	0x200004e4
 800e238:	200004e0 	.word	0x200004e0
 800e23c:	20000548 	.word	0x20000548

0800e240 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	3b04      	subs	r3, #4
 800e250:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	3b04      	subs	r3, #4
 800e25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	f023 0201 	bic.w	r2, r3, #1
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	3b04      	subs	r3, #4
 800e26e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e270:	4a0c      	ldr	r2, [pc, #48]	; (800e2a4 <pxPortInitialiseStack+0x64>)
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	3b14      	subs	r3, #20
 800e27a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3b04      	subs	r3, #4
 800e286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f06f 0202 	mvn.w	r2, #2
 800e28e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	3b20      	subs	r3, #32
 800e294:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e296:	68fb      	ldr	r3, [r7, #12]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3714      	adds	r7, #20
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr
 800e2a4:	0800e2a9 	.word	0x0800e2a9

0800e2a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e2b2:	4b12      	ldr	r3, [pc, #72]	; (800e2fc <prvTaskExitError+0x54>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ba:	d00a      	beq.n	800e2d2 <prvTaskExitError+0x2a>
	__asm volatile
 800e2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	60fb      	str	r3, [r7, #12]
}
 800e2ce:	bf00      	nop
 800e2d0:	e7fe      	b.n	800e2d0 <prvTaskExitError+0x28>
	__asm volatile
 800e2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	60bb      	str	r3, [r7, #8]
}
 800e2e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e2e6:	bf00      	nop
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d0fc      	beq.n	800e2e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e2ee:	bf00      	nop
 800e2f0:	bf00      	nop
 800e2f2:	3714      	adds	r7, #20
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr
 800e2fc:	200000b8 	.word	0x200000b8

0800e300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e300:	4b07      	ldr	r3, [pc, #28]	; (800e320 <pxCurrentTCBConst2>)
 800e302:	6819      	ldr	r1, [r3, #0]
 800e304:	6808      	ldr	r0, [r1, #0]
 800e306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30a:	f380 8809 	msr	PSP, r0
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f04f 0000 	mov.w	r0, #0
 800e316:	f380 8811 	msr	BASEPRI, r0
 800e31a:	4770      	bx	lr
 800e31c:	f3af 8000 	nop.w

0800e320 <pxCurrentTCBConst2>:
 800e320:	20000428 	.word	0x20000428
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e324:	bf00      	nop
 800e326:	bf00      	nop

0800e328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e328:	4808      	ldr	r0, [pc, #32]	; (800e34c <prvPortStartFirstTask+0x24>)
 800e32a:	6800      	ldr	r0, [r0, #0]
 800e32c:	6800      	ldr	r0, [r0, #0]
 800e32e:	f380 8808 	msr	MSP, r0
 800e332:	f04f 0000 	mov.w	r0, #0
 800e336:	f380 8814 	msr	CONTROL, r0
 800e33a:	b662      	cpsie	i
 800e33c:	b661      	cpsie	f
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	df00      	svc	0
 800e348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e34a:	bf00      	nop
 800e34c:	e000ed08 	.word	0xe000ed08

0800e350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b086      	sub	sp, #24
 800e354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e356:	4b46      	ldr	r3, [pc, #280]	; (800e470 <xPortStartScheduler+0x120>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a46      	ldr	r2, [pc, #280]	; (800e474 <xPortStartScheduler+0x124>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d10a      	bne.n	800e376 <xPortStartScheduler+0x26>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	613b      	str	r3, [r7, #16]
}
 800e372:	bf00      	nop
 800e374:	e7fe      	b.n	800e374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e376:	4b3e      	ldr	r3, [pc, #248]	; (800e470 <xPortStartScheduler+0x120>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a3f      	ldr	r2, [pc, #252]	; (800e478 <xPortStartScheduler+0x128>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d10a      	bne.n	800e396 <xPortStartScheduler+0x46>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	60fb      	str	r3, [r7, #12]
}
 800e392:	bf00      	nop
 800e394:	e7fe      	b.n	800e394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e396:	4b39      	ldr	r3, [pc, #228]	; (800e47c <xPortStartScheduler+0x12c>)
 800e398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	22ff      	movs	r2, #255	; 0xff
 800e3a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e3b0:	78fb      	ldrb	r3, [r7, #3]
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e3b8:	b2da      	uxtb	r2, r3
 800e3ba:	4b31      	ldr	r3, [pc, #196]	; (800e480 <xPortStartScheduler+0x130>)
 800e3bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3be:	4b31      	ldr	r3, [pc, #196]	; (800e484 <xPortStartScheduler+0x134>)
 800e3c0:	2207      	movs	r2, #7
 800e3c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3c4:	e009      	b.n	800e3da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e3c6:	4b2f      	ldr	r3, [pc, #188]	; (800e484 <xPortStartScheduler+0x134>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	4a2d      	ldr	r2, [pc, #180]	; (800e484 <xPortStartScheduler+0x134>)
 800e3ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e3d0:	78fb      	ldrb	r3, [r7, #3]
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	005b      	lsls	r3, r3, #1
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3da:	78fb      	ldrb	r3, [r7, #3]
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3e2:	2b80      	cmp	r3, #128	; 0x80
 800e3e4:	d0ef      	beq.n	800e3c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e3e6:	4b27      	ldr	r3, [pc, #156]	; (800e484 <xPortStartScheduler+0x134>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f1c3 0307 	rsb	r3, r3, #7
 800e3ee:	2b04      	cmp	r3, #4
 800e3f0:	d00a      	beq.n	800e408 <xPortStartScheduler+0xb8>
	__asm volatile
 800e3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	60bb      	str	r3, [r7, #8]
}
 800e404:	bf00      	nop
 800e406:	e7fe      	b.n	800e406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e408:	4b1e      	ldr	r3, [pc, #120]	; (800e484 <xPortStartScheduler+0x134>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	021b      	lsls	r3, r3, #8
 800e40e:	4a1d      	ldr	r2, [pc, #116]	; (800e484 <xPortStartScheduler+0x134>)
 800e410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e412:	4b1c      	ldr	r3, [pc, #112]	; (800e484 <xPortStartScheduler+0x134>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e41a:	4a1a      	ldr	r2, [pc, #104]	; (800e484 <xPortStartScheduler+0x134>)
 800e41c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	b2da      	uxtb	r2, r3
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e426:	4b18      	ldr	r3, [pc, #96]	; (800e488 <xPortStartScheduler+0x138>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a17      	ldr	r2, [pc, #92]	; (800e488 <xPortStartScheduler+0x138>)
 800e42c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e432:	4b15      	ldr	r3, [pc, #84]	; (800e488 <xPortStartScheduler+0x138>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a14      	ldr	r2, [pc, #80]	; (800e488 <xPortStartScheduler+0x138>)
 800e438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e43c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e43e:	f000 f8dd 	bl	800e5fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e442:	4b12      	ldr	r3, [pc, #72]	; (800e48c <xPortStartScheduler+0x13c>)
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e448:	f000 f8fc 	bl	800e644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e44c:	4b10      	ldr	r3, [pc, #64]	; (800e490 <xPortStartScheduler+0x140>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a0f      	ldr	r2, [pc, #60]	; (800e490 <xPortStartScheduler+0x140>)
 800e452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e458:	f7ff ff66 	bl	800e328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e45c:	f7ff fb84 	bl	800db68 <vTaskSwitchContext>
	prvTaskExitError();
 800e460:	f7ff ff22 	bl	800e2a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	3718      	adds	r7, #24
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	e000ed00 	.word	0xe000ed00
 800e474:	410fc271 	.word	0x410fc271
 800e478:	410fc270 	.word	0x410fc270
 800e47c:	e000e400 	.word	0xe000e400
 800e480:	20000554 	.word	0x20000554
 800e484:	20000558 	.word	0x20000558
 800e488:	e000ed20 	.word	0xe000ed20
 800e48c:	200000b8 	.word	0x200000b8
 800e490:	e000ef34 	.word	0xe000ef34

0800e494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
	__asm volatile
 800e49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49e:	f383 8811 	msr	BASEPRI, r3
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	607b      	str	r3, [r7, #4]
}
 800e4ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e4ae:	4b0f      	ldr	r3, [pc, #60]	; (800e4ec <vPortEnterCritical+0x58>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	4a0d      	ldr	r2, [pc, #52]	; (800e4ec <vPortEnterCritical+0x58>)
 800e4b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e4b8:	4b0c      	ldr	r3, [pc, #48]	; (800e4ec <vPortEnterCritical+0x58>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d10f      	bne.n	800e4e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e4c0:	4b0b      	ldr	r3, [pc, #44]	; (800e4f0 <vPortEnterCritical+0x5c>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00a      	beq.n	800e4e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ce:	f383 8811 	msr	BASEPRI, r3
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	603b      	str	r3, [r7, #0]
}
 800e4dc:	bf00      	nop
 800e4de:	e7fe      	b.n	800e4de <vPortEnterCritical+0x4a>
	}
}
 800e4e0:	bf00      	nop
 800e4e2:	370c      	adds	r7, #12
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr
 800e4ec:	200000b8 	.word	0x200000b8
 800e4f0:	e000ed04 	.word	0xe000ed04

0800e4f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4fa:	4b12      	ldr	r3, [pc, #72]	; (800e544 <vPortExitCritical+0x50>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d10a      	bne.n	800e518 <vPortExitCritical+0x24>
	__asm volatile
 800e502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e506:	f383 8811 	msr	BASEPRI, r3
 800e50a:	f3bf 8f6f 	isb	sy
 800e50e:	f3bf 8f4f 	dsb	sy
 800e512:	607b      	str	r3, [r7, #4]
}
 800e514:	bf00      	nop
 800e516:	e7fe      	b.n	800e516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e518:	4b0a      	ldr	r3, [pc, #40]	; (800e544 <vPortExitCritical+0x50>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	3b01      	subs	r3, #1
 800e51e:	4a09      	ldr	r2, [pc, #36]	; (800e544 <vPortExitCritical+0x50>)
 800e520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e522:	4b08      	ldr	r3, [pc, #32]	; (800e544 <vPortExitCritical+0x50>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d105      	bne.n	800e536 <vPortExitCritical+0x42>
 800e52a:	2300      	movs	r3, #0
 800e52c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	f383 8811 	msr	BASEPRI, r3
}
 800e534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e536:	bf00      	nop
 800e538:	370c      	adds	r7, #12
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	200000b8 	.word	0x200000b8
	...

0800e550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e550:	f3ef 8009 	mrs	r0, PSP
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	4b15      	ldr	r3, [pc, #84]	; (800e5b0 <pxCurrentTCBConst>)
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	f01e 0f10 	tst.w	lr, #16
 800e560:	bf08      	it	eq
 800e562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56a:	6010      	str	r0, [r2, #0]
 800e56c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e570:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e574:	f380 8811 	msr	BASEPRI, r0
 800e578:	f3bf 8f4f 	dsb	sy
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f7ff faf2 	bl	800db68 <vTaskSwitchContext>
 800e584:	f04f 0000 	mov.w	r0, #0
 800e588:	f380 8811 	msr	BASEPRI, r0
 800e58c:	bc09      	pop	{r0, r3}
 800e58e:	6819      	ldr	r1, [r3, #0]
 800e590:	6808      	ldr	r0, [r1, #0]
 800e592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e596:	f01e 0f10 	tst.w	lr, #16
 800e59a:	bf08      	it	eq
 800e59c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e5a0:	f380 8809 	msr	PSP, r0
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	f3af 8000 	nop.w

0800e5b0 <pxCurrentTCBConst>:
 800e5b0:	20000428 	.word	0x20000428
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop

0800e5b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c2:	f383 8811 	msr	BASEPRI, r3
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	f3bf 8f4f 	dsb	sy
 800e5ce:	607b      	str	r3, [r7, #4]
}
 800e5d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e5d2:	f7ff fa11 	bl	800d9f8 <xTaskIncrementTick>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d003      	beq.n	800e5e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5dc:	4b06      	ldr	r3, [pc, #24]	; (800e5f8 <SysTick_Handler+0x40>)
 800e5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	f383 8811 	msr	BASEPRI, r3
}
 800e5ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5f0:	bf00      	nop
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	e000ed04 	.word	0xe000ed04

0800e5fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e600:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <vPortSetupTimerInterrupt+0x34>)
 800e602:	2200      	movs	r2, #0
 800e604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e606:	4b0b      	ldr	r3, [pc, #44]	; (800e634 <vPortSetupTimerInterrupt+0x38>)
 800e608:	2200      	movs	r2, #0
 800e60a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e60c:	4b0a      	ldr	r3, [pc, #40]	; (800e638 <vPortSetupTimerInterrupt+0x3c>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a0a      	ldr	r2, [pc, #40]	; (800e63c <vPortSetupTimerInterrupt+0x40>)
 800e612:	fba2 2303 	umull	r2, r3, r2, r3
 800e616:	099b      	lsrs	r3, r3, #6
 800e618:	4a09      	ldr	r2, [pc, #36]	; (800e640 <vPortSetupTimerInterrupt+0x44>)
 800e61a:	3b01      	subs	r3, #1
 800e61c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e61e:	4b04      	ldr	r3, [pc, #16]	; (800e630 <vPortSetupTimerInterrupt+0x34>)
 800e620:	2207      	movs	r2, #7
 800e622:	601a      	str	r2, [r3, #0]
}
 800e624:	bf00      	nop
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	e000e010 	.word	0xe000e010
 800e634:	e000e018 	.word	0xe000e018
 800e638:	20000000 	.word	0x20000000
 800e63c:	10624dd3 	.word	0x10624dd3
 800e640:	e000e014 	.word	0xe000e014

0800e644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e654 <vPortEnableVFP+0x10>
 800e648:	6801      	ldr	r1, [r0, #0]
 800e64a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e64e:	6001      	str	r1, [r0, #0]
 800e650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e652:	bf00      	nop
 800e654:	e000ed88 	.word	0xe000ed88

0800e658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e658:	b480      	push	{r7}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e65e:	f3ef 8305 	mrs	r3, IPSR
 800e662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b0f      	cmp	r3, #15
 800e668:	d914      	bls.n	800e694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e66a:	4a17      	ldr	r2, [pc, #92]	; (800e6c8 <vPortValidateInterruptPriority+0x70>)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	4413      	add	r3, r2
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e674:	4b15      	ldr	r3, [pc, #84]	; (800e6cc <vPortValidateInterruptPriority+0x74>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	7afa      	ldrb	r2, [r7, #11]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d20a      	bcs.n	800e694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	607b      	str	r3, [r7, #4]
}
 800e690:	bf00      	nop
 800e692:	e7fe      	b.n	800e692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e694:	4b0e      	ldr	r3, [pc, #56]	; (800e6d0 <vPortValidateInterruptPriority+0x78>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e69c:	4b0d      	ldr	r3, [pc, #52]	; (800e6d4 <vPortValidateInterruptPriority+0x7c>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d90a      	bls.n	800e6ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	603b      	str	r3, [r7, #0]
}
 800e6b6:	bf00      	nop
 800e6b8:	e7fe      	b.n	800e6b8 <vPortValidateInterruptPriority+0x60>
	}
 800e6ba:	bf00      	nop
 800e6bc:	3714      	adds	r7, #20
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr
 800e6c6:	bf00      	nop
 800e6c8:	e000e3f0 	.word	0xe000e3f0
 800e6cc:	20000554 	.word	0x20000554
 800e6d0:	e000ed0c 	.word	0xe000ed0c
 800e6d4:	20000558 	.word	0x20000558

0800e6d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08a      	sub	sp, #40	; 0x28
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e6e4:	f7ff f8de 	bl	800d8a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e6e8:	4b5b      	ldr	r3, [pc, #364]	; (800e858 <pvPortMalloc+0x180>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d101      	bne.n	800e6f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6f0:	f000 f916 	bl	800e920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6f4:	4b59      	ldr	r3, [pc, #356]	; (800e85c <pvPortMalloc+0x184>)
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	4013      	ands	r3, r2
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f040 808e 	bne.w	800e81e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d01d      	beq.n	800e744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e708:	2208      	movs	r2, #8
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4413      	add	r3, r2
 800e70e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f003 0307 	and.w	r3, r3, #7
 800e716:	2b00      	cmp	r3, #0
 800e718:	d014      	beq.n	800e744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f023 0307 	bic.w	r3, r3, #7
 800e720:	3308      	adds	r3, #8
 800e722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f003 0307 	and.w	r3, r3, #7
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00a      	beq.n	800e744 <pvPortMalloc+0x6c>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	617b      	str	r3, [r7, #20]
}
 800e740:	bf00      	nop
 800e742:	e7fe      	b.n	800e742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d069      	beq.n	800e81e <pvPortMalloc+0x146>
 800e74a:	4b45      	ldr	r3, [pc, #276]	; (800e860 <pvPortMalloc+0x188>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	429a      	cmp	r2, r3
 800e752:	d864      	bhi.n	800e81e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e754:	4b43      	ldr	r3, [pc, #268]	; (800e864 <pvPortMalloc+0x18c>)
 800e756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e758:	4b42      	ldr	r3, [pc, #264]	; (800e864 <pvPortMalloc+0x18c>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e75e:	e004      	b.n	800e76a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	429a      	cmp	r2, r3
 800e772:	d903      	bls.n	800e77c <pvPortMalloc+0xa4>
 800e774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1f1      	bne.n	800e760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e77c:	4b36      	ldr	r3, [pc, #216]	; (800e858 <pvPortMalloc+0x180>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e782:	429a      	cmp	r2, r3
 800e784:	d04b      	beq.n	800e81e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e786:	6a3b      	ldr	r3, [r7, #32]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2208      	movs	r2, #8
 800e78c:	4413      	add	r3, r2
 800e78e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	6a3b      	ldr	r3, [r7, #32]
 800e796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	1ad2      	subs	r2, r2, r3
 800e7a0:	2308      	movs	r3, #8
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d91f      	bls.n	800e7e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4413      	add	r3, r2
 800e7ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	f003 0307 	and.w	r3, r3, #7
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d00a      	beq.n	800e7d0 <pvPortMalloc+0xf8>
	__asm volatile
 800e7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	613b      	str	r3, [r7, #16]
}
 800e7cc:	bf00      	nop
 800e7ce:	e7fe      	b.n	800e7ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	685a      	ldr	r2, [r3, #4]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	1ad2      	subs	r2, r2, r3
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7e2:	69b8      	ldr	r0, [r7, #24]
 800e7e4:	f000 f8fe 	bl	800e9e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e7e8:	4b1d      	ldr	r3, [pc, #116]	; (800e860 <pvPortMalloc+0x188>)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	4a1b      	ldr	r2, [pc, #108]	; (800e860 <pvPortMalloc+0x188>)
 800e7f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7f6:	4b1a      	ldr	r3, [pc, #104]	; (800e860 <pvPortMalloc+0x188>)
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	4b1b      	ldr	r3, [pc, #108]	; (800e868 <pvPortMalloc+0x190>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d203      	bcs.n	800e80a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e802:	4b17      	ldr	r3, [pc, #92]	; (800e860 <pvPortMalloc+0x188>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4a18      	ldr	r2, [pc, #96]	; (800e868 <pvPortMalloc+0x190>)
 800e808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80c:	685a      	ldr	r2, [r3, #4]
 800e80e:	4b13      	ldr	r3, [pc, #76]	; (800e85c <pvPortMalloc+0x184>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	431a      	orrs	r2, r3
 800e814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81a:	2200      	movs	r2, #0
 800e81c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e81e:	f7ff f84f 	bl	800d8c0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d101      	bne.n	800e82c <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e828:	f7f2 fb06 	bl	8000e38 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	f003 0307 	and.w	r3, r3, #7
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00a      	beq.n	800e84c <pvPortMalloc+0x174>
	__asm volatile
 800e836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83a:	f383 8811 	msr	BASEPRI, r3
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	60fb      	str	r3, [r7, #12]
}
 800e848:	bf00      	nop
 800e84a:	e7fe      	b.n	800e84a <pvPortMalloc+0x172>
	return pvReturn;
 800e84c:	69fb      	ldr	r3, [r7, #28]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3728      	adds	r7, #40	; 0x28
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	20008564 	.word	0x20008564
 800e85c:	20008570 	.word	0x20008570
 800e860:	20008568 	.word	0x20008568
 800e864:	2000855c 	.word	0x2000855c
 800e868:	2000856c 	.word	0x2000856c

0800e86c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b086      	sub	sp, #24
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d048      	beq.n	800e910 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e87e:	2308      	movs	r3, #8
 800e880:	425b      	negs	r3, r3
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	4413      	add	r3, r2
 800e886:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	685a      	ldr	r2, [r3, #4]
 800e890:	4b21      	ldr	r3, [pc, #132]	; (800e918 <vPortFree+0xac>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4013      	ands	r3, r2
 800e896:	2b00      	cmp	r3, #0
 800e898:	d10a      	bne.n	800e8b0 <vPortFree+0x44>
	__asm volatile
 800e89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89e:	f383 8811 	msr	BASEPRI, r3
 800e8a2:	f3bf 8f6f 	isb	sy
 800e8a6:	f3bf 8f4f 	dsb	sy
 800e8aa:	60fb      	str	r3, [r7, #12]
}
 800e8ac:	bf00      	nop
 800e8ae:	e7fe      	b.n	800e8ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00a      	beq.n	800e8ce <vPortFree+0x62>
	__asm volatile
 800e8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	60bb      	str	r3, [r7, #8]
}
 800e8ca:	bf00      	nop
 800e8cc:	e7fe      	b.n	800e8cc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	685a      	ldr	r2, [r3, #4]
 800e8d2:	4b11      	ldr	r3, [pc, #68]	; (800e918 <vPortFree+0xac>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d019      	beq.n	800e910 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d115      	bne.n	800e910 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	685a      	ldr	r2, [r3, #4]
 800e8e8:	4b0b      	ldr	r3, [pc, #44]	; (800e918 <vPortFree+0xac>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	43db      	mvns	r3, r3
 800e8ee:	401a      	ands	r2, r3
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e8f4:	f7fe ffd6 	bl	800d8a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	685a      	ldr	r2, [r3, #4]
 800e8fc:	4b07      	ldr	r3, [pc, #28]	; (800e91c <vPortFree+0xb0>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4413      	add	r3, r2
 800e902:	4a06      	ldr	r2, [pc, #24]	; (800e91c <vPortFree+0xb0>)
 800e904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e906:	6938      	ldr	r0, [r7, #16]
 800e908:	f000 f86c 	bl	800e9e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e90c:	f7fe ffd8 	bl	800d8c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e910:	bf00      	nop
 800e912:	3718      	adds	r7, #24
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	20008570 	.word	0x20008570
 800e91c:	20008568 	.word	0x20008568

0800e920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e92a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e92c:	4b27      	ldr	r3, [pc, #156]	; (800e9cc <prvHeapInit+0xac>)
 800e92e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f003 0307 	and.w	r3, r3, #7
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00c      	beq.n	800e954 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	3307      	adds	r3, #7
 800e93e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f023 0307 	bic.w	r3, r3, #7
 800e946:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	4a1f      	ldr	r2, [pc, #124]	; (800e9cc <prvHeapInit+0xac>)
 800e950:	4413      	add	r3, r2
 800e952:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e958:	4a1d      	ldr	r2, [pc, #116]	; (800e9d0 <prvHeapInit+0xb0>)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e95e:	4b1c      	ldr	r3, [pc, #112]	; (800e9d0 <prvHeapInit+0xb0>)
 800e960:	2200      	movs	r2, #0
 800e962:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	4413      	add	r3, r2
 800e96a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e96c:	2208      	movs	r2, #8
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	1a9b      	subs	r3, r3, r2
 800e972:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f023 0307 	bic.w	r3, r3, #7
 800e97a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	4a15      	ldr	r2, [pc, #84]	; (800e9d4 <prvHeapInit+0xb4>)
 800e980:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e982:	4b14      	ldr	r3, [pc, #80]	; (800e9d4 <prvHeapInit+0xb4>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2200      	movs	r2, #0
 800e988:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e98a:	4b12      	ldr	r3, [pc, #72]	; (800e9d4 <prvHeapInit+0xb4>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2200      	movs	r2, #0
 800e990:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	1ad2      	subs	r2, r2, r3
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e9a0:	4b0c      	ldr	r3, [pc, #48]	; (800e9d4 <prvHeapInit+0xb4>)
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	4a0a      	ldr	r2, [pc, #40]	; (800e9d8 <prvHeapInit+0xb8>)
 800e9ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	4a09      	ldr	r2, [pc, #36]	; (800e9dc <prvHeapInit+0xbc>)
 800e9b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e9b8:	4b09      	ldr	r3, [pc, #36]	; (800e9e0 <prvHeapInit+0xc0>)
 800e9ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e9be:	601a      	str	r2, [r3, #0]
}
 800e9c0:	bf00      	nop
 800e9c2:	3714      	adds	r7, #20
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr
 800e9cc:	2000055c 	.word	0x2000055c
 800e9d0:	2000855c 	.word	0x2000855c
 800e9d4:	20008564 	.word	0x20008564
 800e9d8:	2000856c 	.word	0x2000856c
 800e9dc:	20008568 	.word	0x20008568
 800e9e0:	20008570 	.word	0x20008570

0800e9e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b085      	sub	sp, #20
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e9ec:	4b28      	ldr	r3, [pc, #160]	; (800ea90 <prvInsertBlockIntoFreeList+0xac>)
 800e9ee:	60fb      	str	r3, [r7, #12]
 800e9f0:	e002      	b.n	800e9f8 <prvInsertBlockIntoFreeList+0x14>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	60fb      	str	r3, [r7, #12]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d8f7      	bhi.n	800e9f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d108      	bne.n	800ea26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	685a      	ldr	r2, [r3, #4]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	441a      	add	r2, r3
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	441a      	add	r2, r3
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d118      	bne.n	800ea6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	4b15      	ldr	r3, [pc, #84]	; (800ea94 <prvInsertBlockIntoFreeList+0xb0>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d00d      	beq.n	800ea62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	685a      	ldr	r2, [r3, #4]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	441a      	add	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	601a      	str	r2, [r3, #0]
 800ea60:	e008      	b.n	800ea74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea62:	4b0c      	ldr	r3, [pc, #48]	; (800ea94 <prvInsertBlockIntoFreeList+0xb0>)
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	601a      	str	r2, [r3, #0]
 800ea6a:	e003      	b.n	800ea74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d002      	beq.n	800ea82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea82:	bf00      	nop
 800ea84:	3714      	adds	r7, #20
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	2000855c 	.word	0x2000855c
 800ea94:	20008564 	.word	0x20008564

0800ea98 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	490e      	ldr	r1, [pc, #56]	; (800ead8 <MX_USB_HOST_Init+0x40>)
 800eaa0:	480e      	ldr	r0, [pc, #56]	; (800eadc <MX_USB_HOST_Init+0x44>)
 800eaa2:	f7fb ff6f 	bl	800a984 <USBH_Init>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800eaac:	f7f2 ffc2 	bl	8001a34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800eab0:	490b      	ldr	r1, [pc, #44]	; (800eae0 <MX_USB_HOST_Init+0x48>)
 800eab2:	480a      	ldr	r0, [pc, #40]	; (800eadc <MX_USB_HOST_Init+0x44>)
 800eab4:	f7fc f81c 	bl	800aaf0 <USBH_RegisterClass>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800eabe:	f7f2 ffb9 	bl	8001a34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800eac2:	4806      	ldr	r0, [pc, #24]	; (800eadc <MX_USB_HOST_Init+0x44>)
 800eac4:	f7fc f8a0 	bl	800ac08 <USBH_Start>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d001      	beq.n	800ead2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eace:	f7f2 ffb1 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ead2:	bf00      	nop
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	0800eae5 	.word	0x0800eae5
 800eadc:	20008990 	.word	0x20008990
 800eae0:	20000098 	.word	0x20000098

0800eae4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	460b      	mov	r3, r1
 800eaee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eaf0:	78fb      	ldrb	r3, [r7, #3]
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	2b04      	cmp	r3, #4
 800eaf6:	d819      	bhi.n	800eb2c <USBH_UserProcess+0x48>
 800eaf8:	a201      	add	r2, pc, #4	; (adr r2, 800eb00 <USBH_UserProcess+0x1c>)
 800eafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafe:	bf00      	nop
 800eb00:	0800eb2d 	.word	0x0800eb2d
 800eb04:	0800eb1d 	.word	0x0800eb1d
 800eb08:	0800eb2d 	.word	0x0800eb2d
 800eb0c:	0800eb25 	.word	0x0800eb25
 800eb10:	0800eb15 	.word	0x0800eb15
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eb14:	4b09      	ldr	r3, [pc, #36]	; (800eb3c <USBH_UserProcess+0x58>)
 800eb16:	2203      	movs	r2, #3
 800eb18:	701a      	strb	r2, [r3, #0]
  break;
 800eb1a:	e008      	b.n	800eb2e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800eb1c:	4b07      	ldr	r3, [pc, #28]	; (800eb3c <USBH_UserProcess+0x58>)
 800eb1e:	2202      	movs	r2, #2
 800eb20:	701a      	strb	r2, [r3, #0]
  break;
 800eb22:	e004      	b.n	800eb2e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800eb24:	4b05      	ldr	r3, [pc, #20]	; (800eb3c <USBH_UserProcess+0x58>)
 800eb26:	2201      	movs	r2, #1
 800eb28:	701a      	strb	r2, [r3, #0]
  break;
 800eb2a:	e000      	b.n	800eb2e <USBH_UserProcess+0x4a>

  default:
  break;
 800eb2c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800eb2e:	bf00      	nop
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	20008574 	.word	0x20008574

0800eb40 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b08a      	sub	sp, #40	; 0x28
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb48:	f107 0314 	add.w	r3, r7, #20
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	601a      	str	r2, [r3, #0]
 800eb50:	605a      	str	r2, [r3, #4]
 800eb52:	609a      	str	r2, [r3, #8]
 800eb54:	60da      	str	r2, [r3, #12]
 800eb56:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4a24      	ldr	r2, [pc, #144]	; (800ebf0 <HAL_HCD_MspInit+0xb0>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d141      	bne.n	800ebe6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb62:	2300      	movs	r3, #0
 800eb64:	613b      	str	r3, [r7, #16]
 800eb66:	4b23      	ldr	r3, [pc, #140]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800eb68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb6a:	4a22      	ldr	r2, [pc, #136]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800eb6c:	f043 0302 	orr.w	r3, r3, #2
 800eb70:	6313      	str	r3, [r2, #48]	; 0x30
 800eb72:	4b20      	ldr	r3, [pc, #128]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800eb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb76:	f003 0302 	and.w	r3, r3, #2
 800eb7a:	613b      	str	r3, [r7, #16]
 800eb7c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800eb7e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800eb82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb84:	2302      	movs	r3, #2
 800eb86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800eb90:	230c      	movs	r3, #12
 800eb92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb94:	f107 0314 	add.w	r3, r7, #20
 800eb98:	4619      	mov	r1, r3
 800eb9a:	4817      	ldr	r0, [pc, #92]	; (800ebf8 <HAL_HCD_MspInit+0xb8>)
 800eb9c:	f7f5 fbfe 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800eba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eba6:	2300      	movs	r3, #0
 800eba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ebae:	f107 0314 	add.w	r3, r7, #20
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	4810      	ldr	r0, [pc, #64]	; (800ebf8 <HAL_HCD_MspInit+0xb8>)
 800ebb6:	f7f5 fbf1 	bl	800439c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60fb      	str	r3, [r7, #12]
 800ebbe:	4b0d      	ldr	r3, [pc, #52]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800ebc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebc2:	4a0c      	ldr	r2, [pc, #48]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800ebc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ebc8:	6313      	str	r3, [r2, #48]	; 0x30
 800ebca:	4b0a      	ldr	r3, [pc, #40]	; (800ebf4 <HAL_HCD_MspInit+0xb4>)
 800ebcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ebd2:	60fb      	str	r3, [r7, #12]
 800ebd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	2105      	movs	r1, #5
 800ebda:	204d      	movs	r0, #77	; 0x4d
 800ebdc:	f7f5 f9a9 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ebe0:	204d      	movs	r0, #77	; 0x4d
 800ebe2:	f7f5 f9c2 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ebe6:	bf00      	nop
 800ebe8:	3728      	adds	r7, #40	; 0x28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	40040000 	.word	0x40040000
 800ebf4:	40023800 	.word	0x40023800
 800ebf8:	40020400 	.word	0x40020400

0800ebfc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fc fca9 	bl	800b562 <USBH_LL_IncTimer>
}
 800ec10:	bf00      	nop
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fc fced 	bl	800b606 <USBH_LL_Connect>
}
 800ec2c:	bf00      	nop
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fc fd02 	bl	800b64c <USBH_LL_Disconnect>
}
 800ec48:	bf00      	nop
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	70fb      	strb	r3, [r7, #3]
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fc fd37 	bl	800b6da <USBH_LL_NotifyURBChange>
#endif
}
 800ec6c:	bf00      	nop
 800ec6e:	3708      	adds	r7, #8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fc fc97 	bl	800b5b6 <USBH_LL_PortEnabled>
}
 800ec88:	bf00      	nop
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fc fca3 	bl	800b5ea <USBH_LL_PortDisabled>
}
 800eca4:	bf00      	nop
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d132      	bne.n	800ed24 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ecbe:	4a1c      	ldr	r2, [pc, #112]	; (800ed30 <USBH_LL_Init+0x84>)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4a19      	ldr	r2, [pc, #100]	; (800ed30 <USBH_LL_Init+0x84>)
 800ecca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ecce:	4b18      	ldr	r3, [pc, #96]	; (800ed30 <USBH_LL_Init+0x84>)
 800ecd0:	4a18      	ldr	r2, [pc, #96]	; (800ed34 <USBH_LL_Init+0x88>)
 800ecd2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800ecd4:	4b16      	ldr	r3, [pc, #88]	; (800ed30 <USBH_LL_Init+0x84>)
 800ecd6:	220c      	movs	r2, #12
 800ecd8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800ecda:	4b15      	ldr	r3, [pc, #84]	; (800ed30 <USBH_LL_Init+0x84>)
 800ecdc:	2201      	movs	r2, #1
 800ecde:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ece0:	4b13      	ldr	r3, [pc, #76]	; (800ed30 <USBH_LL_Init+0x84>)
 800ece2:	2200      	movs	r2, #0
 800ece4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ece6:	4b12      	ldr	r3, [pc, #72]	; (800ed30 <USBH_LL_Init+0x84>)
 800ece8:	2202      	movs	r2, #2
 800ecea:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ecec:	4b10      	ldr	r3, [pc, #64]	; (800ed30 <USBH_LL_Init+0x84>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ecf2:	4b0f      	ldr	r3, [pc, #60]	; (800ed30 <USBH_LL_Init+0x84>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ecf8:	4b0d      	ldr	r3, [pc, #52]	; (800ed30 <USBH_LL_Init+0x84>)
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ecfe:	4b0c      	ldr	r3, [pc, #48]	; (800ed30 <USBH_LL_Init+0x84>)
 800ed00:	2200      	movs	r2, #0
 800ed02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800ed04:	480a      	ldr	r0, [pc, #40]	; (800ed30 <USBH_LL_Init+0x84>)
 800ed06:	f7f5 fd27 	bl	8004758 <HAL_HCD_Init>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d001      	beq.n	800ed14 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800ed10:	f7f2 fe90 	bl	8001a34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800ed14:	4806      	ldr	r0, [pc, #24]	; (800ed30 <USBH_LL_Init+0x84>)
 800ed16:	f7f6 f92b 	bl	8004f70 <HAL_HCD_GetCurrentFrame>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7fc fc10 	bl	800b544 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3708      	adds	r7, #8
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	20008d74 	.word	0x20008d74
 800ed34:	40040000 	.word	0x40040000

0800ed38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed40:	2300      	movs	r3, #0
 800ed42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed44:	2300      	movs	r3, #0
 800ed46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7f6 f896 	bl	8004e80 <HAL_HCD_Start>
 800ed54:	4603      	mov	r3, r0
 800ed56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed58:	7bfb      	ldrb	r3, [r7, #15]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 f95e 	bl	800f01c <USBH_Get_USB_Status>
 800ed60:	4603      	mov	r3, r0
 800ed62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b084      	sub	sp, #16
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7f6 f89e 	bl	8004ec6 <HAL_HCD_Stop>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed8e:	7bfb      	ldrb	r3, [r7, #15]
 800ed90:	4618      	mov	r0, r3
 800ed92:	f000 f943 	bl	800f01c <USBH_Get_USB_Status>
 800ed96:	4603      	mov	r3, r0
 800ed98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800edac:	2301      	movs	r3, #1
 800edae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7f6 f8e8 	bl	8004f8c <HAL_HCD_GetCurrentSpeed>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b02      	cmp	r3, #2
 800edc0:	d00c      	beq.n	800eddc <USBH_LL_GetSpeed+0x38>
 800edc2:	2b02      	cmp	r3, #2
 800edc4:	d80d      	bhi.n	800ede2 <USBH_LL_GetSpeed+0x3e>
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d002      	beq.n	800edd0 <USBH_LL_GetSpeed+0x2c>
 800edca:	2b01      	cmp	r3, #1
 800edcc:	d003      	beq.n	800edd6 <USBH_LL_GetSpeed+0x32>
 800edce:	e008      	b.n	800ede2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800edd0:	2300      	movs	r3, #0
 800edd2:	73fb      	strb	r3, [r7, #15]
    break;
 800edd4:	e008      	b.n	800ede8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800edd6:	2301      	movs	r3, #1
 800edd8:	73fb      	strb	r3, [r7, #15]
    break;
 800edda:	e005      	b.n	800ede8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800eddc:	2302      	movs	r3, #2
 800edde:	73fb      	strb	r3, [r7, #15]
    break;
 800ede0:	e002      	b.n	800ede8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ede2:	2301      	movs	r3, #1
 800ede4:	73fb      	strb	r3, [r7, #15]
    break;
 800ede6:	bf00      	nop
  }
  return  speed;
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b084      	sub	sp, #16
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edfe:	2300      	movs	r3, #0
 800ee00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7f6 f879 	bl	8004f00 <HAL_HCD_ResetPort>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f000 f901 	bl	800f01c <USBH_Get_USB_Status>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	460b      	mov	r3, r1
 800ee32:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee3a:	78fa      	ldrb	r2, [r7, #3]
 800ee3c:	4611      	mov	r1, r2
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7f6 f881 	bl	8004f46 <HAL_HCD_HC_GetXferCount>
 800ee44:	4603      	mov	r3, r0
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3708      	adds	r7, #8
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ee4e:	b590      	push	{r4, r7, lr}
 800ee50:	b089      	sub	sp, #36	; 0x24
 800ee52:	af04      	add	r7, sp, #16
 800ee54:	6078      	str	r0, [r7, #4]
 800ee56:	4608      	mov	r0, r1
 800ee58:	4611      	mov	r1, r2
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	70fb      	strb	r3, [r7, #3]
 800ee60:	460b      	mov	r3, r1
 800ee62:	70bb      	strb	r3, [r7, #2]
 800ee64:	4613      	mov	r3, r2
 800ee66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ee76:	787c      	ldrb	r4, [r7, #1]
 800ee78:	78ba      	ldrb	r2, [r7, #2]
 800ee7a:	78f9      	ldrb	r1, [r7, #3]
 800ee7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ee7e:	9302      	str	r3, [sp, #8]
 800ee80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ee84:	9301      	str	r3, [sp, #4]
 800ee86:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee8a:	9300      	str	r3, [sp, #0]
 800ee8c:	4623      	mov	r3, r4
 800ee8e:	f7f5 fcc5 	bl	800481c <HAL_HCD_HC_Init>
 800ee92:	4603      	mov	r3, r0
 800ee94:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee96:	7bfb      	ldrb	r3, [r7, #15]
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f000 f8bf 	bl	800f01c <USBH_Get_USB_Status>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eea2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3714      	adds	r7, #20
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd90      	pop	{r4, r7, pc}

0800eeac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eebc:	2300      	movs	r3, #0
 800eebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eec6:	78fa      	ldrb	r2, [r7, #3]
 800eec8:	4611      	mov	r1, r2
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7f5 fd3e 	bl	800494c <HAL_HCD_HC_Halt>
 800eed0:	4603      	mov	r3, r0
 800eed2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eed4:	7bfb      	ldrb	r3, [r7, #15]
 800eed6:	4618      	mov	r0, r3
 800eed8:	f000 f8a0 	bl	800f01c <USBH_Get_USB_Status>
 800eedc:	4603      	mov	r3, r0
 800eede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eee0:	7bbb      	ldrb	r3, [r7, #14]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800eeea:	b590      	push	{r4, r7, lr}
 800eeec:	b089      	sub	sp, #36	; 0x24
 800eeee:	af04      	add	r7, sp, #16
 800eef0:	6078      	str	r0, [r7, #4]
 800eef2:	4608      	mov	r0, r1
 800eef4:	4611      	mov	r1, r2
 800eef6:	461a      	mov	r2, r3
 800eef8:	4603      	mov	r3, r0
 800eefa:	70fb      	strb	r3, [r7, #3]
 800eefc:	460b      	mov	r3, r1
 800eefe:	70bb      	strb	r3, [r7, #2]
 800ef00:	4613      	mov	r3, r2
 800ef02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef04:	2300      	movs	r3, #0
 800ef06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef12:	787c      	ldrb	r4, [r7, #1]
 800ef14:	78ba      	ldrb	r2, [r7, #2]
 800ef16:	78f9      	ldrb	r1, [r7, #3]
 800ef18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ef1c:	9303      	str	r3, [sp, #12]
 800ef1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef20:	9302      	str	r3, [sp, #8]
 800ef22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef2a:	9300      	str	r3, [sp, #0]
 800ef2c:	4623      	mov	r3, r4
 800ef2e:	f7f5 fd31 	bl	8004994 <HAL_HCD_HC_SubmitRequest>
 800ef32:	4603      	mov	r3, r0
 800ef34:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f000 f86f 	bl	800f01c <USBH_Get_USB_Status>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd90      	pop	{r4, r7, pc}

0800ef4c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	460b      	mov	r3, r1
 800ef56:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef5e:	78fa      	ldrb	r2, [r7, #3]
 800ef60:	4611      	mov	r1, r2
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7f5 ffda 	bl	8004f1c <HAL_HCD_HC_GetURBState>
 800ef68:	4603      	mov	r3, r0
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3708      	adds	r7, #8
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b082      	sub	sp, #8
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
 800ef7a:	460b      	mov	r3, r1
 800ef7c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d103      	bne.n	800ef90 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800ef88:	78fb      	ldrb	r3, [r7, #3]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f000 f872 	bl	800f074 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ef90:	20c8      	movs	r0, #200	; 0xc8
 800ef92:	f7f4 fb11 	bl	80035b8 <HAL_Delay>
  return USBH_OK;
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	460b      	mov	r3, r1
 800efaa:	70fb      	strb	r3, [r7, #3]
 800efac:	4613      	mov	r3, r2
 800efae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efb6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800efb8:	78fa      	ldrb	r2, [r7, #3]
 800efba:	68f9      	ldr	r1, [r7, #12]
 800efbc:	4613      	mov	r3, r2
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	4413      	add	r3, r2
 800efc2:	00db      	lsls	r3, r3, #3
 800efc4:	440b      	add	r3, r1
 800efc6:	333b      	adds	r3, #59	; 0x3b
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00a      	beq.n	800efe4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800efce:	78fa      	ldrb	r2, [r7, #3]
 800efd0:	68f9      	ldr	r1, [r7, #12]
 800efd2:	4613      	mov	r3, r2
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	4413      	add	r3, r2
 800efd8:	00db      	lsls	r3, r3, #3
 800efda:	440b      	add	r3, r1
 800efdc:	3350      	adds	r3, #80	; 0x50
 800efde:	78ba      	ldrb	r2, [r7, #2]
 800efe0:	701a      	strb	r2, [r3, #0]
 800efe2:	e009      	b.n	800eff8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800efe4:	78fa      	ldrb	r2, [r7, #3]
 800efe6:	68f9      	ldr	r1, [r7, #12]
 800efe8:	4613      	mov	r3, r2
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	4413      	add	r3, r2
 800efee:	00db      	lsls	r3, r3, #3
 800eff0:	440b      	add	r3, r1
 800eff2:	3351      	adds	r3, #81	; 0x51
 800eff4:	78ba      	ldrb	r2, [r7, #2]
 800eff6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800eff8:	2300      	movs	r3, #0
}
 800effa:	4618      	mov	r0, r3
 800effc:	3714      	adds	r7, #20
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr

0800f006 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f006:	b580      	push	{r7, lr}
 800f008:	b082      	sub	sp, #8
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7f4 fad2 	bl	80035b8 <HAL_Delay>
}
 800f014:	bf00      	nop
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	4603      	mov	r3, r0
 800f024:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f026:	2300      	movs	r3, #0
 800f028:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f02a:	79fb      	ldrb	r3, [r7, #7]
 800f02c:	2b03      	cmp	r3, #3
 800f02e:	d817      	bhi.n	800f060 <USBH_Get_USB_Status+0x44>
 800f030:	a201      	add	r2, pc, #4	; (adr r2, 800f038 <USBH_Get_USB_Status+0x1c>)
 800f032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f036:	bf00      	nop
 800f038:	0800f049 	.word	0x0800f049
 800f03c:	0800f04f 	.word	0x0800f04f
 800f040:	0800f055 	.word	0x0800f055
 800f044:	0800f05b 	.word	0x0800f05b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f048:	2300      	movs	r3, #0
 800f04a:	73fb      	strb	r3, [r7, #15]
    break;
 800f04c:	e00b      	b.n	800f066 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f04e:	2302      	movs	r3, #2
 800f050:	73fb      	strb	r3, [r7, #15]
    break;
 800f052:	e008      	b.n	800f066 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f054:	2301      	movs	r3, #1
 800f056:	73fb      	strb	r3, [r7, #15]
    break;
 800f058:	e005      	b.n	800f066 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f05a:	2302      	movs	r3, #2
 800f05c:	73fb      	strb	r3, [r7, #15]
    break;
 800f05e:	e002      	b.n	800f066 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f060:	2302      	movs	r3, #2
 800f062:	73fb      	strb	r3, [r7, #15]
    break;
 800f064:	bf00      	nop
  }
  return usb_status;
 800f066:	7bfb      	ldrb	r3, [r7, #15]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3714      	adds	r7, #20
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr

0800f074 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	4603      	mov	r3, r0
 800f07c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f07e:	79fb      	ldrb	r3, [r7, #7]
 800f080:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800f082:	79fb      	ldrb	r3, [r7, #7]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d102      	bne.n	800f08e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800f088:	2301      	movs	r3, #1
 800f08a:	73fb      	strb	r3, [r7, #15]
 800f08c:	e001      	b.n	800f092 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f08e:	2300      	movs	r3, #0
 800f090:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800f092:	7bfb      	ldrb	r3, [r7, #15]
 800f094:	461a      	mov	r2, r3
 800f096:	2110      	movs	r1, #16
 800f098:	4803      	ldr	r0, [pc, #12]	; (800f0a8 <MX_DriverVbusHS+0x34>)
 800f09a:	f7f5 fb2b 	bl	80046f4 <HAL_GPIO_WritePin>
}
 800f09e:	bf00      	nop
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	40020800 	.word	0x40020800

0800f0ac <calloc>:
 800f0ac:	4b02      	ldr	r3, [pc, #8]	; (800f0b8 <calloc+0xc>)
 800f0ae:	460a      	mov	r2, r1
 800f0b0:	4601      	mov	r1, r0
 800f0b2:	6818      	ldr	r0, [r3, #0]
 800f0b4:	f000 b852 	b.w	800f15c <_calloc_r>
 800f0b8:	200000bc 	.word	0x200000bc

0800f0bc <__errno>:
 800f0bc:	4b01      	ldr	r3, [pc, #4]	; (800f0c4 <__errno+0x8>)
 800f0be:	6818      	ldr	r0, [r3, #0]
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	200000bc 	.word	0x200000bc

0800f0c8 <__libc_init_array>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	4d0d      	ldr	r5, [pc, #52]	; (800f100 <__libc_init_array+0x38>)
 800f0cc:	4c0d      	ldr	r4, [pc, #52]	; (800f104 <__libc_init_array+0x3c>)
 800f0ce:	1b64      	subs	r4, r4, r5
 800f0d0:	10a4      	asrs	r4, r4, #2
 800f0d2:	2600      	movs	r6, #0
 800f0d4:	42a6      	cmp	r6, r4
 800f0d6:	d109      	bne.n	800f0ec <__libc_init_array+0x24>
 800f0d8:	4d0b      	ldr	r5, [pc, #44]	; (800f108 <__libc_init_array+0x40>)
 800f0da:	4c0c      	ldr	r4, [pc, #48]	; (800f10c <__libc_init_array+0x44>)
 800f0dc:	f000 fc6e 	bl	800f9bc <_init>
 800f0e0:	1b64      	subs	r4, r4, r5
 800f0e2:	10a4      	asrs	r4, r4, #2
 800f0e4:	2600      	movs	r6, #0
 800f0e6:	42a6      	cmp	r6, r4
 800f0e8:	d105      	bne.n	800f0f6 <__libc_init_array+0x2e>
 800f0ea:	bd70      	pop	{r4, r5, r6, pc}
 800f0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0f0:	4798      	blx	r3
 800f0f2:	3601      	adds	r6, #1
 800f0f4:	e7ee      	b.n	800f0d4 <__libc_init_array+0xc>
 800f0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0fa:	4798      	blx	r3
 800f0fc:	3601      	adds	r6, #1
 800f0fe:	e7f2      	b.n	800f0e6 <__libc_init_array+0x1e>
 800f100:	0800fac8 	.word	0x0800fac8
 800f104:	0800fac8 	.word	0x0800fac8
 800f108:	0800fac8 	.word	0x0800fac8
 800f10c:	0800facc 	.word	0x0800facc

0800f110 <malloc>:
 800f110:	4b02      	ldr	r3, [pc, #8]	; (800f11c <malloc+0xc>)
 800f112:	4601      	mov	r1, r0
 800f114:	6818      	ldr	r0, [r3, #0]
 800f116:	f000 b881 	b.w	800f21c <_malloc_r>
 800f11a:	bf00      	nop
 800f11c:	200000bc 	.word	0x200000bc

0800f120 <free>:
 800f120:	4b02      	ldr	r3, [pc, #8]	; (800f12c <free+0xc>)
 800f122:	4601      	mov	r1, r0
 800f124:	6818      	ldr	r0, [r3, #0]
 800f126:	f000 b829 	b.w	800f17c <_free_r>
 800f12a:	bf00      	nop
 800f12c:	200000bc 	.word	0x200000bc

0800f130 <memcpy>:
 800f130:	440a      	add	r2, r1
 800f132:	4291      	cmp	r1, r2
 800f134:	f100 33ff 	add.w	r3, r0, #4294967295
 800f138:	d100      	bne.n	800f13c <memcpy+0xc>
 800f13a:	4770      	bx	lr
 800f13c:	b510      	push	{r4, lr}
 800f13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f142:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f146:	4291      	cmp	r1, r2
 800f148:	d1f9      	bne.n	800f13e <memcpy+0xe>
 800f14a:	bd10      	pop	{r4, pc}

0800f14c <memset>:
 800f14c:	4402      	add	r2, r0
 800f14e:	4603      	mov	r3, r0
 800f150:	4293      	cmp	r3, r2
 800f152:	d100      	bne.n	800f156 <memset+0xa>
 800f154:	4770      	bx	lr
 800f156:	f803 1b01 	strb.w	r1, [r3], #1
 800f15a:	e7f9      	b.n	800f150 <memset+0x4>

0800f15c <_calloc_r>:
 800f15c:	b513      	push	{r0, r1, r4, lr}
 800f15e:	434a      	muls	r2, r1
 800f160:	4611      	mov	r1, r2
 800f162:	9201      	str	r2, [sp, #4]
 800f164:	f000 f85a 	bl	800f21c <_malloc_r>
 800f168:	4604      	mov	r4, r0
 800f16a:	b118      	cbz	r0, 800f174 <_calloc_r+0x18>
 800f16c:	9a01      	ldr	r2, [sp, #4]
 800f16e:	2100      	movs	r1, #0
 800f170:	f7ff ffec 	bl	800f14c <memset>
 800f174:	4620      	mov	r0, r4
 800f176:	b002      	add	sp, #8
 800f178:	bd10      	pop	{r4, pc}
	...

0800f17c <_free_r>:
 800f17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f17e:	2900      	cmp	r1, #0
 800f180:	d048      	beq.n	800f214 <_free_r+0x98>
 800f182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f186:	9001      	str	r0, [sp, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f1a1 0404 	sub.w	r4, r1, #4
 800f18e:	bfb8      	it	lt
 800f190:	18e4      	addlt	r4, r4, r3
 800f192:	f000 f8cd 	bl	800f330 <__malloc_lock>
 800f196:	4a20      	ldr	r2, [pc, #128]	; (800f218 <_free_r+0x9c>)
 800f198:	9801      	ldr	r0, [sp, #4]
 800f19a:	6813      	ldr	r3, [r2, #0]
 800f19c:	4615      	mov	r5, r2
 800f19e:	b933      	cbnz	r3, 800f1ae <_free_r+0x32>
 800f1a0:	6063      	str	r3, [r4, #4]
 800f1a2:	6014      	str	r4, [r2, #0]
 800f1a4:	b003      	add	sp, #12
 800f1a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1aa:	f000 b8c7 	b.w	800f33c <__malloc_unlock>
 800f1ae:	42a3      	cmp	r3, r4
 800f1b0:	d90b      	bls.n	800f1ca <_free_r+0x4e>
 800f1b2:	6821      	ldr	r1, [r4, #0]
 800f1b4:	1862      	adds	r2, r4, r1
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	bf04      	itt	eq
 800f1ba:	681a      	ldreq	r2, [r3, #0]
 800f1bc:	685b      	ldreq	r3, [r3, #4]
 800f1be:	6063      	str	r3, [r4, #4]
 800f1c0:	bf04      	itt	eq
 800f1c2:	1852      	addeq	r2, r2, r1
 800f1c4:	6022      	streq	r2, [r4, #0]
 800f1c6:	602c      	str	r4, [r5, #0]
 800f1c8:	e7ec      	b.n	800f1a4 <_free_r+0x28>
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	b10b      	cbz	r3, 800f1d4 <_free_r+0x58>
 800f1d0:	42a3      	cmp	r3, r4
 800f1d2:	d9fa      	bls.n	800f1ca <_free_r+0x4e>
 800f1d4:	6811      	ldr	r1, [r2, #0]
 800f1d6:	1855      	adds	r5, r2, r1
 800f1d8:	42a5      	cmp	r5, r4
 800f1da:	d10b      	bne.n	800f1f4 <_free_r+0x78>
 800f1dc:	6824      	ldr	r4, [r4, #0]
 800f1de:	4421      	add	r1, r4
 800f1e0:	1854      	adds	r4, r2, r1
 800f1e2:	42a3      	cmp	r3, r4
 800f1e4:	6011      	str	r1, [r2, #0]
 800f1e6:	d1dd      	bne.n	800f1a4 <_free_r+0x28>
 800f1e8:	681c      	ldr	r4, [r3, #0]
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	6053      	str	r3, [r2, #4]
 800f1ee:	4421      	add	r1, r4
 800f1f0:	6011      	str	r1, [r2, #0]
 800f1f2:	e7d7      	b.n	800f1a4 <_free_r+0x28>
 800f1f4:	d902      	bls.n	800f1fc <_free_r+0x80>
 800f1f6:	230c      	movs	r3, #12
 800f1f8:	6003      	str	r3, [r0, #0]
 800f1fa:	e7d3      	b.n	800f1a4 <_free_r+0x28>
 800f1fc:	6825      	ldr	r5, [r4, #0]
 800f1fe:	1961      	adds	r1, r4, r5
 800f200:	428b      	cmp	r3, r1
 800f202:	bf04      	itt	eq
 800f204:	6819      	ldreq	r1, [r3, #0]
 800f206:	685b      	ldreq	r3, [r3, #4]
 800f208:	6063      	str	r3, [r4, #4]
 800f20a:	bf04      	itt	eq
 800f20c:	1949      	addeq	r1, r1, r5
 800f20e:	6021      	streq	r1, [r4, #0]
 800f210:	6054      	str	r4, [r2, #4]
 800f212:	e7c7      	b.n	800f1a4 <_free_r+0x28>
 800f214:	b003      	add	sp, #12
 800f216:	bd30      	pop	{r4, r5, pc}
 800f218:	20008578 	.word	0x20008578

0800f21c <_malloc_r>:
 800f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21e:	1ccd      	adds	r5, r1, #3
 800f220:	f025 0503 	bic.w	r5, r5, #3
 800f224:	3508      	adds	r5, #8
 800f226:	2d0c      	cmp	r5, #12
 800f228:	bf38      	it	cc
 800f22a:	250c      	movcc	r5, #12
 800f22c:	2d00      	cmp	r5, #0
 800f22e:	4606      	mov	r6, r0
 800f230:	db01      	blt.n	800f236 <_malloc_r+0x1a>
 800f232:	42a9      	cmp	r1, r5
 800f234:	d903      	bls.n	800f23e <_malloc_r+0x22>
 800f236:	230c      	movs	r3, #12
 800f238:	6033      	str	r3, [r6, #0]
 800f23a:	2000      	movs	r0, #0
 800f23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f23e:	f000 f877 	bl	800f330 <__malloc_lock>
 800f242:	4921      	ldr	r1, [pc, #132]	; (800f2c8 <_malloc_r+0xac>)
 800f244:	680a      	ldr	r2, [r1, #0]
 800f246:	4614      	mov	r4, r2
 800f248:	b99c      	cbnz	r4, 800f272 <_malloc_r+0x56>
 800f24a:	4f20      	ldr	r7, [pc, #128]	; (800f2cc <_malloc_r+0xb0>)
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	b923      	cbnz	r3, 800f25a <_malloc_r+0x3e>
 800f250:	4621      	mov	r1, r4
 800f252:	4630      	mov	r0, r6
 800f254:	f000 f83c 	bl	800f2d0 <_sbrk_r>
 800f258:	6038      	str	r0, [r7, #0]
 800f25a:	4629      	mov	r1, r5
 800f25c:	4630      	mov	r0, r6
 800f25e:	f000 f837 	bl	800f2d0 <_sbrk_r>
 800f262:	1c43      	adds	r3, r0, #1
 800f264:	d123      	bne.n	800f2ae <_malloc_r+0x92>
 800f266:	230c      	movs	r3, #12
 800f268:	6033      	str	r3, [r6, #0]
 800f26a:	4630      	mov	r0, r6
 800f26c:	f000 f866 	bl	800f33c <__malloc_unlock>
 800f270:	e7e3      	b.n	800f23a <_malloc_r+0x1e>
 800f272:	6823      	ldr	r3, [r4, #0]
 800f274:	1b5b      	subs	r3, r3, r5
 800f276:	d417      	bmi.n	800f2a8 <_malloc_r+0x8c>
 800f278:	2b0b      	cmp	r3, #11
 800f27a:	d903      	bls.n	800f284 <_malloc_r+0x68>
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	441c      	add	r4, r3
 800f280:	6025      	str	r5, [r4, #0]
 800f282:	e004      	b.n	800f28e <_malloc_r+0x72>
 800f284:	6863      	ldr	r3, [r4, #4]
 800f286:	42a2      	cmp	r2, r4
 800f288:	bf0c      	ite	eq
 800f28a:	600b      	streq	r3, [r1, #0]
 800f28c:	6053      	strne	r3, [r2, #4]
 800f28e:	4630      	mov	r0, r6
 800f290:	f000 f854 	bl	800f33c <__malloc_unlock>
 800f294:	f104 000b 	add.w	r0, r4, #11
 800f298:	1d23      	adds	r3, r4, #4
 800f29a:	f020 0007 	bic.w	r0, r0, #7
 800f29e:	1ac2      	subs	r2, r0, r3
 800f2a0:	d0cc      	beq.n	800f23c <_malloc_r+0x20>
 800f2a2:	1a1b      	subs	r3, r3, r0
 800f2a4:	50a3      	str	r3, [r4, r2]
 800f2a6:	e7c9      	b.n	800f23c <_malloc_r+0x20>
 800f2a8:	4622      	mov	r2, r4
 800f2aa:	6864      	ldr	r4, [r4, #4]
 800f2ac:	e7cc      	b.n	800f248 <_malloc_r+0x2c>
 800f2ae:	1cc4      	adds	r4, r0, #3
 800f2b0:	f024 0403 	bic.w	r4, r4, #3
 800f2b4:	42a0      	cmp	r0, r4
 800f2b6:	d0e3      	beq.n	800f280 <_malloc_r+0x64>
 800f2b8:	1a21      	subs	r1, r4, r0
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	f000 f808 	bl	800f2d0 <_sbrk_r>
 800f2c0:	3001      	adds	r0, #1
 800f2c2:	d1dd      	bne.n	800f280 <_malloc_r+0x64>
 800f2c4:	e7cf      	b.n	800f266 <_malloc_r+0x4a>
 800f2c6:	bf00      	nop
 800f2c8:	20008578 	.word	0x20008578
 800f2cc:	2000857c 	.word	0x2000857c

0800f2d0 <_sbrk_r>:
 800f2d0:	b538      	push	{r3, r4, r5, lr}
 800f2d2:	4d06      	ldr	r5, [pc, #24]	; (800f2ec <_sbrk_r+0x1c>)
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	4608      	mov	r0, r1
 800f2da:	602b      	str	r3, [r5, #0]
 800f2dc:	f7f3 f8d6 	bl	800248c <_sbrk>
 800f2e0:	1c43      	adds	r3, r0, #1
 800f2e2:	d102      	bne.n	800f2ea <_sbrk_r+0x1a>
 800f2e4:	682b      	ldr	r3, [r5, #0]
 800f2e6:	b103      	cbz	r3, 800f2ea <_sbrk_r+0x1a>
 800f2e8:	6023      	str	r3, [r4, #0]
 800f2ea:	bd38      	pop	{r3, r4, r5, pc}
 800f2ec:	20009038 	.word	0x20009038

0800f2f0 <siprintf>:
 800f2f0:	b40e      	push	{r1, r2, r3}
 800f2f2:	b500      	push	{lr}
 800f2f4:	b09c      	sub	sp, #112	; 0x70
 800f2f6:	ab1d      	add	r3, sp, #116	; 0x74
 800f2f8:	9002      	str	r0, [sp, #8]
 800f2fa:	9006      	str	r0, [sp, #24]
 800f2fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f300:	4809      	ldr	r0, [pc, #36]	; (800f328 <siprintf+0x38>)
 800f302:	9107      	str	r1, [sp, #28]
 800f304:	9104      	str	r1, [sp, #16]
 800f306:	4909      	ldr	r1, [pc, #36]	; (800f32c <siprintf+0x3c>)
 800f308:	f853 2b04 	ldr.w	r2, [r3], #4
 800f30c:	9105      	str	r1, [sp, #20]
 800f30e:	6800      	ldr	r0, [r0, #0]
 800f310:	9301      	str	r3, [sp, #4]
 800f312:	a902      	add	r1, sp, #8
 800f314:	f000 f874 	bl	800f400 <_svfiprintf_r>
 800f318:	9b02      	ldr	r3, [sp, #8]
 800f31a:	2200      	movs	r2, #0
 800f31c:	701a      	strb	r2, [r3, #0]
 800f31e:	b01c      	add	sp, #112	; 0x70
 800f320:	f85d eb04 	ldr.w	lr, [sp], #4
 800f324:	b003      	add	sp, #12
 800f326:	4770      	bx	lr
 800f328:	200000bc 	.word	0x200000bc
 800f32c:	ffff0208 	.word	0xffff0208

0800f330 <__malloc_lock>:
 800f330:	4801      	ldr	r0, [pc, #4]	; (800f338 <__malloc_lock+0x8>)
 800f332:	f000 baf9 	b.w	800f928 <__retarget_lock_acquire_recursive>
 800f336:	bf00      	nop
 800f338:	20009040 	.word	0x20009040

0800f33c <__malloc_unlock>:
 800f33c:	4801      	ldr	r0, [pc, #4]	; (800f344 <__malloc_unlock+0x8>)
 800f33e:	f000 baf4 	b.w	800f92a <__retarget_lock_release_recursive>
 800f342:	bf00      	nop
 800f344:	20009040 	.word	0x20009040

0800f348 <__ssputs_r>:
 800f348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f34c:	688e      	ldr	r6, [r1, #8]
 800f34e:	429e      	cmp	r6, r3
 800f350:	4682      	mov	sl, r0
 800f352:	460c      	mov	r4, r1
 800f354:	4690      	mov	r8, r2
 800f356:	461f      	mov	r7, r3
 800f358:	d838      	bhi.n	800f3cc <__ssputs_r+0x84>
 800f35a:	898a      	ldrh	r2, [r1, #12]
 800f35c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f360:	d032      	beq.n	800f3c8 <__ssputs_r+0x80>
 800f362:	6825      	ldr	r5, [r4, #0]
 800f364:	6909      	ldr	r1, [r1, #16]
 800f366:	eba5 0901 	sub.w	r9, r5, r1
 800f36a:	6965      	ldr	r5, [r4, #20]
 800f36c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f374:	3301      	adds	r3, #1
 800f376:	444b      	add	r3, r9
 800f378:	106d      	asrs	r5, r5, #1
 800f37a:	429d      	cmp	r5, r3
 800f37c:	bf38      	it	cc
 800f37e:	461d      	movcc	r5, r3
 800f380:	0553      	lsls	r3, r2, #21
 800f382:	d531      	bpl.n	800f3e8 <__ssputs_r+0xa0>
 800f384:	4629      	mov	r1, r5
 800f386:	f7ff ff49 	bl	800f21c <_malloc_r>
 800f38a:	4606      	mov	r6, r0
 800f38c:	b950      	cbnz	r0, 800f3a4 <__ssputs_r+0x5c>
 800f38e:	230c      	movs	r3, #12
 800f390:	f8ca 3000 	str.w	r3, [sl]
 800f394:	89a3      	ldrh	r3, [r4, #12]
 800f396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f39a:	81a3      	strh	r3, [r4, #12]
 800f39c:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a4:	6921      	ldr	r1, [r4, #16]
 800f3a6:	464a      	mov	r2, r9
 800f3a8:	f7ff fec2 	bl	800f130 <memcpy>
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f3b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3b6:	81a3      	strh	r3, [r4, #12]
 800f3b8:	6126      	str	r6, [r4, #16]
 800f3ba:	6165      	str	r5, [r4, #20]
 800f3bc:	444e      	add	r6, r9
 800f3be:	eba5 0509 	sub.w	r5, r5, r9
 800f3c2:	6026      	str	r6, [r4, #0]
 800f3c4:	60a5      	str	r5, [r4, #8]
 800f3c6:	463e      	mov	r6, r7
 800f3c8:	42be      	cmp	r6, r7
 800f3ca:	d900      	bls.n	800f3ce <__ssputs_r+0x86>
 800f3cc:	463e      	mov	r6, r7
 800f3ce:	4632      	mov	r2, r6
 800f3d0:	6820      	ldr	r0, [r4, #0]
 800f3d2:	4641      	mov	r1, r8
 800f3d4:	f000 faaa 	bl	800f92c <memmove>
 800f3d8:	68a3      	ldr	r3, [r4, #8]
 800f3da:	6822      	ldr	r2, [r4, #0]
 800f3dc:	1b9b      	subs	r3, r3, r6
 800f3de:	4432      	add	r2, r6
 800f3e0:	60a3      	str	r3, [r4, #8]
 800f3e2:	6022      	str	r2, [r4, #0]
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	e7db      	b.n	800f3a0 <__ssputs_r+0x58>
 800f3e8:	462a      	mov	r2, r5
 800f3ea:	f000 fab9 	bl	800f960 <_realloc_r>
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d1e1      	bne.n	800f3b8 <__ssputs_r+0x70>
 800f3f4:	6921      	ldr	r1, [r4, #16]
 800f3f6:	4650      	mov	r0, sl
 800f3f8:	f7ff fec0 	bl	800f17c <_free_r>
 800f3fc:	e7c7      	b.n	800f38e <__ssputs_r+0x46>
	...

0800f400 <_svfiprintf_r>:
 800f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	4698      	mov	r8, r3
 800f406:	898b      	ldrh	r3, [r1, #12]
 800f408:	061b      	lsls	r3, r3, #24
 800f40a:	b09d      	sub	sp, #116	; 0x74
 800f40c:	4607      	mov	r7, r0
 800f40e:	460d      	mov	r5, r1
 800f410:	4614      	mov	r4, r2
 800f412:	d50e      	bpl.n	800f432 <_svfiprintf_r+0x32>
 800f414:	690b      	ldr	r3, [r1, #16]
 800f416:	b963      	cbnz	r3, 800f432 <_svfiprintf_r+0x32>
 800f418:	2140      	movs	r1, #64	; 0x40
 800f41a:	f7ff feff 	bl	800f21c <_malloc_r>
 800f41e:	6028      	str	r0, [r5, #0]
 800f420:	6128      	str	r0, [r5, #16]
 800f422:	b920      	cbnz	r0, 800f42e <_svfiprintf_r+0x2e>
 800f424:	230c      	movs	r3, #12
 800f426:	603b      	str	r3, [r7, #0]
 800f428:	f04f 30ff 	mov.w	r0, #4294967295
 800f42c:	e0d1      	b.n	800f5d2 <_svfiprintf_r+0x1d2>
 800f42e:	2340      	movs	r3, #64	; 0x40
 800f430:	616b      	str	r3, [r5, #20]
 800f432:	2300      	movs	r3, #0
 800f434:	9309      	str	r3, [sp, #36]	; 0x24
 800f436:	2320      	movs	r3, #32
 800f438:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f43c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f440:	2330      	movs	r3, #48	; 0x30
 800f442:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f5ec <_svfiprintf_r+0x1ec>
 800f446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f44a:	f04f 0901 	mov.w	r9, #1
 800f44e:	4623      	mov	r3, r4
 800f450:	469a      	mov	sl, r3
 800f452:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f456:	b10a      	cbz	r2, 800f45c <_svfiprintf_r+0x5c>
 800f458:	2a25      	cmp	r2, #37	; 0x25
 800f45a:	d1f9      	bne.n	800f450 <_svfiprintf_r+0x50>
 800f45c:	ebba 0b04 	subs.w	fp, sl, r4
 800f460:	d00b      	beq.n	800f47a <_svfiprintf_r+0x7a>
 800f462:	465b      	mov	r3, fp
 800f464:	4622      	mov	r2, r4
 800f466:	4629      	mov	r1, r5
 800f468:	4638      	mov	r0, r7
 800f46a:	f7ff ff6d 	bl	800f348 <__ssputs_r>
 800f46e:	3001      	adds	r0, #1
 800f470:	f000 80aa 	beq.w	800f5c8 <_svfiprintf_r+0x1c8>
 800f474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f476:	445a      	add	r2, fp
 800f478:	9209      	str	r2, [sp, #36]	; 0x24
 800f47a:	f89a 3000 	ldrb.w	r3, [sl]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f000 80a2 	beq.w	800f5c8 <_svfiprintf_r+0x1c8>
 800f484:	2300      	movs	r3, #0
 800f486:	f04f 32ff 	mov.w	r2, #4294967295
 800f48a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f48e:	f10a 0a01 	add.w	sl, sl, #1
 800f492:	9304      	str	r3, [sp, #16]
 800f494:	9307      	str	r3, [sp, #28]
 800f496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f49a:	931a      	str	r3, [sp, #104]	; 0x68
 800f49c:	4654      	mov	r4, sl
 800f49e:	2205      	movs	r2, #5
 800f4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4a4:	4851      	ldr	r0, [pc, #324]	; (800f5ec <_svfiprintf_r+0x1ec>)
 800f4a6:	f7f0 feab 	bl	8000200 <memchr>
 800f4aa:	9a04      	ldr	r2, [sp, #16]
 800f4ac:	b9d8      	cbnz	r0, 800f4e6 <_svfiprintf_r+0xe6>
 800f4ae:	06d0      	lsls	r0, r2, #27
 800f4b0:	bf44      	itt	mi
 800f4b2:	2320      	movmi	r3, #32
 800f4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4b8:	0711      	lsls	r1, r2, #28
 800f4ba:	bf44      	itt	mi
 800f4bc:	232b      	movmi	r3, #43	; 0x2b
 800f4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f4c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f4c8:	d015      	beq.n	800f4f6 <_svfiprintf_r+0xf6>
 800f4ca:	9a07      	ldr	r2, [sp, #28]
 800f4cc:	4654      	mov	r4, sl
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	f04f 0c0a 	mov.w	ip, #10
 800f4d4:	4621      	mov	r1, r4
 800f4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4da:	3b30      	subs	r3, #48	; 0x30
 800f4dc:	2b09      	cmp	r3, #9
 800f4de:	d94e      	bls.n	800f57e <_svfiprintf_r+0x17e>
 800f4e0:	b1b0      	cbz	r0, 800f510 <_svfiprintf_r+0x110>
 800f4e2:	9207      	str	r2, [sp, #28]
 800f4e4:	e014      	b.n	800f510 <_svfiprintf_r+0x110>
 800f4e6:	eba0 0308 	sub.w	r3, r0, r8
 800f4ea:	fa09 f303 	lsl.w	r3, r9, r3
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	9304      	str	r3, [sp, #16]
 800f4f2:	46a2      	mov	sl, r4
 800f4f4:	e7d2      	b.n	800f49c <_svfiprintf_r+0x9c>
 800f4f6:	9b03      	ldr	r3, [sp, #12]
 800f4f8:	1d19      	adds	r1, r3, #4
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	9103      	str	r1, [sp, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	bfbb      	ittet	lt
 800f502:	425b      	neglt	r3, r3
 800f504:	f042 0202 	orrlt.w	r2, r2, #2
 800f508:	9307      	strge	r3, [sp, #28]
 800f50a:	9307      	strlt	r3, [sp, #28]
 800f50c:	bfb8      	it	lt
 800f50e:	9204      	strlt	r2, [sp, #16]
 800f510:	7823      	ldrb	r3, [r4, #0]
 800f512:	2b2e      	cmp	r3, #46	; 0x2e
 800f514:	d10c      	bne.n	800f530 <_svfiprintf_r+0x130>
 800f516:	7863      	ldrb	r3, [r4, #1]
 800f518:	2b2a      	cmp	r3, #42	; 0x2a
 800f51a:	d135      	bne.n	800f588 <_svfiprintf_r+0x188>
 800f51c:	9b03      	ldr	r3, [sp, #12]
 800f51e:	1d1a      	adds	r2, r3, #4
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	9203      	str	r2, [sp, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	bfb8      	it	lt
 800f528:	f04f 33ff 	movlt.w	r3, #4294967295
 800f52c:	3402      	adds	r4, #2
 800f52e:	9305      	str	r3, [sp, #20]
 800f530:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f5fc <_svfiprintf_r+0x1fc>
 800f534:	7821      	ldrb	r1, [r4, #0]
 800f536:	2203      	movs	r2, #3
 800f538:	4650      	mov	r0, sl
 800f53a:	f7f0 fe61 	bl	8000200 <memchr>
 800f53e:	b140      	cbz	r0, 800f552 <_svfiprintf_r+0x152>
 800f540:	2340      	movs	r3, #64	; 0x40
 800f542:	eba0 000a 	sub.w	r0, r0, sl
 800f546:	fa03 f000 	lsl.w	r0, r3, r0
 800f54a:	9b04      	ldr	r3, [sp, #16]
 800f54c:	4303      	orrs	r3, r0
 800f54e:	3401      	adds	r4, #1
 800f550:	9304      	str	r3, [sp, #16]
 800f552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f556:	4826      	ldr	r0, [pc, #152]	; (800f5f0 <_svfiprintf_r+0x1f0>)
 800f558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f55c:	2206      	movs	r2, #6
 800f55e:	f7f0 fe4f 	bl	8000200 <memchr>
 800f562:	2800      	cmp	r0, #0
 800f564:	d038      	beq.n	800f5d8 <_svfiprintf_r+0x1d8>
 800f566:	4b23      	ldr	r3, [pc, #140]	; (800f5f4 <_svfiprintf_r+0x1f4>)
 800f568:	bb1b      	cbnz	r3, 800f5b2 <_svfiprintf_r+0x1b2>
 800f56a:	9b03      	ldr	r3, [sp, #12]
 800f56c:	3307      	adds	r3, #7
 800f56e:	f023 0307 	bic.w	r3, r3, #7
 800f572:	3308      	adds	r3, #8
 800f574:	9303      	str	r3, [sp, #12]
 800f576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f578:	4433      	add	r3, r6
 800f57a:	9309      	str	r3, [sp, #36]	; 0x24
 800f57c:	e767      	b.n	800f44e <_svfiprintf_r+0x4e>
 800f57e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f582:	460c      	mov	r4, r1
 800f584:	2001      	movs	r0, #1
 800f586:	e7a5      	b.n	800f4d4 <_svfiprintf_r+0xd4>
 800f588:	2300      	movs	r3, #0
 800f58a:	3401      	adds	r4, #1
 800f58c:	9305      	str	r3, [sp, #20]
 800f58e:	4619      	mov	r1, r3
 800f590:	f04f 0c0a 	mov.w	ip, #10
 800f594:	4620      	mov	r0, r4
 800f596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f59a:	3a30      	subs	r2, #48	; 0x30
 800f59c:	2a09      	cmp	r2, #9
 800f59e:	d903      	bls.n	800f5a8 <_svfiprintf_r+0x1a8>
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d0c5      	beq.n	800f530 <_svfiprintf_r+0x130>
 800f5a4:	9105      	str	r1, [sp, #20]
 800f5a6:	e7c3      	b.n	800f530 <_svfiprintf_r+0x130>
 800f5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e7f0      	b.n	800f594 <_svfiprintf_r+0x194>
 800f5b2:	ab03      	add	r3, sp, #12
 800f5b4:	9300      	str	r3, [sp, #0]
 800f5b6:	462a      	mov	r2, r5
 800f5b8:	4b0f      	ldr	r3, [pc, #60]	; (800f5f8 <_svfiprintf_r+0x1f8>)
 800f5ba:	a904      	add	r1, sp, #16
 800f5bc:	4638      	mov	r0, r7
 800f5be:	f3af 8000 	nop.w
 800f5c2:	1c42      	adds	r2, r0, #1
 800f5c4:	4606      	mov	r6, r0
 800f5c6:	d1d6      	bne.n	800f576 <_svfiprintf_r+0x176>
 800f5c8:	89ab      	ldrh	r3, [r5, #12]
 800f5ca:	065b      	lsls	r3, r3, #25
 800f5cc:	f53f af2c 	bmi.w	800f428 <_svfiprintf_r+0x28>
 800f5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5d2:	b01d      	add	sp, #116	; 0x74
 800f5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d8:	ab03      	add	r3, sp, #12
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	462a      	mov	r2, r5
 800f5de:	4b06      	ldr	r3, [pc, #24]	; (800f5f8 <_svfiprintf_r+0x1f8>)
 800f5e0:	a904      	add	r1, sp, #16
 800f5e2:	4638      	mov	r0, r7
 800f5e4:	f000 f87a 	bl	800f6dc <_printf_i>
 800f5e8:	e7eb      	b.n	800f5c2 <_svfiprintf_r+0x1c2>
 800f5ea:	bf00      	nop
 800f5ec:	0800fa8c 	.word	0x0800fa8c
 800f5f0:	0800fa96 	.word	0x0800fa96
 800f5f4:	00000000 	.word	0x00000000
 800f5f8:	0800f349 	.word	0x0800f349
 800f5fc:	0800fa92 	.word	0x0800fa92

0800f600 <_printf_common>:
 800f600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f604:	4616      	mov	r6, r2
 800f606:	4699      	mov	r9, r3
 800f608:	688a      	ldr	r2, [r1, #8]
 800f60a:	690b      	ldr	r3, [r1, #16]
 800f60c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f610:	4293      	cmp	r3, r2
 800f612:	bfb8      	it	lt
 800f614:	4613      	movlt	r3, r2
 800f616:	6033      	str	r3, [r6, #0]
 800f618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f61c:	4607      	mov	r7, r0
 800f61e:	460c      	mov	r4, r1
 800f620:	b10a      	cbz	r2, 800f626 <_printf_common+0x26>
 800f622:	3301      	adds	r3, #1
 800f624:	6033      	str	r3, [r6, #0]
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	0699      	lsls	r1, r3, #26
 800f62a:	bf42      	ittt	mi
 800f62c:	6833      	ldrmi	r3, [r6, #0]
 800f62e:	3302      	addmi	r3, #2
 800f630:	6033      	strmi	r3, [r6, #0]
 800f632:	6825      	ldr	r5, [r4, #0]
 800f634:	f015 0506 	ands.w	r5, r5, #6
 800f638:	d106      	bne.n	800f648 <_printf_common+0x48>
 800f63a:	f104 0a19 	add.w	sl, r4, #25
 800f63e:	68e3      	ldr	r3, [r4, #12]
 800f640:	6832      	ldr	r2, [r6, #0]
 800f642:	1a9b      	subs	r3, r3, r2
 800f644:	42ab      	cmp	r3, r5
 800f646:	dc26      	bgt.n	800f696 <_printf_common+0x96>
 800f648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f64c:	1e13      	subs	r3, r2, #0
 800f64e:	6822      	ldr	r2, [r4, #0]
 800f650:	bf18      	it	ne
 800f652:	2301      	movne	r3, #1
 800f654:	0692      	lsls	r2, r2, #26
 800f656:	d42b      	bmi.n	800f6b0 <_printf_common+0xb0>
 800f658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f65c:	4649      	mov	r1, r9
 800f65e:	4638      	mov	r0, r7
 800f660:	47c0      	blx	r8
 800f662:	3001      	adds	r0, #1
 800f664:	d01e      	beq.n	800f6a4 <_printf_common+0xa4>
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	68e5      	ldr	r5, [r4, #12]
 800f66a:	6832      	ldr	r2, [r6, #0]
 800f66c:	f003 0306 	and.w	r3, r3, #6
 800f670:	2b04      	cmp	r3, #4
 800f672:	bf08      	it	eq
 800f674:	1aad      	subeq	r5, r5, r2
 800f676:	68a3      	ldr	r3, [r4, #8]
 800f678:	6922      	ldr	r2, [r4, #16]
 800f67a:	bf0c      	ite	eq
 800f67c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f680:	2500      	movne	r5, #0
 800f682:	4293      	cmp	r3, r2
 800f684:	bfc4      	itt	gt
 800f686:	1a9b      	subgt	r3, r3, r2
 800f688:	18ed      	addgt	r5, r5, r3
 800f68a:	2600      	movs	r6, #0
 800f68c:	341a      	adds	r4, #26
 800f68e:	42b5      	cmp	r5, r6
 800f690:	d11a      	bne.n	800f6c8 <_printf_common+0xc8>
 800f692:	2000      	movs	r0, #0
 800f694:	e008      	b.n	800f6a8 <_printf_common+0xa8>
 800f696:	2301      	movs	r3, #1
 800f698:	4652      	mov	r2, sl
 800f69a:	4649      	mov	r1, r9
 800f69c:	4638      	mov	r0, r7
 800f69e:	47c0      	blx	r8
 800f6a0:	3001      	adds	r0, #1
 800f6a2:	d103      	bne.n	800f6ac <_printf_common+0xac>
 800f6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6ac:	3501      	adds	r5, #1
 800f6ae:	e7c6      	b.n	800f63e <_printf_common+0x3e>
 800f6b0:	18e1      	adds	r1, r4, r3
 800f6b2:	1c5a      	adds	r2, r3, #1
 800f6b4:	2030      	movs	r0, #48	; 0x30
 800f6b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f6ba:	4422      	add	r2, r4
 800f6bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f6c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f6c4:	3302      	adds	r3, #2
 800f6c6:	e7c7      	b.n	800f658 <_printf_common+0x58>
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	4622      	mov	r2, r4
 800f6cc:	4649      	mov	r1, r9
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	47c0      	blx	r8
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	d0e6      	beq.n	800f6a4 <_printf_common+0xa4>
 800f6d6:	3601      	adds	r6, #1
 800f6d8:	e7d9      	b.n	800f68e <_printf_common+0x8e>
	...

0800f6dc <_printf_i>:
 800f6dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6e0:	460c      	mov	r4, r1
 800f6e2:	4691      	mov	r9, r2
 800f6e4:	7e27      	ldrb	r7, [r4, #24]
 800f6e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f6e8:	2f78      	cmp	r7, #120	; 0x78
 800f6ea:	4680      	mov	r8, r0
 800f6ec:	469a      	mov	sl, r3
 800f6ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6f2:	d807      	bhi.n	800f704 <_printf_i+0x28>
 800f6f4:	2f62      	cmp	r7, #98	; 0x62
 800f6f6:	d80a      	bhi.n	800f70e <_printf_i+0x32>
 800f6f8:	2f00      	cmp	r7, #0
 800f6fa:	f000 80d8 	beq.w	800f8ae <_printf_i+0x1d2>
 800f6fe:	2f58      	cmp	r7, #88	; 0x58
 800f700:	f000 80a3 	beq.w	800f84a <_printf_i+0x16e>
 800f704:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f70c:	e03a      	b.n	800f784 <_printf_i+0xa8>
 800f70e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f712:	2b15      	cmp	r3, #21
 800f714:	d8f6      	bhi.n	800f704 <_printf_i+0x28>
 800f716:	a001      	add	r0, pc, #4	; (adr r0, 800f71c <_printf_i+0x40>)
 800f718:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f71c:	0800f775 	.word	0x0800f775
 800f720:	0800f789 	.word	0x0800f789
 800f724:	0800f705 	.word	0x0800f705
 800f728:	0800f705 	.word	0x0800f705
 800f72c:	0800f705 	.word	0x0800f705
 800f730:	0800f705 	.word	0x0800f705
 800f734:	0800f789 	.word	0x0800f789
 800f738:	0800f705 	.word	0x0800f705
 800f73c:	0800f705 	.word	0x0800f705
 800f740:	0800f705 	.word	0x0800f705
 800f744:	0800f705 	.word	0x0800f705
 800f748:	0800f895 	.word	0x0800f895
 800f74c:	0800f7b9 	.word	0x0800f7b9
 800f750:	0800f877 	.word	0x0800f877
 800f754:	0800f705 	.word	0x0800f705
 800f758:	0800f705 	.word	0x0800f705
 800f75c:	0800f8b7 	.word	0x0800f8b7
 800f760:	0800f705 	.word	0x0800f705
 800f764:	0800f7b9 	.word	0x0800f7b9
 800f768:	0800f705 	.word	0x0800f705
 800f76c:	0800f705 	.word	0x0800f705
 800f770:	0800f87f 	.word	0x0800f87f
 800f774:	680b      	ldr	r3, [r1, #0]
 800f776:	1d1a      	adds	r2, r3, #4
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	600a      	str	r2, [r1, #0]
 800f77c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f784:	2301      	movs	r3, #1
 800f786:	e0a3      	b.n	800f8d0 <_printf_i+0x1f4>
 800f788:	6825      	ldr	r5, [r4, #0]
 800f78a:	6808      	ldr	r0, [r1, #0]
 800f78c:	062e      	lsls	r6, r5, #24
 800f78e:	f100 0304 	add.w	r3, r0, #4
 800f792:	d50a      	bpl.n	800f7aa <_printf_i+0xce>
 800f794:	6805      	ldr	r5, [r0, #0]
 800f796:	600b      	str	r3, [r1, #0]
 800f798:	2d00      	cmp	r5, #0
 800f79a:	da03      	bge.n	800f7a4 <_printf_i+0xc8>
 800f79c:	232d      	movs	r3, #45	; 0x2d
 800f79e:	426d      	negs	r5, r5
 800f7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7a4:	485e      	ldr	r0, [pc, #376]	; (800f920 <_printf_i+0x244>)
 800f7a6:	230a      	movs	r3, #10
 800f7a8:	e019      	b.n	800f7de <_printf_i+0x102>
 800f7aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f7ae:	6805      	ldr	r5, [r0, #0]
 800f7b0:	600b      	str	r3, [r1, #0]
 800f7b2:	bf18      	it	ne
 800f7b4:	b22d      	sxthne	r5, r5
 800f7b6:	e7ef      	b.n	800f798 <_printf_i+0xbc>
 800f7b8:	680b      	ldr	r3, [r1, #0]
 800f7ba:	6825      	ldr	r5, [r4, #0]
 800f7bc:	1d18      	adds	r0, r3, #4
 800f7be:	6008      	str	r0, [r1, #0]
 800f7c0:	0628      	lsls	r0, r5, #24
 800f7c2:	d501      	bpl.n	800f7c8 <_printf_i+0xec>
 800f7c4:	681d      	ldr	r5, [r3, #0]
 800f7c6:	e002      	b.n	800f7ce <_printf_i+0xf2>
 800f7c8:	0669      	lsls	r1, r5, #25
 800f7ca:	d5fb      	bpl.n	800f7c4 <_printf_i+0xe8>
 800f7cc:	881d      	ldrh	r5, [r3, #0]
 800f7ce:	4854      	ldr	r0, [pc, #336]	; (800f920 <_printf_i+0x244>)
 800f7d0:	2f6f      	cmp	r7, #111	; 0x6f
 800f7d2:	bf0c      	ite	eq
 800f7d4:	2308      	moveq	r3, #8
 800f7d6:	230a      	movne	r3, #10
 800f7d8:	2100      	movs	r1, #0
 800f7da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7de:	6866      	ldr	r6, [r4, #4]
 800f7e0:	60a6      	str	r6, [r4, #8]
 800f7e2:	2e00      	cmp	r6, #0
 800f7e4:	bfa2      	ittt	ge
 800f7e6:	6821      	ldrge	r1, [r4, #0]
 800f7e8:	f021 0104 	bicge.w	r1, r1, #4
 800f7ec:	6021      	strge	r1, [r4, #0]
 800f7ee:	b90d      	cbnz	r5, 800f7f4 <_printf_i+0x118>
 800f7f0:	2e00      	cmp	r6, #0
 800f7f2:	d04d      	beq.n	800f890 <_printf_i+0x1b4>
 800f7f4:	4616      	mov	r6, r2
 800f7f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f7fa:	fb03 5711 	mls	r7, r3, r1, r5
 800f7fe:	5dc7      	ldrb	r7, [r0, r7]
 800f800:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f804:	462f      	mov	r7, r5
 800f806:	42bb      	cmp	r3, r7
 800f808:	460d      	mov	r5, r1
 800f80a:	d9f4      	bls.n	800f7f6 <_printf_i+0x11a>
 800f80c:	2b08      	cmp	r3, #8
 800f80e:	d10b      	bne.n	800f828 <_printf_i+0x14c>
 800f810:	6823      	ldr	r3, [r4, #0]
 800f812:	07df      	lsls	r7, r3, #31
 800f814:	d508      	bpl.n	800f828 <_printf_i+0x14c>
 800f816:	6923      	ldr	r3, [r4, #16]
 800f818:	6861      	ldr	r1, [r4, #4]
 800f81a:	4299      	cmp	r1, r3
 800f81c:	bfde      	ittt	le
 800f81e:	2330      	movle	r3, #48	; 0x30
 800f820:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f824:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f828:	1b92      	subs	r2, r2, r6
 800f82a:	6122      	str	r2, [r4, #16]
 800f82c:	f8cd a000 	str.w	sl, [sp]
 800f830:	464b      	mov	r3, r9
 800f832:	aa03      	add	r2, sp, #12
 800f834:	4621      	mov	r1, r4
 800f836:	4640      	mov	r0, r8
 800f838:	f7ff fee2 	bl	800f600 <_printf_common>
 800f83c:	3001      	adds	r0, #1
 800f83e:	d14c      	bne.n	800f8da <_printf_i+0x1fe>
 800f840:	f04f 30ff 	mov.w	r0, #4294967295
 800f844:	b004      	add	sp, #16
 800f846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f84a:	4835      	ldr	r0, [pc, #212]	; (800f920 <_printf_i+0x244>)
 800f84c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f850:	6823      	ldr	r3, [r4, #0]
 800f852:	680e      	ldr	r6, [r1, #0]
 800f854:	061f      	lsls	r7, r3, #24
 800f856:	f856 5b04 	ldr.w	r5, [r6], #4
 800f85a:	600e      	str	r6, [r1, #0]
 800f85c:	d514      	bpl.n	800f888 <_printf_i+0x1ac>
 800f85e:	07d9      	lsls	r1, r3, #31
 800f860:	bf44      	itt	mi
 800f862:	f043 0320 	orrmi.w	r3, r3, #32
 800f866:	6023      	strmi	r3, [r4, #0]
 800f868:	b91d      	cbnz	r5, 800f872 <_printf_i+0x196>
 800f86a:	6823      	ldr	r3, [r4, #0]
 800f86c:	f023 0320 	bic.w	r3, r3, #32
 800f870:	6023      	str	r3, [r4, #0]
 800f872:	2310      	movs	r3, #16
 800f874:	e7b0      	b.n	800f7d8 <_printf_i+0xfc>
 800f876:	6823      	ldr	r3, [r4, #0]
 800f878:	f043 0320 	orr.w	r3, r3, #32
 800f87c:	6023      	str	r3, [r4, #0]
 800f87e:	2378      	movs	r3, #120	; 0x78
 800f880:	4828      	ldr	r0, [pc, #160]	; (800f924 <_printf_i+0x248>)
 800f882:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f886:	e7e3      	b.n	800f850 <_printf_i+0x174>
 800f888:	065e      	lsls	r6, r3, #25
 800f88a:	bf48      	it	mi
 800f88c:	b2ad      	uxthmi	r5, r5
 800f88e:	e7e6      	b.n	800f85e <_printf_i+0x182>
 800f890:	4616      	mov	r6, r2
 800f892:	e7bb      	b.n	800f80c <_printf_i+0x130>
 800f894:	680b      	ldr	r3, [r1, #0]
 800f896:	6826      	ldr	r6, [r4, #0]
 800f898:	6960      	ldr	r0, [r4, #20]
 800f89a:	1d1d      	adds	r5, r3, #4
 800f89c:	600d      	str	r5, [r1, #0]
 800f89e:	0635      	lsls	r5, r6, #24
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	d501      	bpl.n	800f8a8 <_printf_i+0x1cc>
 800f8a4:	6018      	str	r0, [r3, #0]
 800f8a6:	e002      	b.n	800f8ae <_printf_i+0x1d2>
 800f8a8:	0671      	lsls	r1, r6, #25
 800f8aa:	d5fb      	bpl.n	800f8a4 <_printf_i+0x1c8>
 800f8ac:	8018      	strh	r0, [r3, #0]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	6123      	str	r3, [r4, #16]
 800f8b2:	4616      	mov	r6, r2
 800f8b4:	e7ba      	b.n	800f82c <_printf_i+0x150>
 800f8b6:	680b      	ldr	r3, [r1, #0]
 800f8b8:	1d1a      	adds	r2, r3, #4
 800f8ba:	600a      	str	r2, [r1, #0]
 800f8bc:	681e      	ldr	r6, [r3, #0]
 800f8be:	6862      	ldr	r2, [r4, #4]
 800f8c0:	2100      	movs	r1, #0
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f7f0 fc9c 	bl	8000200 <memchr>
 800f8c8:	b108      	cbz	r0, 800f8ce <_printf_i+0x1f2>
 800f8ca:	1b80      	subs	r0, r0, r6
 800f8cc:	6060      	str	r0, [r4, #4]
 800f8ce:	6863      	ldr	r3, [r4, #4]
 800f8d0:	6123      	str	r3, [r4, #16]
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8d8:	e7a8      	b.n	800f82c <_printf_i+0x150>
 800f8da:	6923      	ldr	r3, [r4, #16]
 800f8dc:	4632      	mov	r2, r6
 800f8de:	4649      	mov	r1, r9
 800f8e0:	4640      	mov	r0, r8
 800f8e2:	47d0      	blx	sl
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	d0ab      	beq.n	800f840 <_printf_i+0x164>
 800f8e8:	6823      	ldr	r3, [r4, #0]
 800f8ea:	079b      	lsls	r3, r3, #30
 800f8ec:	d413      	bmi.n	800f916 <_printf_i+0x23a>
 800f8ee:	68e0      	ldr	r0, [r4, #12]
 800f8f0:	9b03      	ldr	r3, [sp, #12]
 800f8f2:	4298      	cmp	r0, r3
 800f8f4:	bfb8      	it	lt
 800f8f6:	4618      	movlt	r0, r3
 800f8f8:	e7a4      	b.n	800f844 <_printf_i+0x168>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	4632      	mov	r2, r6
 800f8fe:	4649      	mov	r1, r9
 800f900:	4640      	mov	r0, r8
 800f902:	47d0      	blx	sl
 800f904:	3001      	adds	r0, #1
 800f906:	d09b      	beq.n	800f840 <_printf_i+0x164>
 800f908:	3501      	adds	r5, #1
 800f90a:	68e3      	ldr	r3, [r4, #12]
 800f90c:	9903      	ldr	r1, [sp, #12]
 800f90e:	1a5b      	subs	r3, r3, r1
 800f910:	42ab      	cmp	r3, r5
 800f912:	dcf2      	bgt.n	800f8fa <_printf_i+0x21e>
 800f914:	e7eb      	b.n	800f8ee <_printf_i+0x212>
 800f916:	2500      	movs	r5, #0
 800f918:	f104 0619 	add.w	r6, r4, #25
 800f91c:	e7f5      	b.n	800f90a <_printf_i+0x22e>
 800f91e:	bf00      	nop
 800f920:	0800fa9d 	.word	0x0800fa9d
 800f924:	0800faae 	.word	0x0800faae

0800f928 <__retarget_lock_acquire_recursive>:
 800f928:	4770      	bx	lr

0800f92a <__retarget_lock_release_recursive>:
 800f92a:	4770      	bx	lr

0800f92c <memmove>:
 800f92c:	4288      	cmp	r0, r1
 800f92e:	b510      	push	{r4, lr}
 800f930:	eb01 0402 	add.w	r4, r1, r2
 800f934:	d902      	bls.n	800f93c <memmove+0x10>
 800f936:	4284      	cmp	r4, r0
 800f938:	4623      	mov	r3, r4
 800f93a:	d807      	bhi.n	800f94c <memmove+0x20>
 800f93c:	1e43      	subs	r3, r0, #1
 800f93e:	42a1      	cmp	r1, r4
 800f940:	d008      	beq.n	800f954 <memmove+0x28>
 800f942:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f94a:	e7f8      	b.n	800f93e <memmove+0x12>
 800f94c:	4402      	add	r2, r0
 800f94e:	4601      	mov	r1, r0
 800f950:	428a      	cmp	r2, r1
 800f952:	d100      	bne.n	800f956 <memmove+0x2a>
 800f954:	bd10      	pop	{r4, pc}
 800f956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f95a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f95e:	e7f7      	b.n	800f950 <memmove+0x24>

0800f960 <_realloc_r>:
 800f960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f962:	4607      	mov	r7, r0
 800f964:	4614      	mov	r4, r2
 800f966:	460e      	mov	r6, r1
 800f968:	b921      	cbnz	r1, 800f974 <_realloc_r+0x14>
 800f96a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f96e:	4611      	mov	r1, r2
 800f970:	f7ff bc54 	b.w	800f21c <_malloc_r>
 800f974:	b922      	cbnz	r2, 800f980 <_realloc_r+0x20>
 800f976:	f7ff fc01 	bl	800f17c <_free_r>
 800f97a:	4625      	mov	r5, r4
 800f97c:	4628      	mov	r0, r5
 800f97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f980:	f000 f814 	bl	800f9ac <_malloc_usable_size_r>
 800f984:	42a0      	cmp	r0, r4
 800f986:	d20f      	bcs.n	800f9a8 <_realloc_r+0x48>
 800f988:	4621      	mov	r1, r4
 800f98a:	4638      	mov	r0, r7
 800f98c:	f7ff fc46 	bl	800f21c <_malloc_r>
 800f990:	4605      	mov	r5, r0
 800f992:	2800      	cmp	r0, #0
 800f994:	d0f2      	beq.n	800f97c <_realloc_r+0x1c>
 800f996:	4631      	mov	r1, r6
 800f998:	4622      	mov	r2, r4
 800f99a:	f7ff fbc9 	bl	800f130 <memcpy>
 800f99e:	4631      	mov	r1, r6
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f7ff fbeb 	bl	800f17c <_free_r>
 800f9a6:	e7e9      	b.n	800f97c <_realloc_r+0x1c>
 800f9a8:	4635      	mov	r5, r6
 800f9aa:	e7e7      	b.n	800f97c <_realloc_r+0x1c>

0800f9ac <_malloc_usable_size_r>:
 800f9ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9b0:	1f18      	subs	r0, r3, #4
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	bfbc      	itt	lt
 800f9b6:	580b      	ldrlt	r3, [r1, r0]
 800f9b8:	18c0      	addlt	r0, r0, r3
 800f9ba:	4770      	bx	lr

0800f9bc <_init>:
 800f9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9be:	bf00      	nop
 800f9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9c2:	bc08      	pop	{r3}
 800f9c4:	469e      	mov	lr, r3
 800f9c6:	4770      	bx	lr

0800f9c8 <_fini>:
 800f9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ca:	bf00      	nop
 800f9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ce:	bc08      	pop	{r3}
 800f9d0:	469e      	mov	lr, r3
 800f9d2:	4770      	bx	lr
