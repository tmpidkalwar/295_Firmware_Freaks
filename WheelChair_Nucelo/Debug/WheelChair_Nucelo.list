
WheelChair_Nucelo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed4  08004ed4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004edc  08004edc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ee0  08004ee0  00014ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000078  08004f5c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004f5c  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea96  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000218e  00000000  00000000  0002eb3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00030cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  00031ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022edc  00000000  00000000  000327d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b454  00000000  00000000  000556b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5962  00000000  00000000  00060b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013646a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f20  00000000  00000000  001364e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e5c 	.word	0x08004e5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004e5c 	.word	0x08004e5c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	ed87 0a05 	vstr	s0, [r7, #20]
 8000db6:	edc7 0a04 	vstr	s1, [r7, #16]
 8000dba:	ed87 1a03 	vstr	s2, [r7, #12]
 8000dbe:	edc7 1a02 	vstr	s3, [r7, #8]
 8000dc2:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000dc6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dca:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dd2:	edd7 6a01 	vldr	s13, [r7, #4]
 8000dd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dde:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000de2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000de6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000df2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000df6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <get_adc_value>:

uint16_t get_adc_value(ADC_HandleTypeDef adc){
 8000e08:	b084      	sub	sp, #16
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	f107 0c10 	add.w	ip, r7, #16
 8000e14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t adc_val;
	HAL_ADC_Start(&adc);
 8000e18:	f107 0010 	add.w	r0, r7, #16
 8000e1c:	f000 ff9e 	bl	8001d5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adc, 20);
 8000e20:	2114      	movs	r1, #20
 8000e22:	f107 0010 	add.w	r0, r7, #16
 8000e26:	f001 f85f 	bl	8001ee8 <HAL_ADC_PollForConversion>
	adc_val = HAL_ADC_GetValue(&adc);
 8000e2a:	f107 0010 	add.w	r0, r7, #16
 8000e2e:	f001 f8df 	bl	8001ff0 <HAL_ADC_GetValue>
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
	return adc_val;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e42:	b004      	add	sp, #16
 8000e44:	4770      	bx	lr

08000e46 <isManual>:

bool isManual(uint16_t x, uint16_t y)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	460a      	mov	r2, r1
 8000e50:	80fb      	strh	r3, [r7, #6]
 8000e52:	4613      	mov	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
	if((x>3400 || x<2900) || (y>3400 || y<2900))
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	f640 5248 	movw	r2, #3400	; 0xd48
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d80e      	bhi.n	8000e7e <isManual+0x38>
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	f640 3253 	movw	r2, #2899	; 0xb53
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d909      	bls.n	8000e7e <isManual+0x38>
 8000e6a:	88bb      	ldrh	r3, [r7, #4]
 8000e6c:	f640 5248 	movw	r2, #3400	; 0xd48
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d804      	bhi.n	8000e7e <isManual+0x38>
 8000e74:	88bb      	ldrh	r3, [r7, #4]
 8000e76:	f640 3253 	movw	r2, #2899	; 0xb53
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d801      	bhi.n	8000e82 <isManual+0x3c>
		return true;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <isManual+0x3e>
	else
		return false;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	b0b1      	sub	sp, #196	; 0xc4
 8000e94:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e96:	f000 feb9 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9a:	f000 fa33 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9e:	f000 fbcb 	bl	8001638 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea2:	f000 fb9f 	bl	80015e4 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000ea6:	f000 fb3f 	bl	8001528 <MX_DAC_Init>
  MX_UART4_Init();
 8000eaa:	f000 fb71 	bl	8001590 <MX_UART4_Init>
  MX_ADC1_Init();
 8000eae:	f000 fa97 	bl	80013e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000eb2:	f000 fae7 	bl	8001484 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	48c2      	ldr	r0, [pc, #776]	; (80011c4 <main+0x334>)
 8000eba:	f001 fbd9 	bl	8002670 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	48c0      	ldr	r0, [pc, #768]	; (80011c4 <main+0x334>)
 8000ec2:	f001 fbd5 	bl	8002670 <HAL_DAC_Start>

  HAL_DACEx_DualSetValue(&hdac, DAC_ALIGN_12B_R, 2.5*(0xfff+1)/3.3, 2.5*(0xfff+1)/3.3);
 8000ec6:	f640 431f 	movw	r3, #3103	; 0xc1f
 8000eca:	f640 421f 	movw	r2, #3103	; 0xc1f
 8000ece:	2100      	movs	r1, #0
 8000ed0:	48bc      	ldr	r0, [pc, #752]	; (80011c4 <main+0x334>)
 8000ed2:	f001 fcd4 	bl	800287e <HAL_DACEx_DualSetValue>
  HAL_Delay(5000);
 8000ed6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000eda:	f000 fed9 	bl	8001c90 <HAL_Delay>
  while (1)
  {
	  static bool manual = false;
	  static bool cont = false;
	  static uint32_t transition_cnt=0;
	  x_d = get_adc_value(hadc2);
 8000ede:	4eba      	ldr	r6, [pc, #744]	; (80011c8 <main+0x338>)
 8000ee0:	466d      	mov	r5, sp
 8000ee2:	f106 0410 	add.w	r4, r6, #16
 8000ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ef6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000efa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000efe:	f7ff ff83 	bl	8000e08 <get_adc_value>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  y_d = get_adc_value(hadc1);
 8000f08:	4eb0      	ldr	r6, [pc, #704]	; (80011cc <main+0x33c>)
 8000f0a:	466d      	mov	r5, sp
 8000f0c:	f106 0410 	add.w	r4, r6, #16
 8000f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f20:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f24:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f28:	f7ff ff6e 	bl	8000e08 <get_adc_value>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

	  sprintf(buff, "x_d = %u y_d = %u\r\n",x_d,y_d);
 8000f32:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8000f36:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000f3a:	1d38      	adds	r0, r7, #4
 8000f3c:	49a4      	ldr	r1, [pc, #656]	; (80011d0 <main+0x340>)
 8000f3e:	f003 fb87 	bl	8004650 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff f963 	bl	8000210 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	1d39      	adds	r1, r7, #4
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	489f      	ldr	r0, [pc, #636]	; (80011d4 <main+0x344>)
 8000f56:	f002 fe44 	bl	8003be2 <HAL_UART_Transmit>

	  if(!isManual(x_d,y_d))
 8000f5a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8000f5e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff6e 	bl	8000e46 <isManual>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f083 0301 	eor.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 80bf 	beq.w	80010f6 <main+0x266>
	  {
		  if(manual)
 8000f78:	4b97      	ldr	r3, [pc, #604]	; (80011d8 <main+0x348>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d016      	beq.n	8000fae <main+0x11e>
		  {
			  if(++transition_cnt< 150)
 8000f80:	4b96      	ldr	r3, [pc, #600]	; (80011dc <main+0x34c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	4a95      	ldr	r2, [pc, #596]	; (80011dc <main+0x34c>)
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b94      	ldr	r3, [pc, #592]	; (80011dc <main+0x34c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b95      	cmp	r3, #149	; 0x95
 8000f90:	d803      	bhi.n	8000f9a <main+0x10a>
				  cont=true;
 8000f92:	4b93      	ldr	r3, [pc, #588]	; (80011e0 <main+0x350>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e0ad      	b.n	80010f6 <main+0x266>
			  else{
				  manual = false;
 8000f9a:	4b8f      	ldr	r3, [pc, #572]	; (80011d8 <main+0x348>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
				  cont=false;
 8000fa0:	4b8f      	ldr	r3, [pc, #572]	; (80011e0 <main+0x350>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
				  transition_cnt=0;
 8000fa6:	4b8d      	ldr	r3, [pc, #564]	; (80011dc <main+0x34c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e0a3      	b.n	80010f6 <main+0x266>
			  }
		  }
		  else{
			  status = HAL_UART_Receive(&huart4, byte, 6, 2000);
 8000fae:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000fb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fb6:	2206      	movs	r2, #6
 8000fb8:	488a      	ldr	r0, [pc, #552]	; (80011e4 <main+0x354>)
 8000fba:	f002 feab 	bl	8003d14 <HAL_UART_Receive>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	67bb      	str	r3, [r7, #120]	; 0x78

			  if(status==3){
 8000fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d106      	bne.n	8000fd6 <main+0x146>
				  lin_vel=10;
 8000fc8:	230a      	movs	r3, #10
 8000fca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				  ang_vel=100;
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8000fd4:	e029      	b.n	800102a <main+0x19a>
			  }else{
				  for(int i=0;i<4;i++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000fdc:	e021      	b.n	8001022 <main+0x192>
					  if(byte[i]==255){
 8000fde:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2bff      	cmp	r3, #255	; 0xff
 8000fec:	d114      	bne.n	8001018 <main+0x188>
						  lin_vel=byte[i+1];
 8000fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000ffe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						  ang_vel=byte[i+2];
 8001002:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001006:	3302      	adds	r3, #2
 8001008:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800100c:	4413      	add	r3, r2
 800100e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001012:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
						  break;
 8001016:	e008      	b.n	800102a <main+0x19a>
				  for(int i=0;i<4;i++){
 8001018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800101c:	3301      	adds	r3, #1
 800101e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001022:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001026:	2b03      	cmp	r3, #3
 8001028:	ddd9      	ble.n	8000fde <main+0x14e>
					  }
				  }
			  }

			  if(lin_vel<10){
 800102a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800102e:	2b09      	cmp	r3, #9
 8001030:	d803      	bhi.n	800103a <main+0x1aa>
				  x_out=2.1;
 8001032:	4b6d      	ldr	r3, [pc, #436]	; (80011e8 <main+0x358>)
 8001034:	4a6d      	ldr	r2, [pc, #436]	; (80011ec <main+0x35c>)
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e01e      	b.n	8001078 <main+0x1e8>
			  }else if(lin_vel==10){
 800103a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800103e:	2b0a      	cmp	r3, #10
 8001040:	d103      	bne.n	800104a <main+0x1ba>
				  x_out=2.5;
 8001042:	4b69      	ldr	r3, [pc, #420]	; (80011e8 <main+0x358>)
 8001044:	4a6a      	ldr	r2, [pc, #424]	; (80011f0 <main+0x360>)
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e016      	b.n	8001078 <main+0x1e8>
			  }else{
				  x_out = map((float)lin_vel,10,90,2.8,3);
 800104a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001056:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 800105a:	eddf 1a72 	vldr	s3, [pc, #456]	; 8001224 <main+0x394>
 800105e:	ed9f 1a65 	vldr	s2, [pc, #404]	; 80011f4 <main+0x364>
 8001062:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f7ff fe9f 	bl	8000dac <map>
 800106e:	eef0 7a40 	vmov.f32	s15, s0
 8001072:	4b5d      	ldr	r3, [pc, #372]	; (80011e8 <main+0x358>)
 8001074:	edc3 7a00 	vstr	s15, [r3]
			  }

			  if(ang_vel==100){
 8001078:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800107c:	2b64      	cmp	r3, #100	; 0x64
 800107e:	d103      	bne.n	8001088 <main+0x1f8>
				  y_out=2.5;
 8001080:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <main+0x368>)
 8001082:	4a5b      	ldr	r2, [pc, #364]	; (80011f0 <main+0x360>)
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e036      	b.n	80010f6 <main+0x266>
			  }else if(ang_vel<100){
 8001088:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800108c:	2b63      	cmp	r3, #99	; 0x63
 800108e:	d817      	bhi.n	80010c0 <main+0x230>
				  y_out = map((float)ang_vel,0,99,1.9,2.2);
 8001090:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109c:	ed9f 2a57 	vldr	s4, [pc, #348]	; 80011fc <main+0x36c>
 80010a0:	eddf 1a57 	vldr	s3, [pc, #348]	; 8001200 <main+0x370>
 80010a4:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8001204 <main+0x374>
 80010a8:	eddf 0a57 	vldr	s1, [pc, #348]	; 8001208 <main+0x378>
 80010ac:	eeb0 0a67 	vmov.f32	s0, s15
 80010b0:	f7ff fe7c 	bl	8000dac <map>
 80010b4:	eef0 7a40 	vmov.f32	s15, s0
 80010b8:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <main+0x368>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
 80010be:	e01a      	b.n	80010f6 <main+0x266>
			  }else if(ang_vel>100){
 80010c0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80010c4:	2b64      	cmp	r3, #100	; 0x64
 80010c6:	d916      	bls.n	80010f6 <main+0x266>
				  y_out = map((float)ang_vel,101,200,2.8,3.3);
 80010c8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d4:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 800120c <main+0x37c>
 80010d8:	eddf 1a52 	vldr	s3, [pc, #328]	; 8001224 <main+0x394>
 80010dc:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8001210 <main+0x380>
 80010e0:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8001214 <main+0x384>
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	f7ff fe60 	bl	8000dac <map>
 80010ec:	eef0 7a40 	vmov.f32	s15, s0
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <main+0x368>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }
	  }

	  if(isManual(x_d,y_d) || cont){
 80010f6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80010fa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fea0 	bl	8000e46 <isManual>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d104      	bne.n	8001116 <main+0x286>
 800110c:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <main+0x350>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80ae 	beq.w	8001272 <main+0x3e2>
		 if(!cont)
 8001116:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <main+0x350>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f083 0301 	eor.w	r3, r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <main+0x29a>
			 transition_cnt = 0;
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <main+0x34c>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]

		  manual = true;
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <main+0x348>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
		  if(x_d<2900){
 8001130:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001134:	f640 3253 	movw	r2, #2899	; 0xb53
 8001138:	4293      	cmp	r3, r2
 800113a:	d803      	bhi.n	8001144 <main+0x2b4>
			  x_out=2.1;
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <main+0x358>)
 800113e:	4a2b      	ldr	r2, [pc, #172]	; (80011ec <main+0x35c>)
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e020      	b.n	8001186 <main+0x2f6>
		  }else if(x_d>3400){
 8001144:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001148:	f640 5248 	movw	r2, #3400	; 0xd48
 800114c:	4293      	cmp	r3, r2
 800114e:	d917      	bls.n	8001180 <main+0x2f0>
			  x_out=map((float)x_d,3401,4096,2.8,3);
 8001150:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115c:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 8001160:	eddf 1a30 	vldr	s3, [pc, #192]	; 8001224 <main+0x394>
 8001164:	ed9f 1a31 	vldr	s2, [pc, #196]	; 800122c <main+0x39c>
 8001168:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8001228 <main+0x398>
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	f7ff fe1c 	bl	8000dac <map>
 8001174:	eef0 7a40 	vmov.f32	s15, s0
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <main+0x358>)
 800117a:	edc3 7a00 	vstr	s15, [r3]
 800117e:	e002      	b.n	8001186 <main+0x2f6>
		  }else{
			  x_out = 2.5;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <main+0x358>)
 8001182:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <main+0x360>)
 8001184:	601a      	str	r2, [r3, #0]
		  }

		  if(y_d<2900){
 8001186:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800118a:	f640 3253 	movw	r2, #2899	; 0xb53
 800118e:	4293      	cmp	r3, r2
 8001190:	d84e      	bhi.n	8001230 <main+0x3a0>
			  y_out=map((float)y_d,1500,2899,1.9,2.2);
 8001192:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119e:	ed9f 2a17 	vldr	s4, [pc, #92]	; 80011fc <main+0x36c>
 80011a2:	eddf 1a17 	vldr	s3, [pc, #92]	; 8001200 <main+0x370>
 80011a6:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8001218 <main+0x388>
 80011aa:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800121c <main+0x38c>
 80011ae:	eeb0 0a67 	vmov.f32	s0, s15
 80011b2:	f7ff fdfb 	bl	8000dac <map>
 80011b6:	eef0 7a40 	vmov.f32	s15, s0
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <main+0x368>)
 80011bc:	edc3 7a00 	vstr	s15, [r3]
 80011c0:	e057      	b.n	8001272 <main+0x3e2>
 80011c2:	bf00      	nop
 80011c4:	2000013c 	.word	0x2000013c
 80011c8:	200000ac 	.word	0x200000ac
 80011cc:	200000f4 	.word	0x200000f4
 80011d0:	08004e74 	.word	0x08004e74
 80011d4:	20000190 	.word	0x20000190
 80011d8:	20000094 	.word	0x20000094
 80011dc:	20000098 	.word	0x20000098
 80011e0:	2000009c 	.word	0x2000009c
 80011e4:	20000150 	.word	0x20000150
 80011e8:	20000000 	.word	0x20000000
 80011ec:	40066666 	.word	0x40066666
 80011f0:	40200000 	.word	0x40200000
 80011f4:	42b40000 	.word	0x42b40000
 80011f8:	20000004 	.word	0x20000004
 80011fc:	400ccccd 	.word	0x400ccccd
 8001200:	3ff33333 	.word	0x3ff33333
 8001204:	42c60000 	.word	0x42c60000
 8001208:	00000000 	.word	0x00000000
 800120c:	40533333 	.word	0x40533333
 8001210:	43480000 	.word	0x43480000
 8001214:	42ca0000 	.word	0x42ca0000
 8001218:	45353000 	.word	0x45353000
 800121c:	44bb8000 	.word	0x44bb8000
 8001220:	40466666 	.word	0x40466666
 8001224:	40333333 	.word	0x40333333
 8001228:	45549000 	.word	0x45549000
 800122c:	45800000 	.word	0x45800000
		  }else if(y_d>3400){
 8001230:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001234:	f640 5248 	movw	r2, #3400	; 0xd48
 8001238:	4293      	cmp	r3, r2
 800123a:	d917      	bls.n	800126c <main+0x3dc>
			  y_out = map((float)y_d,3401,4096,2.8,3.1);
 800123c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001248:	ed1f 2a0b 	vldr	s4, [pc, #-44]	; 8001220 <main+0x390>
 800124c:	ed5f 1a0b 	vldr	s3, [pc, #-44]	; 8001224 <main+0x394>
 8001250:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800122c <main+0x39c>
 8001254:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 8001228 <main+0x398>
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	f7ff fda6 	bl	8000dac <map>
 8001260:	eef0 7a40 	vmov.f32	s15, s0
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <main+0x460>)
 8001266:	edc3 7a00 	vstr	s15, [r3]
 800126a:	e002      	b.n	8001272 <main+0x3e2>
		  }else{
			  y_out = 2.5;
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <main+0x460>)
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <main+0x464>)
 8001270:	601a      	str	r2, [r3, #0]
		  }
	  }



	  int x_in = x_out*(0xfff+1)/3.3;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <main+0x468>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80012fc <main+0x46c>
 800127c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001280:	ee17 0a90 	vmov	r0, s15
 8001284:	f7ff f980 	bl	8000588 <__aeabi_f2d>
 8001288:	a317      	add	r3, pc, #92	; (adr r3, 80012e8 <main+0x458>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff fafd 	bl	800088c <__aeabi_ddiv>
 8001292:	4603      	mov	r3, r0
 8001294:	460c      	mov	r4, r1
 8001296:	4618      	mov	r0, r3
 8001298:	4621      	mov	r1, r4
 800129a:	f7ff fbdf 	bl	8000a5c <__aeabi_d2iz>
 800129e:	4603      	mov	r3, r0
 80012a0:	677b      	str	r3, [r7, #116]	; 0x74
	  int y_in = y_out*(0xfff+1)/3.3;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <main+0x460>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012fc <main+0x46c>
 80012ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b0:	ee17 0a90 	vmov	r0, s15
 80012b4:	f7ff f968 	bl	8000588 <__aeabi_f2d>
 80012b8:	a30b      	add	r3, pc, #44	; (adr r3, 80012e8 <main+0x458>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff fae5 	bl	800088c <__aeabi_ddiv>
 80012c2:	4603      	mov	r3, r0
 80012c4:	460c      	mov	r4, r1
 80012c6:	4618      	mov	r0, r3
 80012c8:	4621      	mov	r1, r4
 80012ca:	f7ff fbc7 	bl	8000a5c <__aeabi_d2iz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	673b      	str	r3, [r7, #112]	; 0x70
	  HAL_DACEx_DualSetValue(&hdac, DAC_ALIGN_12B_R, x_in, y_in);
 80012d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012d6:	2100      	movs	r1, #0
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <main+0x470>)
 80012da:	f001 fad0 	bl	800287e <HAL_DACEx_DualSetValue>
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  //sprintf(buff, "Linear = %u Angular = %u\r\n",lin_vel,ang_vel);
	  //HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
	  HAL_Delay(50);
 80012de:	2032      	movs	r0, #50	; 0x32
 80012e0:	f000 fcd6 	bl	8001c90 <HAL_Delay>
  {
 80012e4:	e5fb      	b.n	8000ede <main+0x4e>
 80012e6:	bf00      	nop
 80012e8:	66666666 	.word	0x66666666
 80012ec:	400a6666 	.word	0x400a6666
 80012f0:	20000004 	.word	0x20000004
 80012f4:	40200000 	.word	0x40200000
 80012f8:	20000000 	.word	0x20000000
 80012fc:	45800000 	.word	0x45800000
 8001300:	2000013c 	.word	0x2000013c

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b094      	sub	sp, #80	; 0x50
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	2234      	movs	r2, #52	; 0x34
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f003 f994 	bl	8004640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <SystemClock_Config+0xd4>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <SystemClock_Config+0xd4>)
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <SystemClock_Config+0xd4>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001344:	2300      	movs	r3, #0
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <SystemClock_Config+0xd8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001350:	4a22      	ldr	r2, [pc, #136]	; (80013dc <SystemClock_Config+0xd8>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <SystemClock_Config+0xd8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001364:	2302      	movs	r3, #2
 8001366:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001368:	2301      	movs	r3, #1
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136c:	2310      	movs	r3, #16
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001370:	2302      	movs	r3, #2
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001374:	2300      	movs	r3, #0
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001378:	2310      	movs	r3, #16
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800137c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001380:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001382:	2304      	movs	r3, #4
 8001384:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001386:	2302      	movs	r3, #2
 8001388:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800138a:	2302      	movs	r3, #2
 800138c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4618      	mov	r0, r3
 8001394:	f001 ff40 	bl	8003218 <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800139e:	f000 f9cd 	bl	800173c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2302      	movs	r3, #2
 80013a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	2102      	movs	r1, #2
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 fc3e 	bl	8002c40 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013ca:	f000 f9b7 	bl	800173c <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	; 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <MX_ADC1_Init+0x98>)
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <MX_ADC1_Init+0x9c>)
 80013f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <MX_ADC1_Init+0x98>)
 80013fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_ADC1_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <MX_ADC1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_ADC1_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <MX_ADC1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_ADC1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_ADC1_Init+0x98>)
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <MX_ADC1_Init+0xa0>)
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_ADC1_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_ADC1_Init+0x98>)
 800142e:	2201      	movs	r2, #1
 8001430:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_ADC1_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_ADC1_Init+0x98>)
 800143c:	2201      	movs	r2, #1
 800143e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_ADC1_Init+0x98>)
 8001442:	f000 fc47 	bl	8001cd4 <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800144c:	f000 f976 	bl	800173c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001450:	230b      	movs	r3, #11
 8001452:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_ADC1_Init+0x98>)
 8001462:	f000 fdd3 	bl	800200c <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800146c:	f000 f966 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200000f4 	.word	0x200000f4
 800147c:	40012000 	.word	0x40012000
 8001480:	0f000001 	.word	0x0f000001

08001484 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_ADC2_Init+0x98>)
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <MX_ADC2_Init+0x9c>)
 800149a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_ADC2_Init+0x98>)
 800149e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_ADC2_Init+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_ADC2_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_ADC2_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_ADC2_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_ADC2_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_ADC2_Init+0x98>)
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <MX_ADC2_Init+0xa0>)
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_ADC2_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_ADC2_Init+0x98>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_ADC2_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_ADC2_Init+0x98>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_ADC2_Init+0x98>)
 80014e6:	f000 fbf5 	bl	8001cd4 <HAL_ADC_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80014f0:	f000 f924 	bl	800173c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014f4:	230a      	movs	r3, #10
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_ADC2_Init+0x98>)
 8001506:	f000 fd81 	bl	800200c <HAL_ADC_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001510:	f000 f914 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200000ac 	.word	0x200000ac
 8001520:	40012100 	.word	0x40012100
 8001524:	0f000001 	.word	0x0f000001

08001528 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_DAC_Init+0x60>)
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <MX_DAC_Init+0x64>)
 800153a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800153c:	4812      	ldr	r0, [pc, #72]	; (8001588 <MX_DAC_Init+0x60>)
 800153e:	f001 f875 	bl	800262c <HAL_DAC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001548:	f000 f8f8 	bl	800173c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800154c:	2300      	movs	r3, #0
 800154e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	4619      	mov	r1, r3
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <MX_DAC_Init+0x60>)
 800155c:	f001 f942 	bl	80027e4 <HAL_DAC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001566:	f000 f8e9 	bl	800173c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800156a:	463b      	mov	r3, r7
 800156c:	2210      	movs	r2, #16
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_DAC_Init+0x60>)
 8001572:	f001 f937 	bl	80027e4 <HAL_DAC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800157c:	f000 f8de 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000013c 	.word	0x2000013c
 800158c:	40007400 	.word	0x40007400

08001590 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_UART4_Init+0x4c>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <MX_UART4_Init+0x50>)
 8001598:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_UART4_Init+0x4c>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_UART4_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_UART4_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_UART4_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_UART4_Init+0x4c>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_UART4_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_UART4_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_UART4_Init+0x4c>)
 80015c8:	f002 fabe 	bl	8003b48 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80015d2:	f000 f8b3 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000150 	.word	0x20000150
 80015e0:	40004c00 	.word	0x40004c00

080015e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_USART2_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 800161c:	f002 fa94 	bl	8003b48 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f000 f889 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000190 	.word	0x20000190
 8001634:	40004400 	.word	0x40004400

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <MX_GPIO_Init+0xd0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a2c      	ldr	r2, [pc, #176]	; (8001708 <MX_GPIO_Init+0xd0>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <MX_GPIO_Init+0xd0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <MX_GPIO_Init+0xd0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a25      	ldr	r2, [pc, #148]	; (8001708 <MX_GPIO_Init+0xd0>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <MX_GPIO_Init+0xd0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_GPIO_Init+0xd0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <MX_GPIO_Init+0xd0>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_GPIO_Init+0xd0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_GPIO_Init+0xd0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <MX_GPIO_Init+0xd0>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_GPIO_Init+0xd0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	2140      	movs	r1, #64	; 0x40
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <MX_GPIO_Init+0xd4>)
 80016c4:	f001 faa2 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_GPIO_Init+0xd8>)
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <MX_GPIO_Init+0xdc>)
 80016de:	f001 f903 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e2:	2340      	movs	r3, #64	; 0x40
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <MX_GPIO_Init+0xd4>)
 80016fa:	f001 f8f5 	bl	80028e8 <HAL_GPIO_Init>

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400
 8001710:	10210000 	.word	0x10210000
 8001714:	40020800 	.word	0x40020800

08001718 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800172a:	f000 fa91 	bl	8001c50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40001000 	.word	0x40001000

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_MspInit+0x4c>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <HAL_MspInit+0x4c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <HAL_MspInit+0x4c>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_MspInit+0x4c>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a2e      	ldr	r2, [pc, #184]	; (8001874 <HAL_ADC_MspInit+0xd8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d128      	bne.n	8001810 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a2c      	ldr	r2, [pc, #176]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a25      	ldr	r2, [pc, #148]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fa:	2303      	movs	r3, #3
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	481c      	ldr	r0, [pc, #112]	; (800187c <HAL_ADC_MspInit+0xe0>)
 800180a:	f001 f86d 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800180e:	e02c      	b.n	800186a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <HAL_ADC_MspInit+0xe4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d127      	bne.n	800186a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 8001824:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_ADC_MspInit+0xdc>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001852:	2301      	movs	r3, #1
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	; (800187c <HAL_ADC_MspInit+0xe0>)
 8001866:	f001 f83f 	bl	80028e8 <HAL_GPIO_Init>
}
 800186a:	bf00      	nop
 800186c:	3730      	adds	r7, #48	; 0x30
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40012000 	.word	0x40012000
 8001878:	40023800 	.word	0x40023800
 800187c:	40020800 	.word	0x40020800
 8001880:	40012100 	.word	0x40012100

08001884 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_DAC_MspInit+0x8c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d12f      	bne.n	8001906 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_DAC_MspInit+0x90>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_DAC_MspInit+0x90>)
 80018b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_DAC_MspInit+0x90>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_DAC_MspInit+0x90>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_DAC_MspInit+0x90>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_DAC_MspInit+0x90>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018de:	2330      	movs	r3, #48	; 0x30
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e2:	2303      	movs	r3, #3
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <HAL_DAC_MspInit+0x94>)
 80018f2:	f000 fff9 	bl	80028e8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2036      	movs	r0, #54	; 0x36
 80018fc:	f000 fe6c 	bl	80025d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001900:	2036      	movs	r0, #54	; 0x36
 8001902:	f000 fe85 	bl	8002610 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40007400 	.word	0x40007400
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_UART_MspInit+0xe8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12c      	bne.n	8001998 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <HAL_UART_MspInit+0xec>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a30      	ldr	r2, [pc, #192]	; (8001a08 <HAL_UART_MspInit+0xec>)
 8001948:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_UART_MspInit+0xec>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_UART_MspInit+0xec>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <HAL_UART_MspInit+0xec>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_UART_MspInit+0xec>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001976:	2303      	movs	r3, #3
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197e:	2301      	movs	r3, #1
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001986:	2308      	movs	r3, #8
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	481e      	ldr	r0, [pc, #120]	; (8001a0c <HAL_UART_MspInit+0xf0>)
 8001992:	f000 ffa9 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001996:	e030      	b.n	80019fa <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <HAL_UART_MspInit+0xf4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12b      	bne.n	80019fa <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019da:	230c      	movs	r3, #12
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ea:	2307      	movs	r3, #7
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <HAL_UART_MspInit+0xf0>)
 80019f6:	f000 ff77 	bl	80028e8 <HAL_GPIO_Init>
}
 80019fa:	bf00      	nop
 80019fc:	3730      	adds	r7, #48	; 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40004c00 	.word	0x40004c00
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40004400 	.word	0x40004400

08001a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	2036      	movs	r0, #54	; 0x36
 8001a2a:	f000 fdd5 	bl	80025d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001a2e:	2036      	movs	r0, #54	; 0x36
 8001a30:	f000 fdee 	bl	8002610 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_InitTick+0xa4>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_InitTick+0xa4>)
 8001a3e:	f043 0310 	orr.w	r3, r3, #16
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_InitTick+0xa4>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a50:	f107 0210 	add.w	r2, r7, #16
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fa0a 	bl	8002e74 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a60:	f001 f9e0 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8001a64:	4603      	mov	r3, r0
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	4a13      	ldr	r2, [pc, #76]	; (8001abc <HAL_InitTick+0xa8>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0c9b      	lsrs	r3, r3, #18
 8001a74:	3b01      	subs	r3, #1
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_InitTick+0xac>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <HAL_InitTick+0xb0>)
 8001a7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_InitTick+0xac>)
 8001a80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_InitTick+0xac>)
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_InitTick+0xac>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_InitTick+0xac>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a98:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <HAL_InitTick+0xac>)
 8001a9a:	f001 fe17 	bl	80036cc <HAL_TIM_Base_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d104      	bne.n	8001aae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001aa4:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <HAL_InitTick+0xac>)
 8001aa6:	f001 fe46 	bl	8003736 <HAL_TIM_Base_Start_IT>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3730      	adds	r7, #48	; 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	431bde83 	.word	0x431bde83
 8001ac0:	200001d0 	.word	0x200001d0
 8001ac4:	40001000 	.word	0x40001000

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <UsageFault_Handler+0x4>

08001aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <TIM6_DAC_IRQHandler+0x14>)
 8001b1e:	f000 fe0d 	bl	800273c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001b22:	4803      	ldr	r0, [pc, #12]	; (8001b30 <TIM6_DAC_IRQHandler+0x18>)
 8001b24:	f001 fe2b 	bl	800377e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000013c 	.word	0x2000013c
 8001b30:	200001d0 	.word	0x200001d0

08001b34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x50>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x16>
		heap_end = &end;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <_sbrk+0x50>)
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <_sbrk+0x54>)
 8001b48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <_sbrk+0x50>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <_sbrk+0x50>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	466a      	mov	r2, sp
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d907      	bls.n	8001b6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b5e:	f002 fd45 	bl	80045ec <__errno>
 8001b62:	4602      	mov	r2, r0
 8001b64:	230c      	movs	r3, #12
 8001b66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	e006      	b.n	8001b7c <_sbrk+0x48>
	}

	heap_end += incr;
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <_sbrk+0x50>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <_sbrk+0x50>)
 8001b78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200000a0 	.word	0x200000a0
 8001b88:	20000218 	.word	0x20000218

08001b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <SystemInit+0x28>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <SystemInit+0x28>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <SystemInit+0x28>)
 8001ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ba6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bbe:	e003      	b.n	8001bc8 <LoopCopyDataInit>

08001bc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bc6:	3104      	adds	r1, #4

08001bc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bd0:	d3f6      	bcc.n	8001bc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bd4:	e002      	b.n	8001bdc <LoopFillZerobss>

08001bd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bd8:	f842 3b04 	str.w	r3, [r2], #4

08001bdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001be0:	d3f9      	bcc.n	8001bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001be2:	f7ff ffd3 	bl	8001b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f002 fd07 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7ff f951 	bl	8000e90 <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bf0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bf4:	08004ee4 	.word	0x08004ee4
  ldr  r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bfc:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001c00:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001c04:	20000218 	.word	0x20000218

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_Init+0x40>)
 8001c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_Init+0x40>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_Init+0x40>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 fcc4 	bl	80025c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff feea 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c40:	f7ff fd84 	bl	800174c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000010 	.word	0x20000010
 8001c74:	20000210 	.word	0x20000210

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000210 	.word	0x20000210

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_Delay+0x40>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000010 	.word	0x20000010

08001cd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e033      	b.n	8001d52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fd52 	bl	800179c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d118      	bne.n	8001d44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d1a:	f023 0302 	bic.w	r3, r3, #2
 8001d1e:	f043 0202 	orr.w	r2, r3, #2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 faa2 	bl	8002270 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
 8001d42:	e001      	b.n	8001d48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Start+0x1a>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e0a5      	b.n	8001ec2 <HAL_ADC_Start+0x166>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d018      	beq.n	8001dbe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9c:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <HAL_ADC_Start+0x174>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a4c      	ldr	r2, [pc, #304]	; (8001ed4 <HAL_ADC_Start+0x178>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0c9a      	lsrs	r2, r3, #18
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001db0:	e002      	b.n	8001db8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f9      	bne.n	8001db2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d179      	bne.n	8001ec0 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0a:	d106      	bne.n	8001e1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	f023 0206 	bic.w	r2, r3, #6
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_ADC_Start+0x17c>)
 8001e2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d12a      	bne.n	8001e98 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a25      	ldr	r2, [pc, #148]	; (8001edc <HAL_ADC_Start+0x180>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d015      	beq.n	8001e78 <HAL_ADC_Start+0x11c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <HAL_ADC_Start+0x184>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d105      	bne.n	8001e62 <HAL_ADC_Start+0x106>
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_ADC_Start+0x17c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <HAL_ADC_Start+0x188>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d129      	bne.n	8001ec0 <HAL_ADC_Start+0x164>
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_ADC_Start+0x17c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d823      	bhi.n	8001ec0 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d11c      	bne.n	8001ec0 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	e013      	b.n	8001ec0 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_ADC_Start+0x180>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_ADC_Start+0x164>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ebe:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000008 	.word	0x20000008
 8001ed4:	431bde83 	.word	0x431bde83
 8001ed8:	40012300 	.word	0x40012300
 8001edc:	40012000 	.word	0x40012000
 8001ee0:	40012100 	.word	0x40012100
 8001ee4:	40012200 	.word	0x40012200

08001ee8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f04:	d113      	bne.n	8001f2e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f14:	d10b      	bne.n	8001f2e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f043 0220 	orr.w	r2, r3, #32
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e05c      	b.n	8001fe8 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f2e:	f7ff fea3 	bl	8001c78 <HAL_GetTick>
 8001f32:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f34:	e01a      	b.n	8001f6c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d016      	beq.n	8001f6c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_ADC_PollForConversion+0x6c>
 8001f44:	f7ff fe98 	bl	8001c78 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d20b      	bcs.n	8001f6c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f043 0204 	orr.w	r2, r3, #4
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e03d      	b.n	8001fe8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d1dd      	bne.n	8001f36 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f06f 0212 	mvn.w	r2, #18
 8001f82:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d123      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d11f      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d111      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x1c>
 8002024:	2302      	movs	r3, #2
 8002026:	e113      	b.n	8002250 <HAL_ADC_ConfigChannel+0x244>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b09      	cmp	r3, #9
 8002036:	d925      	bls.n	8002084 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68d9      	ldr	r1, [r3, #12]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	3b1e      	subs	r3, #30
 800204e:	2207      	movs	r2, #7
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43da      	mvns	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	400a      	ands	r2, r1
 800205c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68d9      	ldr	r1, [r3, #12]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	4618      	mov	r0, r3
 8002070:	4603      	mov	r3, r0
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4403      	add	r3, r0
 8002076:	3b1e      	subs	r3, #30
 8002078:	409a      	lsls	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	e022      	b.n	80020ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6919      	ldr	r1, [r3, #16]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	2207      	movs	r2, #7
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	400a      	ands	r2, r1
 80020a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6919      	ldr	r1, [r3, #16]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4403      	add	r3, r0
 80020c0:	409a      	lsls	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d824      	bhi.n	800211c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	3b05      	subs	r3, #5
 80020e4:	221f      	movs	r2, #31
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	400a      	ands	r2, r1
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	3b05      	subs	r3, #5
 800210e:	fa00 f203 	lsl.w	r2, r0, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	635a      	str	r2, [r3, #52]	; 0x34
 800211a:	e04c      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b0c      	cmp	r3, #12
 8002122:	d824      	bhi.n	800216e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b23      	subs	r3, #35	; 0x23
 8002136:	221f      	movs	r2, #31
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43da      	mvns	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	400a      	ands	r2, r1
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	3b23      	subs	r3, #35	; 0x23
 8002160:	fa00 f203 	lsl.w	r2, r0, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
 800216c:	e023      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	3b41      	subs	r3, #65	; 0x41
 8002180:	221f      	movs	r2, #31
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	400a      	ands	r2, r1
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3b41      	subs	r3, #65	; 0x41
 80021aa:	fa00 f203 	lsl.w	r2, r0, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_ADC_ConfigChannel+0x250>)
 80021b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a28      	ldr	r2, [pc, #160]	; (8002260 <HAL_ADC_ConfigChannel+0x254>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10f      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x1d8>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b12      	cmp	r3, #18
 80021ca:	d10b      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <HAL_ADC_ConfigChannel+0x254>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d12b      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x23a>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <HAL_ADC_ConfigChannel+0x258>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <HAL_ADC_ConfigChannel+0x1f4>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b11      	cmp	r3, #17
 80021fe:	d122      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_ADC_ConfigChannel+0x258>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d111      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_ADC_ConfigChannel+0x25c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_ADC_ConfigChannel+0x260>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	0c9a      	lsrs	r2, r3, #18
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002238:	e002      	b.n	8002240 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3b01      	subs	r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40012300 	.word	0x40012300
 8002260:	40012000 	.word	0x40012000
 8002264:	10000012 	.word	0x10000012
 8002268:	20000008 	.word	0x20000008
 800226c:	431bde83 	.word	0x431bde83

08002270 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002278:	4b79      	ldr	r3, [pc, #484]	; (8002460 <ADC_Init+0x1f0>)
 800227a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	021a      	lsls	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6899      	ldr	r1, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	4a58      	ldr	r2, [pc, #352]	; (8002464 <ADC_Init+0x1f4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d022      	beq.n	800234e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002316:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6899      	ldr	r1, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6899      	ldr	r1, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	e00f      	b.n	800236e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800235c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800236c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0202 	bic.w	r2, r2, #2
 800237c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6899      	ldr	r1, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7e1b      	ldrb	r3, [r3, #24]
 8002388:	005a      	lsls	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	3b01      	subs	r3, #1
 80023c8:	035a      	lsls	r2, r3, #13
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	e007      	b.n	80023e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	3b01      	subs	r3, #1
 8002400:	051a      	lsls	r2, r3, #20
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6899      	ldr	r1, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002426:	025a      	lsls	r2, r3, #9
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6899      	ldr	r1, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	029a      	lsls	r2, r3, #10
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	609a      	str	r2, [r3, #8]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	40012300 	.word	0x40012300
 8002464:	0f000001 	.word	0x0f000001

08002468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
         );
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ff4c 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ea:	f7ff ff61 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 80025ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	6978      	ldr	r0, [r7, #20]
 80025f6:	f7ff ffb1 	bl	800255c <NVIC_EncodePriority>
 80025fa:	4602      	mov	r2, r0
 80025fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff80 	bl	8002508 <__NVIC_SetPriority>
}
 8002608:	bf00      	nop
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff54 	bl	80024cc <__NVIC_EnableIRQ>
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e014      	b.n	8002668 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	791b      	ldrb	r3, [r3, #4]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff f918 	bl	8001884 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	795b      	ldrb	r3, [r3, #5]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_DAC_Start+0x1e>
 800268a:	2302      	movs	r3, #2
 800268c:	e050      	b.n	8002730 <HAL_DAC_Start+0xc0>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	409a      	lsls	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11a      	bne.n	80026ea <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ca:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d127      	bne.n	8002722 <HAL_DAC_Start+0xb2>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b38      	cmp	r3, #56	; 0x38
 80026d6:	d124      	bne.n	8002722 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	e01b      	b.n	8002722 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f4:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8002700:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002708:	d10b      	bne.n	8002722 <HAL_DAC_Start+0xb2>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002710:	d107      	bne.n	8002722 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0202 	orr.w	r2, r2, #2
 8002720:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002752:	d118      	bne.n	8002786 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2204      	movs	r2, #4
 8002758:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800277e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f825 	bl	80027d0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002794:	d118      	bne.n	80027c8 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2204      	movs	r2, #4
 800279a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f043 0202 	orr.w	r2, r3, #2
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80027c0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f886 	bl	80028d4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	795b      	ldrb	r3, [r3, #5]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_DAC_ConfigChannel+0x20>
 8002800:	2302      	movs	r3, #2
 8002802:	e036      	b.n	8002872 <HAL_DAC_ConfigChannel+0x8e>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2202      	movs	r2, #2
 800280e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002818:	f640 72fe 	movw	r2, #4094	; 0xffe
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4013      	ands	r3, r2
 8002828:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	22c0      	movs	r2, #192	; 0xc0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	400a      	ands	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef* hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{  
 800287e:	b480      	push	{r7}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
  uint32_t data = 0U, tmp = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d105      	bne.n	80028a6 <HAL_DACEx_DualSetValue+0x28>
  {
    data = ((uint32_t)Data2 << 8U) | Data1; 
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e004      	b.n	80028b0 <HAL_DACEx_DualSetValue+0x32>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
  }
  
  tmp = (uint32_t)hdac->Instance;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	3320      	adds	r3, #32
 80028be:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e165      	b.n	8002bd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	429a      	cmp	r2, r3
 800291e:	f040 8154 	bne.w	8002bca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d00b      	beq.n	8002942 <HAL_GPIO_Init+0x5a>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002936:	2b11      	cmp	r3, #17
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b12      	cmp	r3, #18
 8002940:	d130      	bne.n	80029a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	2203      	movs	r2, #3
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 0201 	and.w	r2, r3, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0xfc>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b12      	cmp	r3, #18
 80029e2:	d123      	bne.n	8002a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	08da      	lsrs	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3208      	adds	r2, #8
 80029ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	220f      	movs	r2, #15
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	08da      	lsrs	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3208      	adds	r2, #8
 8002a26:	69b9      	ldr	r1, [r7, #24]
 8002a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	2203      	movs	r2, #3
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0203 	and.w	r2, r3, #3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80ae 	beq.w	8002bca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b5c      	ldr	r3, [pc, #368]	; (8002be4 <HAL_GPIO_Init+0x2fc>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a5b      	ldr	r2, [pc, #364]	; (8002be4 <HAL_GPIO_Init+0x2fc>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_GPIO_Init+0x2fc>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a8a:	4a57      	ldr	r2, [pc, #348]	; (8002be8 <HAL_GPIO_Init+0x300>)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4e      	ldr	r2, [pc, #312]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d025      	beq.n	8002b02 <HAL_GPIO_Init+0x21a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4d      	ldr	r2, [pc, #308]	; (8002bf0 <HAL_GPIO_Init+0x308>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01f      	beq.n	8002afe <HAL_GPIO_Init+0x216>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4c      	ldr	r2, [pc, #304]	; (8002bf4 <HAL_GPIO_Init+0x30c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0x212>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4b      	ldr	r2, [pc, #300]	; (8002bf8 <HAL_GPIO_Init+0x310>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x20e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4a      	ldr	r2, [pc, #296]	; (8002bfc <HAL_GPIO_Init+0x314>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00d      	beq.n	8002af2 <HAL_GPIO_Init+0x20a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a49      	ldr	r2, [pc, #292]	; (8002c00 <HAL_GPIO_Init+0x318>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x206>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a48      	ldr	r2, [pc, #288]	; (8002c04 <HAL_GPIO_Init+0x31c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_GPIO_Init+0x202>
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	e00c      	b.n	8002b04 <HAL_GPIO_Init+0x21c>
 8002aea:	2307      	movs	r3, #7
 8002aec:	e00a      	b.n	8002b04 <HAL_GPIO_Init+0x21c>
 8002aee:	2305      	movs	r3, #5
 8002af0:	e008      	b.n	8002b04 <HAL_GPIO_Init+0x21c>
 8002af2:	2304      	movs	r3, #4
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x21c>
 8002af6:	2303      	movs	r3, #3
 8002af8:	e004      	b.n	8002b04 <HAL_GPIO_Init+0x21c>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_Init+0x21c>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_GPIO_Init+0x21c>
 8002b02:	2300      	movs	r3, #0
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f002 0203 	and.w	r2, r2, #3
 8002b0a:	0092      	lsls	r2, r2, #2
 8002b0c:	4093      	lsls	r3, r2
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b14:	4934      	ldr	r1, [pc, #208]	; (8002be8 <HAL_GPIO_Init+0x300>)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b22:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b46:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b4c:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b70:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9a:	4a1b      	ldr	r2, [pc, #108]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc4:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <HAL_GPIO_Init+0x320>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	f67f ae96 	bls.w	8002904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3724      	adds	r7, #36	; 0x24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40021400 	.word	0x40021400
 8002c04:	40021800 	.word	0x40021800
 8002c08:	40013c00 	.word	0x40013c00

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c28:	e003      	b.n	8002c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	041a      	lsls	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0cc      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c54:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d90c      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b65      	ldr	r3, [pc, #404]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0b8      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d020      	beq.n	8002cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c94:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a58      	ldr	r2, [pc, #352]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cac:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	494d      	ldr	r1, [pc, #308]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d044      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d119      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e07f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e06f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e067      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f023 0203 	bic.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4934      	ldr	r1, [pc, #208]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d30:	f7fe ffa2 	bl	8001c78 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f7fe ff9e 	bl	8001c78 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e04f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 020c 	and.w	r2, r3, #12
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1eb      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d20c      	bcs.n	8002d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e032      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4916      	ldr	r1, [pc, #88]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	490e      	ldr	r1, [pc, #56]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dc6:	f000 f887 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8002dca:	4601      	mov	r1, r0
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	5cd3      	ldrb	r3, [r2, r3]
 8002dda:	fa21 f303 	lsr.w	r3, r1, r3
 8002dde:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1c8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fe14 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023c00 	.word	0x40023c00
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08004e88 	.word	0x08004e88
 8002e04:	20000008 	.word	0x20000008
 8002e08:	2000000c 	.word	0x2000000c

08002e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000008 	.word	0x20000008

08002e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e28:	f7ff fff0 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e2c:	4601      	mov	r1, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0a9b      	lsrs	r3, r3, #10
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4a03      	ldr	r2, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	08004e98 	.word	0x08004e98

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e50:	f7ff ffdc 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e54:	4601      	mov	r1, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0b5b      	lsrs	r3, r3, #13
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	08004e98 	.word	0x08004e98

08002e74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	220f      	movs	r2, #15
 8002e82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <HAL_RCC_GetClockConfig+0x60>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 020f 	and.w	r2, r3, #15
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40023c00 	.word	0x40023c00

08002ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef2:	4bc6      	ldr	r3, [pc, #792]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	f200 817e 	bhi.w	80031fc <HAL_RCC_GetSysClockFreq+0x324>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <HAL_RCC_GetSysClockFreq+0x30>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	080031fd 	.word	0x080031fd
 8002f10:	080031fd 	.word	0x080031fd
 8002f14:	080031fd 	.word	0x080031fd
 8002f18:	08002f43 	.word	0x08002f43
 8002f1c:	080031fd 	.word	0x080031fd
 8002f20:	080031fd 	.word	0x080031fd
 8002f24:	080031fd 	.word	0x080031fd
 8002f28:	08002f49 	.word	0x08002f49
 8002f2c:	080031fd 	.word	0x080031fd
 8002f30:	080031fd 	.word	0x080031fd
 8002f34:	080031fd 	.word	0x080031fd
 8002f38:	080030a5 	.word	0x080030a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f3c:	4bb4      	ldr	r3, [pc, #720]	; (8003210 <HAL_RCC_GetSysClockFreq+0x338>)
 8002f3e:	613b      	str	r3, [r7, #16]
       break;
 8002f40:	e15f      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f42:	4bb4      	ldr	r3, [pc, #720]	; (8003214 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002f44:	613b      	str	r3, [r7, #16]
      break;
 8002f46:	e15c      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f48:	4bb0      	ldr	r3, [pc, #704]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f50:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f52:	4bae      	ldr	r3, [pc, #696]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d04a      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5e:	4bab      	ldr	r3, [pc, #684]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	f04f 0400 	mov.w	r4, #0
 8002f68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	ea03 0501 	and.w	r5, r3, r1
 8002f74:	ea04 0602 	and.w	r6, r4, r2
 8002f78:	4629      	mov	r1, r5
 8002f7a:	4632      	mov	r2, r6
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	f04f 0400 	mov.w	r4, #0
 8002f84:	0154      	lsls	r4, r2, #5
 8002f86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f8a:	014b      	lsls	r3, r1, #5
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4622      	mov	r2, r4
 8002f90:	1b49      	subs	r1, r1, r5
 8002f92:	eb62 0206 	sbc.w	r2, r2, r6
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	f04f 0400 	mov.w	r4, #0
 8002f9e:	0194      	lsls	r4, r2, #6
 8002fa0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fa4:	018b      	lsls	r3, r1, #6
 8002fa6:	1a5b      	subs	r3, r3, r1
 8002fa8:	eb64 0402 	sbc.w	r4, r4, r2
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	00e2      	lsls	r2, r4, #3
 8002fb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fba:	00d9      	lsls	r1, r3, #3
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4614      	mov	r4, r2
 8002fc0:	195b      	adds	r3, r3, r5
 8002fc2:	eb44 0406 	adc.w	r4, r4, r6
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	0262      	lsls	r2, r4, #9
 8002fd0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002fd4:	0259      	lsls	r1, r3, #9
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4614      	mov	r4, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	4621      	mov	r1, r4
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f04f 0400 	mov.w	r4, #0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4623      	mov	r3, r4
 8002fe8:	f7fd fd60 	bl	8000aac <__aeabi_uldivmod>
 8002fec:	4603      	mov	r3, r0
 8002fee:	460c      	mov	r4, r1
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e049      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff4:	4b85      	ldr	r3, [pc, #532]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	f04f 0400 	mov.w	r4, #0
 8002ffe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	ea03 0501 	and.w	r5, r3, r1
 800300a:	ea04 0602 	and.w	r6, r4, r2
 800300e:	4629      	mov	r1, r5
 8003010:	4632      	mov	r2, r6
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	f04f 0400 	mov.w	r4, #0
 800301a:	0154      	lsls	r4, r2, #5
 800301c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003020:	014b      	lsls	r3, r1, #5
 8003022:	4619      	mov	r1, r3
 8003024:	4622      	mov	r2, r4
 8003026:	1b49      	subs	r1, r1, r5
 8003028:	eb62 0206 	sbc.w	r2, r2, r6
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	f04f 0400 	mov.w	r4, #0
 8003034:	0194      	lsls	r4, r2, #6
 8003036:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800303a:	018b      	lsls	r3, r1, #6
 800303c:	1a5b      	subs	r3, r3, r1
 800303e:	eb64 0402 	sbc.w	r4, r4, r2
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	00e2      	lsls	r2, r4, #3
 800304c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003050:	00d9      	lsls	r1, r3, #3
 8003052:	460b      	mov	r3, r1
 8003054:	4614      	mov	r4, r2
 8003056:	195b      	adds	r3, r3, r5
 8003058:	eb44 0406 	adc.w	r4, r4, r6
 800305c:	f04f 0100 	mov.w	r1, #0
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	02a2      	lsls	r2, r4, #10
 8003066:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800306a:	0299      	lsls	r1, r3, #10
 800306c:	460b      	mov	r3, r1
 800306e:	4614      	mov	r4, r2
 8003070:	4618      	mov	r0, r3
 8003072:	4621      	mov	r1, r4
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f04f 0400 	mov.w	r4, #0
 800307a:	461a      	mov	r2, r3
 800307c:	4623      	mov	r3, r4
 800307e:	f7fd fd15 	bl	8000aac <__aeabi_uldivmod>
 8003082:	4603      	mov	r3, r0
 8003084:	460c      	mov	r4, r1
 8003086:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003088:	4b60      	ldr	r3, [pc, #384]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	3301      	adds	r3, #1
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	613b      	str	r3, [r7, #16]
      break;
 80030a2:	e0ae      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a4:	4b59      	ldr	r3, [pc, #356]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ac:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ae:	4b57      	ldr	r3, [pc, #348]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d04a      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ba:	4b54      	ldr	r3, [pc, #336]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	f04f 0400 	mov.w	r4, #0
 80030c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	ea03 0501 	and.w	r5, r3, r1
 80030d0:	ea04 0602 	and.w	r6, r4, r2
 80030d4:	4629      	mov	r1, r5
 80030d6:	4632      	mov	r2, r6
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f04f 0400 	mov.w	r4, #0
 80030e0:	0154      	lsls	r4, r2, #5
 80030e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030e6:	014b      	lsls	r3, r1, #5
 80030e8:	4619      	mov	r1, r3
 80030ea:	4622      	mov	r2, r4
 80030ec:	1b49      	subs	r1, r1, r5
 80030ee:	eb62 0206 	sbc.w	r2, r2, r6
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	f04f 0400 	mov.w	r4, #0
 80030fa:	0194      	lsls	r4, r2, #6
 80030fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003100:	018b      	lsls	r3, r1, #6
 8003102:	1a5b      	subs	r3, r3, r1
 8003104:	eb64 0402 	sbc.w	r4, r4, r2
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	00e2      	lsls	r2, r4, #3
 8003112:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003116:	00d9      	lsls	r1, r3, #3
 8003118:	460b      	mov	r3, r1
 800311a:	4614      	mov	r4, r2
 800311c:	195b      	adds	r3, r3, r5
 800311e:	eb44 0406 	adc.w	r4, r4, r6
 8003122:	f04f 0100 	mov.w	r1, #0
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	0262      	lsls	r2, r4, #9
 800312c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003130:	0259      	lsls	r1, r3, #9
 8003132:	460b      	mov	r3, r1
 8003134:	4614      	mov	r4, r2
 8003136:	4618      	mov	r0, r3
 8003138:	4621      	mov	r1, r4
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f04f 0400 	mov.w	r4, #0
 8003140:	461a      	mov	r2, r3
 8003142:	4623      	mov	r3, r4
 8003144:	f7fd fcb2 	bl	8000aac <__aeabi_uldivmod>
 8003148:	4603      	mov	r3, r0
 800314a:	460c      	mov	r4, r1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e049      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	f04f 0400 	mov.w	r4, #0
 800315a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	ea03 0501 	and.w	r5, r3, r1
 8003166:	ea04 0602 	and.w	r6, r4, r2
 800316a:	4629      	mov	r1, r5
 800316c:	4632      	mov	r2, r6
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	f04f 0400 	mov.w	r4, #0
 8003176:	0154      	lsls	r4, r2, #5
 8003178:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800317c:	014b      	lsls	r3, r1, #5
 800317e:	4619      	mov	r1, r3
 8003180:	4622      	mov	r2, r4
 8003182:	1b49      	subs	r1, r1, r5
 8003184:	eb62 0206 	sbc.w	r2, r2, r6
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	f04f 0400 	mov.w	r4, #0
 8003190:	0194      	lsls	r4, r2, #6
 8003192:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003196:	018b      	lsls	r3, r1, #6
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	eb64 0402 	sbc.w	r4, r4, r2
 800319e:	f04f 0100 	mov.w	r1, #0
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	00e2      	lsls	r2, r4, #3
 80031a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031ac:	00d9      	lsls	r1, r3, #3
 80031ae:	460b      	mov	r3, r1
 80031b0:	4614      	mov	r4, r2
 80031b2:	195b      	adds	r3, r3, r5
 80031b4:	eb44 0406 	adc.w	r4, r4, r6
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	02a2      	lsls	r2, r4, #10
 80031c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031c6:	0299      	lsls	r1, r3, #10
 80031c8:	460b      	mov	r3, r1
 80031ca:	4614      	mov	r4, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	4621      	mov	r1, r4
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f04f 0400 	mov.w	r4, #0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4623      	mov	r3, r4
 80031da:	f7fd fc67 	bl	8000aac <__aeabi_uldivmod>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_GetSysClockFreq+0x334>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	0f1b      	lsrs	r3, r3, #28
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	613b      	str	r3, [r7, #16]
      break;
 80031fa:	e002      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <HAL_RCC_GetSysClockFreq+0x338>)
 80031fe:	613b      	str	r3, [r7, #16]
      break;
 8003200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003202:	693b      	ldr	r3, [r7, #16]
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	00f42400 	.word	0x00f42400
 8003214:	007a1200 	.word	0x007a1200

08003218 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8083 	beq.w	8003338 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003232:	4b95      	ldr	r3, [pc, #596]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b04      	cmp	r3, #4
 800323c:	d019      	beq.n	8003272 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800323e:	4b92      	ldr	r3, [pc, #584]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003246:	2b08      	cmp	r3, #8
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800324a:	4b8f      	ldr	r3, [pc, #572]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003256:	d00c      	beq.n	8003272 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003258:	4b8b      	ldr	r3, [pc, #556]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d112      	bne.n	800328a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003264:	4b88      	ldr	r3, [pc, #544]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003270:	d10b      	bne.n	800328a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003272:	4b85      	ldr	r3, [pc, #532]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d05b      	beq.n	8003336 <HAL_RCC_OscConfig+0x11e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d157      	bne.n	8003336 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e216      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003292:	d106      	bne.n	80032a2 <HAL_RCC_OscConfig+0x8a>
 8003294:	4b7c      	ldr	r3, [pc, #496]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a7b      	ldr	r2, [pc, #492]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e01d      	b.n	80032de <HAL_RCC_OscConfig+0xc6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032aa:	d10c      	bne.n	80032c6 <HAL_RCC_OscConfig+0xae>
 80032ac:	4b76      	ldr	r3, [pc, #472]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a75      	ldr	r2, [pc, #468]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80032b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b73      	ldr	r3, [pc, #460]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a72      	ldr	r2, [pc, #456]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e00b      	b.n	80032de <HAL_RCC_OscConfig+0xc6>
 80032c6:	4b70      	ldr	r3, [pc, #448]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6f      	ldr	r2, [pc, #444]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80032cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4b6d      	ldr	r3, [pc, #436]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a6c      	ldr	r2, [pc, #432]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80032d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d013      	beq.n	800330e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fe fcc7 	bl	8001c78 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ee:	f7fe fcc3 	bl	8001c78 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b64      	cmp	r3, #100	; 0x64
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e1db      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003300:	4b61      	ldr	r3, [pc, #388]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0xd6>
 800330c:	e014      	b.n	8003338 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe fcb3 	bl	8001c78 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003316:	f7fe fcaf 	bl	8001c78 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b64      	cmp	r3, #100	; 0x64
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e1c7      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003328:	4b57      	ldr	r3, [pc, #348]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0xfe>
 8003334:	e000      	b.n	8003338 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003336:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d06f      	beq.n	8003424 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003344:	4b50      	ldr	r3, [pc, #320]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b00      	cmp	r3, #0
 800334e:	d017      	beq.n	8003380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003350:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003358:	2b08      	cmp	r3, #8
 800335a:	d105      	bne.n	8003368 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800335c:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00b      	beq.n	8003380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003368:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d11c      	bne.n	80033ae <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003374:	4b44      	ldr	r3, [pc, #272]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d116      	bne.n	80033ae <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003380:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_OscConfig+0x180>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e18f      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4938      	ldr	r1, [pc, #224]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ac:	e03a      	b.n	8003424 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d020      	beq.n	80033f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b6:	4b35      	ldr	r3, [pc, #212]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fc5c 	bl	8001c78 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe fc58 	bl	8001c78 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e170      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d6:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4925      	ldr	r1, [pc, #148]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
 80033f6:	e015      	b.n	8003424 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f8:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_RCC_OscConfig+0x274>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fe fc3b 	bl	8001c78 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003406:	f7fe fc37 	bl	8001c78 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e14f      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d037      	beq.n	80034a0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d016      	beq.n	8003466 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_RCC_OscConfig+0x278>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe fc1b 	bl	8001c78 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003446:	f7fe fc17 	bl	8001c78 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e12f      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_OscConfig+0x270>)
 800345a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x22e>
 8003464:	e01c      	b.n	80034a0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_RCC_OscConfig+0x278>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe fc04 	bl	8001c78 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003472:	e00f      	b.n	8003494 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003474:	f7fe fc00 	bl	8001c78 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d908      	bls.n	8003494 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e118      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	42470000 	.word	0x42470000
 8003490:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003494:	4b8a      	ldr	r3, [pc, #552]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 8003496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e9      	bne.n	8003474 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8097 	beq.w	80035dc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b2:	4b83      	ldr	r3, [pc, #524]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b7f      	ldr	r3, [pc, #508]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	4a7e      	ldr	r2, [pc, #504]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6413      	str	r3, [r2, #64]	; 0x40
 80034ce:	4b7c      	ldr	r3, [pc, #496]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034de:	4b79      	ldr	r3, [pc, #484]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ea:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a75      	ldr	r2, [pc, #468]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f6:	f7fe fbbf 	bl	8001c78 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7fe fbbb 	bl	8001c78 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0d3      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <HAL_RCC_OscConfig+0x4ac>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x31a>
 8003524:	4b66      	ldr	r3, [pc, #408]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a65      	ldr	r2, [pc, #404]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
 8003530:	e01c      	b.n	800356c <HAL_RCC_OscConfig+0x354>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b05      	cmp	r3, #5
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x33c>
 800353a:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	4a60      	ldr	r2, [pc, #384]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	6713      	str	r3, [r2, #112]	; 0x70
 8003546:	4b5e      	ldr	r3, [pc, #376]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	4a5d      	ldr	r2, [pc, #372]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	; 0x70
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0x354>
 8003554:	4b5a      	ldr	r3, [pc, #360]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a59      	ldr	r2, [pc, #356]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
 8003560:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	4a56      	ldr	r2, [pc, #344]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 8003566:	f023 0304 	bic.w	r3, r3, #4
 800356a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d015      	beq.n	80035a0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fe fb80 	bl	8001c78 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800357c:	f7fe fb7c 	bl	8001c78 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e092      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003592:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0ee      	beq.n	800357c <HAL_RCC_OscConfig+0x364>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fb6a 	bl	8001c78 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a6:	e00a      	b.n	80035be <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fe fb66 	bl	8001c78 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e07c      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ee      	bne.n	80035a8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d105      	bne.n	80035dc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d0:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 80035d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d068      	beq.n	80036b6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035e4:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d060      	beq.n	80036b2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d145      	bne.n	8003684 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f8:	4b33      	ldr	r3, [pc, #204]	; (80036c8 <HAL_RCC_OscConfig+0x4b0>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe fb3b 	bl	8001c78 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003606:	f7fe fb37 	bl	8001c78 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e04f      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003618:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	019b      	lsls	r3, r3, #6
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	085b      	lsrs	r3, r3, #1
 800363c:	3b01      	subs	r3, #1
 800363e:	041b      	lsls	r3, r3, #16
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	061b      	lsls	r3, r3, #24
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	071b      	lsls	r3, r3, #28
 8003650:	491b      	ldr	r1, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_RCC_OscConfig+0x4b0>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe fb0c 	bl	8001c78 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe fb08 	bl	8001c78 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e020      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003676:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x44c>
 8003682:	e018      	b.n	80036b6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_RCC_OscConfig+0x4b0>)
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fe faf5 	bl	8001c78 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe faf1 	bl	8001c78 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e009      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_OscConfig+0x4a8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_OscConfig+0x47a>
 80036b0:	e001      	b.n	80036b6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40007000 	.word	0x40007000
 80036c8:	42470060 	.word	0x42470060

080036cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e01d      	b.n	800371a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f815 	bl	8003722 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f000 f968 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b06      	cmp	r3, #6
 800375e:	d007      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d122      	bne.n	80037da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d11b      	bne.n	80037da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f06f 0202 	mvn.w	r2, #2
 80037aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8ee 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
 80037c6:	e005      	b.n	80037d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8e0 	bl	800398e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8f1 	bl	80039b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d122      	bne.n	800382e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d11b      	bne.n	800382e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0204 	mvn.w	r2, #4
 80037fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8c4 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
 800381a:	e005      	b.n	8003828 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8b6 	bl	800398e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8c7 	bl	80039b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d122      	bne.n	8003882 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b08      	cmp	r3, #8
 8003848:	d11b      	bne.n	8003882 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f06f 0208 	mvn.w	r2, #8
 8003852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2204      	movs	r2, #4
 8003858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f89a 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
 800386e:	e005      	b.n	800387c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f88c 	bl	800398e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f89d 	bl	80039b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b10      	cmp	r3, #16
 800388e:	d122      	bne.n	80038d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b10      	cmp	r3, #16
 800389c:	d11b      	bne.n	80038d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f06f 0210 	mvn.w	r2, #16
 80038a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2208      	movs	r2, #8
 80038ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f870 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
 80038c2:	e005      	b.n	80038d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f862 	bl	800398e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f873 	bl	80039b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10e      	bne.n	8003902 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f06f 0201 	mvn.w	r2, #1
 80038fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7fd ff0b 	bl	8001718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d10e      	bne.n	800392e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d107      	bne.n	800392e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f903 	bl	8003b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d10e      	bne.n	800395a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d107      	bne.n	800395a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f838 	bl	80039ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b20      	cmp	r3, #32
 8003966:	d10e      	bne.n	8003986 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	d107      	bne.n	8003986 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0220 	mvn.w	r2, #32
 800397e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f8cd 	bl	8003b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a40      	ldr	r2, [pc, #256]	; (8003af4 <TIM_Base_SetConfig+0x114>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fe:	d00f      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a3d      	ldr	r2, [pc, #244]	; (8003af8 <TIM_Base_SetConfig+0x118>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a3c      	ldr	r2, [pc, #240]	; (8003afc <TIM_Base_SetConfig+0x11c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a3b      	ldr	r2, [pc, #236]	; (8003b00 <TIM_Base_SetConfig+0x120>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3a      	ldr	r2, [pc, #232]	; (8003b04 <TIM_Base_SetConfig+0x124>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d108      	bne.n	8003a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <TIM_Base_SetConfig+0x114>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d027      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a2c      	ldr	r2, [pc, #176]	; (8003af8 <TIM_Base_SetConfig+0x118>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d023      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2b      	ldr	r2, [pc, #172]	; (8003afc <TIM_Base_SetConfig+0x11c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01f      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a2a      	ldr	r2, [pc, #168]	; (8003b00 <TIM_Base_SetConfig+0x120>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <TIM_Base_SetConfig+0x124>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d017      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a28      	ldr	r2, [pc, #160]	; (8003b08 <TIM_Base_SetConfig+0x128>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a27      	ldr	r2, [pc, #156]	; (8003b0c <TIM_Base_SetConfig+0x12c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00f      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a26      	ldr	r2, [pc, #152]	; (8003b10 <TIM_Base_SetConfig+0x130>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <TIM_Base_SetConfig+0x134>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <TIM_Base_SetConfig+0x138>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a23      	ldr	r2, [pc, #140]	; (8003b1c <TIM_Base_SetConfig+0x13c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <TIM_Base_SetConfig+0x114>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_Base_SetConfig+0xf8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <TIM_Base_SetConfig+0x124>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	615a      	str	r2, [r3, #20]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40010400 	.word	0x40010400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800
 8003b14:	40001800 	.word	0x40001800
 8003b18:	40001c00 	.word	0x40001c00
 8003b1c:	40002000 	.word	0x40002000

08003b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e03f      	b.n	8003bda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fed4 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	; 0x24
 8003b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f9b1 	bl	8003ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b088      	sub	sp, #32
 8003be6:	af02      	add	r7, sp, #8
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	f040 8083 	bne.w	8003d0a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_UART_Transmit+0x2e>
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e07b      	b.n	8003d0c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Transmit+0x40>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e074      	b.n	8003d0c <HAL_UART_Transmit+0x12a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2221      	movs	r2, #33	; 0x21
 8003c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c38:	f7fe f81e 	bl	8001c78 <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003c52:	e042      	b.n	8003cda <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6a:	d122      	bne.n	8003cb2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	2180      	movs	r1, #128	; 0x80
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f8f2 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e042      	b.n	8003d0c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c98:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	e017      	b.n	8003cda <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3301      	adds	r3, #1
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	e013      	b.n	8003cda <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2180      	movs	r1, #128	; 0x80
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f8cf 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e01f      	b.n	8003d0c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	60ba      	str	r2, [r7, #8]
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1b7      	bne.n	8003c54 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2200      	movs	r2, #0
 8003cec:	2140      	movs	r1, #64	; 0x40
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f8b6 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e006      	b.n	8003d0c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	f040 8090 	bne.w	8003e56 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <HAL_UART_Receive+0x2e>
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e088      	b.n	8003e58 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_UART_Receive+0x40>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e081      	b.n	8003e58 <HAL_UART_Receive+0x144>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2222      	movs	r2, #34	; 0x22
 8003d66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d6a:	f7fd ff85 	bl	8001c78 <HAL_GetTick>
 8003d6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	88fa      	ldrh	r2, [r7, #6]
 8003d74:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	88fa      	ldrh	r2, [r7, #6]
 8003d7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d84:	e05c      	b.n	8003e40 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d12b      	bne.n	8003df6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2120      	movs	r1, #32
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f859 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e04f      	b.n	8003e58 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10c      	bne.n	8003dde <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	3302      	adds	r3, #2
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	e030      	b.n	8003e40 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	e024      	b.n	8003e40 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2120      	movs	r1, #32
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f82d 	bl	8003e60 <UART_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e023      	b.n	8003e58 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d108      	bne.n	8003e2a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6859      	ldr	r1, [r3, #4]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	60ba      	str	r2, [r7, #8]
 8003e24:	b2ca      	uxtb	r2, r1
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e00a      	b.n	8003e40 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	1c59      	adds	r1, r3, #1
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d19d      	bne.n	8003d86 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e70:	e02c      	b.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d028      	beq.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e80:	f7fd fefa 	bl	8001c78 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d21d      	bcs.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e00f      	b.n	8003eec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d0c3      	beq.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef8:	b085      	sub	sp, #20
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f36:	f023 030c 	bic.w	r3, r3, #12
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	68f9      	ldr	r1, [r7, #12]
 8003f40:	430b      	orrs	r3, r1
 8003f42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f62:	f040 818b 	bne.w	800427c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4ac1      	ldr	r2, [pc, #772]	; (8004270 <UART_SetConfig+0x37c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d005      	beq.n	8003f7c <UART_SetConfig+0x88>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4abf      	ldr	r2, [pc, #764]	; (8004274 <UART_SetConfig+0x380>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	f040 80bd 	bne.w	80040f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f7c:	f7fe ff66 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8003f80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	461d      	mov	r5, r3
 8003f86:	f04f 0600 	mov.w	r6, #0
 8003f8a:	46a8      	mov	r8, r5
 8003f8c:	46b1      	mov	r9, r6
 8003f8e:	eb18 0308 	adds.w	r3, r8, r8
 8003f92:	eb49 0409 	adc.w	r4, r9, r9
 8003f96:	4698      	mov	r8, r3
 8003f98:	46a1      	mov	r9, r4
 8003f9a:	eb18 0805 	adds.w	r8, r8, r5
 8003f9e:	eb49 0906 	adc.w	r9, r9, r6
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fb6:	4688      	mov	r8, r1
 8003fb8:	4691      	mov	r9, r2
 8003fba:	eb18 0005 	adds.w	r0, r8, r5
 8003fbe:	eb49 0106 	adc.w	r1, r9, r6
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	f04f 0600 	mov.w	r6, #0
 8003fcc:	196b      	adds	r3, r5, r5
 8003fce:	eb46 0406 	adc.w	r4, r6, r6
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	f7fc fd69 	bl	8000aac <__aeabi_uldivmod>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	460c      	mov	r4, r1
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4ba5      	ldr	r3, [pc, #660]	; (8004278 <UART_SetConfig+0x384>)
 8003fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	461d      	mov	r5, r3
 8003ff0:	f04f 0600 	mov.w	r6, #0
 8003ff4:	46a9      	mov	r9, r5
 8003ff6:	46b2      	mov	sl, r6
 8003ff8:	eb19 0309 	adds.w	r3, r9, r9
 8003ffc:	eb4a 040a 	adc.w	r4, sl, sl
 8004000:	4699      	mov	r9, r3
 8004002:	46a2      	mov	sl, r4
 8004004:	eb19 0905 	adds.w	r9, r9, r5
 8004008:	eb4a 0a06 	adc.w	sl, sl, r6
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004018:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800401c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004020:	4689      	mov	r9, r1
 8004022:	4692      	mov	sl, r2
 8004024:	eb19 0005 	adds.w	r0, r9, r5
 8004028:	eb4a 0106 	adc.w	r1, sl, r6
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	461d      	mov	r5, r3
 8004032:	f04f 0600 	mov.w	r6, #0
 8004036:	196b      	adds	r3, r5, r5
 8004038:	eb46 0406 	adc.w	r4, r6, r6
 800403c:	461a      	mov	r2, r3
 800403e:	4623      	mov	r3, r4
 8004040:	f7fc fd34 	bl	8000aac <__aeabi_uldivmod>
 8004044:	4603      	mov	r3, r0
 8004046:	460c      	mov	r4, r1
 8004048:	461a      	mov	r2, r3
 800404a:	4b8b      	ldr	r3, [pc, #556]	; (8004278 <UART_SetConfig+0x384>)
 800404c:	fba3 1302 	umull	r1, r3, r3, r2
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	2164      	movs	r1, #100	; 0x64
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	3332      	adds	r3, #50	; 0x32
 800405e:	4a86      	ldr	r2, [pc, #536]	; (8004278 <UART_SetConfig+0x384>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800406c:	4498      	add	r8, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	461d      	mov	r5, r3
 8004072:	f04f 0600 	mov.w	r6, #0
 8004076:	46a9      	mov	r9, r5
 8004078:	46b2      	mov	sl, r6
 800407a:	eb19 0309 	adds.w	r3, r9, r9
 800407e:	eb4a 040a 	adc.w	r4, sl, sl
 8004082:	4699      	mov	r9, r3
 8004084:	46a2      	mov	sl, r4
 8004086:	eb19 0905 	adds.w	r9, r9, r5
 800408a:	eb4a 0a06 	adc.w	sl, sl, r6
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800409a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800409e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040a2:	4689      	mov	r9, r1
 80040a4:	4692      	mov	sl, r2
 80040a6:	eb19 0005 	adds.w	r0, r9, r5
 80040aa:	eb4a 0106 	adc.w	r1, sl, r6
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	461d      	mov	r5, r3
 80040b4:	f04f 0600 	mov.w	r6, #0
 80040b8:	196b      	adds	r3, r5, r5
 80040ba:	eb46 0406 	adc.w	r4, r6, r6
 80040be:	461a      	mov	r2, r3
 80040c0:	4623      	mov	r3, r4
 80040c2:	f7fc fcf3 	bl	8000aac <__aeabi_uldivmod>
 80040c6:	4603      	mov	r3, r0
 80040c8:	460c      	mov	r4, r1
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b6a      	ldr	r3, [pc, #424]	; (8004278 <UART_SetConfig+0x384>)
 80040ce:	fba3 1302 	umull	r1, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2164      	movs	r1, #100	; 0x64
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	3332      	adds	r3, #50	; 0x32
 80040e0:	4a65      	ldr	r2, [pc, #404]	; (8004278 <UART_SetConfig+0x384>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	f003 0207 	and.w	r2, r3, #7
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4442      	add	r2, r8
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	e26f      	b.n	80045d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040f6:	f7fe fe95 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 80040fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	461d      	mov	r5, r3
 8004100:	f04f 0600 	mov.w	r6, #0
 8004104:	46a8      	mov	r8, r5
 8004106:	46b1      	mov	r9, r6
 8004108:	eb18 0308 	adds.w	r3, r8, r8
 800410c:	eb49 0409 	adc.w	r4, r9, r9
 8004110:	4698      	mov	r8, r3
 8004112:	46a1      	mov	r9, r4
 8004114:	eb18 0805 	adds.w	r8, r8, r5
 8004118:	eb49 0906 	adc.w	r9, r9, r6
 800411c:	f04f 0100 	mov.w	r1, #0
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004128:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800412c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004130:	4688      	mov	r8, r1
 8004132:	4691      	mov	r9, r2
 8004134:	eb18 0005 	adds.w	r0, r8, r5
 8004138:	eb49 0106 	adc.w	r1, r9, r6
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	461d      	mov	r5, r3
 8004142:	f04f 0600 	mov.w	r6, #0
 8004146:	196b      	adds	r3, r5, r5
 8004148:	eb46 0406 	adc.w	r4, r6, r6
 800414c:	461a      	mov	r2, r3
 800414e:	4623      	mov	r3, r4
 8004150:	f7fc fcac 	bl	8000aac <__aeabi_uldivmod>
 8004154:	4603      	mov	r3, r0
 8004156:	460c      	mov	r4, r1
 8004158:	461a      	mov	r2, r3
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <UART_SetConfig+0x384>)
 800415c:	fba3 2302 	umull	r2, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	461d      	mov	r5, r3
 800416a:	f04f 0600 	mov.w	r6, #0
 800416e:	46a9      	mov	r9, r5
 8004170:	46b2      	mov	sl, r6
 8004172:	eb19 0309 	adds.w	r3, r9, r9
 8004176:	eb4a 040a 	adc.w	r4, sl, sl
 800417a:	4699      	mov	r9, r3
 800417c:	46a2      	mov	sl, r4
 800417e:	eb19 0905 	adds.w	r9, r9, r5
 8004182:	eb4a 0a06 	adc.w	sl, sl, r6
 8004186:	f04f 0100 	mov.w	r1, #0
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800419a:	4689      	mov	r9, r1
 800419c:	4692      	mov	sl, r2
 800419e:	eb19 0005 	adds.w	r0, r9, r5
 80041a2:	eb4a 0106 	adc.w	r1, sl, r6
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	461d      	mov	r5, r3
 80041ac:	f04f 0600 	mov.w	r6, #0
 80041b0:	196b      	adds	r3, r5, r5
 80041b2:	eb46 0406 	adc.w	r4, r6, r6
 80041b6:	461a      	mov	r2, r3
 80041b8:	4623      	mov	r3, r4
 80041ba:	f7fc fc77 	bl	8000aac <__aeabi_uldivmod>
 80041be:	4603      	mov	r3, r0
 80041c0:	460c      	mov	r4, r1
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <UART_SetConfig+0x384>)
 80041c6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2164      	movs	r1, #100	; 0x64
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	3332      	adds	r3, #50	; 0x32
 80041d8:	4a27      	ldr	r2, [pc, #156]	; (8004278 <UART_SetConfig+0x384>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041e6:	4498      	add	r8, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	461d      	mov	r5, r3
 80041ec:	f04f 0600 	mov.w	r6, #0
 80041f0:	46a9      	mov	r9, r5
 80041f2:	46b2      	mov	sl, r6
 80041f4:	eb19 0309 	adds.w	r3, r9, r9
 80041f8:	eb4a 040a 	adc.w	r4, sl, sl
 80041fc:	4699      	mov	r9, r3
 80041fe:	46a2      	mov	sl, r4
 8004200:	eb19 0905 	adds.w	r9, r9, r5
 8004204:	eb4a 0a06 	adc.w	sl, sl, r6
 8004208:	f04f 0100 	mov.w	r1, #0
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004214:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004218:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800421c:	4689      	mov	r9, r1
 800421e:	4692      	mov	sl, r2
 8004220:	eb19 0005 	adds.w	r0, r9, r5
 8004224:	eb4a 0106 	adc.w	r1, sl, r6
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	461d      	mov	r5, r3
 800422e:	f04f 0600 	mov.w	r6, #0
 8004232:	196b      	adds	r3, r5, r5
 8004234:	eb46 0406 	adc.w	r4, r6, r6
 8004238:	461a      	mov	r2, r3
 800423a:	4623      	mov	r3, r4
 800423c:	f7fc fc36 	bl	8000aac <__aeabi_uldivmod>
 8004240:	4603      	mov	r3, r0
 8004242:	460c      	mov	r4, r1
 8004244:	461a      	mov	r2, r3
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <UART_SetConfig+0x384>)
 8004248:	fba3 1302 	umull	r1, r3, r3, r2
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	2164      	movs	r1, #100	; 0x64
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	3332      	adds	r3, #50	; 0x32
 800425a:	4a07      	ldr	r2, [pc, #28]	; (8004278 <UART_SetConfig+0x384>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	f003 0207 	and.w	r2, r3, #7
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4442      	add	r2, r8
 800426c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800426e:	e1b2      	b.n	80045d6 <UART_SetConfig+0x6e2>
 8004270:	40011000 	.word	0x40011000
 8004274:	40011400 	.word	0x40011400
 8004278:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4ad7      	ldr	r2, [pc, #860]	; (80045e0 <UART_SetConfig+0x6ec>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d005      	beq.n	8004292 <UART_SetConfig+0x39e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4ad6      	ldr	r2, [pc, #856]	; (80045e4 <UART_SetConfig+0x6f0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	f040 80d1 	bne.w	8004434 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004292:	f7fe fddb 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8004296:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	469a      	mov	sl, r3
 800429c:	f04f 0b00 	mov.w	fp, #0
 80042a0:	46d0      	mov	r8, sl
 80042a2:	46d9      	mov	r9, fp
 80042a4:	eb18 0308 	adds.w	r3, r8, r8
 80042a8:	eb49 0409 	adc.w	r4, r9, r9
 80042ac:	4698      	mov	r8, r3
 80042ae:	46a1      	mov	r9, r4
 80042b0:	eb18 080a 	adds.w	r8, r8, sl
 80042b4:	eb49 090b 	adc.w	r9, r9, fp
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042cc:	4688      	mov	r8, r1
 80042ce:	4691      	mov	r9, r2
 80042d0:	eb1a 0508 	adds.w	r5, sl, r8
 80042d4:	eb4b 0609 	adc.w	r6, fp, r9
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4619      	mov	r1, r3
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f04f 0400 	mov.w	r4, #0
 80042ea:	0094      	lsls	r4, r2, #2
 80042ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042f0:	008b      	lsls	r3, r1, #2
 80042f2:	461a      	mov	r2, r3
 80042f4:	4623      	mov	r3, r4
 80042f6:	4628      	mov	r0, r5
 80042f8:	4631      	mov	r1, r6
 80042fa:	f7fc fbd7 	bl	8000aac <__aeabi_uldivmod>
 80042fe:	4603      	mov	r3, r0
 8004300:	460c      	mov	r4, r1
 8004302:	461a      	mov	r2, r3
 8004304:	4bb8      	ldr	r3, [pc, #736]	; (80045e8 <UART_SetConfig+0x6f4>)
 8004306:	fba3 2302 	umull	r2, r3, r3, r2
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	469b      	mov	fp, r3
 8004314:	f04f 0c00 	mov.w	ip, #0
 8004318:	46d9      	mov	r9, fp
 800431a:	46e2      	mov	sl, ip
 800431c:	eb19 0309 	adds.w	r3, r9, r9
 8004320:	eb4a 040a 	adc.w	r4, sl, sl
 8004324:	4699      	mov	r9, r3
 8004326:	46a2      	mov	sl, r4
 8004328:	eb19 090b 	adds.w	r9, r9, fp
 800432c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800433c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004344:	4689      	mov	r9, r1
 8004346:	4692      	mov	sl, r2
 8004348:	eb1b 0509 	adds.w	r5, fp, r9
 800434c:	eb4c 060a 	adc.w	r6, ip, sl
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4619      	mov	r1, r3
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	f04f 0400 	mov.w	r4, #0
 8004362:	0094      	lsls	r4, r2, #2
 8004364:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004368:	008b      	lsls	r3, r1, #2
 800436a:	461a      	mov	r2, r3
 800436c:	4623      	mov	r3, r4
 800436e:	4628      	mov	r0, r5
 8004370:	4631      	mov	r1, r6
 8004372:	f7fc fb9b 	bl	8000aac <__aeabi_uldivmod>
 8004376:	4603      	mov	r3, r0
 8004378:	460c      	mov	r4, r1
 800437a:	461a      	mov	r2, r3
 800437c:	4b9a      	ldr	r3, [pc, #616]	; (80045e8 <UART_SetConfig+0x6f4>)
 800437e:	fba3 1302 	umull	r1, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2164      	movs	r1, #100	; 0x64
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	3332      	adds	r3, #50	; 0x32
 8004390:	4a95      	ldr	r2, [pc, #596]	; (80045e8 <UART_SetConfig+0x6f4>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800439c:	4498      	add	r8, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	469b      	mov	fp, r3
 80043a2:	f04f 0c00 	mov.w	ip, #0
 80043a6:	46d9      	mov	r9, fp
 80043a8:	46e2      	mov	sl, ip
 80043aa:	eb19 0309 	adds.w	r3, r9, r9
 80043ae:	eb4a 040a 	adc.w	r4, sl, sl
 80043b2:	4699      	mov	r9, r3
 80043b4:	46a2      	mov	sl, r4
 80043b6:	eb19 090b 	adds.w	r9, r9, fp
 80043ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043d2:	4689      	mov	r9, r1
 80043d4:	4692      	mov	sl, r2
 80043d6:	eb1b 0509 	adds.w	r5, fp, r9
 80043da:	eb4c 060a 	adc.w	r6, ip, sl
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4619      	mov	r1, r3
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	f04f 0400 	mov.w	r4, #0
 80043f0:	0094      	lsls	r4, r2, #2
 80043f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043f6:	008b      	lsls	r3, r1, #2
 80043f8:	461a      	mov	r2, r3
 80043fa:	4623      	mov	r3, r4
 80043fc:	4628      	mov	r0, r5
 80043fe:	4631      	mov	r1, r6
 8004400:	f7fc fb54 	bl	8000aac <__aeabi_uldivmod>
 8004404:	4603      	mov	r3, r0
 8004406:	460c      	mov	r4, r1
 8004408:	461a      	mov	r2, r3
 800440a:	4b77      	ldr	r3, [pc, #476]	; (80045e8 <UART_SetConfig+0x6f4>)
 800440c:	fba3 1302 	umull	r1, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	2164      	movs	r1, #100	; 0x64
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	3332      	adds	r3, #50	; 0x32
 800441e:	4a72      	ldr	r2, [pc, #456]	; (80045e8 <UART_SetConfig+0x6f4>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	f003 020f 	and.w	r2, r3, #15
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4442      	add	r2, r8
 8004430:	609a      	str	r2, [r3, #8]
 8004432:	e0d0      	b.n	80045d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004434:	f7fe fcf6 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8004438:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	469a      	mov	sl, r3
 800443e:	f04f 0b00 	mov.w	fp, #0
 8004442:	46d0      	mov	r8, sl
 8004444:	46d9      	mov	r9, fp
 8004446:	eb18 0308 	adds.w	r3, r8, r8
 800444a:	eb49 0409 	adc.w	r4, r9, r9
 800444e:	4698      	mov	r8, r3
 8004450:	46a1      	mov	r9, r4
 8004452:	eb18 080a 	adds.w	r8, r8, sl
 8004456:	eb49 090b 	adc.w	r9, r9, fp
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004466:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800446a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800446e:	4688      	mov	r8, r1
 8004470:	4691      	mov	r9, r2
 8004472:	eb1a 0508 	adds.w	r5, sl, r8
 8004476:	eb4b 0609 	adc.w	r6, fp, r9
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4619      	mov	r1, r3
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	0094      	lsls	r4, r2, #2
 800448e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004492:	008b      	lsls	r3, r1, #2
 8004494:	461a      	mov	r2, r3
 8004496:	4623      	mov	r3, r4
 8004498:	4628      	mov	r0, r5
 800449a:	4631      	mov	r1, r6
 800449c:	f7fc fb06 	bl	8000aac <__aeabi_uldivmod>
 80044a0:	4603      	mov	r3, r0
 80044a2:	460c      	mov	r4, r1
 80044a4:	461a      	mov	r2, r3
 80044a6:	4b50      	ldr	r3, [pc, #320]	; (80045e8 <UART_SetConfig+0x6f4>)
 80044a8:	fba3 2302 	umull	r2, r3, r3, r2
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	469b      	mov	fp, r3
 80044b6:	f04f 0c00 	mov.w	ip, #0
 80044ba:	46d9      	mov	r9, fp
 80044bc:	46e2      	mov	sl, ip
 80044be:	eb19 0309 	adds.w	r3, r9, r9
 80044c2:	eb4a 040a 	adc.w	r4, sl, sl
 80044c6:	4699      	mov	r9, r3
 80044c8:	46a2      	mov	sl, r4
 80044ca:	eb19 090b 	adds.w	r9, r9, fp
 80044ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044d2:	f04f 0100 	mov.w	r1, #0
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044e6:	4689      	mov	r9, r1
 80044e8:	4692      	mov	sl, r2
 80044ea:	eb1b 0509 	adds.w	r5, fp, r9
 80044ee:	eb4c 060a 	adc.w	r6, ip, sl
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4619      	mov	r1, r3
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	f04f 0400 	mov.w	r4, #0
 8004504:	0094      	lsls	r4, r2, #2
 8004506:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800450a:	008b      	lsls	r3, r1, #2
 800450c:	461a      	mov	r2, r3
 800450e:	4623      	mov	r3, r4
 8004510:	4628      	mov	r0, r5
 8004512:	4631      	mov	r1, r6
 8004514:	f7fc faca 	bl	8000aac <__aeabi_uldivmod>
 8004518:	4603      	mov	r3, r0
 800451a:	460c      	mov	r4, r1
 800451c:	461a      	mov	r2, r3
 800451e:	4b32      	ldr	r3, [pc, #200]	; (80045e8 <UART_SetConfig+0x6f4>)
 8004520:	fba3 1302 	umull	r1, r3, r3, r2
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	2164      	movs	r1, #100	; 0x64
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	3332      	adds	r3, #50	; 0x32
 8004532:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <UART_SetConfig+0x6f4>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453e:	4498      	add	r8, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	469b      	mov	fp, r3
 8004544:	f04f 0c00 	mov.w	ip, #0
 8004548:	46d9      	mov	r9, fp
 800454a:	46e2      	mov	sl, ip
 800454c:	eb19 0309 	adds.w	r3, r9, r9
 8004550:	eb4a 040a 	adc.w	r4, sl, sl
 8004554:	4699      	mov	r9, r3
 8004556:	46a2      	mov	sl, r4
 8004558:	eb19 090b 	adds.w	r9, r9, fp
 800455c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004560:	f04f 0100 	mov.w	r1, #0
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800456c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004570:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004574:	4689      	mov	r9, r1
 8004576:	4692      	mov	sl, r2
 8004578:	eb1b 0509 	adds.w	r5, fp, r9
 800457c:	eb4c 060a 	adc.w	r6, ip, sl
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4619      	mov	r1, r3
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	f04f 0400 	mov.w	r4, #0
 8004592:	0094      	lsls	r4, r2, #2
 8004594:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004598:	008b      	lsls	r3, r1, #2
 800459a:	461a      	mov	r2, r3
 800459c:	4623      	mov	r3, r4
 800459e:	4628      	mov	r0, r5
 80045a0:	4631      	mov	r1, r6
 80045a2:	f7fc fa83 	bl	8000aac <__aeabi_uldivmod>
 80045a6:	4603      	mov	r3, r0
 80045a8:	460c      	mov	r4, r1
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <UART_SetConfig+0x6f4>)
 80045ae:	fba3 1302 	umull	r1, r3, r3, r2
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2164      	movs	r1, #100	; 0x64
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	3332      	adds	r3, #50	; 0x32
 80045c0:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <UART_SetConfig+0x6f4>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	f003 020f 	and.w	r2, r3, #15
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4442      	add	r2, r8
 80045d2:	609a      	str	r2, [r3, #8]
}
 80045d4:	e7ff      	b.n	80045d6 <UART_SetConfig+0x6e2>
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e0:	40011000 	.word	0x40011000
 80045e4:	40011400 	.word	0x40011400
 80045e8:	51eb851f 	.word	0x51eb851f

080045ec <__errno>:
 80045ec:	4b01      	ldr	r3, [pc, #4]	; (80045f4 <__errno+0x8>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000014 	.word	0x20000014

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4e0d      	ldr	r6, [pc, #52]	; (8004630 <__libc_init_array+0x38>)
 80045fc:	4c0d      	ldr	r4, [pc, #52]	; (8004634 <__libc_init_array+0x3c>)
 80045fe:	1ba4      	subs	r4, r4, r6
 8004600:	10a4      	asrs	r4, r4, #2
 8004602:	2500      	movs	r5, #0
 8004604:	42a5      	cmp	r5, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	4e0b      	ldr	r6, [pc, #44]	; (8004638 <__libc_init_array+0x40>)
 800460a:	4c0c      	ldr	r4, [pc, #48]	; (800463c <__libc_init_array+0x44>)
 800460c:	f000 fc26 	bl	8004e5c <_init>
 8004610:	1ba4      	subs	r4, r4, r6
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	2500      	movs	r5, #0
 8004616:	42a5      	cmp	r5, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004620:	4798      	blx	r3
 8004622:	3501      	adds	r5, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800462a:	4798      	blx	r3
 800462c:	3501      	adds	r5, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	08004edc 	.word	0x08004edc
 8004634:	08004edc 	.word	0x08004edc
 8004638:	08004edc 	.word	0x08004edc
 800463c:	08004ee0 	.word	0x08004ee0

08004640 <memset>:
 8004640:	4402      	add	r2, r0
 8004642:	4603      	mov	r3, r0
 8004644:	4293      	cmp	r3, r2
 8004646:	d100      	bne.n	800464a <memset+0xa>
 8004648:	4770      	bx	lr
 800464a:	f803 1b01 	strb.w	r1, [r3], #1
 800464e:	e7f9      	b.n	8004644 <memset+0x4>

08004650 <siprintf>:
 8004650:	b40e      	push	{r1, r2, r3}
 8004652:	b500      	push	{lr}
 8004654:	b09c      	sub	sp, #112	; 0x70
 8004656:	ab1d      	add	r3, sp, #116	; 0x74
 8004658:	9002      	str	r0, [sp, #8]
 800465a:	9006      	str	r0, [sp, #24]
 800465c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004660:	4809      	ldr	r0, [pc, #36]	; (8004688 <siprintf+0x38>)
 8004662:	9107      	str	r1, [sp, #28]
 8004664:	9104      	str	r1, [sp, #16]
 8004666:	4909      	ldr	r1, [pc, #36]	; (800468c <siprintf+0x3c>)
 8004668:	f853 2b04 	ldr.w	r2, [r3], #4
 800466c:	9105      	str	r1, [sp, #20]
 800466e:	6800      	ldr	r0, [r0, #0]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	a902      	add	r1, sp, #8
 8004674:	f000 f866 	bl	8004744 <_svfiprintf_r>
 8004678:	9b02      	ldr	r3, [sp, #8]
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	b01c      	add	sp, #112	; 0x70
 8004680:	f85d eb04 	ldr.w	lr, [sp], #4
 8004684:	b003      	add	sp, #12
 8004686:	4770      	bx	lr
 8004688:	20000014 	.word	0x20000014
 800468c:	ffff0208 	.word	0xffff0208

08004690 <__ssputs_r>:
 8004690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004694:	688e      	ldr	r6, [r1, #8]
 8004696:	429e      	cmp	r6, r3
 8004698:	4682      	mov	sl, r0
 800469a:	460c      	mov	r4, r1
 800469c:	4690      	mov	r8, r2
 800469e:	4699      	mov	r9, r3
 80046a0:	d837      	bhi.n	8004712 <__ssputs_r+0x82>
 80046a2:	898a      	ldrh	r2, [r1, #12]
 80046a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046a8:	d031      	beq.n	800470e <__ssputs_r+0x7e>
 80046aa:	6825      	ldr	r5, [r4, #0]
 80046ac:	6909      	ldr	r1, [r1, #16]
 80046ae:	1a6f      	subs	r7, r5, r1
 80046b0:	6965      	ldr	r5, [r4, #20]
 80046b2:	2302      	movs	r3, #2
 80046b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80046bc:	f109 0301 	add.w	r3, r9, #1
 80046c0:	443b      	add	r3, r7
 80046c2:	429d      	cmp	r5, r3
 80046c4:	bf38      	it	cc
 80046c6:	461d      	movcc	r5, r3
 80046c8:	0553      	lsls	r3, r2, #21
 80046ca:	d530      	bpl.n	800472e <__ssputs_r+0x9e>
 80046cc:	4629      	mov	r1, r5
 80046ce:	f000 fb2b 	bl	8004d28 <_malloc_r>
 80046d2:	4606      	mov	r6, r0
 80046d4:	b950      	cbnz	r0, 80046ec <__ssputs_r+0x5c>
 80046d6:	230c      	movs	r3, #12
 80046d8:	f8ca 3000 	str.w	r3, [sl]
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ec:	463a      	mov	r2, r7
 80046ee:	6921      	ldr	r1, [r4, #16]
 80046f0:	f000 faa8 	bl	8004c44 <memcpy>
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	6126      	str	r6, [r4, #16]
 8004702:	6165      	str	r5, [r4, #20]
 8004704:	443e      	add	r6, r7
 8004706:	1bed      	subs	r5, r5, r7
 8004708:	6026      	str	r6, [r4, #0]
 800470a:	60a5      	str	r5, [r4, #8]
 800470c:	464e      	mov	r6, r9
 800470e:	454e      	cmp	r6, r9
 8004710:	d900      	bls.n	8004714 <__ssputs_r+0x84>
 8004712:	464e      	mov	r6, r9
 8004714:	4632      	mov	r2, r6
 8004716:	4641      	mov	r1, r8
 8004718:	6820      	ldr	r0, [r4, #0]
 800471a:	f000 fa9e 	bl	8004c5a <memmove>
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	1b9b      	subs	r3, r3, r6
 8004722:	60a3      	str	r3, [r4, #8]
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	441e      	add	r6, r3
 8004728:	6026      	str	r6, [r4, #0]
 800472a:	2000      	movs	r0, #0
 800472c:	e7dc      	b.n	80046e8 <__ssputs_r+0x58>
 800472e:	462a      	mov	r2, r5
 8004730:	f000 fb54 	bl	8004ddc <_realloc_r>
 8004734:	4606      	mov	r6, r0
 8004736:	2800      	cmp	r0, #0
 8004738:	d1e2      	bne.n	8004700 <__ssputs_r+0x70>
 800473a:	6921      	ldr	r1, [r4, #16]
 800473c:	4650      	mov	r0, sl
 800473e:	f000 faa5 	bl	8004c8c <_free_r>
 8004742:	e7c8      	b.n	80046d6 <__ssputs_r+0x46>

08004744 <_svfiprintf_r>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	461d      	mov	r5, r3
 800474a:	898b      	ldrh	r3, [r1, #12]
 800474c:	061f      	lsls	r7, r3, #24
 800474e:	b09d      	sub	sp, #116	; 0x74
 8004750:	4680      	mov	r8, r0
 8004752:	460c      	mov	r4, r1
 8004754:	4616      	mov	r6, r2
 8004756:	d50f      	bpl.n	8004778 <_svfiprintf_r+0x34>
 8004758:	690b      	ldr	r3, [r1, #16]
 800475a:	b96b      	cbnz	r3, 8004778 <_svfiprintf_r+0x34>
 800475c:	2140      	movs	r1, #64	; 0x40
 800475e:	f000 fae3 	bl	8004d28 <_malloc_r>
 8004762:	6020      	str	r0, [r4, #0]
 8004764:	6120      	str	r0, [r4, #16]
 8004766:	b928      	cbnz	r0, 8004774 <_svfiprintf_r+0x30>
 8004768:	230c      	movs	r3, #12
 800476a:	f8c8 3000 	str.w	r3, [r8]
 800476e:	f04f 30ff 	mov.w	r0, #4294967295
 8004772:	e0c8      	b.n	8004906 <_svfiprintf_r+0x1c2>
 8004774:	2340      	movs	r3, #64	; 0x40
 8004776:	6163      	str	r3, [r4, #20]
 8004778:	2300      	movs	r3, #0
 800477a:	9309      	str	r3, [sp, #36]	; 0x24
 800477c:	2320      	movs	r3, #32
 800477e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004782:	2330      	movs	r3, #48	; 0x30
 8004784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004788:	9503      	str	r5, [sp, #12]
 800478a:	f04f 0b01 	mov.w	fp, #1
 800478e:	4637      	mov	r7, r6
 8004790:	463d      	mov	r5, r7
 8004792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004796:	b10b      	cbz	r3, 800479c <_svfiprintf_r+0x58>
 8004798:	2b25      	cmp	r3, #37	; 0x25
 800479a:	d13e      	bne.n	800481a <_svfiprintf_r+0xd6>
 800479c:	ebb7 0a06 	subs.w	sl, r7, r6
 80047a0:	d00b      	beq.n	80047ba <_svfiprintf_r+0x76>
 80047a2:	4653      	mov	r3, sl
 80047a4:	4632      	mov	r2, r6
 80047a6:	4621      	mov	r1, r4
 80047a8:	4640      	mov	r0, r8
 80047aa:	f7ff ff71 	bl	8004690 <__ssputs_r>
 80047ae:	3001      	adds	r0, #1
 80047b0:	f000 80a4 	beq.w	80048fc <_svfiprintf_r+0x1b8>
 80047b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b6:	4453      	add	r3, sl
 80047b8:	9309      	str	r3, [sp, #36]	; 0x24
 80047ba:	783b      	ldrb	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 809d 	beq.w	80048fc <_svfiprintf_r+0x1b8>
 80047c2:	2300      	movs	r3, #0
 80047c4:	f04f 32ff 	mov.w	r2, #4294967295
 80047c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	9307      	str	r3, [sp, #28]
 80047d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047d4:	931a      	str	r3, [sp, #104]	; 0x68
 80047d6:	462f      	mov	r7, r5
 80047d8:	2205      	movs	r2, #5
 80047da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80047de:	4850      	ldr	r0, [pc, #320]	; (8004920 <_svfiprintf_r+0x1dc>)
 80047e0:	f7fb fd1e 	bl	8000220 <memchr>
 80047e4:	9b04      	ldr	r3, [sp, #16]
 80047e6:	b9d0      	cbnz	r0, 800481e <_svfiprintf_r+0xda>
 80047e8:	06d9      	lsls	r1, r3, #27
 80047ea:	bf44      	itt	mi
 80047ec:	2220      	movmi	r2, #32
 80047ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047f2:	071a      	lsls	r2, r3, #28
 80047f4:	bf44      	itt	mi
 80047f6:	222b      	movmi	r2, #43	; 0x2b
 80047f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047fc:	782a      	ldrb	r2, [r5, #0]
 80047fe:	2a2a      	cmp	r2, #42	; 0x2a
 8004800:	d015      	beq.n	800482e <_svfiprintf_r+0xea>
 8004802:	9a07      	ldr	r2, [sp, #28]
 8004804:	462f      	mov	r7, r5
 8004806:	2000      	movs	r0, #0
 8004808:	250a      	movs	r5, #10
 800480a:	4639      	mov	r1, r7
 800480c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004810:	3b30      	subs	r3, #48	; 0x30
 8004812:	2b09      	cmp	r3, #9
 8004814:	d94d      	bls.n	80048b2 <_svfiprintf_r+0x16e>
 8004816:	b1b8      	cbz	r0, 8004848 <_svfiprintf_r+0x104>
 8004818:	e00f      	b.n	800483a <_svfiprintf_r+0xf6>
 800481a:	462f      	mov	r7, r5
 800481c:	e7b8      	b.n	8004790 <_svfiprintf_r+0x4c>
 800481e:	4a40      	ldr	r2, [pc, #256]	; (8004920 <_svfiprintf_r+0x1dc>)
 8004820:	1a80      	subs	r0, r0, r2
 8004822:	fa0b f000 	lsl.w	r0, fp, r0
 8004826:	4318      	orrs	r0, r3
 8004828:	9004      	str	r0, [sp, #16]
 800482a:	463d      	mov	r5, r7
 800482c:	e7d3      	b.n	80047d6 <_svfiprintf_r+0x92>
 800482e:	9a03      	ldr	r2, [sp, #12]
 8004830:	1d11      	adds	r1, r2, #4
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	9103      	str	r1, [sp, #12]
 8004836:	2a00      	cmp	r2, #0
 8004838:	db01      	blt.n	800483e <_svfiprintf_r+0xfa>
 800483a:	9207      	str	r2, [sp, #28]
 800483c:	e004      	b.n	8004848 <_svfiprintf_r+0x104>
 800483e:	4252      	negs	r2, r2
 8004840:	f043 0302 	orr.w	r3, r3, #2
 8004844:	9207      	str	r2, [sp, #28]
 8004846:	9304      	str	r3, [sp, #16]
 8004848:	783b      	ldrb	r3, [r7, #0]
 800484a:	2b2e      	cmp	r3, #46	; 0x2e
 800484c:	d10c      	bne.n	8004868 <_svfiprintf_r+0x124>
 800484e:	787b      	ldrb	r3, [r7, #1]
 8004850:	2b2a      	cmp	r3, #42	; 0x2a
 8004852:	d133      	bne.n	80048bc <_svfiprintf_r+0x178>
 8004854:	9b03      	ldr	r3, [sp, #12]
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	9203      	str	r2, [sp, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	bfb8      	it	lt
 8004860:	f04f 33ff 	movlt.w	r3, #4294967295
 8004864:	3702      	adds	r7, #2
 8004866:	9305      	str	r3, [sp, #20]
 8004868:	4d2e      	ldr	r5, [pc, #184]	; (8004924 <_svfiprintf_r+0x1e0>)
 800486a:	7839      	ldrb	r1, [r7, #0]
 800486c:	2203      	movs	r2, #3
 800486e:	4628      	mov	r0, r5
 8004870:	f7fb fcd6 	bl	8000220 <memchr>
 8004874:	b138      	cbz	r0, 8004886 <_svfiprintf_r+0x142>
 8004876:	2340      	movs	r3, #64	; 0x40
 8004878:	1b40      	subs	r0, r0, r5
 800487a:	fa03 f000 	lsl.w	r0, r3, r0
 800487e:	9b04      	ldr	r3, [sp, #16]
 8004880:	4303      	orrs	r3, r0
 8004882:	3701      	adds	r7, #1
 8004884:	9304      	str	r3, [sp, #16]
 8004886:	7839      	ldrb	r1, [r7, #0]
 8004888:	4827      	ldr	r0, [pc, #156]	; (8004928 <_svfiprintf_r+0x1e4>)
 800488a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800488e:	2206      	movs	r2, #6
 8004890:	1c7e      	adds	r6, r7, #1
 8004892:	f7fb fcc5 	bl	8000220 <memchr>
 8004896:	2800      	cmp	r0, #0
 8004898:	d038      	beq.n	800490c <_svfiprintf_r+0x1c8>
 800489a:	4b24      	ldr	r3, [pc, #144]	; (800492c <_svfiprintf_r+0x1e8>)
 800489c:	bb13      	cbnz	r3, 80048e4 <_svfiprintf_r+0x1a0>
 800489e:	9b03      	ldr	r3, [sp, #12]
 80048a0:	3307      	adds	r3, #7
 80048a2:	f023 0307 	bic.w	r3, r3, #7
 80048a6:	3308      	adds	r3, #8
 80048a8:	9303      	str	r3, [sp, #12]
 80048aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ac:	444b      	add	r3, r9
 80048ae:	9309      	str	r3, [sp, #36]	; 0x24
 80048b0:	e76d      	b.n	800478e <_svfiprintf_r+0x4a>
 80048b2:	fb05 3202 	mla	r2, r5, r2, r3
 80048b6:	2001      	movs	r0, #1
 80048b8:	460f      	mov	r7, r1
 80048ba:	e7a6      	b.n	800480a <_svfiprintf_r+0xc6>
 80048bc:	2300      	movs	r3, #0
 80048be:	3701      	adds	r7, #1
 80048c0:	9305      	str	r3, [sp, #20]
 80048c2:	4619      	mov	r1, r3
 80048c4:	250a      	movs	r5, #10
 80048c6:	4638      	mov	r0, r7
 80048c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048cc:	3a30      	subs	r2, #48	; 0x30
 80048ce:	2a09      	cmp	r2, #9
 80048d0:	d903      	bls.n	80048da <_svfiprintf_r+0x196>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0c8      	beq.n	8004868 <_svfiprintf_r+0x124>
 80048d6:	9105      	str	r1, [sp, #20]
 80048d8:	e7c6      	b.n	8004868 <_svfiprintf_r+0x124>
 80048da:	fb05 2101 	mla	r1, r5, r1, r2
 80048de:	2301      	movs	r3, #1
 80048e0:	4607      	mov	r7, r0
 80048e2:	e7f0      	b.n	80048c6 <_svfiprintf_r+0x182>
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	4622      	mov	r2, r4
 80048ea:	4b11      	ldr	r3, [pc, #68]	; (8004930 <_svfiprintf_r+0x1ec>)
 80048ec:	a904      	add	r1, sp, #16
 80048ee:	4640      	mov	r0, r8
 80048f0:	f3af 8000 	nop.w
 80048f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80048f8:	4681      	mov	r9, r0
 80048fa:	d1d6      	bne.n	80048aa <_svfiprintf_r+0x166>
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	065b      	lsls	r3, r3, #25
 8004900:	f53f af35 	bmi.w	800476e <_svfiprintf_r+0x2a>
 8004904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004906:	b01d      	add	sp, #116	; 0x74
 8004908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490c:	ab03      	add	r3, sp, #12
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	4622      	mov	r2, r4
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <_svfiprintf_r+0x1ec>)
 8004914:	a904      	add	r1, sp, #16
 8004916:	4640      	mov	r0, r8
 8004918:	f000 f882 	bl	8004a20 <_printf_i>
 800491c:	e7ea      	b.n	80048f4 <_svfiprintf_r+0x1b0>
 800491e:	bf00      	nop
 8004920:	08004ea0 	.word	0x08004ea0
 8004924:	08004ea6 	.word	0x08004ea6
 8004928:	08004eaa 	.word	0x08004eaa
 800492c:	00000000 	.word	0x00000000
 8004930:	08004691 	.word	0x08004691

08004934 <_printf_common>:
 8004934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004938:	4691      	mov	r9, r2
 800493a:	461f      	mov	r7, r3
 800493c:	688a      	ldr	r2, [r1, #8]
 800493e:	690b      	ldr	r3, [r1, #16]
 8004940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004944:	4293      	cmp	r3, r2
 8004946:	bfb8      	it	lt
 8004948:	4613      	movlt	r3, r2
 800494a:	f8c9 3000 	str.w	r3, [r9]
 800494e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004952:	4606      	mov	r6, r0
 8004954:	460c      	mov	r4, r1
 8004956:	b112      	cbz	r2, 800495e <_printf_common+0x2a>
 8004958:	3301      	adds	r3, #1
 800495a:	f8c9 3000 	str.w	r3, [r9]
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	0699      	lsls	r1, r3, #26
 8004962:	bf42      	ittt	mi
 8004964:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004968:	3302      	addmi	r3, #2
 800496a:	f8c9 3000 	strmi.w	r3, [r9]
 800496e:	6825      	ldr	r5, [r4, #0]
 8004970:	f015 0506 	ands.w	r5, r5, #6
 8004974:	d107      	bne.n	8004986 <_printf_common+0x52>
 8004976:	f104 0a19 	add.w	sl, r4, #25
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	f8d9 2000 	ldr.w	r2, [r9]
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	42ab      	cmp	r3, r5
 8004984:	dc28      	bgt.n	80049d8 <_printf_common+0xa4>
 8004986:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	3300      	adds	r3, #0
 800498e:	bf18      	it	ne
 8004990:	2301      	movne	r3, #1
 8004992:	0692      	lsls	r2, r2, #26
 8004994:	d42d      	bmi.n	80049f2 <_printf_common+0xbe>
 8004996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800499a:	4639      	mov	r1, r7
 800499c:	4630      	mov	r0, r6
 800499e:	47c0      	blx	r8
 80049a0:	3001      	adds	r0, #1
 80049a2:	d020      	beq.n	80049e6 <_printf_common+0xb2>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	68e5      	ldr	r5, [r4, #12]
 80049a8:	f8d9 2000 	ldr.w	r2, [r9]
 80049ac:	f003 0306 	and.w	r3, r3, #6
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	bf08      	it	eq
 80049b4:	1aad      	subeq	r5, r5, r2
 80049b6:	68a3      	ldr	r3, [r4, #8]
 80049b8:	6922      	ldr	r2, [r4, #16]
 80049ba:	bf0c      	ite	eq
 80049bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049c0:	2500      	movne	r5, #0
 80049c2:	4293      	cmp	r3, r2
 80049c4:	bfc4      	itt	gt
 80049c6:	1a9b      	subgt	r3, r3, r2
 80049c8:	18ed      	addgt	r5, r5, r3
 80049ca:	f04f 0900 	mov.w	r9, #0
 80049ce:	341a      	adds	r4, #26
 80049d0:	454d      	cmp	r5, r9
 80049d2:	d11a      	bne.n	8004a0a <_printf_common+0xd6>
 80049d4:	2000      	movs	r0, #0
 80049d6:	e008      	b.n	80049ea <_printf_common+0xb6>
 80049d8:	2301      	movs	r3, #1
 80049da:	4652      	mov	r2, sl
 80049dc:	4639      	mov	r1, r7
 80049de:	4630      	mov	r0, r6
 80049e0:	47c0      	blx	r8
 80049e2:	3001      	adds	r0, #1
 80049e4:	d103      	bne.n	80049ee <_printf_common+0xba>
 80049e6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ee:	3501      	adds	r5, #1
 80049f0:	e7c3      	b.n	800497a <_printf_common+0x46>
 80049f2:	18e1      	adds	r1, r4, r3
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	2030      	movs	r0, #48	; 0x30
 80049f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049fc:	4422      	add	r2, r4
 80049fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a06:	3302      	adds	r3, #2
 8004a08:	e7c5      	b.n	8004996 <_printf_common+0x62>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	4639      	mov	r1, r7
 8004a10:	4630      	mov	r0, r6
 8004a12:	47c0      	blx	r8
 8004a14:	3001      	adds	r0, #1
 8004a16:	d0e6      	beq.n	80049e6 <_printf_common+0xb2>
 8004a18:	f109 0901 	add.w	r9, r9, #1
 8004a1c:	e7d8      	b.n	80049d0 <_printf_common+0x9c>
	...

08004a20 <_printf_i>:
 8004a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a28:	460c      	mov	r4, r1
 8004a2a:	7e09      	ldrb	r1, [r1, #24]
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	296e      	cmp	r1, #110	; 0x6e
 8004a30:	4617      	mov	r7, r2
 8004a32:	4606      	mov	r6, r0
 8004a34:	4698      	mov	r8, r3
 8004a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a38:	f000 80b3 	beq.w	8004ba2 <_printf_i+0x182>
 8004a3c:	d822      	bhi.n	8004a84 <_printf_i+0x64>
 8004a3e:	2963      	cmp	r1, #99	; 0x63
 8004a40:	d036      	beq.n	8004ab0 <_printf_i+0x90>
 8004a42:	d80a      	bhi.n	8004a5a <_printf_i+0x3a>
 8004a44:	2900      	cmp	r1, #0
 8004a46:	f000 80b9 	beq.w	8004bbc <_printf_i+0x19c>
 8004a4a:	2958      	cmp	r1, #88	; 0x58
 8004a4c:	f000 8083 	beq.w	8004b56 <_printf_i+0x136>
 8004a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a58:	e032      	b.n	8004ac0 <_printf_i+0xa0>
 8004a5a:	2964      	cmp	r1, #100	; 0x64
 8004a5c:	d001      	beq.n	8004a62 <_printf_i+0x42>
 8004a5e:	2969      	cmp	r1, #105	; 0x69
 8004a60:	d1f6      	bne.n	8004a50 <_printf_i+0x30>
 8004a62:	6820      	ldr	r0, [r4, #0]
 8004a64:	6813      	ldr	r3, [r2, #0]
 8004a66:	0605      	lsls	r5, r0, #24
 8004a68:	f103 0104 	add.w	r1, r3, #4
 8004a6c:	d52a      	bpl.n	8004ac4 <_printf_i+0xa4>
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6011      	str	r1, [r2, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	da03      	bge.n	8004a7e <_printf_i+0x5e>
 8004a76:	222d      	movs	r2, #45	; 0x2d
 8004a78:	425b      	negs	r3, r3
 8004a7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a7e:	486f      	ldr	r0, [pc, #444]	; (8004c3c <_printf_i+0x21c>)
 8004a80:	220a      	movs	r2, #10
 8004a82:	e039      	b.n	8004af8 <_printf_i+0xd8>
 8004a84:	2973      	cmp	r1, #115	; 0x73
 8004a86:	f000 809d 	beq.w	8004bc4 <_printf_i+0x1a4>
 8004a8a:	d808      	bhi.n	8004a9e <_printf_i+0x7e>
 8004a8c:	296f      	cmp	r1, #111	; 0x6f
 8004a8e:	d020      	beq.n	8004ad2 <_printf_i+0xb2>
 8004a90:	2970      	cmp	r1, #112	; 0x70
 8004a92:	d1dd      	bne.n	8004a50 <_printf_i+0x30>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	f043 0320 	orr.w	r3, r3, #32
 8004a9a:	6023      	str	r3, [r4, #0]
 8004a9c:	e003      	b.n	8004aa6 <_printf_i+0x86>
 8004a9e:	2975      	cmp	r1, #117	; 0x75
 8004aa0:	d017      	beq.n	8004ad2 <_printf_i+0xb2>
 8004aa2:	2978      	cmp	r1, #120	; 0x78
 8004aa4:	d1d4      	bne.n	8004a50 <_printf_i+0x30>
 8004aa6:	2378      	movs	r3, #120	; 0x78
 8004aa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004aac:	4864      	ldr	r0, [pc, #400]	; (8004c40 <_printf_i+0x220>)
 8004aae:	e055      	b.n	8004b5c <_printf_i+0x13c>
 8004ab0:	6813      	ldr	r3, [r2, #0]
 8004ab2:	1d19      	adds	r1, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6011      	str	r1, [r2, #0]
 8004ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e08c      	b.n	8004bde <_printf_i+0x1be>
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6011      	str	r1, [r2, #0]
 8004ac8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004acc:	bf18      	it	ne
 8004ace:	b21b      	sxthne	r3, r3
 8004ad0:	e7cf      	b.n	8004a72 <_printf_i+0x52>
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	6825      	ldr	r5, [r4, #0]
 8004ad6:	1d18      	adds	r0, r3, #4
 8004ad8:	6010      	str	r0, [r2, #0]
 8004ada:	0628      	lsls	r0, r5, #24
 8004adc:	d501      	bpl.n	8004ae2 <_printf_i+0xc2>
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	e002      	b.n	8004ae8 <_printf_i+0xc8>
 8004ae2:	0668      	lsls	r0, r5, #25
 8004ae4:	d5fb      	bpl.n	8004ade <_printf_i+0xbe>
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	4854      	ldr	r0, [pc, #336]	; (8004c3c <_printf_i+0x21c>)
 8004aea:	296f      	cmp	r1, #111	; 0x6f
 8004aec:	bf14      	ite	ne
 8004aee:	220a      	movne	r2, #10
 8004af0:	2208      	moveq	r2, #8
 8004af2:	2100      	movs	r1, #0
 8004af4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004af8:	6865      	ldr	r5, [r4, #4]
 8004afa:	60a5      	str	r5, [r4, #8]
 8004afc:	2d00      	cmp	r5, #0
 8004afe:	f2c0 8095 	blt.w	8004c2c <_printf_i+0x20c>
 8004b02:	6821      	ldr	r1, [r4, #0]
 8004b04:	f021 0104 	bic.w	r1, r1, #4
 8004b08:	6021      	str	r1, [r4, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d13d      	bne.n	8004b8a <_printf_i+0x16a>
 8004b0e:	2d00      	cmp	r5, #0
 8004b10:	f040 808e 	bne.w	8004c30 <_printf_i+0x210>
 8004b14:	4665      	mov	r5, ip
 8004b16:	2a08      	cmp	r2, #8
 8004b18:	d10b      	bne.n	8004b32 <_printf_i+0x112>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	07db      	lsls	r3, r3, #31
 8004b1e:	d508      	bpl.n	8004b32 <_printf_i+0x112>
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	6862      	ldr	r2, [r4, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	bfde      	ittt	le
 8004b28:	2330      	movle	r3, #48	; 0x30
 8004b2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b32:	ebac 0305 	sub.w	r3, ip, r5
 8004b36:	6123      	str	r3, [r4, #16]
 8004b38:	f8cd 8000 	str.w	r8, [sp]
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	aa03      	add	r2, sp, #12
 8004b40:	4621      	mov	r1, r4
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7ff fef6 	bl	8004934 <_printf_common>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d14d      	bne.n	8004be8 <_printf_i+0x1c8>
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	b005      	add	sp, #20
 8004b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b56:	4839      	ldr	r0, [pc, #228]	; (8004c3c <_printf_i+0x21c>)
 8004b58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b5c:	6813      	ldr	r3, [r2, #0]
 8004b5e:	6821      	ldr	r1, [r4, #0]
 8004b60:	1d1d      	adds	r5, r3, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6015      	str	r5, [r2, #0]
 8004b66:	060a      	lsls	r2, r1, #24
 8004b68:	d50b      	bpl.n	8004b82 <_printf_i+0x162>
 8004b6a:	07ca      	lsls	r2, r1, #31
 8004b6c:	bf44      	itt	mi
 8004b6e:	f041 0120 	orrmi.w	r1, r1, #32
 8004b72:	6021      	strmi	r1, [r4, #0]
 8004b74:	b91b      	cbnz	r3, 8004b7e <_printf_i+0x15e>
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	f022 0220 	bic.w	r2, r2, #32
 8004b7c:	6022      	str	r2, [r4, #0]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	e7b7      	b.n	8004af2 <_printf_i+0xd2>
 8004b82:	064d      	lsls	r5, r1, #25
 8004b84:	bf48      	it	mi
 8004b86:	b29b      	uxthmi	r3, r3
 8004b88:	e7ef      	b.n	8004b6a <_printf_i+0x14a>
 8004b8a:	4665      	mov	r5, ip
 8004b8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b90:	fb02 3311 	mls	r3, r2, r1, r3
 8004b94:	5cc3      	ldrb	r3, [r0, r3]
 8004b96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	d1f5      	bne.n	8004b8c <_printf_i+0x16c>
 8004ba0:	e7b9      	b.n	8004b16 <_printf_i+0xf6>
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	6825      	ldr	r5, [r4, #0]
 8004ba6:	6961      	ldr	r1, [r4, #20]
 8004ba8:	1d18      	adds	r0, r3, #4
 8004baa:	6010      	str	r0, [r2, #0]
 8004bac:	0628      	lsls	r0, r5, #24
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	d501      	bpl.n	8004bb6 <_printf_i+0x196>
 8004bb2:	6019      	str	r1, [r3, #0]
 8004bb4:	e002      	b.n	8004bbc <_printf_i+0x19c>
 8004bb6:	066a      	lsls	r2, r5, #25
 8004bb8:	d5fb      	bpl.n	8004bb2 <_printf_i+0x192>
 8004bba:	8019      	strh	r1, [r3, #0]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	6123      	str	r3, [r4, #16]
 8004bc0:	4665      	mov	r5, ip
 8004bc2:	e7b9      	b.n	8004b38 <_printf_i+0x118>
 8004bc4:	6813      	ldr	r3, [r2, #0]
 8004bc6:	1d19      	adds	r1, r3, #4
 8004bc8:	6011      	str	r1, [r2, #0]
 8004bca:	681d      	ldr	r5, [r3, #0]
 8004bcc:	6862      	ldr	r2, [r4, #4]
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f7fb fb25 	bl	8000220 <memchr>
 8004bd6:	b108      	cbz	r0, 8004bdc <_printf_i+0x1bc>
 8004bd8:	1b40      	subs	r0, r0, r5
 8004bda:	6060      	str	r0, [r4, #4]
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	6123      	str	r3, [r4, #16]
 8004be0:	2300      	movs	r3, #0
 8004be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be6:	e7a7      	b.n	8004b38 <_printf_i+0x118>
 8004be8:	6923      	ldr	r3, [r4, #16]
 8004bea:	462a      	mov	r2, r5
 8004bec:	4639      	mov	r1, r7
 8004bee:	4630      	mov	r0, r6
 8004bf0:	47c0      	blx	r8
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d0aa      	beq.n	8004b4c <_printf_i+0x12c>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	079b      	lsls	r3, r3, #30
 8004bfa:	d413      	bmi.n	8004c24 <_printf_i+0x204>
 8004bfc:	68e0      	ldr	r0, [r4, #12]
 8004bfe:	9b03      	ldr	r3, [sp, #12]
 8004c00:	4298      	cmp	r0, r3
 8004c02:	bfb8      	it	lt
 8004c04:	4618      	movlt	r0, r3
 8004c06:	e7a3      	b.n	8004b50 <_printf_i+0x130>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	464a      	mov	r2, r9
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	4630      	mov	r0, r6
 8004c10:	47c0      	blx	r8
 8004c12:	3001      	adds	r0, #1
 8004c14:	d09a      	beq.n	8004b4c <_printf_i+0x12c>
 8004c16:	3501      	adds	r5, #1
 8004c18:	68e3      	ldr	r3, [r4, #12]
 8004c1a:	9a03      	ldr	r2, [sp, #12]
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	42ab      	cmp	r3, r5
 8004c20:	dcf2      	bgt.n	8004c08 <_printf_i+0x1e8>
 8004c22:	e7eb      	b.n	8004bfc <_printf_i+0x1dc>
 8004c24:	2500      	movs	r5, #0
 8004c26:	f104 0919 	add.w	r9, r4, #25
 8004c2a:	e7f5      	b.n	8004c18 <_printf_i+0x1f8>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1ac      	bne.n	8004b8a <_printf_i+0x16a>
 8004c30:	7803      	ldrb	r3, [r0, #0]
 8004c32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c3a:	e76c      	b.n	8004b16 <_printf_i+0xf6>
 8004c3c:	08004eb1 	.word	0x08004eb1
 8004c40:	08004ec2 	.word	0x08004ec2

08004c44 <memcpy>:
 8004c44:	b510      	push	{r4, lr}
 8004c46:	1e43      	subs	r3, r0, #1
 8004c48:	440a      	add	r2, r1
 8004c4a:	4291      	cmp	r1, r2
 8004c4c:	d100      	bne.n	8004c50 <memcpy+0xc>
 8004c4e:	bd10      	pop	{r4, pc}
 8004c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c58:	e7f7      	b.n	8004c4a <memcpy+0x6>

08004c5a <memmove>:
 8004c5a:	4288      	cmp	r0, r1
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	eb01 0302 	add.w	r3, r1, r2
 8004c62:	d807      	bhi.n	8004c74 <memmove+0x1a>
 8004c64:	1e42      	subs	r2, r0, #1
 8004c66:	4299      	cmp	r1, r3
 8004c68:	d00a      	beq.n	8004c80 <memmove+0x26>
 8004c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c72:	e7f8      	b.n	8004c66 <memmove+0xc>
 8004c74:	4283      	cmp	r3, r0
 8004c76:	d9f5      	bls.n	8004c64 <memmove+0xa>
 8004c78:	1881      	adds	r1, r0, r2
 8004c7a:	1ad2      	subs	r2, r2, r3
 8004c7c:	42d3      	cmn	r3, r2
 8004c7e:	d100      	bne.n	8004c82 <memmove+0x28>
 8004c80:	bd10      	pop	{r4, pc}
 8004c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c8a:	e7f7      	b.n	8004c7c <memmove+0x22>

08004c8c <_free_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4605      	mov	r5, r0
 8004c90:	2900      	cmp	r1, #0
 8004c92:	d045      	beq.n	8004d20 <_free_r+0x94>
 8004c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c98:	1f0c      	subs	r4, r1, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bfb8      	it	lt
 8004c9e:	18e4      	addlt	r4, r4, r3
 8004ca0:	f000 f8d2 	bl	8004e48 <__malloc_lock>
 8004ca4:	4a1f      	ldr	r2, [pc, #124]	; (8004d24 <_free_r+0x98>)
 8004ca6:	6813      	ldr	r3, [r2, #0]
 8004ca8:	4610      	mov	r0, r2
 8004caa:	b933      	cbnz	r3, 8004cba <_free_r+0x2e>
 8004cac:	6063      	str	r3, [r4, #4]
 8004cae:	6014      	str	r4, [r2, #0]
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cb6:	f000 b8c8 	b.w	8004e4a <__malloc_unlock>
 8004cba:	42a3      	cmp	r3, r4
 8004cbc:	d90c      	bls.n	8004cd8 <_free_r+0x4c>
 8004cbe:	6821      	ldr	r1, [r4, #0]
 8004cc0:	1862      	adds	r2, r4, r1
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	bf04      	itt	eq
 8004cc6:	681a      	ldreq	r2, [r3, #0]
 8004cc8:	685b      	ldreq	r3, [r3, #4]
 8004cca:	6063      	str	r3, [r4, #4]
 8004ccc:	bf04      	itt	eq
 8004cce:	1852      	addeq	r2, r2, r1
 8004cd0:	6022      	streq	r2, [r4, #0]
 8004cd2:	6004      	str	r4, [r0, #0]
 8004cd4:	e7ec      	b.n	8004cb0 <_free_r+0x24>
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	b10a      	cbz	r2, 8004ce0 <_free_r+0x54>
 8004cdc:	42a2      	cmp	r2, r4
 8004cde:	d9fa      	bls.n	8004cd6 <_free_r+0x4a>
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	1858      	adds	r0, r3, r1
 8004ce4:	42a0      	cmp	r0, r4
 8004ce6:	d10b      	bne.n	8004d00 <_free_r+0x74>
 8004ce8:	6820      	ldr	r0, [r4, #0]
 8004cea:	4401      	add	r1, r0
 8004cec:	1858      	adds	r0, r3, r1
 8004cee:	4282      	cmp	r2, r0
 8004cf0:	6019      	str	r1, [r3, #0]
 8004cf2:	d1dd      	bne.n	8004cb0 <_free_r+0x24>
 8004cf4:	6810      	ldr	r0, [r2, #0]
 8004cf6:	6852      	ldr	r2, [r2, #4]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	4401      	add	r1, r0
 8004cfc:	6019      	str	r1, [r3, #0]
 8004cfe:	e7d7      	b.n	8004cb0 <_free_r+0x24>
 8004d00:	d902      	bls.n	8004d08 <_free_r+0x7c>
 8004d02:	230c      	movs	r3, #12
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	e7d3      	b.n	8004cb0 <_free_r+0x24>
 8004d08:	6820      	ldr	r0, [r4, #0]
 8004d0a:	1821      	adds	r1, r4, r0
 8004d0c:	428a      	cmp	r2, r1
 8004d0e:	bf04      	itt	eq
 8004d10:	6811      	ldreq	r1, [r2, #0]
 8004d12:	6852      	ldreq	r2, [r2, #4]
 8004d14:	6062      	str	r2, [r4, #4]
 8004d16:	bf04      	itt	eq
 8004d18:	1809      	addeq	r1, r1, r0
 8004d1a:	6021      	streq	r1, [r4, #0]
 8004d1c:	605c      	str	r4, [r3, #4]
 8004d1e:	e7c7      	b.n	8004cb0 <_free_r+0x24>
 8004d20:	bd38      	pop	{r3, r4, r5, pc}
 8004d22:	bf00      	nop
 8004d24:	200000a4 	.word	0x200000a4

08004d28 <_malloc_r>:
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	1ccd      	adds	r5, r1, #3
 8004d2c:	f025 0503 	bic.w	r5, r5, #3
 8004d30:	3508      	adds	r5, #8
 8004d32:	2d0c      	cmp	r5, #12
 8004d34:	bf38      	it	cc
 8004d36:	250c      	movcc	r5, #12
 8004d38:	2d00      	cmp	r5, #0
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	db01      	blt.n	8004d42 <_malloc_r+0x1a>
 8004d3e:	42a9      	cmp	r1, r5
 8004d40:	d903      	bls.n	8004d4a <_malloc_r+0x22>
 8004d42:	230c      	movs	r3, #12
 8004d44:	6033      	str	r3, [r6, #0]
 8004d46:	2000      	movs	r0, #0
 8004d48:	bd70      	pop	{r4, r5, r6, pc}
 8004d4a:	f000 f87d 	bl	8004e48 <__malloc_lock>
 8004d4e:	4a21      	ldr	r2, [pc, #132]	; (8004dd4 <_malloc_r+0xac>)
 8004d50:	6814      	ldr	r4, [r2, #0]
 8004d52:	4621      	mov	r1, r4
 8004d54:	b991      	cbnz	r1, 8004d7c <_malloc_r+0x54>
 8004d56:	4c20      	ldr	r4, [pc, #128]	; (8004dd8 <_malloc_r+0xb0>)
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	b91b      	cbnz	r3, 8004d64 <_malloc_r+0x3c>
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 f863 	bl	8004e28 <_sbrk_r>
 8004d62:	6020      	str	r0, [r4, #0]
 8004d64:	4629      	mov	r1, r5
 8004d66:	4630      	mov	r0, r6
 8004d68:	f000 f85e 	bl	8004e28 <_sbrk_r>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d124      	bne.n	8004dba <_malloc_r+0x92>
 8004d70:	230c      	movs	r3, #12
 8004d72:	6033      	str	r3, [r6, #0]
 8004d74:	4630      	mov	r0, r6
 8004d76:	f000 f868 	bl	8004e4a <__malloc_unlock>
 8004d7a:	e7e4      	b.n	8004d46 <_malloc_r+0x1e>
 8004d7c:	680b      	ldr	r3, [r1, #0]
 8004d7e:	1b5b      	subs	r3, r3, r5
 8004d80:	d418      	bmi.n	8004db4 <_malloc_r+0x8c>
 8004d82:	2b0b      	cmp	r3, #11
 8004d84:	d90f      	bls.n	8004da6 <_malloc_r+0x7e>
 8004d86:	600b      	str	r3, [r1, #0]
 8004d88:	50cd      	str	r5, [r1, r3]
 8004d8a:	18cc      	adds	r4, r1, r3
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f000 f85c 	bl	8004e4a <__malloc_unlock>
 8004d92:	f104 000b 	add.w	r0, r4, #11
 8004d96:	1d23      	adds	r3, r4, #4
 8004d98:	f020 0007 	bic.w	r0, r0, #7
 8004d9c:	1ac3      	subs	r3, r0, r3
 8004d9e:	d0d3      	beq.n	8004d48 <_malloc_r+0x20>
 8004da0:	425a      	negs	r2, r3
 8004da2:	50e2      	str	r2, [r4, r3]
 8004da4:	e7d0      	b.n	8004d48 <_malloc_r+0x20>
 8004da6:	428c      	cmp	r4, r1
 8004da8:	684b      	ldr	r3, [r1, #4]
 8004daa:	bf16      	itet	ne
 8004dac:	6063      	strne	r3, [r4, #4]
 8004dae:	6013      	streq	r3, [r2, #0]
 8004db0:	460c      	movne	r4, r1
 8004db2:	e7eb      	b.n	8004d8c <_malloc_r+0x64>
 8004db4:	460c      	mov	r4, r1
 8004db6:	6849      	ldr	r1, [r1, #4]
 8004db8:	e7cc      	b.n	8004d54 <_malloc_r+0x2c>
 8004dba:	1cc4      	adds	r4, r0, #3
 8004dbc:	f024 0403 	bic.w	r4, r4, #3
 8004dc0:	42a0      	cmp	r0, r4
 8004dc2:	d005      	beq.n	8004dd0 <_malloc_r+0xa8>
 8004dc4:	1a21      	subs	r1, r4, r0
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f000 f82e 	bl	8004e28 <_sbrk_r>
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d0cf      	beq.n	8004d70 <_malloc_r+0x48>
 8004dd0:	6025      	str	r5, [r4, #0]
 8004dd2:	e7db      	b.n	8004d8c <_malloc_r+0x64>
 8004dd4:	200000a4 	.word	0x200000a4
 8004dd8:	200000a8 	.word	0x200000a8

08004ddc <_realloc_r>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	4607      	mov	r7, r0
 8004de0:	4614      	mov	r4, r2
 8004de2:	460e      	mov	r6, r1
 8004de4:	b921      	cbnz	r1, 8004df0 <_realloc_r+0x14>
 8004de6:	4611      	mov	r1, r2
 8004de8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004dec:	f7ff bf9c 	b.w	8004d28 <_malloc_r>
 8004df0:	b922      	cbnz	r2, 8004dfc <_realloc_r+0x20>
 8004df2:	f7ff ff4b 	bl	8004c8c <_free_r>
 8004df6:	4625      	mov	r5, r4
 8004df8:	4628      	mov	r0, r5
 8004dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dfc:	f000 f826 	bl	8004e4c <_malloc_usable_size_r>
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d20f      	bcs.n	8004e24 <_realloc_r+0x48>
 8004e04:	4621      	mov	r1, r4
 8004e06:	4638      	mov	r0, r7
 8004e08:	f7ff ff8e 	bl	8004d28 <_malloc_r>
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d0f2      	beq.n	8004df8 <_realloc_r+0x1c>
 8004e12:	4631      	mov	r1, r6
 8004e14:	4622      	mov	r2, r4
 8004e16:	f7ff ff15 	bl	8004c44 <memcpy>
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	f7ff ff35 	bl	8004c8c <_free_r>
 8004e22:	e7e9      	b.n	8004df8 <_realloc_r+0x1c>
 8004e24:	4635      	mov	r5, r6
 8004e26:	e7e7      	b.n	8004df8 <_realloc_r+0x1c>

08004e28 <_sbrk_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4c06      	ldr	r4, [pc, #24]	; (8004e44 <_sbrk_r+0x1c>)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	4605      	mov	r5, r0
 8004e30:	4608      	mov	r0, r1
 8004e32:	6023      	str	r3, [r4, #0]
 8004e34:	f7fc fe7e 	bl	8001b34 <_sbrk>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_sbrk_r+0x1a>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_sbrk_r+0x1a>
 8004e40:	602b      	str	r3, [r5, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	20000214 	.word	0x20000214

08004e48 <__malloc_lock>:
 8004e48:	4770      	bx	lr

08004e4a <__malloc_unlock>:
 8004e4a:	4770      	bx	lr

08004e4c <_malloc_usable_size_r>:
 8004e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e50:	1f18      	subs	r0, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfbc      	itt	lt
 8004e56:	580b      	ldrlt	r3, [r1, r0]
 8004e58:	18c0      	addlt	r0, r0, r3
 8004e5a:	4770      	bx	lr

08004e5c <_init>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr

08004e68 <_fini>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr
