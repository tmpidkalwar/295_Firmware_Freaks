
WheelChair_Nucelo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf4  08004cf4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cfc  08004cfc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000409c  20000018  08004d1c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040b4  08004d1c  000240b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132c7  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bd7  00000000  00000000  0003330f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001188  00000000  00000000  00035ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001030  00000000  00000000  00037070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023bed  00000000  00000000  000380a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc5b  00000000  00000000  0005bc8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9153  00000000  00000000  000698e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142a3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049bc  00000000  00000000  00142ab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c68 	.word	0x08004c68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	08004c68 	.word	0x08004c68

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2iz>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d215      	bcs.n	80009e2 <__aeabi_d2iz+0x36>
 80009b6:	d511      	bpl.n	80009dc <__aeabi_d2iz+0x30>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d912      	bls.n	80009e8 <__aeabi_d2iz+0x3c>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d2:	fa23 f002 	lsr.w	r0, r3, r2
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d105      	bne.n	80009f4 <__aeabi_d2iz+0x48>
 80009e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	bf08      	it	eq
 80009ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b972 	b.w	8000cf8 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9e08      	ldr	r6, [sp, #32]
 8000a32:	4604      	mov	r4, r0
 8000a34:	4688      	mov	r8, r1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d14b      	bne.n	8000ad2 <__udivmoddi4+0xa6>
 8000a3a:	428a      	cmp	r2, r1
 8000a3c:	4615      	mov	r5, r2
 8000a3e:	d967      	bls.n	8000b10 <__udivmoddi4+0xe4>
 8000a40:	fab2 f282 	clz	r2, r2
 8000a44:	b14a      	cbz	r2, 8000a5a <__udivmoddi4+0x2e>
 8000a46:	f1c2 0720 	rsb	r7, r2, #32
 8000a4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a52:	4095      	lsls	r5, r2
 8000a54:	ea47 0803 	orr.w	r8, r7, r3
 8000a58:	4094      	lsls	r4, r2
 8000a5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a5e:	0c23      	lsrs	r3, r4, #16
 8000a60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a64:	fa1f fc85 	uxth.w	ip, r5
 8000a68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a70:	fb07 f10c 	mul.w	r1, r7, ip
 8000a74:	4299      	cmp	r1, r3
 8000a76:	d909      	bls.n	8000a8c <__udivmoddi4+0x60>
 8000a78:	18eb      	adds	r3, r5, r3
 8000a7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a7e:	f080 811b 	bcs.w	8000cb8 <__udivmoddi4+0x28c>
 8000a82:	4299      	cmp	r1, r3
 8000a84:	f240 8118 	bls.w	8000cb8 <__udivmoddi4+0x28c>
 8000a88:	3f02      	subs	r7, #2
 8000a8a:	442b      	add	r3, r5
 8000a8c:	1a5b      	subs	r3, r3, r1
 8000a8e:	b2a4      	uxth	r4, r4
 8000a90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa0:	45a4      	cmp	ip, r4
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x8c>
 8000aa4:	192c      	adds	r4, r5, r4
 8000aa6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aaa:	f080 8107 	bcs.w	8000cbc <__udivmoddi4+0x290>
 8000aae:	45a4      	cmp	ip, r4
 8000ab0:	f240 8104 	bls.w	8000cbc <__udivmoddi4+0x290>
 8000ab4:	3802      	subs	r0, #2
 8000ab6:	442c      	add	r4, r5
 8000ab8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000abc:	eba4 040c 	sub.w	r4, r4, ip
 8000ac0:	2700      	movs	r7, #0
 8000ac2:	b11e      	cbz	r6, 8000acc <__udivmoddi4+0xa0>
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e9c6 4300 	strd	r4, r3, [r6]
 8000acc:	4639      	mov	r1, r7
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d909      	bls.n	8000aea <__udivmoddi4+0xbe>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	f000 80eb 	beq.w	8000cb2 <__udivmoddi4+0x286>
 8000adc:	2700      	movs	r7, #0
 8000ade:	e9c6 0100 	strd	r0, r1, [r6]
 8000ae2:	4638      	mov	r0, r7
 8000ae4:	4639      	mov	r1, r7
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	fab3 f783 	clz	r7, r3
 8000aee:	2f00      	cmp	r7, #0
 8000af0:	d147      	bne.n	8000b82 <__udivmoddi4+0x156>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0xd0>
 8000af6:	4282      	cmp	r2, r0
 8000af8:	f200 80fa 	bhi.w	8000cf0 <__udivmoddi4+0x2c4>
 8000afc:	1a84      	subs	r4, r0, r2
 8000afe:	eb61 0303 	sbc.w	r3, r1, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	4698      	mov	r8, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d0e0      	beq.n	8000acc <__udivmoddi4+0xa0>
 8000b0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b0e:	e7dd      	b.n	8000acc <__udivmoddi4+0xa0>
 8000b10:	b902      	cbnz	r2, 8000b14 <__udivmoddi4+0xe8>
 8000b12:	deff      	udf	#255	; 0xff
 8000b14:	fab2 f282 	clz	r2, r2
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	f040 808f 	bne.w	8000c3c <__udivmoddi4+0x210>
 8000b1e:	1b49      	subs	r1, r1, r5
 8000b20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b24:	fa1f f885 	uxth.w	r8, r5
 8000b28:	2701      	movs	r7, #1
 8000b2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b38:	fb08 f10c 	mul.w	r1, r8, ip
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0x124>
 8000b40:	18eb      	adds	r3, r5, r3
 8000b42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x122>
 8000b48:	4299      	cmp	r1, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2bc>
 8000b4e:	4684      	mov	ip, r0
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	b2a3      	uxth	r3, r4
 8000b54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b60:	fb08 f800 	mul.w	r8, r8, r0
 8000b64:	45a0      	cmp	r8, r4
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x14c>
 8000b68:	192c      	adds	r4, r5, r4
 8000b6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x14a>
 8000b70:	45a0      	cmp	r8, r4
 8000b72:	f200 80b6 	bhi.w	8000ce2 <__udivmoddi4+0x2b6>
 8000b76:	4618      	mov	r0, r3
 8000b78:	eba4 0408 	sub.w	r4, r4, r8
 8000b7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b80:	e79f      	b.n	8000ac2 <__udivmoddi4+0x96>
 8000b82:	f1c7 0c20 	rsb	ip, r7, #32
 8000b86:	40bb      	lsls	r3, r7
 8000b88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b90:	fa01 f407 	lsl.w	r4, r1, r7
 8000b94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba0:	4325      	orrs	r5, r4
 8000ba2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ba6:	0c2c      	lsrs	r4, r5, #16
 8000ba8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bac:	fa1f fa8e 	uxth.w	sl, lr
 8000bb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	fa02 f207 	lsl.w	r2, r2, r7
 8000bbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000bc2:	d90b      	bls.n	8000bdc <__udivmoddi4+0x1b0>
 8000bc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bcc:	f080 8087 	bcs.w	8000cde <__udivmoddi4+0x2b2>
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	f240 8084 	bls.w	8000cde <__udivmoddi4+0x2b2>
 8000bd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bda:	4473      	add	r3, lr
 8000bdc:	1b1b      	subs	r3, r3, r4
 8000bde:	b2ad      	uxth	r5, r5
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf0:	45a2      	cmp	sl, r4
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x1da>
 8000bf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfc:	d26b      	bcs.n	8000cd6 <__udivmoddi4+0x2aa>
 8000bfe:	45a2      	cmp	sl, r4
 8000c00:	d969      	bls.n	8000cd6 <__udivmoddi4+0x2aa>
 8000c02:	3802      	subs	r0, #2
 8000c04:	4474      	add	r4, lr
 8000c06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c0e:	eba4 040a 	sub.w	r4, r4, sl
 8000c12:	454c      	cmp	r4, r9
 8000c14:	46c2      	mov	sl, r8
 8000c16:	464b      	mov	r3, r9
 8000c18:	d354      	bcc.n	8000cc4 <__udivmoddi4+0x298>
 8000c1a:	d051      	beq.n	8000cc0 <__udivmoddi4+0x294>
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d069      	beq.n	8000cf4 <__udivmoddi4+0x2c8>
 8000c20:	ebb1 050a 	subs.w	r5, r1, sl
 8000c24:	eb64 0403 	sbc.w	r4, r4, r3
 8000c28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c2c:	40fd      	lsrs	r5, r7
 8000c2e:	40fc      	lsrs	r4, r7
 8000c30:	ea4c 0505 	orr.w	r5, ip, r5
 8000c34:	e9c6 5400 	strd	r5, r4, [r6]
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e747      	b.n	8000acc <__udivmoddi4+0xa0>
 8000c3c:	f1c2 0320 	rsb	r3, r2, #32
 8000c40:	fa20 f703 	lsr.w	r7, r0, r3
 8000c44:	4095      	lsls	r5, r2
 8000c46:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c52:	4338      	orrs	r0, r7
 8000c54:	0c01      	lsrs	r1, r0, #16
 8000c56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c5a:	fa1f f885 	uxth.w	r8, r5
 8000c5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c66:	fb07 f308 	mul.w	r3, r7, r8
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c70:	d907      	bls.n	8000c82 <__udivmoddi4+0x256>
 8000c72:	1869      	adds	r1, r5, r1
 8000c74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c78:	d22f      	bcs.n	8000cda <__udivmoddi4+0x2ae>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d92d      	bls.n	8000cda <__udivmoddi4+0x2ae>
 8000c7e:	3f02      	subs	r7, #2
 8000c80:	4429      	add	r1, r5
 8000c82:	1acb      	subs	r3, r1, r3
 8000c84:	b281      	uxth	r1, r0
 8000c86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c92:	fb00 f308 	mul.w	r3, r0, r8
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d907      	bls.n	8000caa <__udivmoddi4+0x27e>
 8000c9a:	1869      	adds	r1, r5, r1
 8000c9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca0:	d217      	bcs.n	8000cd2 <__udivmoddi4+0x2a6>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d915      	bls.n	8000cd2 <__udivmoddi4+0x2a6>
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	4429      	add	r1, r5
 8000caa:	1ac9      	subs	r1, r1, r3
 8000cac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb0:	e73b      	b.n	8000b2a <__udivmoddi4+0xfe>
 8000cb2:	4637      	mov	r7, r6
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	e709      	b.n	8000acc <__udivmoddi4+0xa0>
 8000cb8:	4607      	mov	r7, r0
 8000cba:	e6e7      	b.n	8000a8c <__udivmoddi4+0x60>
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	e6fb      	b.n	8000ab8 <__udivmoddi4+0x8c>
 8000cc0:	4541      	cmp	r1, r8
 8000cc2:	d2ab      	bcs.n	8000c1c <__udivmoddi4+0x1f0>
 8000cc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ccc:	3801      	subs	r0, #1
 8000cce:	4613      	mov	r3, r2
 8000cd0:	e7a4      	b.n	8000c1c <__udivmoddi4+0x1f0>
 8000cd2:	4660      	mov	r0, ip
 8000cd4:	e7e9      	b.n	8000caa <__udivmoddi4+0x27e>
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	e795      	b.n	8000c06 <__udivmoddi4+0x1da>
 8000cda:	4667      	mov	r7, ip
 8000cdc:	e7d1      	b.n	8000c82 <__udivmoddi4+0x256>
 8000cde:	4681      	mov	r9, r0
 8000ce0:	e77c      	b.n	8000bdc <__udivmoddi4+0x1b0>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	442c      	add	r4, r5
 8000ce6:	e747      	b.n	8000b78 <__udivmoddi4+0x14c>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	442b      	add	r3, r5
 8000cee:	e72f      	b.n	8000b50 <__udivmoddi4+0x124>
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	e708      	b.n	8000b06 <__udivmoddi4+0xda>
 8000cf4:	4637      	mov	r7, r6
 8000cf6:	e6e9      	b.n	8000acc <__udivmoddi4+0xa0>

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <vApplicationGetIdleTaskMemory+0x30>)
 8000d12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000034 	.word	0x20000034
 8000d2c:	20000088 	.word	0x20000088

08000d30 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	ed87 0a05 	vstr	s0, [r7, #20]
 8000d3a:	edc7 0a04 	vstr	s1, [r7, #16]
 8000d3e:	ed87 1a03 	vstr	s2, [r7, #12]
 8000d42:	edc7 1a02 	vstr	s3, [r7, #8]
 8000d46:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d56:	edd7 6a01 	vldr	s13, [r7, #4]
 8000d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d62:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d66:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d76:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b5b0      	push	{r4, r5, r7, lr}
 8000d8e:	b08e      	sub	sp, #56	; 0x38
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d92:	f000 fc91 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d96:	f000 f84d 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9a:	f000 f941 	bl	8001020 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d9e:	f000 f915 	bl	8000fcc <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000da2:	f000 f8b5 	bl	8000f10 <MX_DAC_Init>
  MX_UART4_Init();
 8000da6:	f000 f8e7 	bl	8000f78 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000daa:	2100      	movs	r1, #0
 8000dac:	481c      	ldr	r0, [pc, #112]	; (8000e20 <main+0x94>)
 8000dae:	f000 fdeb 	bl	8001988 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000db2:	2110      	movs	r1, #16
 8000db4:	481a      	ldr	r0, [pc, #104]	; (8000e20 <main+0x94>)
 8000db6:	f000 fde7 	bl	8001988 <HAL_DAC_Start>

  HAL_DACEx_DualSetValue(&hdac, DAC_ALIGN_12B_R, 2.5*(0xfff+1)/3.3, 2.5*(0xfff+1)/3.3);
 8000dba:	f640 431f 	movw	r3, #3103	; 0xc1f
 8000dbe:	f640 421f 	movw	r2, #3103	; 0xc1f
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4816      	ldr	r0, [pc, #88]	; (8000e20 <main+0x94>)
 8000dc6:	f000 fee6 	bl	8001b96 <HAL_DACEx_DualSetValue>
  HAL_Delay(5000);
 8000dca:	f241 3088 	movw	r0, #5000	; 0x1388
 8000dce:	f000 fcb5 	bl	800173c <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, StarUartTask, osPriorityNormal, 0, 128);
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <main+0x98>)
 8000dd4:	f107 041c 	add.w	r4, r7, #28
 8000dd8:	461d      	mov	r5, r3
 8000dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000de2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f002 fd10 	bl	8003812 <osThreadCreate>
 8000df2:	4602      	mov	r2, r0
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <main+0x9c>)
 8000df6:	601a      	str	r2, [r3, #0]

  /* definition and creation of lowlevelTask */
  osThreadDef(lowlevelTask, StartLowlevelTask, osPriorityNormal, 0, 128);
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <main+0xa0>)
 8000dfa:	463c      	mov	r4, r7
 8000dfc:	461d      	mov	r5, r3
 8000dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lowlevelTaskHandle = osThreadCreate(osThread(lowlevelTask), NULL);
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 fcff 	bl	8003812 <osThreadCreate>
 8000e14:	4602      	mov	r2, r0
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <main+0xa4>)
 8000e18:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e1a:	f002 fcf3 	bl	8003804 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <main+0x92>
 8000e20:	20003fdc 	.word	0x20003fdc
 8000e24:	08004c8c 	.word	0x08004c8c
 8000e28:	20003fd8 	.word	0x20003fd8
 8000e2c:	08004cb8 	.word	0x08004cb8
 8000e30:	20003fd4 	.word	0x20003fd4

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2234      	movs	r2, #52	; 0x34
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 ff08 	bl	8004c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <SystemClock_Config+0xd4>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a29      	ldr	r2, [pc, #164]	; (8000f08 <SystemClock_Config+0xd4>)
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <SystemClock_Config+0xd4>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <SystemClock_Config+0xd8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e80:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <SystemClock_Config+0xd8>)
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <SystemClock_Config+0xd8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000eac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000eb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fb34 	bl	8002530 <HAL_RCC_OscConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ece:	f000 fa35 	bl	800133c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	2102      	movs	r1, #2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 f832 	bl	8001f58 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000efa:	f000 fa1f 	bl	800133c <Error_Handler>
  }
}
 8000efe:	bf00      	nop
 8000f00:	3750      	adds	r7, #80	; 0x50
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40007000 	.word	0x40007000

08000f10 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f16:	463b      	mov	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_DAC_Init+0x60>)
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <MX_DAC_Init+0x64>)
 8000f22:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <MX_DAC_Init+0x60>)
 8000f26:	f000 fd0d 	bl	8001944 <HAL_DAC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f30:	f000 fa04 	bl	800133c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4619      	mov	r1, r3
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <MX_DAC_Init+0x60>)
 8000f44:	f000 fdda 	bl	8001afc <HAL_DAC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f4e:	f000 f9f5 	bl	800133c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	2210      	movs	r2, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_DAC_Init+0x60>)
 8000f5a:	f000 fdcf 	bl	8001afc <HAL_DAC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000f64:	f000 f9ea 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20003fdc 	.word	0x20003fdc
 8000f74:	40007400 	.word	0x40007400

08000f78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_UART4_Init+0x4c>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <MX_UART4_Init+0x50>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_UART4_Init+0x4c>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_UART4_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_UART4_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_UART4_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_UART4_Init+0x4c>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_UART4_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_UART4_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_UART4_Init+0x4c>)
 8000fb0:	f001 ff56 	bl	8002e60 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000fba:	f000 f9bf 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20003ff0 	.word	0x20003ff0
 8000fc8:	40004c00 	.word	0x40004c00

08000fcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_USART2_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8001004:	f001 ff2c 	bl	8002e60 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f000 f995 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20004030 	.word	0x20004030
 800101c:	40004400 	.word	0x40004400

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <MX_GPIO_Init+0xd0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <MX_GPIO_Init+0xd0>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <MX_GPIO_Init+0xd0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <MX_GPIO_Init+0xd0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <MX_GPIO_Init+0xd0>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_GPIO_Init+0xd0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_GPIO_Init+0xd0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <MX_GPIO_Init+0xd0>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_GPIO_Init+0xd0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_GPIO_Init+0xd0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <MX_GPIO_Init+0xd0>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_GPIO_Init+0xd0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	4812      	ldr	r0, [pc, #72]	; (80010f4 <MX_GPIO_Init+0xd4>)
 80010ac:	f000 ff3a 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_GPIO_Init+0xd8>)
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <MX_GPIO_Init+0xdc>)
 80010c6:	f000 fd9b 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ca:	2340      	movs	r3, #64	; 0x40
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_GPIO_Init+0xd4>)
 80010e2:	f000 fd8d 	bl	8001c00 <HAL_GPIO_Init>

}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	; 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	10210000 	.word	0x10210000
 80010fc:	40020800 	.word	0x40020800

08001100 <StarUartTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StarUartTask */
void StarUartTask(void const * argument)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b0a3      	sub	sp, #140	; 0x8c
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	 // byte[0] = 255; byte[1] = 10; byte[2] = 100;

	  status = HAL_UART_Receive(&huart4, byte, 6, 2000);
 8001108:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800110c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001110:	2206      	movs	r2, #6
 8001112:	486d      	ldr	r0, [pc, #436]	; (80012c8 <StarUartTask+0x1c8>)
 8001114:	f001 fef1 	bl	8002efa <HAL_UART_Receive>
 8001118:	4603      	mov	r3, r0
 800111a:	67fb      	str	r3, [r7, #124]	; 0x7c

//	  sprintf(buff, "status %d\r\n",status);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
//	  HAL_Delay(500);

	  if(status==3){
 800111c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800111e:	2b03      	cmp	r3, #3
 8001120:	d106      	bne.n	8001130 <StarUartTask+0x30>
		  lin_vel=10;
 8001122:	230a      	movs	r3, #10
 8001124:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  ang_vel=100;
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800112e:	e029      	b.n	8001184 <StarUartTask+0x84>
	  }else{
		  for(int i=0;i<4;i++){
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001136:	e021      	b.n	800117c <StarUartTask+0x7c>
			  if(byte[i]==255){
 8001138:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800113c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001140:	4413      	add	r3, r2
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2bff      	cmp	r3, #255	; 0xff
 8001146:	d114      	bne.n	8001172 <StarUartTask+0x72>
				  lin_vel=byte[i+1];
 8001148:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800114c:	3301      	adds	r3, #1
 800114e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001152:	4413      	add	r3, r2
 8001154:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001158:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				  ang_vel=byte[i+2];
 800115c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001160:	3302      	adds	r3, #2
 8001162:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001166:	4413      	add	r3, r2
 8001168:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800116c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				  break;
 8001170:	e008      	b.n	8001184 <StarUartTask+0x84>
		  for(int i=0;i<4;i++){
 8001172:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001176:	3301      	adds	r3, #1
 8001178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800117c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001180:	2b03      	cmp	r3, #3
 8001182:	ddd9      	ble.n	8001138 <StarUartTask+0x38>
			  }
		  }
	  }

	  if(lin_vel<10){
 8001184:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001188:	2b09      	cmp	r3, #9
 800118a:	d803      	bhi.n	8001194 <StarUartTask+0x94>
		  x_out=2.1;
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <StarUartTask+0x1cc>)
 800118e:	4a50      	ldr	r2, [pc, #320]	; (80012d0 <StarUartTask+0x1d0>)
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e01e      	b.n	80011d2 <StarUartTask+0xd2>
	  }else if(lin_vel==10){
 8001194:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001198:	2b0a      	cmp	r3, #10
 800119a:	d103      	bne.n	80011a4 <StarUartTask+0xa4>
		  x_out=2.5;
 800119c:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <StarUartTask+0x1cc>)
 800119e:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <StarUartTask+0x1d4>)
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e016      	b.n	80011d2 <StarUartTask+0xd2>
	  }else{
		  x_out = map((float)lin_vel,10,90,2.8,3);
 80011a4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b0:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 80011b4:	eddf 1a48 	vldr	s3, [pc, #288]	; 80012d8 <StarUartTask+0x1d8>
 80011b8:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80012dc <StarUartTask+0x1dc>
 80011bc:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80011c0:	eeb0 0a67 	vmov.f32	s0, s15
 80011c4:	f7ff fdb4 	bl	8000d30 <map>
 80011c8:	eef0 7a40 	vmov.f32	s15, s0
 80011cc:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <StarUartTask+0x1cc>)
 80011ce:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if(ang_vel==100){
 80011d2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	d103      	bne.n	80011e2 <StarUartTask+0xe2>
		  y_out=2.5;
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <StarUartTask+0x1e0>)
 80011dc:	4a3d      	ldr	r2, [pc, #244]	; (80012d4 <StarUartTask+0x1d4>)
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e036      	b.n	8001250 <StarUartTask+0x150>
	  }else if(ang_vel<100){
 80011e2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80011e6:	2b63      	cmp	r3, #99	; 0x63
 80011e8:	d817      	bhi.n	800121a <StarUartTask+0x11a>
		  y_out = map((float)ang_vel,0,99,1.9,2.2);
 80011ea:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f6:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 80012e4 <StarUartTask+0x1e4>
 80011fa:	eddf 1a3b 	vldr	s3, [pc, #236]	; 80012e8 <StarUartTask+0x1e8>
 80011fe:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 80012ec <StarUartTask+0x1ec>
 8001202:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80012f0 <StarUartTask+0x1f0>
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	f7ff fd91 	bl	8000d30 <map>
 800120e:	eef0 7a40 	vmov.f32	s15, s0
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <StarUartTask+0x1e0>)
 8001214:	edc3 7a00 	vstr	s15, [r3]
 8001218:	e01a      	b.n	8001250 <StarUartTask+0x150>
	  }else if(ang_vel>100){
 800121a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d916      	bls.n	8001250 <StarUartTask+0x150>
		  y_out = map((float)ang_vel,101,200,2.8,3.3);
 8001222:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800122e:	ed9f 2a31 	vldr	s4, [pc, #196]	; 80012f4 <StarUartTask+0x1f4>
 8001232:	eddf 1a29 	vldr	s3, [pc, #164]	; 80012d8 <StarUartTask+0x1d8>
 8001236:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80012f8 <StarUartTask+0x1f8>
 800123a:	eddf 0a30 	vldr	s1, [pc, #192]	; 80012fc <StarUartTask+0x1fc>
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f7ff fd75 	bl	8000d30 <map>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <StarUartTask+0x1e0>)
 800124c:	edc3 7a00 	vstr	s15, [r3]
	  }

	  int x_in = x_out*(0xfff+1)/3.3;
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <StarUartTask+0x1cc>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001300 <StarUartTask+0x200>
 800125a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125e:	ee17 0a90 	vmov	r0, s15
 8001262:	f7ff f939 	bl	80004d8 <__aeabi_f2d>
 8001266:	a316      	add	r3, pc, #88	; (adr r3, 80012c0 <StarUartTask+0x1c0>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff fab6 	bl	80007dc <__aeabi_ddiv>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f7ff fb98 	bl	80009ac <__aeabi_d2iz>
 800127c:	4603      	mov	r3, r0
 800127e:	67bb      	str	r3, [r7, #120]	; 0x78
	  int y_in = y_out*(0xfff+1)/3.3;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <StarUartTask+0x1e0>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001300 <StarUartTask+0x200>
 800128a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128e:	ee17 0a90 	vmov	r0, s15
 8001292:	f7ff f921 	bl	80004d8 <__aeabi_f2d>
 8001296:	a30a      	add	r3, pc, #40	; (adr r3, 80012c0 <StarUartTask+0x1c0>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff fa9e 	bl	80007dc <__aeabi_ddiv>
 80012a0:	4603      	mov	r3, r0
 80012a2:	460c      	mov	r4, r1
 80012a4:	4618      	mov	r0, r3
 80012a6:	4621      	mov	r1, r4
 80012a8:	f7ff fb80 	bl	80009ac <__aeabi_d2iz>
 80012ac:	4603      	mov	r3, r0
 80012ae:	677b      	str	r3, [r7, #116]	; 0x74
	  HAL_DACEx_DualSetValue(&hdac, DAC_ALIGN_12B_R, x_in, y_in);
 80012b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80012b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012b4:	2100      	movs	r1, #0
 80012b6:	4813      	ldr	r0, [pc, #76]	; (8001304 <StarUartTask+0x204>)
 80012b8:	f000 fc6d 	bl	8001b96 <HAL_DACEx_DualSetValue>
  {
 80012bc:	e724      	b.n	8001108 <StarUartTask+0x8>
 80012be:	bf00      	nop
 80012c0:	66666666 	.word	0x66666666
 80012c4:	400a6666 	.word	0x400a6666
 80012c8:	20003ff0 	.word	0x20003ff0
 80012cc:	20000000 	.word	0x20000000
 80012d0:	40066666 	.word	0x40066666
 80012d4:	40200000 	.word	0x40200000
 80012d8:	40333333 	.word	0x40333333
 80012dc:	42b40000 	.word	0x42b40000
 80012e0:	20000004 	.word	0x20000004
 80012e4:	400ccccd 	.word	0x400ccccd
 80012e8:	3ff33333 	.word	0x3ff33333
 80012ec:	42c60000 	.word	0x42c60000
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40533333 	.word	0x40533333
 80012f8:	43480000 	.word	0x43480000
 80012fc:	42ca0000 	.word	0x42ca0000
 8001300:	45800000 	.word	0x45800000
 8001304:	20003fdc 	.word	0x20003fdc

08001308 <StartLowlevelTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowlevelTask */
void StartLowlevelTask(void const * argument)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
//	  HAL_Delay(500);
//	x_in = x_out*(0xfff+1)/3.3;
//	y_in = y_out*(0xfff+1)/3.3;
//	HAL_DACEx_DualSetValue(&hdac, DAC_ALIGN_12B_R, x_in, y_in);
    osDelay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f002 faca 	bl	80038aa <osDelay>
 8001316:	e7fb      	b.n	8001310 <StartLowlevelTask+0x8>

08001318 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800132a:	f000 f9e7 	bl	80016fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40001000 	.word	0x40001000

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_MspInit+0x54>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_MspInit+0x54>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_MspInit+0x54>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_MspInit+0x54>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_MspInit+0x54>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_MspInit+0x54>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	210f      	movs	r1, #15
 800138e:	f06f 0001 	mvn.w	r0, #1
 8001392:	f000 faad 	bl	80018f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <HAL_DAC_MspInit+0x8c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12f      	bne.n	8001426 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_DAC_MspInit+0x90>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_DAC_MspInit+0x90>)
 80013d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_DAC_MspInit+0x90>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_DAC_MspInit+0x90>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_DAC_MspInit+0x90>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_DAC_MspInit+0x90>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013fe:	2330      	movs	r3, #48	; 0x30
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	2303      	movs	r3, #3
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4809      	ldr	r0, [pc, #36]	; (8001438 <HAL_DAC_MspInit+0x94>)
 8001412:	f000 fbf5 	bl	8001c00 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2036      	movs	r0, #54	; 0x36
 800141c:	f000 fa68 	bl	80018f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001420:	2036      	movs	r0, #54	; 0x36
 8001422:	f000 fa81 	bl	8001928 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40007400 	.word	0x40007400
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000

0800143c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a32      	ldr	r2, [pc, #200]	; (8001524 <HAL_UART_MspInit+0xe8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12c      	bne.n	80014b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	4b31      	ldr	r3, [pc, #196]	; (8001528 <HAL_UART_MspInit+0xec>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a30      	ldr	r2, [pc, #192]	; (8001528 <HAL_UART_MspInit+0xec>)
 8001468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_UART_MspInit+0xec>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_UART_MspInit+0xec>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a29      	ldr	r2, [pc, #164]	; (8001528 <HAL_UART_MspInit+0xec>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <HAL_UART_MspInit+0xec>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001496:	2303      	movs	r3, #3
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149e:	2301      	movs	r3, #1
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014a6:	2308      	movs	r3, #8
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	481e      	ldr	r0, [pc, #120]	; (800152c <HAL_UART_MspInit+0xf0>)
 80014b2:	f000 fba5 	bl	8001c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014b6:	e030      	b.n	800151a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_UART_MspInit+0xf4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12b      	bne.n	800151a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_UART_MspInit+0xec>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_UART_MspInit+0xec>)
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0xec>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_UART_MspInit+0xec>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_UART_MspInit+0xec>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_UART_MspInit+0xec>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014fa:	230c      	movs	r3, #12
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150a:	2307      	movs	r3, #7
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_UART_MspInit+0xf0>)
 8001516:	f000 fb73 	bl	8001c00 <HAL_GPIO_Init>
}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	; 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40004c00 	.word	0x40004c00
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000
 8001530:	40004400 	.word	0x40004400

08001534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	2036      	movs	r0, #54	; 0x36
 800154a:	f000 f9d1 	bl	80018f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800154e:	2036      	movs	r0, #54	; 0x36
 8001550:	f000 f9ea 	bl	8001928 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_InitTick+0xa4>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <HAL_InitTick+0xa4>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <HAL_InitTick+0xa4>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001570:	f107 0210 	add.w	r2, r7, #16
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f000 fe06 	bl	800218c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001580:	f000 fddc 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8001584:	4603      	mov	r3, r0
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <HAL_InitTick+0xa8>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	3b01      	subs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_InitTick+0xac>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <HAL_InitTick+0xb0>)
 800159c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_InitTick+0xac>)
 80015a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_InitTick+0xac>)
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_InitTick+0xac>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_InitTick+0xac>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <HAL_InitTick+0xac>)
 80015ba:	f001 fa13 	bl	80029e4 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d104      	bne.n	80015ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <HAL_InitTick+0xac>)
 80015c6:	f001 fa42 	bl	8002a4e <HAL_TIM_Base_Start_IT>
 80015ca:	4603      	mov	r3, r0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3730      	adds	r7, #48	; 0x30
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	20004070 	.word	0x20004070
 80015e4:	40001000 	.word	0x40001000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <TIM6_DAC_IRQHandler+0x14>)
 8001622:	f000 fa17 	bl	8001a54 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <TIM6_DAC_IRQHandler+0x18>)
 8001628:	f001 fa35 	bl	8002a96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20003fdc 	.word	0x20003fdc
 8001634:	20004070 	.word	0x20004070

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <SystemInit+0x28>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a07      	ldr	r2, [pc, #28]	; (8001660 <SystemInit+0x28>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <SystemInit+0x28>)
 800164e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001652:	609a      	str	r2, [r3, #8]
#endif
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800169c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001668:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800166a:	e003      	b.n	8001674 <LoopCopyDataInit>

0800166c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800166e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001670:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001672:	3104      	adds	r1, #4

08001674 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001678:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800167a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800167c:	d3f6      	bcc.n	800166c <CopyDataInit>
  ldr  r2, =_sbss
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001680:	e002      	b.n	8001688 <LoopFillZerobss>

08001682 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001682:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001684:	f842 3b04 	str.w	r3, [r2], #4

08001688 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800168a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800168c:	d3f9      	bcc.n	8001682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800168e:	f7ff ffd3 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001692:	f003 fabd 	bl	8004c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff fb79 	bl	8000d8c <main>
  bx  lr    
 800169a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016a0:	08004d04 	.word	0x08004d04
  ldr  r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016a8:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80016ac:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80016b0:	200040b4 	.word	0x200040b4

080016b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <HAL_Init+0x40>)
 80016c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_Init+0x40>)
 80016ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <HAL_Init+0x40>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e0:	2003      	movs	r0, #3
 80016e2:	f000 f8fa 	bl	80018da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff ff24 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ec:	f7ff fe2e 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023c00 	.word	0x40023c00

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000010 	.word	0x20000010
 8001720:	200040b0 	.word	0x200040b0

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	200040b0 	.word	0x200040b0

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_Delay+0x40>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000010 	.word	0x20000010

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff4c 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001902:	f7ff ff61 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001906:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	6978      	ldr	r0, [r7, #20]
 800190e:	f7ff ffb1 	bl	8001874 <NVIC_EncodePriority>
 8001912:	4602      	mov	r2, r0
 8001914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff80 	bl	8001820 <__NVIC_SetPriority>
}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff54 	bl	80017e4 <__NVIC_EnableIRQ>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e014      	b.n	8001980 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	791b      	ldrb	r3, [r3, #4]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fd1c 	bl	80013a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	795b      	ldrb	r3, [r3, #5]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_DAC_Start+0x1e>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e050      	b.n	8001a48 <HAL_DAC_Start+0xc0>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	409a      	lsls	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11a      	bne.n	8001a02 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019e2:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d127      	bne.n	8001a3a <HAL_DAC_Start+0xb2>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b38      	cmp	r3, #56	; 0x38
 80019ee:	d124      	bne.n	8001a3a <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	e01b      	b.n	8001a3a <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a0c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001a18:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a20:	d10b      	bne.n	8001a3a <HAL_DAC_Start+0xb2>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001a28:	d107      	bne.n	8001a3a <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0202 	orr.w	r2, r2, #2
 8001a38:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6a:	d118      	bne.n	8001a9e <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a96:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f825 	bl	8001ae8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aac:	d118      	bne.n	8001ae0 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	f043 0202 	orr.w	r2, r3, #2
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001ad8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f886 	bl	8001bec <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	795b      	ldrb	r3, [r3, #5]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_DAC_ConfigChannel+0x20>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e036      	b.n	8001b8a <HAL_DAC_ConfigChannel+0x8e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2202      	movs	r2, #2
 8001b26:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001b30:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	22c0      	movs	r2, #192	; 0xc0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	400a      	ands	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef* hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{  
 8001b96:	b480      	push	{r7}
 8001b98:	b087      	sub	sp, #28
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	603b      	str	r3, [r7, #0]
  uint32_t data = 0U, tmp = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d105      	bne.n	8001bbe <HAL_DACEx_DualSetValue+0x28>
  {
    data = ((uint32_t)Data2 << 8U) | Data1; 
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e004      	b.n	8001bc8 <HAL_DACEx_DualSetValue+0x32>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
  }
  
  tmp = (uint32_t)hdac->Instance;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3320      	adds	r3, #32
 8001bd6:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e165      	b.n	8001ee8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f040 8154 	bne.w	8001ee2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d00b      	beq.n	8001c5a <HAL_GPIO_Init+0x5a>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c4e:	2b11      	cmp	r3, #17
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d130      	bne.n	8001cbc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0201 	and.w	r2, r3, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0xfc>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d123      	bne.n	8001d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	08da      	lsrs	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3208      	adds	r2, #8
 8001d3e:	69b9      	ldr	r1, [r7, #24]
 8001d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80ae 	beq.w	8001ee2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <HAL_GPIO_Init+0x2fc>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	4a5b      	ldr	r2, [pc, #364]	; (8001efc <HAL_GPIO_Init+0x2fc>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d94:	6453      	str	r3, [r2, #68]	; 0x44
 8001d96:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HAL_GPIO_Init+0x2fc>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da2:	4a57      	ldr	r2, [pc, #348]	; (8001f00 <HAL_GPIO_Init+0x300>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4e      	ldr	r2, [pc, #312]	; (8001f04 <HAL_GPIO_Init+0x304>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d025      	beq.n	8001e1a <HAL_GPIO_Init+0x21a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <HAL_GPIO_Init+0x308>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01f      	beq.n	8001e16 <HAL_GPIO_Init+0x216>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_GPIO_Init+0x30c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d019      	beq.n	8001e12 <HAL_GPIO_Init+0x212>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4b      	ldr	r2, [pc, #300]	; (8001f10 <HAL_GPIO_Init+0x310>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0x20e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4a      	ldr	r2, [pc, #296]	; (8001f14 <HAL_GPIO_Init+0x314>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x20a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a49      	ldr	r2, [pc, #292]	; (8001f18 <HAL_GPIO_Init+0x318>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x206>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <HAL_GPIO_Init+0x31c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x202>
 8001dfe:	2306      	movs	r3, #6
 8001e00:	e00c      	b.n	8001e1c <HAL_GPIO_Init+0x21c>
 8001e02:	2307      	movs	r3, #7
 8001e04:	e00a      	b.n	8001e1c <HAL_GPIO_Init+0x21c>
 8001e06:	2305      	movs	r3, #5
 8001e08:	e008      	b.n	8001e1c <HAL_GPIO_Init+0x21c>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x21c>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x21c>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x21c>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x21c>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f002 0203 	and.w	r2, r2, #3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2c:	4934      	ldr	r1, [pc, #208]	; (8001f00 <HAL_GPIO_Init+0x300>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5e:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e88:	4a25      	ldr	r2, [pc, #148]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8e:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001edc:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <HAL_GPIO_Init+0x320>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	f67f ae96 	bls.w	8001c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3724      	adds	r7, #36	; 0x24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40013800 	.word	0x40013800
 8001f04:	40020000 	.word	0x40020000
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40021400 	.word	0x40021400
 8001f1c:	40021800 	.word	0x40021800
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
 8001f30:	4613      	mov	r3, r2
 8001f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f34:	787b      	ldrb	r3, [r7, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f40:	e003      	b.n	8001f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	041a      	lsls	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	619a      	str	r2, [r3, #24]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0cc      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b68      	ldr	r3, [pc, #416]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d90c      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b65      	ldr	r3, [pc, #404]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b63      	ldr	r3, [pc, #396]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0b8      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	494d      	ldr	r1, [pc, #308]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d044      	beq.n	8002078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d119      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e07f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d003      	beq.n	8002016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002012:	2b03      	cmp	r3, #3
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e067      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002036:	4b37      	ldr	r3, [pc, #220]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4934      	ldr	r1, [pc, #208]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002048:	f7ff fb6c 	bl	8001724 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	e00a      	b.n	8002066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7ff fb68 	bl	8001724 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e04f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 020c 	and.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	429a      	cmp	r2, r3
 8002076:	d1eb      	bne.n	8002050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d20c      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e032      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4916      	ldr	r1, [pc, #88]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	490e      	ldr	r1, [pc, #56]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020de:	f000 f887 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80020e2:	4601      	mov	r1, r0
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	5cd3      	ldrb	r3, [r2, r3]
 80020f2:	fa21 f303 	lsr.w	r3, r1, r3
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fa18 	bl	8001534 <HAL_InitTick>

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00
 8002114:	40023800 	.word	0x40023800
 8002118:	08004cdc 	.word	0x08004cdc
 800211c:	20000008 	.word	0x20000008
 8002120:	2000000c 	.word	0x2000000c

08002124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000008 	.word	0x20000008

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002140:	f7ff fff0 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002144:	4601      	mov	r1, r0
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a9b      	lsrs	r3, r3, #10
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4a03      	ldr	r2, [pc, #12]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	08004cec 	.word	0x08004cec

08002164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002168:	f7ff ffdc 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 800216c:	4601      	mov	r1, r0
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0b5b      	lsrs	r3, r3, #13
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4a03      	ldr	r2, [pc, #12]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	08004cec 	.word	0x08004cec

0800218c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	220f      	movs	r2, #15
 800219a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_RCC_GetClockConfig+0x60>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40023c00 	.word	0x40023c00

080021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800220a:	4bc6      	ldr	r3, [pc, #792]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b0c      	cmp	r3, #12
 8002214:	f200 817e 	bhi.w	8002514 <HAL_RCC_GetSysClockFreq+0x324>
 8002218:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <HAL_RCC_GetSysClockFreq+0x30>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002255 	.word	0x08002255
 8002224:	08002515 	.word	0x08002515
 8002228:	08002515 	.word	0x08002515
 800222c:	08002515 	.word	0x08002515
 8002230:	0800225b 	.word	0x0800225b
 8002234:	08002515 	.word	0x08002515
 8002238:	08002515 	.word	0x08002515
 800223c:	08002515 	.word	0x08002515
 8002240:	08002261 	.word	0x08002261
 8002244:	08002515 	.word	0x08002515
 8002248:	08002515 	.word	0x08002515
 800224c:	08002515 	.word	0x08002515
 8002250:	080023bd 	.word	0x080023bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4bb4      	ldr	r3, [pc, #720]	; (8002528 <HAL_RCC_GetSysClockFreq+0x338>)
 8002256:	613b      	str	r3, [r7, #16]
       break;
 8002258:	e15f      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225a:	4bb4      	ldr	r3, [pc, #720]	; (800252c <HAL_RCC_GetSysClockFreq+0x33c>)
 800225c:	613b      	str	r3, [r7, #16]
      break;
 800225e:	e15c      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002260:	4bb0      	ldr	r3, [pc, #704]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002268:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226a:	4bae      	ldr	r3, [pc, #696]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d04a      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002276:	4bab      	ldr	r3, [pc, #684]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	099b      	lsrs	r3, r3, #6
 800227c:	f04f 0400 	mov.w	r4, #0
 8002280:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	ea03 0501 	and.w	r5, r3, r1
 800228c:	ea04 0602 	and.w	r6, r4, r2
 8002290:	4629      	mov	r1, r5
 8002292:	4632      	mov	r2, r6
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	f04f 0400 	mov.w	r4, #0
 800229c:	0154      	lsls	r4, r2, #5
 800229e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022a2:	014b      	lsls	r3, r1, #5
 80022a4:	4619      	mov	r1, r3
 80022a6:	4622      	mov	r2, r4
 80022a8:	1b49      	subs	r1, r1, r5
 80022aa:	eb62 0206 	sbc.w	r2, r2, r6
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	f04f 0400 	mov.w	r4, #0
 80022b6:	0194      	lsls	r4, r2, #6
 80022b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022bc:	018b      	lsls	r3, r1, #6
 80022be:	1a5b      	subs	r3, r3, r1
 80022c0:	eb64 0402 	sbc.w	r4, r4, r2
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	00e2      	lsls	r2, r4, #3
 80022ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022d2:	00d9      	lsls	r1, r3, #3
 80022d4:	460b      	mov	r3, r1
 80022d6:	4614      	mov	r4, r2
 80022d8:	195b      	adds	r3, r3, r5
 80022da:	eb44 0406 	adc.w	r4, r4, r6
 80022de:	f04f 0100 	mov.w	r1, #0
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	0262      	lsls	r2, r4, #9
 80022e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80022ec:	0259      	lsls	r1, r3, #9
 80022ee:	460b      	mov	r3, r1
 80022f0:	4614      	mov	r4, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	4621      	mov	r1, r4
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f04f 0400 	mov.w	r4, #0
 80022fc:	461a      	mov	r2, r3
 80022fe:	4623      	mov	r3, r4
 8002300:	f7fe fb7c 	bl	80009fc <__aeabi_uldivmod>
 8002304:	4603      	mov	r3, r0
 8002306:	460c      	mov	r4, r1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e049      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230c:	4b85      	ldr	r3, [pc, #532]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	f04f 0400 	mov.w	r4, #0
 8002316:	f240 11ff 	movw	r1, #511	; 0x1ff
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	ea03 0501 	and.w	r5, r3, r1
 8002322:	ea04 0602 	and.w	r6, r4, r2
 8002326:	4629      	mov	r1, r5
 8002328:	4632      	mov	r2, r6
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f04f 0400 	mov.w	r4, #0
 8002332:	0154      	lsls	r4, r2, #5
 8002334:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002338:	014b      	lsls	r3, r1, #5
 800233a:	4619      	mov	r1, r3
 800233c:	4622      	mov	r2, r4
 800233e:	1b49      	subs	r1, r1, r5
 8002340:	eb62 0206 	sbc.w	r2, r2, r6
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	f04f 0400 	mov.w	r4, #0
 800234c:	0194      	lsls	r4, r2, #6
 800234e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002352:	018b      	lsls	r3, r1, #6
 8002354:	1a5b      	subs	r3, r3, r1
 8002356:	eb64 0402 	sbc.w	r4, r4, r2
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	00e2      	lsls	r2, r4, #3
 8002364:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002368:	00d9      	lsls	r1, r3, #3
 800236a:	460b      	mov	r3, r1
 800236c:	4614      	mov	r4, r2
 800236e:	195b      	adds	r3, r3, r5
 8002370:	eb44 0406 	adc.w	r4, r4, r6
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	02a2      	lsls	r2, r4, #10
 800237e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002382:	0299      	lsls	r1, r3, #10
 8002384:	460b      	mov	r3, r1
 8002386:	4614      	mov	r4, r2
 8002388:	4618      	mov	r0, r3
 800238a:	4621      	mov	r1, r4
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f04f 0400 	mov.w	r4, #0
 8002392:	461a      	mov	r2, r3
 8002394:	4623      	mov	r3, r4
 8002396:	f7fe fb31 	bl	80009fc <__aeabi_uldivmod>
 800239a:	4603      	mov	r3, r0
 800239c:	460c      	mov	r4, r1
 800239e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023a0:	4b60      	ldr	r3, [pc, #384]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	3301      	adds	r3, #1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	613b      	str	r3, [r7, #16]
      break;
 80023ba:	e0ae      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c6:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d04a      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d2:	4b54      	ldr	r3, [pc, #336]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	099b      	lsrs	r3, r3, #6
 80023d8:	f04f 0400 	mov.w	r4, #0
 80023dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	ea03 0501 	and.w	r5, r3, r1
 80023e8:	ea04 0602 	and.w	r6, r4, r2
 80023ec:	4629      	mov	r1, r5
 80023ee:	4632      	mov	r2, r6
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	f04f 0400 	mov.w	r4, #0
 80023f8:	0154      	lsls	r4, r2, #5
 80023fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023fe:	014b      	lsls	r3, r1, #5
 8002400:	4619      	mov	r1, r3
 8002402:	4622      	mov	r2, r4
 8002404:	1b49      	subs	r1, r1, r5
 8002406:	eb62 0206 	sbc.w	r2, r2, r6
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	f04f 0400 	mov.w	r4, #0
 8002412:	0194      	lsls	r4, r2, #6
 8002414:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002418:	018b      	lsls	r3, r1, #6
 800241a:	1a5b      	subs	r3, r3, r1
 800241c:	eb64 0402 	sbc.w	r4, r4, r2
 8002420:	f04f 0100 	mov.w	r1, #0
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	00e2      	lsls	r2, r4, #3
 800242a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800242e:	00d9      	lsls	r1, r3, #3
 8002430:	460b      	mov	r3, r1
 8002432:	4614      	mov	r4, r2
 8002434:	195b      	adds	r3, r3, r5
 8002436:	eb44 0406 	adc.w	r4, r4, r6
 800243a:	f04f 0100 	mov.w	r1, #0
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	0262      	lsls	r2, r4, #9
 8002444:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002448:	0259      	lsls	r1, r3, #9
 800244a:	460b      	mov	r3, r1
 800244c:	4614      	mov	r4, r2
 800244e:	4618      	mov	r0, r3
 8002450:	4621      	mov	r1, r4
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f04f 0400 	mov.w	r4, #0
 8002458:	461a      	mov	r2, r3
 800245a:	4623      	mov	r3, r4
 800245c:	f7fe face 	bl	80009fc <__aeabi_uldivmod>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	e049      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002468:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	f04f 0400 	mov.w	r4, #0
 8002472:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	ea03 0501 	and.w	r5, r3, r1
 800247e:	ea04 0602 	and.w	r6, r4, r2
 8002482:	4629      	mov	r1, r5
 8002484:	4632      	mov	r2, r6
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	f04f 0400 	mov.w	r4, #0
 800248e:	0154      	lsls	r4, r2, #5
 8002490:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002494:	014b      	lsls	r3, r1, #5
 8002496:	4619      	mov	r1, r3
 8002498:	4622      	mov	r2, r4
 800249a:	1b49      	subs	r1, r1, r5
 800249c:	eb62 0206 	sbc.w	r2, r2, r6
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	f04f 0400 	mov.w	r4, #0
 80024a8:	0194      	lsls	r4, r2, #6
 80024aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024ae:	018b      	lsls	r3, r1, #6
 80024b0:	1a5b      	subs	r3, r3, r1
 80024b2:	eb64 0402 	sbc.w	r4, r4, r2
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	00e2      	lsls	r2, r4, #3
 80024c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024c4:	00d9      	lsls	r1, r3, #3
 80024c6:	460b      	mov	r3, r1
 80024c8:	4614      	mov	r4, r2
 80024ca:	195b      	adds	r3, r3, r5
 80024cc:	eb44 0406 	adc.w	r4, r4, r6
 80024d0:	f04f 0100 	mov.w	r1, #0
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	02a2      	lsls	r2, r4, #10
 80024da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024de:	0299      	lsls	r1, r3, #10
 80024e0:	460b      	mov	r3, r1
 80024e2:	4614      	mov	r4, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	4621      	mov	r1, r4
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f04f 0400 	mov.w	r4, #0
 80024ee:	461a      	mov	r2, r3
 80024f0:	4623      	mov	r3, r4
 80024f2:	f7fe fa83 	bl	80009fc <__aeabi_uldivmod>
 80024f6:	4603      	mov	r3, r0
 80024f8:	460c      	mov	r4, r1
 80024fa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_GetSysClockFreq+0x334>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	0f1b      	lsrs	r3, r3, #28
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	613b      	str	r3, [r7, #16]
      break;
 8002512:	e002      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <HAL_RCC_GetSysClockFreq+0x338>)
 8002516:	613b      	str	r3, [r7, #16]
      break;
 8002518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251a:	693b      	ldr	r3, [r7, #16]
}
 800251c:	4618      	mov	r0, r3
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002524:	40023800 	.word	0x40023800
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200

08002530 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8083 	beq.w	8002650 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800254a:	4b95      	ldr	r3, [pc, #596]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d019      	beq.n	800258a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002556:	4b92      	ldr	r3, [pc, #584]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800255e:	2b08      	cmp	r3, #8
 8002560:	d106      	bne.n	8002570 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002562:	4b8f      	ldr	r3, [pc, #572]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800256e:	d00c      	beq.n	800258a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002570:	4b8b      	ldr	r3, [pc, #556]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d112      	bne.n	80025a2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257c:	4b88      	ldr	r3, [pc, #544]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002588:	d10b      	bne.n	80025a2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258a:	4b85      	ldr	r3, [pc, #532]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d05b      	beq.n	800264e <HAL_RCC_OscConfig+0x11e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d157      	bne.n	800264e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e216      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x8a>
 80025ac:	4b7c      	ldr	r3, [pc, #496]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a7b      	ldr	r2, [pc, #492]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e01d      	b.n	80025f6 <HAL_RCC_OscConfig+0xc6>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c2:	d10c      	bne.n	80025de <HAL_RCC_OscConfig+0xae>
 80025c4:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a75      	ldr	r2, [pc, #468]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80025ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b73      	ldr	r3, [pc, #460]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a72      	ldr	r2, [pc, #456]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	e00b      	b.n	80025f6 <HAL_RCC_OscConfig+0xc6>
 80025de:	4b70      	ldr	r3, [pc, #448]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6f      	ldr	r2, [pc, #444]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80025e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6c      	ldr	r2, [pc, #432]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80025f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d013      	beq.n	8002626 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7ff f891 	bl	8001724 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002606:	f7ff f88d 	bl	8001724 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e1db      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002618:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0xd6>
 8002624:	e014      	b.n	8002650 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7ff f87d 	bl	8001724 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262e:	f7ff f879 	bl	8001724 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b64      	cmp	r3, #100	; 0x64
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e1c7      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002640:	4b57      	ldr	r3, [pc, #348]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0xfe>
 800264c:	e000      	b.n	8002650 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d06f      	beq.n	800273c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800265c:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b00      	cmp	r3, #0
 8002666:	d017      	beq.n	8002698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002668:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002670:	2b08      	cmp	r3, #8
 8002672:	d105      	bne.n	8002680 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002674:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002680:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d11c      	bne.n	80026c6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268c:	4b44      	ldr	r3, [pc, #272]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d116      	bne.n	80026c6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002698:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x180>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e18f      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4938      	ldr	r1, [pc, #224]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c4:	e03a      	b.n	800273c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d020      	beq.n	8002710 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ce:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff f826 	bl	8001724 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026dc:	f7ff f822 	bl	8001724 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e170      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4925      	ldr	r1, [pc, #148]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
 800270e:	e015      	b.n	800273c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCC_OscConfig+0x274>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7ff f805 	bl	8001724 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271e:	f7ff f801 	bl	8001724 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e14f      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d037      	beq.n	80027b8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f7fe ffe5 	bl	8001724 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275e:	f7fe ffe1 	bl	8001724 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e12f      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_OscConfig+0x270>)
 8002772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x22e>
 800277c:	e01c      	b.n	80027b8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_RCC_OscConfig+0x278>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe ffce 	bl	8001724 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278a:	e00f      	b.n	80027ac <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe ffca 	bl	8001724 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d908      	bls.n	80027ac <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e118      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	42470000 	.word	0x42470000
 80027a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ac:	4b8a      	ldr	r3, [pc, #552]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80027ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e9      	bne.n	800278c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8097 	beq.w	80028f4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ca:	4b83      	ldr	r3, [pc, #524]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b7f      	ldr	r3, [pc, #508]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a7e      	ldr	r2, [pc, #504]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b7c      	ldr	r3, [pc, #496]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027f2:	2301      	movs	r3, #1
 80027f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f6:	4b79      	ldr	r3, [pc, #484]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d118      	bne.n	8002834 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002802:	4b76      	ldr	r3, [pc, #472]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a75      	ldr	r2, [pc, #468]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280e:	f7fe ff89 	bl	8001724 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002816:	f7fe ff85 	bl	8001724 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e0d3      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	4b6c      	ldr	r3, [pc, #432]	; (80029dc <HAL_RCC_OscConfig+0x4ac>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x31a>
 800283c:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
 8002848:	e01c      	b.n	8002884 <HAL_RCC_OscConfig+0x354>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b05      	cmp	r3, #5
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x33c>
 8002852:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a60      	ldr	r2, [pc, #384]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	4a5d      	ldr	r2, [pc, #372]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6713      	str	r3, [r2, #112]	; 0x70
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0x354>
 800286c:	4b5a      	ldr	r3, [pc, #360]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a59      	ldr	r2, [pc, #356]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	4b57      	ldr	r3, [pc, #348]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a56      	ldr	r2, [pc, #344]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 800287e:	f023 0304 	bic.w	r3, r3, #4
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe ff4a 	bl	8001724 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7fe ff46 	bl	8001724 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e092      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	4b4b      	ldr	r3, [pc, #300]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0ee      	beq.n	8002894 <HAL_RCC_OscConfig+0x364>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe ff34 	bl	8001724 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe ff30 	bl	8001724 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e07c      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d6:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ee      	bne.n	80028c0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d068      	beq.n	80029ce <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b08      	cmp	r3, #8
 8002906:	d060      	beq.n	80029ca <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d145      	bne.n	800299c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002910:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7fe ff05 	bl	8001724 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291e:	f7fe ff01 	bl	8001724 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e04f      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f0      	bne.n	800291e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	019b      	lsls	r3, r3, #6
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	3b01      	subs	r3, #1
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	061b      	lsls	r3, r3, #24
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	071b      	lsls	r3, r3, #28
 8002968:	491b      	ldr	r1, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fed6 	bl	8001724 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe fed2 	bl	8001724 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e020      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x44c>
 800299a:	e018      	b.n	80029ce <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299c:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <HAL_RCC_OscConfig+0x4b0>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe febf 	bl	8001724 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe febb 	bl	8001724 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e009      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_RCC_OscConfig+0x4a8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCC_OscConfig+0x47a>
 80029c8:	e001      	b.n	80029ce <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40007000 	.word	0x40007000
 80029e0:	42470060 	.word	0x42470060

080029e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e01d      	b.n	8002a32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f815 	bl	8002a3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f000 f968 	bl	8002cf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d007      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d122      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d11b      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f06f 0202 	mvn.w	r2, #2
 8002ac2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8ee 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002ade:	e005      	b.n	8002aec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f8e0 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8f1 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d122      	bne.n	8002b46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d11b      	bne.n	8002b46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f06f 0204 	mvn.w	r2, #4
 8002b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f8c4 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002b32:	e005      	b.n	8002b40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f8b6 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8c7 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d122      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11b      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f06f 0208 	mvn.w	r2, #8
 8002b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2204      	movs	r2, #4
 8002b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f89a 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002b86:	e005      	b.n	8002b94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f88c 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f89d 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d122      	bne.n	8002bee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d11b      	bne.n	8002bee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f06f 0210 	mvn.w	r2, #16
 8002bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f870 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002bda:	e005      	b.n	8002be8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f862 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f873 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d10e      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f06f 0201 	mvn.w	r2, #1
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7fe fb7f 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b80      	cmp	r3, #128	; 0x80
 8002c26:	d10e      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c32:	2b80      	cmp	r3, #128	; 0x80
 8002c34:	d107      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f903 	bl	8002e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d10e      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d107      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f838 	bl	8002ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d10e      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d107      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0220 	mvn.w	r2, #32
 8002c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f8cd 	bl	8002e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a40      	ldr	r2, [pc, #256]	; (8002e0c <TIM_Base_SetConfig+0x114>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d013      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d16:	d00f      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3d      	ldr	r2, [pc, #244]	; (8002e10 <TIM_Base_SetConfig+0x118>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00b      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3c      	ldr	r2, [pc, #240]	; (8002e14 <TIM_Base_SetConfig+0x11c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d007      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a3b      	ldr	r2, [pc, #236]	; (8002e18 <TIM_Base_SetConfig+0x120>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a3a      	ldr	r2, [pc, #232]	; (8002e1c <TIM_Base_SetConfig+0x124>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d108      	bne.n	8002d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2f      	ldr	r2, [pc, #188]	; (8002e0c <TIM_Base_SetConfig+0x114>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02b      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d58:	d027      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2c      	ldr	r2, [pc, #176]	; (8002e10 <TIM_Base_SetConfig+0x118>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d023      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a2b      	ldr	r2, [pc, #172]	; (8002e14 <TIM_Base_SetConfig+0x11c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01f      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <TIM_Base_SetConfig+0x120>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01b      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a29      	ldr	r2, [pc, #164]	; (8002e1c <TIM_Base_SetConfig+0x124>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d017      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a28      	ldr	r2, [pc, #160]	; (8002e20 <TIM_Base_SetConfig+0x128>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <TIM_Base_SetConfig+0x12c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00f      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <TIM_Base_SetConfig+0x130>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00b      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <TIM_Base_SetConfig+0x134>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d007      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <TIM_Base_SetConfig+0x138>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d003      	beq.n	8002daa <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <TIM_Base_SetConfig+0x13c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d108      	bne.n	8002dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <TIM_Base_SetConfig+0x114>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0xf8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a0c      	ldr	r2, [pc, #48]	; (8002e1c <TIM_Base_SetConfig+0x124>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d103      	bne.n	8002df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	615a      	str	r2, [r3, #20]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40010000 	.word	0x40010000
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40000c00 	.word	0x40000c00
 8002e1c:	40010400 	.word	0x40010400
 8002e20:	40014000 	.word	0x40014000
 8002e24:	40014400 	.word	0x40014400
 8002e28:	40014800 	.word	0x40014800
 8002e2c:	40001800 	.word	0x40001800
 8002e30:	40001c00 	.word	0x40001c00
 8002e34:	40002000 	.word	0x40002000

08002e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e03f      	b.n	8002ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe fad8 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2224      	movs	r2, #36	; 0x24
 8002e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f919 	bl	80030dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b088      	sub	sp, #32
 8002efe:	af02      	add	r7, sp, #8
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	f040 8090 	bne.w	800303c <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_UART_Receive+0x2e>
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e088      	b.n	800303e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_UART_Receive+0x40>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e081      	b.n	800303e <HAL_UART_Receive+0x144>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2222      	movs	r2, #34	; 0x22
 8002f4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fbe8 	bl	8001724 <HAL_GetTick>
 8002f54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f6a:	e05c      	b.n	8003026 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f82:	d12b      	bne.n	8002fdc <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f859 	bl	8003046 <UART_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e04f      	b.n	800303e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	e030      	b.n	8003026 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	e024      	b.n	8003026 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2120      	movs	r1, #32
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f82d 	bl	8003046 <UART_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e023      	b.n	800303e <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	60ba      	str	r2, [r7, #8]
 800300a:	b2ca      	uxtb	r2, r1
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e00a      	b.n	8003026 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d19d      	bne.n	8002f6c <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	4613      	mov	r3, r2
 8003054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003056:	e02c      	b.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d028      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <UART_WaitOnFlagUntilTimeout+0x30>
 8003066:	f7fe fb5d 	bl	8001724 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	429a      	cmp	r2, r3
 8003074:	d21d      	bcs.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003084:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e00f      	b.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4013      	ands	r3, r2
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d0c3      	beq.n	8003058 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800311e:	f023 030c 	bic.w	r3, r3, #12
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	68f9      	ldr	r1, [r7, #12]
 8003128:	430b      	orrs	r3, r1
 800312a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800314a:	f040 818b 	bne.w	8003464 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4ac1      	ldr	r2, [pc, #772]	; (8003458 <UART_SetConfig+0x37c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d005      	beq.n	8003164 <UART_SetConfig+0x88>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4abf      	ldr	r2, [pc, #764]	; (800345c <UART_SetConfig+0x380>)
 800315e:	4293      	cmp	r3, r2
 8003160:	f040 80bd 	bne.w	80032de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7fe fffe 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8003168:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	461d      	mov	r5, r3
 800316e:	f04f 0600 	mov.w	r6, #0
 8003172:	46a8      	mov	r8, r5
 8003174:	46b1      	mov	r9, r6
 8003176:	eb18 0308 	adds.w	r3, r8, r8
 800317a:	eb49 0409 	adc.w	r4, r9, r9
 800317e:	4698      	mov	r8, r3
 8003180:	46a1      	mov	r9, r4
 8003182:	eb18 0805 	adds.w	r8, r8, r5
 8003186:	eb49 0906 	adc.w	r9, r9, r6
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003196:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800319a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800319e:	4688      	mov	r8, r1
 80031a0:	4691      	mov	r9, r2
 80031a2:	eb18 0005 	adds.w	r0, r8, r5
 80031a6:	eb49 0106 	adc.w	r1, r9, r6
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	461d      	mov	r5, r3
 80031b0:	f04f 0600 	mov.w	r6, #0
 80031b4:	196b      	adds	r3, r5, r5
 80031b6:	eb46 0406 	adc.w	r4, r6, r6
 80031ba:	461a      	mov	r2, r3
 80031bc:	4623      	mov	r3, r4
 80031be:	f7fd fc1d 	bl	80009fc <__aeabi_uldivmod>
 80031c2:	4603      	mov	r3, r0
 80031c4:	460c      	mov	r4, r1
 80031c6:	461a      	mov	r2, r3
 80031c8:	4ba5      	ldr	r3, [pc, #660]	; (8003460 <UART_SetConfig+0x384>)
 80031ca:	fba3 2302 	umull	r2, r3, r3, r2
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	461d      	mov	r5, r3
 80031d8:	f04f 0600 	mov.w	r6, #0
 80031dc:	46a9      	mov	r9, r5
 80031de:	46b2      	mov	sl, r6
 80031e0:	eb19 0309 	adds.w	r3, r9, r9
 80031e4:	eb4a 040a 	adc.w	r4, sl, sl
 80031e8:	4699      	mov	r9, r3
 80031ea:	46a2      	mov	sl, r4
 80031ec:	eb19 0905 	adds.w	r9, r9, r5
 80031f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80031f4:	f04f 0100 	mov.w	r1, #0
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003200:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003204:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003208:	4689      	mov	r9, r1
 800320a:	4692      	mov	sl, r2
 800320c:	eb19 0005 	adds.w	r0, r9, r5
 8003210:	eb4a 0106 	adc.w	r1, sl, r6
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	461d      	mov	r5, r3
 800321a:	f04f 0600 	mov.w	r6, #0
 800321e:	196b      	adds	r3, r5, r5
 8003220:	eb46 0406 	adc.w	r4, r6, r6
 8003224:	461a      	mov	r2, r3
 8003226:	4623      	mov	r3, r4
 8003228:	f7fd fbe8 	bl	80009fc <__aeabi_uldivmod>
 800322c:	4603      	mov	r3, r0
 800322e:	460c      	mov	r4, r1
 8003230:	461a      	mov	r2, r3
 8003232:	4b8b      	ldr	r3, [pc, #556]	; (8003460 <UART_SetConfig+0x384>)
 8003234:	fba3 1302 	umull	r1, r3, r3, r2
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	2164      	movs	r1, #100	; 0x64
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	3332      	adds	r3, #50	; 0x32
 8003246:	4a86      	ldr	r2, [pc, #536]	; (8003460 <UART_SetConfig+0x384>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003254:	4498      	add	r8, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	461d      	mov	r5, r3
 800325a:	f04f 0600 	mov.w	r6, #0
 800325e:	46a9      	mov	r9, r5
 8003260:	46b2      	mov	sl, r6
 8003262:	eb19 0309 	adds.w	r3, r9, r9
 8003266:	eb4a 040a 	adc.w	r4, sl, sl
 800326a:	4699      	mov	r9, r3
 800326c:	46a2      	mov	sl, r4
 800326e:	eb19 0905 	adds.w	r9, r9, r5
 8003272:	eb4a 0a06 	adc.w	sl, sl, r6
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003282:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003286:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800328a:	4689      	mov	r9, r1
 800328c:	4692      	mov	sl, r2
 800328e:	eb19 0005 	adds.w	r0, r9, r5
 8003292:	eb4a 0106 	adc.w	r1, sl, r6
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	461d      	mov	r5, r3
 800329c:	f04f 0600 	mov.w	r6, #0
 80032a0:	196b      	adds	r3, r5, r5
 80032a2:	eb46 0406 	adc.w	r4, r6, r6
 80032a6:	461a      	mov	r2, r3
 80032a8:	4623      	mov	r3, r4
 80032aa:	f7fd fba7 	bl	80009fc <__aeabi_uldivmod>
 80032ae:	4603      	mov	r3, r0
 80032b0:	460c      	mov	r4, r1
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <UART_SetConfig+0x384>)
 80032b6:	fba3 1302 	umull	r1, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2164      	movs	r1, #100	; 0x64
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	3332      	adds	r3, #50	; 0x32
 80032c8:	4a65      	ldr	r2, [pc, #404]	; (8003460 <UART_SetConfig+0x384>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	f003 0207 	and.w	r2, r3, #7
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4442      	add	r2, r8
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	e26f      	b.n	80037be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032de:	f7fe ff2d 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80032e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	461d      	mov	r5, r3
 80032e8:	f04f 0600 	mov.w	r6, #0
 80032ec:	46a8      	mov	r8, r5
 80032ee:	46b1      	mov	r9, r6
 80032f0:	eb18 0308 	adds.w	r3, r8, r8
 80032f4:	eb49 0409 	adc.w	r4, r9, r9
 80032f8:	4698      	mov	r8, r3
 80032fa:	46a1      	mov	r9, r4
 80032fc:	eb18 0805 	adds.w	r8, r8, r5
 8003300:	eb49 0906 	adc.w	r9, r9, r6
 8003304:	f04f 0100 	mov.w	r1, #0
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003310:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003314:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003318:	4688      	mov	r8, r1
 800331a:	4691      	mov	r9, r2
 800331c:	eb18 0005 	adds.w	r0, r8, r5
 8003320:	eb49 0106 	adc.w	r1, r9, r6
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	461d      	mov	r5, r3
 800332a:	f04f 0600 	mov.w	r6, #0
 800332e:	196b      	adds	r3, r5, r5
 8003330:	eb46 0406 	adc.w	r4, r6, r6
 8003334:	461a      	mov	r2, r3
 8003336:	4623      	mov	r3, r4
 8003338:	f7fd fb60 	bl	80009fc <__aeabi_uldivmod>
 800333c:	4603      	mov	r3, r0
 800333e:	460c      	mov	r4, r1
 8003340:	461a      	mov	r2, r3
 8003342:	4b47      	ldr	r3, [pc, #284]	; (8003460 <UART_SetConfig+0x384>)
 8003344:	fba3 2302 	umull	r2, r3, r3, r2
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	461d      	mov	r5, r3
 8003352:	f04f 0600 	mov.w	r6, #0
 8003356:	46a9      	mov	r9, r5
 8003358:	46b2      	mov	sl, r6
 800335a:	eb19 0309 	adds.w	r3, r9, r9
 800335e:	eb4a 040a 	adc.w	r4, sl, sl
 8003362:	4699      	mov	r9, r3
 8003364:	46a2      	mov	sl, r4
 8003366:	eb19 0905 	adds.w	r9, r9, r5
 800336a:	eb4a 0a06 	adc.w	sl, sl, r6
 800336e:	f04f 0100 	mov.w	r1, #0
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800337a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800337e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003382:	4689      	mov	r9, r1
 8003384:	4692      	mov	sl, r2
 8003386:	eb19 0005 	adds.w	r0, r9, r5
 800338a:	eb4a 0106 	adc.w	r1, sl, r6
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	461d      	mov	r5, r3
 8003394:	f04f 0600 	mov.w	r6, #0
 8003398:	196b      	adds	r3, r5, r5
 800339a:	eb46 0406 	adc.w	r4, r6, r6
 800339e:	461a      	mov	r2, r3
 80033a0:	4623      	mov	r3, r4
 80033a2:	f7fd fb2b 	bl	80009fc <__aeabi_uldivmod>
 80033a6:	4603      	mov	r3, r0
 80033a8:	460c      	mov	r4, r1
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <UART_SetConfig+0x384>)
 80033ae:	fba3 1302 	umull	r1, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2164      	movs	r1, #100	; 0x64
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	3332      	adds	r3, #50	; 0x32
 80033c0:	4a27      	ldr	r2, [pc, #156]	; (8003460 <UART_SetConfig+0x384>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033ce:	4498      	add	r8, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	461d      	mov	r5, r3
 80033d4:	f04f 0600 	mov.w	r6, #0
 80033d8:	46a9      	mov	r9, r5
 80033da:	46b2      	mov	sl, r6
 80033dc:	eb19 0309 	adds.w	r3, r9, r9
 80033e0:	eb4a 040a 	adc.w	r4, sl, sl
 80033e4:	4699      	mov	r9, r3
 80033e6:	46a2      	mov	sl, r4
 80033e8:	eb19 0905 	adds.w	r9, r9, r5
 80033ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80033f0:	f04f 0100 	mov.w	r1, #0
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003400:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003404:	4689      	mov	r9, r1
 8003406:	4692      	mov	sl, r2
 8003408:	eb19 0005 	adds.w	r0, r9, r5
 800340c:	eb4a 0106 	adc.w	r1, sl, r6
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	461d      	mov	r5, r3
 8003416:	f04f 0600 	mov.w	r6, #0
 800341a:	196b      	adds	r3, r5, r5
 800341c:	eb46 0406 	adc.w	r4, r6, r6
 8003420:	461a      	mov	r2, r3
 8003422:	4623      	mov	r3, r4
 8003424:	f7fd faea 	bl	80009fc <__aeabi_uldivmod>
 8003428:	4603      	mov	r3, r0
 800342a:	460c      	mov	r4, r1
 800342c:	461a      	mov	r2, r3
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <UART_SetConfig+0x384>)
 8003430:	fba3 1302 	umull	r1, r3, r3, r2
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	2164      	movs	r1, #100	; 0x64
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	3332      	adds	r3, #50	; 0x32
 8003442:	4a07      	ldr	r2, [pc, #28]	; (8003460 <UART_SetConfig+0x384>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	f003 0207 	and.w	r2, r3, #7
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4442      	add	r2, r8
 8003454:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003456:	e1b2      	b.n	80037be <UART_SetConfig+0x6e2>
 8003458:	40011000 	.word	0x40011000
 800345c:	40011400 	.word	0x40011400
 8003460:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4ad7      	ldr	r2, [pc, #860]	; (80037c8 <UART_SetConfig+0x6ec>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d005      	beq.n	800347a <UART_SetConfig+0x39e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4ad6      	ldr	r2, [pc, #856]	; (80037cc <UART_SetConfig+0x6f0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	f040 80d1 	bne.w	800361c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800347a:	f7fe fe73 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 800347e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	469a      	mov	sl, r3
 8003484:	f04f 0b00 	mov.w	fp, #0
 8003488:	46d0      	mov	r8, sl
 800348a:	46d9      	mov	r9, fp
 800348c:	eb18 0308 	adds.w	r3, r8, r8
 8003490:	eb49 0409 	adc.w	r4, r9, r9
 8003494:	4698      	mov	r8, r3
 8003496:	46a1      	mov	r9, r4
 8003498:	eb18 080a 	adds.w	r8, r8, sl
 800349c:	eb49 090b 	adc.w	r9, r9, fp
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034b4:	4688      	mov	r8, r1
 80034b6:	4691      	mov	r9, r2
 80034b8:	eb1a 0508 	adds.w	r5, sl, r8
 80034bc:	eb4b 0609 	adc.w	r6, fp, r9
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4619      	mov	r1, r3
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	f04f 0400 	mov.w	r4, #0
 80034d2:	0094      	lsls	r4, r2, #2
 80034d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034d8:	008b      	lsls	r3, r1, #2
 80034da:	461a      	mov	r2, r3
 80034dc:	4623      	mov	r3, r4
 80034de:	4628      	mov	r0, r5
 80034e0:	4631      	mov	r1, r6
 80034e2:	f7fd fa8b 	bl	80009fc <__aeabi_uldivmod>
 80034e6:	4603      	mov	r3, r0
 80034e8:	460c      	mov	r4, r1
 80034ea:	461a      	mov	r2, r3
 80034ec:	4bb8      	ldr	r3, [pc, #736]	; (80037d0 <UART_SetConfig+0x6f4>)
 80034ee:	fba3 2302 	umull	r2, r3, r3, r2
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	469b      	mov	fp, r3
 80034fc:	f04f 0c00 	mov.w	ip, #0
 8003500:	46d9      	mov	r9, fp
 8003502:	46e2      	mov	sl, ip
 8003504:	eb19 0309 	adds.w	r3, r9, r9
 8003508:	eb4a 040a 	adc.w	r4, sl, sl
 800350c:	4699      	mov	r9, r3
 800350e:	46a2      	mov	sl, r4
 8003510:	eb19 090b 	adds.w	r9, r9, fp
 8003514:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003518:	f04f 0100 	mov.w	r1, #0
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003524:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003528:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800352c:	4689      	mov	r9, r1
 800352e:	4692      	mov	sl, r2
 8003530:	eb1b 0509 	adds.w	r5, fp, r9
 8003534:	eb4c 060a 	adc.w	r6, ip, sl
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4619      	mov	r1, r3
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	f04f 0400 	mov.w	r4, #0
 800354a:	0094      	lsls	r4, r2, #2
 800354c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003550:	008b      	lsls	r3, r1, #2
 8003552:	461a      	mov	r2, r3
 8003554:	4623      	mov	r3, r4
 8003556:	4628      	mov	r0, r5
 8003558:	4631      	mov	r1, r6
 800355a:	f7fd fa4f 	bl	80009fc <__aeabi_uldivmod>
 800355e:	4603      	mov	r3, r0
 8003560:	460c      	mov	r4, r1
 8003562:	461a      	mov	r2, r3
 8003564:	4b9a      	ldr	r3, [pc, #616]	; (80037d0 <UART_SetConfig+0x6f4>)
 8003566:	fba3 1302 	umull	r1, r3, r3, r2
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2164      	movs	r1, #100	; 0x64
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	3332      	adds	r3, #50	; 0x32
 8003578:	4a95      	ldr	r2, [pc, #596]	; (80037d0 <UART_SetConfig+0x6f4>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003584:	4498      	add	r8, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	469b      	mov	fp, r3
 800358a:	f04f 0c00 	mov.w	ip, #0
 800358e:	46d9      	mov	r9, fp
 8003590:	46e2      	mov	sl, ip
 8003592:	eb19 0309 	adds.w	r3, r9, r9
 8003596:	eb4a 040a 	adc.w	r4, sl, sl
 800359a:	4699      	mov	r9, r3
 800359c:	46a2      	mov	sl, r4
 800359e:	eb19 090b 	adds.w	r9, r9, fp
 80035a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035ba:	4689      	mov	r9, r1
 80035bc:	4692      	mov	sl, r2
 80035be:	eb1b 0509 	adds.w	r5, fp, r9
 80035c2:	eb4c 060a 	adc.w	r6, ip, sl
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4619      	mov	r1, r3
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	f04f 0400 	mov.w	r4, #0
 80035d8:	0094      	lsls	r4, r2, #2
 80035da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035de:	008b      	lsls	r3, r1, #2
 80035e0:	461a      	mov	r2, r3
 80035e2:	4623      	mov	r3, r4
 80035e4:	4628      	mov	r0, r5
 80035e6:	4631      	mov	r1, r6
 80035e8:	f7fd fa08 	bl	80009fc <__aeabi_uldivmod>
 80035ec:	4603      	mov	r3, r0
 80035ee:	460c      	mov	r4, r1
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b77      	ldr	r3, [pc, #476]	; (80037d0 <UART_SetConfig+0x6f4>)
 80035f4:	fba3 1302 	umull	r1, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	2164      	movs	r1, #100	; 0x64
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	3332      	adds	r3, #50	; 0x32
 8003606:	4a72      	ldr	r2, [pc, #456]	; (80037d0 <UART_SetConfig+0x6f4>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4442      	add	r2, r8
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	e0d0      	b.n	80037be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800361c:	f7fe fd8e 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8003620:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	469a      	mov	sl, r3
 8003626:	f04f 0b00 	mov.w	fp, #0
 800362a:	46d0      	mov	r8, sl
 800362c:	46d9      	mov	r9, fp
 800362e:	eb18 0308 	adds.w	r3, r8, r8
 8003632:	eb49 0409 	adc.w	r4, r9, r9
 8003636:	4698      	mov	r8, r3
 8003638:	46a1      	mov	r9, r4
 800363a:	eb18 080a 	adds.w	r8, r8, sl
 800363e:	eb49 090b 	adc.w	r9, r9, fp
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800364e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003652:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003656:	4688      	mov	r8, r1
 8003658:	4691      	mov	r9, r2
 800365a:	eb1a 0508 	adds.w	r5, sl, r8
 800365e:	eb4b 0609 	adc.w	r6, fp, r9
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4619      	mov	r1, r3
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	f04f 0400 	mov.w	r4, #0
 8003674:	0094      	lsls	r4, r2, #2
 8003676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800367a:	008b      	lsls	r3, r1, #2
 800367c:	461a      	mov	r2, r3
 800367e:	4623      	mov	r3, r4
 8003680:	4628      	mov	r0, r5
 8003682:	4631      	mov	r1, r6
 8003684:	f7fd f9ba 	bl	80009fc <__aeabi_uldivmod>
 8003688:	4603      	mov	r3, r0
 800368a:	460c      	mov	r4, r1
 800368c:	461a      	mov	r2, r3
 800368e:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <UART_SetConfig+0x6f4>)
 8003690:	fba3 2302 	umull	r2, r3, r3, r2
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	469b      	mov	fp, r3
 800369e:	f04f 0c00 	mov.w	ip, #0
 80036a2:	46d9      	mov	r9, fp
 80036a4:	46e2      	mov	sl, ip
 80036a6:	eb19 0309 	adds.w	r3, r9, r9
 80036aa:	eb4a 040a 	adc.w	r4, sl, sl
 80036ae:	4699      	mov	r9, r3
 80036b0:	46a2      	mov	sl, r4
 80036b2:	eb19 090b 	adds.w	r9, r9, fp
 80036b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036ce:	4689      	mov	r9, r1
 80036d0:	4692      	mov	sl, r2
 80036d2:	eb1b 0509 	adds.w	r5, fp, r9
 80036d6:	eb4c 060a 	adc.w	r6, ip, sl
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4619      	mov	r1, r3
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	f04f 0400 	mov.w	r4, #0
 80036ec:	0094      	lsls	r4, r2, #2
 80036ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036f2:	008b      	lsls	r3, r1, #2
 80036f4:	461a      	mov	r2, r3
 80036f6:	4623      	mov	r3, r4
 80036f8:	4628      	mov	r0, r5
 80036fa:	4631      	mov	r1, r6
 80036fc:	f7fd f97e 	bl	80009fc <__aeabi_uldivmod>
 8003700:	4603      	mov	r3, r0
 8003702:	460c      	mov	r4, r1
 8003704:	461a      	mov	r2, r3
 8003706:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <UART_SetConfig+0x6f4>)
 8003708:	fba3 1302 	umull	r1, r3, r3, r2
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	2164      	movs	r1, #100	; 0x64
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	3332      	adds	r3, #50	; 0x32
 800371a:	4a2d      	ldr	r2, [pc, #180]	; (80037d0 <UART_SetConfig+0x6f4>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003726:	4498      	add	r8, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	469b      	mov	fp, r3
 800372c:	f04f 0c00 	mov.w	ip, #0
 8003730:	46d9      	mov	r9, fp
 8003732:	46e2      	mov	sl, ip
 8003734:	eb19 0309 	adds.w	r3, r9, r9
 8003738:	eb4a 040a 	adc.w	r4, sl, sl
 800373c:	4699      	mov	r9, r3
 800373e:	46a2      	mov	sl, r4
 8003740:	eb19 090b 	adds.w	r9, r9, fp
 8003744:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003754:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003758:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800375c:	4689      	mov	r9, r1
 800375e:	4692      	mov	sl, r2
 8003760:	eb1b 0509 	adds.w	r5, fp, r9
 8003764:	eb4c 060a 	adc.w	r6, ip, sl
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4619      	mov	r1, r3
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	f04f 0400 	mov.w	r4, #0
 800377a:	0094      	lsls	r4, r2, #2
 800377c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003780:	008b      	lsls	r3, r1, #2
 8003782:	461a      	mov	r2, r3
 8003784:	4623      	mov	r3, r4
 8003786:	4628      	mov	r0, r5
 8003788:	4631      	mov	r1, r6
 800378a:	f7fd f937 	bl	80009fc <__aeabi_uldivmod>
 800378e:	4603      	mov	r3, r0
 8003790:	460c      	mov	r4, r1
 8003792:	461a      	mov	r2, r3
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <UART_SetConfig+0x6f4>)
 8003796:	fba3 1302 	umull	r1, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2164      	movs	r1, #100	; 0x64
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	3332      	adds	r3, #50	; 0x32
 80037a8:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <UART_SetConfig+0x6f4>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4442      	add	r2, r8
 80037ba:	609a      	str	r2, [r3, #8]
}
 80037bc:	e7ff      	b.n	80037be <UART_SetConfig+0x6e2>
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c8:	40011000 	.word	0x40011000
 80037cc:	40011400 	.word	0x40011400
 80037d0:	51eb851f 	.word	0x51eb851f

080037d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80037e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e6:	2b84      	cmp	r3, #132	; 0x84
 80037e8:	d005      	beq.n	80037f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80037ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4413      	add	r3, r2
 80037f2:	3303      	adds	r3, #3
 80037f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80037f6:	68fb      	ldr	r3, [r7, #12]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003808:	f000 fada 	bl	8003dc0 <vTaskStartScheduler>
  
  return osOK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	bd80      	pop	{r7, pc}

08003812 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003812:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003814:	b089      	sub	sp, #36	; 0x24
 8003816:	af04      	add	r7, sp, #16
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <osThreadCreate+0x54>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01c      	beq.n	8003866 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685c      	ldr	r4, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681d      	ldr	r5, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691e      	ldr	r6, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ffc8 	bl	80037d4 <makeFreeRtosPriority>
 8003844:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800384e:	9202      	str	r2, [sp, #8]
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	9100      	str	r1, [sp, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4632      	mov	r2, r6
 8003858:	4629      	mov	r1, r5
 800385a:	4620      	mov	r0, r4
 800385c:	f000 f8ed 	bl	8003a3a <xTaskCreateStatic>
 8003860:	4603      	mov	r3, r0
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e01c      	b.n	80038a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685c      	ldr	r4, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003872:	b29e      	uxth	r6, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffaa 	bl	80037d4 <makeFreeRtosPriority>
 8003880:	4602      	mov	r2, r0
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	9200      	str	r2, [sp, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	4632      	mov	r2, r6
 800388e:	4629      	mov	r1, r5
 8003890:	4620      	mov	r0, r4
 8003892:	f000 f92c 	bl	8003aee <xTaskCreate>
 8003896:	4603      	mov	r3, r0
 8003898:	2b01      	cmp	r3, #1
 800389a:	d001      	beq.n	80038a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <osDelay+0x16>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	e000      	b.n	80038c2 <osDelay+0x18>
 80038c0:	2301      	movs	r3, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fa48 	bl	8003d58 <vTaskDelay>
  
  return osOK;
 80038c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f103 0208 	add.w	r2, r3, #8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f103 0208 	add.w	r2, r3, #8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f103 0208 	add.w	r2, r3, #8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	601a      	str	r2, [r3, #0]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d103      	bne.n	8003994 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e00c      	b.n	80039ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3308      	adds	r3, #8
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	e002      	b.n	80039a2 <vListInsert+0x2e>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d2f6      	bcs.n	800399c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	601a      	str	r2, [r3, #0]
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039e6:	b480      	push	{r7}
 80039e8:	b085      	sub	sp, #20
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6892      	ldr	r2, [r2, #8]
 80039fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6852      	ldr	r2, [r2, #4]
 8003a06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d103      	bne.n	8003a1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	1e5a      	subs	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b08e      	sub	sp, #56	; 0x38
 8003a3e:	af04      	add	r7, sp, #16
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	623b      	str	r3, [r7, #32]
 8003a60:	e7fe      	b.n	8003a60 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <xTaskCreateStatic+0x42>
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	e7fe      	b.n	8003a7a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a7c:	2354      	movs	r3, #84	; 0x54
 8003a7e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b54      	cmp	r3, #84	; 0x54
 8003a84:	d009      	beq.n	8003a9a <xTaskCreateStatic+0x60>
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	e7fe      	b.n	8003a98 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01e      	beq.n	8003ae0 <xTaskCreateStatic+0xa6>
 8003aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003aba:	2300      	movs	r3, #0
 8003abc:	9303      	str	r3, [sp, #12]
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	9302      	str	r3, [sp, #8]
 8003ac2:	f107 0314 	add.w	r3, r7, #20
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f850 	bl	8003b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ada:	f000 f8d3 	bl	8003c84 <prvAddNewTaskToReadyList>
 8003ade:	e001      	b.n	8003ae4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ae4:	697b      	ldr	r3, [r7, #20]
	}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3728      	adds	r7, #40	; 0x28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b08c      	sub	sp, #48	; 0x30
 8003af2:	af04      	add	r7, sp, #16
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 feae 	bl	8004864 <pvPortMalloc>
 8003b08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00e      	beq.n	8003b2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b10:	2054      	movs	r0, #84	; 0x54
 8003b12:	f000 fea7 	bl	8004864 <pvPortMalloc>
 8003b16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
 8003b24:	e005      	b.n	8003b32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b26:	6978      	ldr	r0, [r7, #20]
 8003b28:	f000 ff5e 	bl	80049e8 <vPortFree>
 8003b2c:	e001      	b.n	8003b32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d017      	beq.n	8003b68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	2300      	movs	r3, #0
 8003b44:	9303      	str	r3, [sp, #12]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	9302      	str	r3, [sp, #8]
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f80e 	bl	8003b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b5c:	69f8      	ldr	r0, [r7, #28]
 8003b5e:	f000 f891 	bl	8003c84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b62:	2301      	movs	r3, #1
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	e002      	b.n	8003b6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
	}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b90:	3b01      	subs	r3, #1
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f023 0307 	bic.w	r3, r3, #7
 8003b9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <prvInitialiseNewTask+0x46>
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e7fe      	b.n	8003bbc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01f      	beq.n	8003c04 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e012      	b.n	8003bf0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	7819      	ldrb	r1, [r3, #0]
 8003bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3334      	adds	r3, #52	; 0x34
 8003bda:	460a      	mov	r2, r1
 8003bdc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3301      	adds	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b0f      	cmp	r3, #15
 8003bf4:	d9e9      	bls.n	8003bca <prvInitialiseNewTask+0x52>
 8003bf6:	e000      	b.n	8003bfa <prvInitialiseNewTask+0x82>
			{
				break;
 8003bf8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c02:	e003      	b.n	8003c0c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d901      	bls.n	8003c16 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c12:	2306      	movs	r3, #6
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	2200      	movs	r2, #0
 8003c26:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fe70 	bl	8003912 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	3318      	adds	r3, #24
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fe6b 	bl	8003912 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	f1c3 0207 	rsb	r2, r3, #7
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	2200      	movs	r2, #0
 8003c56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	69b8      	ldr	r0, [r7, #24]
 8003c66:	f000 fbfd 	bl	8004464 <pxPortInitialiseStack>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c7c:	bf00      	nop
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c8c:	f000 fd0e 	bl	80046ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <prvAddNewTaskToReadyList+0xb8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <prvAddNewTaskToReadyList+0xb8>)
 8003c98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c9a:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <prvAddNewTaskToReadyList+0xbc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ca2:	4a27      	ldr	r2, [pc, #156]	; (8003d40 <prvAddNewTaskToReadyList+0xbc>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ca8:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <prvAddNewTaskToReadyList+0xb8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d110      	bne.n	8003cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cb0:	f000 fab8 	bl	8004224 <prvInitialiseTaskLists>
 8003cb4:	e00d      	b.n	8003cd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cb6:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <prvAddNewTaskToReadyList+0xc0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <prvAddNewTaskToReadyList+0xbc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d802      	bhi.n	8003cd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <prvAddNewTaskToReadyList+0xbc>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <prvAddNewTaskToReadyList+0xc4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <prvAddNewTaskToReadyList+0xc4>)
 8003cda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <prvAddNewTaskToReadyList+0xc8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <prvAddNewTaskToReadyList+0xc8>)
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <prvAddNewTaskToReadyList+0xcc>)
 8003cfc:	441a      	add	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7ff fe11 	bl	800392c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d0a:	f000 fcfd 	bl	8004708 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <prvAddNewTaskToReadyList+0xc0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00e      	beq.n	8003d34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <prvAddNewTaskToReadyList+0xbc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d207      	bcs.n	8003d34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <prvAddNewTaskToReadyList+0xd0>)
 8003d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000388 	.word	0x20000388
 8003d40:	20000288 	.word	0x20000288
 8003d44:	20000394 	.word	0x20000394
 8003d48:	200003a4 	.word	0x200003a4
 8003d4c:	20000390 	.word	0x20000390
 8003d50:	2000028c 	.word	0x2000028c
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d6a:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <vTaskDelay+0x60>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <vTaskDelay+0x2e>
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	e7fe      	b.n	8003d84 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003d86:	f000 f879 	bl	8003e7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fb03 	bl	8004398 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d92:	f000 f881 	bl	8003e98 <xTaskResumeAll>
 8003d96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d107      	bne.n	8003dae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <vTaskDelay+0x64>)
 8003da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	200003b0 	.word	0x200003b0
 8003dbc:	e000ed04 	.word	0xe000ed04

08003dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dce:	463a      	mov	r2, r7
 8003dd0:	1d39      	adds	r1, r7, #4
 8003dd2:	f107 0308 	add.w	r3, r7, #8
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fc ff90 	bl	8000cfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ddc:	6839      	ldr	r1, [r7, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	9202      	str	r2, [sp, #8]
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	2300      	movs	r3, #0
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	2300      	movs	r3, #0
 8003dec:	460a      	mov	r2, r1
 8003dee:	491d      	ldr	r1, [pc, #116]	; (8003e64 <vTaskStartScheduler+0xa4>)
 8003df0:	481d      	ldr	r0, [pc, #116]	; (8003e68 <vTaskStartScheduler+0xa8>)
 8003df2:	f7ff fe22 	bl	8003a3a <xTaskCreateStatic>
 8003df6:	4602      	mov	r2, r0
 8003df8:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <vTaskStartScheduler+0xac>)
 8003dfa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <vTaskStartScheduler+0xac>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e04:	2301      	movs	r3, #1
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e001      	b.n	8003e0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d115      	bne.n	8003e40 <vTaskStartScheduler+0x80>
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <vTaskStartScheduler+0xb0>)
 8003e28:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <vTaskStartScheduler+0xb4>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e34:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <vTaskStartScheduler+0xb8>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e3a:	f000 fb99 	bl	8004570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e3e:	e00d      	b.n	8003e5c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d109      	bne.n	8003e5c <vTaskStartScheduler+0x9c>
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e7fe      	b.n	8003e5a <vTaskStartScheduler+0x9a>
}
 8003e5c:	bf00      	nop
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	08004cd4 	.word	0x08004cd4
 8003e68:	080041f5 	.word	0x080041f5
 8003e6c:	200003ac 	.word	0x200003ac
 8003e70:	200003a8 	.word	0x200003a8
 8003e74:	20000394 	.word	0x20000394
 8003e78:	2000038c 	.word	0x2000038c

08003e7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e80:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <vTaskSuspendAll+0x18>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3301      	adds	r3, #1
 8003e86:	4a03      	ldr	r2, [pc, #12]	; (8003e94 <vTaskSuspendAll+0x18>)
 8003e88:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	200003b0 	.word	0x200003b0

08003e98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ea6:	4b41      	ldr	r3, [pc, #260]	; (8003fac <xTaskResumeAll+0x114>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <xTaskResumeAll+0x2a>
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	e7fe      	b.n	8003ec0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ec2:	f000 fbf3 	bl	80046ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <xTaskResumeAll+0x114>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	4a37      	ldr	r2, [pc, #220]	; (8003fac <xTaskResumeAll+0x114>)
 8003ece:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <xTaskResumeAll+0x114>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d161      	bne.n	8003f9c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ed8:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <xTaskResumeAll+0x118>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05d      	beq.n	8003f9c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ee0:	e02e      	b.n	8003f40 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee2:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <xTaskResumeAll+0x11c>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3318      	adds	r3, #24
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fd79 	bl	80039e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fd74 	bl	80039e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	2201      	movs	r2, #1
 8003f04:	409a      	lsls	r2, r3
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <xTaskResumeAll+0x120>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	4a2a      	ldr	r2, [pc, #168]	; (8003fb8 <xTaskResumeAll+0x120>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <xTaskResumeAll+0x124>)
 8003f1e:	441a      	add	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7ff fd00 	bl	800392c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <xTaskResumeAll+0x128>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <xTaskResumeAll+0x12c>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f40:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <xTaskResumeAll+0x11c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1cc      	bne.n	8003ee2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f4e:	f000 fa03 	bl	8004358 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <xTaskResumeAll+0x130>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f5e:	f000 f837 	bl	8003fd0 <xTaskIncrementTick>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003f68:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <xTaskResumeAll+0x12c>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f1      	bne.n	8003f5e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003f7a:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <xTaskResumeAll+0x130>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <xTaskResumeAll+0x12c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <xTaskResumeAll+0x134>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f9c:	f000 fbb4 	bl	8004708 <vPortExitCritical>

	return xAlreadyYielded;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200003b0 	.word	0x200003b0
 8003fb0:	20000388 	.word	0x20000388
 8003fb4:	20000348 	.word	0x20000348
 8003fb8:	20000390 	.word	0x20000390
 8003fbc:	2000028c 	.word	0x2000028c
 8003fc0:	20000288 	.word	0x20000288
 8003fc4:	2000039c 	.word	0x2000039c
 8003fc8:	20000398 	.word	0x20000398
 8003fcc:	e000ed04 	.word	0xe000ed04

08003fd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fda:	4b4e      	ldr	r3, [pc, #312]	; (8004114 <xTaskIncrementTick+0x144>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 8087 	bne.w	80040f2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fe4:	4b4c      	ldr	r3, [pc, #304]	; (8004118 <xTaskIncrementTick+0x148>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fec:	4a4a      	ldr	r2, [pc, #296]	; (8004118 <xTaskIncrementTick+0x148>)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d11f      	bne.n	8004038 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ff8:	4b48      	ldr	r3, [pc, #288]	; (800411c <xTaskIncrementTick+0x14c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <xTaskIncrementTick+0x46>
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	e7fe      	b.n	8004014 <xTaskIncrementTick+0x44>
 8004016:	4b41      	ldr	r3, [pc, #260]	; (800411c <xTaskIncrementTick+0x14c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	4b40      	ldr	r3, [pc, #256]	; (8004120 <xTaskIncrementTick+0x150>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3e      	ldr	r2, [pc, #248]	; (800411c <xTaskIncrementTick+0x14c>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4a3e      	ldr	r2, [pc, #248]	; (8004120 <xTaskIncrementTick+0x150>)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <xTaskIncrementTick+0x154>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3301      	adds	r3, #1
 8004030:	4a3c      	ldr	r2, [pc, #240]	; (8004124 <xTaskIncrementTick+0x154>)
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	f000 f990 	bl	8004358 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004038:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <xTaskIncrementTick+0x158>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	429a      	cmp	r2, r3
 8004040:	d348      	bcc.n	80040d4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004042:	4b36      	ldr	r3, [pc, #216]	; (800411c <xTaskIncrementTick+0x14c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800404c:	4b36      	ldr	r3, [pc, #216]	; (8004128 <xTaskIncrementTick+0x158>)
 800404e:	f04f 32ff 	mov.w	r2, #4294967295
 8004052:	601a      	str	r2, [r3, #0]
					break;
 8004054:	e03e      	b.n	80040d4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004056:	4b31      	ldr	r3, [pc, #196]	; (800411c <xTaskIncrementTick+0x14c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	429a      	cmp	r2, r3
 800406c:	d203      	bcs.n	8004076 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800406e:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <xTaskIncrementTick+0x158>)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004074:	e02e      	b.n	80040d4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	3304      	adds	r3, #4
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fcb3 	bl	80039e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d004      	beq.n	8004092 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3318      	adds	r3, #24
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fcaa 	bl	80039e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	2201      	movs	r2, #1
 8004098:	409a      	lsls	r2, r3
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <xTaskIncrementTick+0x15c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4313      	orrs	r3, r2
 80040a0:	4a22      	ldr	r2, [pc, #136]	; (800412c <xTaskIncrementTick+0x15c>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <xTaskIncrementTick+0x160>)
 80040b2:	441a      	add	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7ff fc36 	bl	800392c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <xTaskIncrementTick+0x164>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d3b9      	bcc.n	8004042 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80040ce:	2301      	movs	r3, #1
 80040d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040d2:	e7b6      	b.n	8004042 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <xTaskIncrementTick+0x164>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	4915      	ldr	r1, [pc, #84]	; (8004130 <xTaskIncrementTick+0x160>)
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d907      	bls.n	80040fc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	e004      	b.n	80040fc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <xTaskIncrementTick+0x168>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3301      	adds	r3, #1
 80040f8:	4a0f      	ldr	r2, [pc, #60]	; (8004138 <xTaskIncrementTick+0x168>)
 80040fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040fc:	4b0f      	ldr	r3, [pc, #60]	; (800413c <xTaskIncrementTick+0x16c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004104:	2301      	movs	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004108:	697b      	ldr	r3, [r7, #20]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200003b0 	.word	0x200003b0
 8004118:	2000038c 	.word	0x2000038c
 800411c:	20000340 	.word	0x20000340
 8004120:	20000344 	.word	0x20000344
 8004124:	200003a0 	.word	0x200003a0
 8004128:	200003a8 	.word	0x200003a8
 800412c:	20000390 	.word	0x20000390
 8004130:	2000028c 	.word	0x2000028c
 8004134:	20000288 	.word	0x20000288
 8004138:	20000398 	.word	0x20000398
 800413c:	2000039c 	.word	0x2000039c

08004140 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004146:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <vTaskSwitchContext+0xa0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800414e:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <vTaskSwitchContext+0xa4>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004154:	e03e      	b.n	80041d4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <vTaskSwitchContext+0xa4>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <vTaskSwitchContext+0xa8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	fab3 f383 	clz	r3, r3
 8004168:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800416a:	7afb      	ldrb	r3, [r7, #11]
 800416c:	f1c3 031f 	rsb	r3, r3, #31
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	491e      	ldr	r1, [pc, #120]	; (80041ec <vTaskSwitchContext+0xac>)
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	e7fe      	b.n	8004198 <vTaskSwitchContext+0x58>
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4a11      	ldr	r2, [pc, #68]	; (80041ec <vTaskSwitchContext+0xac>)
 80041a6:	4413      	add	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	3308      	adds	r3, #8
 80041bc:	429a      	cmp	r2, r3
 80041be:	d104      	bne.n	80041ca <vTaskSwitchContext+0x8a>
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a07      	ldr	r2, [pc, #28]	; (80041f0 <vTaskSwitchContext+0xb0>)
 80041d2:	6013      	str	r3, [r2, #0]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	200003b0 	.word	0x200003b0
 80041e4:	2000039c 	.word	0x2000039c
 80041e8:	20000390 	.word	0x20000390
 80041ec:	2000028c 	.word	0x2000028c
 80041f0:	20000288 	.word	0x20000288

080041f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041fc:	f000 f852 	bl	80042a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <prvIdleTask+0x28>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d9f9      	bls.n	80041fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <prvIdleTask+0x2c>)
 800420a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004218:	e7f0      	b.n	80041fc <prvIdleTask+0x8>
 800421a:	bf00      	nop
 800421c:	2000028c 	.word	0x2000028c
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	e00c      	b.n	800424a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4a12      	ldr	r2, [pc, #72]	; (8004284 <prvInitialiseTaskLists+0x60>)
 800423c:	4413      	add	r3, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fb47 	bl	80038d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3301      	adds	r3, #1
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b06      	cmp	r3, #6
 800424e:	d9ef      	bls.n	8004230 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004250:	480d      	ldr	r0, [pc, #52]	; (8004288 <prvInitialiseTaskLists+0x64>)
 8004252:	f7ff fb3e 	bl	80038d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004256:	480d      	ldr	r0, [pc, #52]	; (800428c <prvInitialiseTaskLists+0x68>)
 8004258:	f7ff fb3b 	bl	80038d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800425c:	480c      	ldr	r0, [pc, #48]	; (8004290 <prvInitialiseTaskLists+0x6c>)
 800425e:	f7ff fb38 	bl	80038d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004262:	480c      	ldr	r0, [pc, #48]	; (8004294 <prvInitialiseTaskLists+0x70>)
 8004264:	f7ff fb35 	bl	80038d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004268:	480b      	ldr	r0, [pc, #44]	; (8004298 <prvInitialiseTaskLists+0x74>)
 800426a:	f7ff fb32 	bl	80038d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <prvInitialiseTaskLists+0x78>)
 8004270:	4a05      	ldr	r2, [pc, #20]	; (8004288 <prvInitialiseTaskLists+0x64>)
 8004272:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <prvInitialiseTaskLists+0x7c>)
 8004276:	4a05      	ldr	r2, [pc, #20]	; (800428c <prvInitialiseTaskLists+0x68>)
 8004278:	601a      	str	r2, [r3, #0]
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	2000028c 	.word	0x2000028c
 8004288:	20000318 	.word	0x20000318
 800428c:	2000032c 	.word	0x2000032c
 8004290:	20000348 	.word	0x20000348
 8004294:	2000035c 	.word	0x2000035c
 8004298:	20000374 	.word	0x20000374
 800429c:	20000340 	.word	0x20000340
 80042a0:	20000344 	.word	0x20000344

080042a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042aa:	e019      	b.n	80042e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042ac:	f000 f9fe 	bl	80046ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <prvCheckTasksWaitingTermination+0x4c>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fb92 	bl	80039e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <prvCheckTasksWaitingTermination+0x50>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <prvCheckTasksWaitingTermination+0x50>)
 80042ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <prvCheckTasksWaitingTermination+0x54>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <prvCheckTasksWaitingTermination+0x54>)
 80042d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042d6:	f000 fa17 	bl	8004708 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f80e 	bl	80042fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <prvCheckTasksWaitingTermination+0x54>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e1      	bne.n	80042ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042e8:	bf00      	nop
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	2000035c 	.word	0x2000035c
 80042f4:	20000388 	.word	0x20000388
 80042f8:	20000370 	.word	0x20000370

080042fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800430a:	2b00      	cmp	r3, #0
 800430c:	d108      	bne.n	8004320 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fb68 	bl	80049e8 <vPortFree>
				vPortFree( pxTCB );
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fb65 	bl	80049e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800431e:	e017      	b.n	8004350 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004326:	2b01      	cmp	r3, #1
 8004328:	d103      	bne.n	8004332 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fb5c 	bl	80049e8 <vPortFree>
	}
 8004330:	e00e      	b.n	8004350 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004338:	2b02      	cmp	r3, #2
 800433a:	d009      	beq.n	8004350 <prvDeleteTCB+0x54>
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e7fe      	b.n	800434e <prvDeleteTCB+0x52>
	}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <prvResetNextTaskUnblockTime+0x38>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <prvResetNextTaskUnblockTime+0x3c>)
 800436a:	f04f 32ff 	mov.w	r2, #4294967295
 800436e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004370:	e008      	b.n	8004384 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <prvResetNextTaskUnblockTime+0x38>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <prvResetNextTaskUnblockTime+0x3c>)
 8004382:	6013      	str	r3, [r2, #0]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	20000340 	.word	0x20000340
 8004394:	200003a8 	.word	0x200003a8

08004398 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043a2:	4b29      	ldr	r3, [pc, #164]	; (8004448 <prvAddCurrentTaskToDelayedList+0xb0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043a8:	4b28      	ldr	r3, [pc, #160]	; (800444c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fb19 	bl	80039e6 <uxListRemove>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043ba:	4b24      	ldr	r3, [pc, #144]	; (800444c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	2201      	movs	r2, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43da      	mvns	r2, r3
 80043c8:	4b21      	ldr	r3, [pc, #132]	; (8004450 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4013      	ands	r3, r2
 80043ce:	4a20      	ldr	r2, [pc, #128]	; (8004450 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d10a      	bne.n	80043f0 <prvAddCurrentTaskToDelayedList+0x58>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043e0:	4b1a      	ldr	r3, [pc, #104]	; (800444c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	481a      	ldr	r0, [pc, #104]	; (8004454 <prvAddCurrentTaskToDelayedList+0xbc>)
 80043ea:	f7ff fa9f 	bl	800392c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043ee:	e026      	b.n	800443e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4413      	add	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043f8:	4b14      	ldr	r3, [pc, #80]	; (800444c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	429a      	cmp	r2, r3
 8004406:	d209      	bcs.n	800441c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <prvAddCurrentTaskToDelayedList+0xc0>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <prvAddCurrentTaskToDelayedList+0xb4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3304      	adds	r3, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f7ff faad 	bl	8003974 <vListInsert>
}
 800441a:	e010      	b.n	800443e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <prvAddCurrentTaskToDelayedList+0xc4>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f7ff faa3 	bl	8003974 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	429a      	cmp	r2, r3
 8004436:	d202      	bcs.n	800443e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004438:	4a09      	ldr	r2, [pc, #36]	; (8004460 <prvAddCurrentTaskToDelayedList+0xc8>)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6013      	str	r3, [r2, #0]
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	2000038c 	.word	0x2000038c
 800444c:	20000288 	.word	0x20000288
 8004450:	20000390 	.word	0x20000390
 8004454:	20000374 	.word	0x20000374
 8004458:	20000344 	.word	0x20000344
 800445c:	20000340 	.word	0x20000340
 8004460:	200003a8 	.word	0x200003a8

08004464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3b04      	subs	r3, #4
 8004474:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800447c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3b04      	subs	r3, #4
 8004482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f023 0201 	bic.w	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3b04      	subs	r3, #4
 8004492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004494:	4a0c      	ldr	r2, [pc, #48]	; (80044c8 <pxPortInitialiseStack+0x64>)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3b14      	subs	r3, #20
 800449e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b04      	subs	r3, #4
 80044aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f06f 0202 	mvn.w	r2, #2
 80044b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3b20      	subs	r3, #32
 80044b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	080044cd 	.word	0x080044cd

080044cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <prvTaskExitError+0x50>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044de:	d009      	beq.n	80044f4 <prvTaskExitError+0x28>
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	e7fe      	b.n	80044f2 <prvTaskExitError+0x26>
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004506:	bf00      	nop
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0fc      	beq.n	8004508 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000014 	.word	0x20000014

08004520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <pxCurrentTCBConst2>)
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	6808      	ldr	r0, [r1, #0]
 8004526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452a:	f380 8809 	msr	PSP, r0
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f380 8811 	msr	BASEPRI, r0
 800453a:	4770      	bx	lr
 800453c:	f3af 8000 	nop.w

08004540 <pxCurrentTCBConst2>:
 8004540:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004548:	4808      	ldr	r0, [pc, #32]	; (800456c <prvPortStartFirstTask+0x24>)
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	6800      	ldr	r0, [r0, #0]
 800454e:	f380 8808 	msr	MSP, r0
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f380 8814 	msr	CONTROL, r0
 800455a:	b662      	cpsie	i
 800455c:	b661      	cpsie	f
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	df00      	svc	0
 8004568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800456a:	bf00      	nop
 800456c:	e000ed08 	.word	0xe000ed08

08004570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004576:	4b44      	ldr	r3, [pc, #272]	; (8004688 <xPortStartScheduler+0x118>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a44      	ldr	r2, [pc, #272]	; (800468c <xPortStartScheduler+0x11c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d109      	bne.n	8004594 <xPortStartScheduler+0x24>
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	e7fe      	b.n	8004592 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004594:	4b3c      	ldr	r3, [pc, #240]	; (8004688 <xPortStartScheduler+0x118>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a3d      	ldr	r2, [pc, #244]	; (8004690 <xPortStartScheduler+0x120>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d109      	bne.n	80045b2 <xPortStartScheduler+0x42>
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e7fe      	b.n	80045b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045b2:	4b38      	ldr	r3, [pc, #224]	; (8004694 <xPortStartScheduler+0x124>)
 80045b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	22ff      	movs	r2, #255	; 0xff
 80045c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	4b30      	ldr	r3, [pc, #192]	; (8004698 <xPortStartScheduler+0x128>)
 80045d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045da:	4b30      	ldr	r3, [pc, #192]	; (800469c <xPortStartScheduler+0x12c>)
 80045dc:	2207      	movs	r2, #7
 80045de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045e0:	e009      	b.n	80045f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80045e2:	4b2e      	ldr	r3, [pc, #184]	; (800469c <xPortStartScheduler+0x12c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	4a2c      	ldr	r2, [pc, #176]	; (800469c <xPortStartScheduler+0x12c>)
 80045ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b80      	cmp	r3, #128	; 0x80
 8004600:	d0ef      	beq.n	80045e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004602:	4b26      	ldr	r3, [pc, #152]	; (800469c <xPortStartScheduler+0x12c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f1c3 0307 	rsb	r3, r3, #7
 800460a:	2b04      	cmp	r3, #4
 800460c:	d009      	beq.n	8004622 <xPortStartScheduler+0xb2>
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	e7fe      	b.n	8004620 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004622:	4b1e      	ldr	r3, [pc, #120]	; (800469c <xPortStartScheduler+0x12c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	4a1c      	ldr	r2, [pc, #112]	; (800469c <xPortStartScheduler+0x12c>)
 800462a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <xPortStartScheduler+0x12c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004634:	4a19      	ldr	r2, [pc, #100]	; (800469c <xPortStartScheduler+0x12c>)
 8004636:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <xPortStartScheduler+0x130>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <xPortStartScheduler+0x130>)
 8004646:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800464a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <xPortStartScheduler+0x130>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <xPortStartScheduler+0x130>)
 8004652:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004656:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004658:	f000 f8d6 	bl	8004808 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <xPortStartScheduler+0x134>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004662:	f000 f8f5 	bl	8004850 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <xPortStartScheduler+0x138>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a0f      	ldr	r2, [pc, #60]	; (80046a8 <xPortStartScheduler+0x138>)
 800466c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004670:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004672:	f7ff ff69 	bl	8004548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004676:	f7ff fd63 	bl	8004140 <vTaskSwitchContext>
	prvTaskExitError();
 800467a:	f7ff ff27 	bl	80044cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	e000ed00 	.word	0xe000ed00
 800468c:	410fc271 	.word	0x410fc271
 8004690:	410fc270 	.word	0x410fc270
 8004694:	e000e400 	.word	0xe000e400
 8004698:	200003b4 	.word	0x200003b4
 800469c:	200003b8 	.word	0x200003b8
 80046a0:	e000ed20 	.word	0xe000ed20
 80046a4:	20000014 	.word	0x20000014
 80046a8:	e000ef34 	.word	0xe000ef34

080046ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046c4:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <vPortEnterCritical+0x54>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	4a0d      	ldr	r2, [pc, #52]	; (8004700 <vPortEnterCritical+0x54>)
 80046cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <vPortEnterCritical+0x54>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d10e      	bne.n	80046f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <vPortEnterCritical+0x58>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <vPortEnterCritical+0x48>
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	e7fe      	b.n	80046f2 <vPortEnterCritical+0x46>
	}
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	20000014 	.word	0x20000014
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800470e:	4b11      	ldr	r3, [pc, #68]	; (8004754 <vPortExitCritical+0x4c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <vPortExitCritical+0x22>
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	e7fe      	b.n	8004728 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <vPortExitCritical+0x4c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3b01      	subs	r3, #1
 8004730:	4a08      	ldr	r2, [pc, #32]	; (8004754 <vPortExitCritical+0x4c>)
 8004732:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004734:	4b07      	ldr	r3, [pc, #28]	; (8004754 <vPortExitCritical+0x4c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <vPortExitCritical+0x3e>
 800473c:	2300      	movs	r3, #0
 800473e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000014 	.word	0x20000014
	...

08004760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004760:	f3ef 8009 	mrs	r0, PSP
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <pxCurrentTCBConst>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	f01e 0f10 	tst.w	lr, #16
 8004770:	bf08      	it	eq
 8004772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	6010      	str	r0, [r2, #0]
 800477c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004784:	f380 8811 	msr	BASEPRI, r0
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f7ff fcd6 	bl	8004140 <vTaskSwitchContext>
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	f380 8811 	msr	BASEPRI, r0
 800479c:	bc09      	pop	{r0, r3}
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	6808      	ldr	r0, [r1, #0]
 80047a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a6:	f01e 0f10 	tst.w	lr, #16
 80047aa:	bf08      	it	eq
 80047ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047b0:	f380 8809 	msr	PSP, r0
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	f3af 8000 	nop.w

080047c0 <pxCurrentTCBConst>:
 80047c0:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop

080047c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047e0:	f7ff fbf6 	bl	8003fd0 <xTaskIncrementTick>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <SysTick_Handler+0x3c>)
 80047ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	2300      	movs	r3, #0
 80047f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <vPortSetupTimerInterrupt+0x34>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <vPortSetupTimerInterrupt+0x38>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <vPortSetupTimerInterrupt+0x3c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <vPortSetupTimerInterrupt+0x40>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	4a09      	ldr	r2, [pc, #36]	; (800484c <vPortSetupTimerInterrupt+0x44>)
 8004826:	3b01      	subs	r3, #1
 8004828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800482a:	4b04      	ldr	r3, [pc, #16]	; (800483c <vPortSetupTimerInterrupt+0x34>)
 800482c:	2207      	movs	r2, #7
 800482e:	601a      	str	r2, [r3, #0]
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000e010 	.word	0xe000e010
 8004840:	e000e018 	.word	0xe000e018
 8004844:	20000008 	.word	0x20000008
 8004848:	10624dd3 	.word	0x10624dd3
 800484c:	e000e014 	.word	0xe000e014

08004850 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004850:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004860 <vPortEnableVFP+0x10>
 8004854:	6801      	ldr	r1, [r0, #0]
 8004856:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800485a:	6001      	str	r1, [r0, #0]
 800485c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800485e:	bf00      	nop
 8004860:	e000ed88 	.word	0xe000ed88

08004864 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004870:	f7ff fb04 	bl	8003e7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004874:	4b57      	ldr	r3, [pc, #348]	; (80049d4 <pvPortMalloc+0x170>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800487c:	f000 f90c 	bl	8004a98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004880:	4b55      	ldr	r3, [pc, #340]	; (80049d8 <pvPortMalloc+0x174>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 808c 	bne.w	80049a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01c      	beq.n	80048ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004894:	2208      	movs	r2, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d013      	beq.n	80048ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f023 0307 	bic.w	r3, r3, #7
 80048ac:	3308      	adds	r3, #8
 80048ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <pvPortMalloc+0x6a>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	e7fe      	b.n	80048cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d068      	beq.n	80049a6 <pvPortMalloc+0x142>
 80048d4:	4b41      	ldr	r3, [pc, #260]	; (80049dc <pvPortMalloc+0x178>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d863      	bhi.n	80049a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048de:	4b40      	ldr	r3, [pc, #256]	; (80049e0 <pvPortMalloc+0x17c>)
 80048e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048e2:	4b3f      	ldr	r3, [pc, #252]	; (80049e0 <pvPortMalloc+0x17c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048e8:	e004      	b.n	80048f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d903      	bls.n	8004906 <pvPortMalloc+0xa2>
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f1      	bne.n	80048ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004906:	4b33      	ldr	r3, [pc, #204]	; (80049d4 <pvPortMalloc+0x170>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490c:	429a      	cmp	r2, r3
 800490e:	d04a      	beq.n	80049a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2208      	movs	r2, #8
 8004916:	4413      	add	r3, r2
 8004918:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	1ad2      	subs	r2, r2, r3
 800492a:	2308      	movs	r3, #8
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	429a      	cmp	r2, r3
 8004930:	d91e      	bls.n	8004970 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	2b00      	cmp	r3, #0
 8004942:	d009      	beq.n	8004958 <pvPortMalloc+0xf4>
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	e7fe      	b.n	8004956 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800496a:	69b8      	ldr	r0, [r7, #24]
 800496c:	f000 f8f6 	bl	8004b5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004970:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <pvPortMalloc+0x178>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	4a18      	ldr	r2, [pc, #96]	; (80049dc <pvPortMalloc+0x178>)
 800497c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800497e:	4b17      	ldr	r3, [pc, #92]	; (80049dc <pvPortMalloc+0x178>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <pvPortMalloc+0x180>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d203      	bcs.n	8004992 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800498a:	4b14      	ldr	r3, [pc, #80]	; (80049dc <pvPortMalloc+0x178>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <pvPortMalloc+0x180>)
 8004990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <pvPortMalloc+0x174>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	431a      	orrs	r2, r3
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049a6:	f7ff fa77 	bl	8003e98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <pvPortMalloc+0x164>
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	e7fe      	b.n	80049c6 <pvPortMalloc+0x162>
	return pvReturn;
 80049c8:	69fb      	ldr	r3, [r7, #28]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3728      	adds	r7, #40	; 0x28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20003fc4 	.word	0x20003fc4
 80049d8:	20003fd0 	.word	0x20003fd0
 80049dc:	20003fc8 	.word	0x20003fc8
 80049e0:	20003fbc 	.word	0x20003fbc
 80049e4:	20003fcc 	.word	0x20003fcc

080049e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d046      	beq.n	8004a88 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049fa:	2308      	movs	r3, #8
 80049fc:	425b      	negs	r3, r3
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4413      	add	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <vPortFree+0xa8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <vPortFree+0x42>
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	e7fe      	b.n	8004a28 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <vPortFree+0x5e>
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	e7fe      	b.n	8004a44 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <vPortFree+0xa8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d019      	beq.n	8004a88 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d115      	bne.n	8004a88 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <vPortFree+0xa8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	401a      	ands	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a6c:	f7ff fa06 	bl	8003e7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <vPortFree+0xac>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4413      	add	r3, r2
 8004a7a:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <vPortFree+0xac>)
 8004a7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a7e:	6938      	ldr	r0, [r7, #16]
 8004a80:	f000 f86c 	bl	8004b5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a84:	f7ff fa08 	bl	8003e98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a88:	bf00      	nop
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20003fd0 	.word	0x20003fd0
 8004a94:	20003fc8 	.word	0x20003fc8

08004a98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004aa2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004aa4:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <prvHeapInit+0xac>)
 8004aa6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3307      	adds	r3, #7
 8004ab6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <prvHeapInit+0xac>)
 8004ac8:	4413      	add	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <prvHeapInit+0xb0>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <prvHeapInit+0xb0>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0307 	bic.w	r3, r3, #7
 8004af2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <prvHeapInit+0xb4>)
 8004af8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <prvHeapInit+0xb4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2200      	movs	r2, #0
 8004b00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <prvHeapInit+0xb4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	1ad2      	subs	r2, r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <prvHeapInit+0xb4>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <prvHeapInit+0xb8>)
 8004b26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	4a09      	ldr	r2, [pc, #36]	; (8004b54 <prvHeapInit+0xbc>)
 8004b2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <prvHeapInit+0xc0>)
 8004b32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b36:	601a      	str	r2, [r3, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	200003bc 	.word	0x200003bc
 8004b48:	20003fbc 	.word	0x20003fbc
 8004b4c:	20003fc4 	.word	0x20003fc4
 8004b50:	20003fcc 	.word	0x20003fcc
 8004b54:	20003fc8 	.word	0x20003fc8
 8004b58:	20003fd0 	.word	0x20003fd0

08004b5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b64:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <prvInsertBlockIntoFreeList+0xac>)
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	e002      	b.n	8004b70 <prvInsertBlockIntoFreeList+0x14>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d8f7      	bhi.n	8004b6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	4413      	add	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d108      	bne.n	8004b9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	441a      	add	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	441a      	add	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d118      	bne.n	8004be4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <prvInsertBlockIntoFreeList+0xb0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d00d      	beq.n	8004bda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	441a      	add	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e008      	b.n	8004bec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bda:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <prvInsertBlockIntoFreeList+0xb0>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e003      	b.n	8004bec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d002      	beq.n	8004bfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20003fbc 	.word	0x20003fbc
 8004c0c:	20003fc4 	.word	0x20003fc4

08004c10 <__libc_init_array>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4e0d      	ldr	r6, [pc, #52]	; (8004c48 <__libc_init_array+0x38>)
 8004c14:	4c0d      	ldr	r4, [pc, #52]	; (8004c4c <__libc_init_array+0x3c>)
 8004c16:	1ba4      	subs	r4, r4, r6
 8004c18:	10a4      	asrs	r4, r4, #2
 8004c1a:	2500      	movs	r5, #0
 8004c1c:	42a5      	cmp	r5, r4
 8004c1e:	d109      	bne.n	8004c34 <__libc_init_array+0x24>
 8004c20:	4e0b      	ldr	r6, [pc, #44]	; (8004c50 <__libc_init_array+0x40>)
 8004c22:	4c0c      	ldr	r4, [pc, #48]	; (8004c54 <__libc_init_array+0x44>)
 8004c24:	f000 f820 	bl	8004c68 <_init>
 8004c28:	1ba4      	subs	r4, r4, r6
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	2500      	movs	r5, #0
 8004c2e:	42a5      	cmp	r5, r4
 8004c30:	d105      	bne.n	8004c3e <__libc_init_array+0x2e>
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c38:	4798      	blx	r3
 8004c3a:	3501      	adds	r5, #1
 8004c3c:	e7ee      	b.n	8004c1c <__libc_init_array+0xc>
 8004c3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c42:	4798      	blx	r3
 8004c44:	3501      	adds	r5, #1
 8004c46:	e7f2      	b.n	8004c2e <__libc_init_array+0x1e>
 8004c48:	08004cfc 	.word	0x08004cfc
 8004c4c:	08004cfc 	.word	0x08004cfc
 8004c50:	08004cfc 	.word	0x08004cfc
 8004c54:	08004d00 	.word	0x08004d00

08004c58 <memset>:
 8004c58:	4402      	add	r2, r0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d100      	bne.n	8004c62 <memset+0xa>
 8004c60:	4770      	bx	lr
 8004c62:	f803 1b01 	strb.w	r1, [r3], #1
 8004c66:	e7f9      	b.n	8004c5c <memset+0x4>

08004c68 <_init>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr

08004c74 <_fini>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr
